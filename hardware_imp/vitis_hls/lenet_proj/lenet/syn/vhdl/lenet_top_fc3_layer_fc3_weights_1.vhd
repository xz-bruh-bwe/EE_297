-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity lenet_top_fc3_layer_fc3_weights_1_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 252
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of lenet_top_fc3_layer_fc3_weights_1_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110010010100100111111001110", 
    1 => "00111101110010010010100010111010", 
    2 => "10111110010101001100110100000011", 
    3 => "10111101101111001100111111010110", 
    4 => "00111101110100101000100010111110", 
    5 => "10111110000010101111001111011111", 
    6 => "10111110011101111110101101100000", 
    7 => "00111100111000101000101010001111", 
    8 => "10111110101001101111000001100001", 
    9 => "00111110000010101100010010110110", 
    10 => "10111110100000011110010100001011", 
    11 => "10111101111111110010100110110011", 
    12 => "10111110000011101110110001111001", 
    13 => "10111011101110011101000000000101", 
    14 => "10111110100100010000110010101111", 
    15 => "00111110011110110110111000111101", 
    16 => "10111011101100110000110000000110", 
    17 => "10111101101100000001011100100100", 
    18 => "00111101000011101011101110111101", 
    19 => "00111101101011010100111010111111", 
    20 => "10111110010011111010110010110100", 
    21 => "00111101010001010010111110010010", 
    22 => "00111101100100001001100111001010", 
    23 => "10111110011010001010010000100101", 
    24 => "10111101000010001111101001111000", 
    25 => "00111101111010100011111111001011", 
    26 => "10111110011110001101100011111001", 
    27 => "00111110000001001011110010010010", 
    28 => "10111110011110111010010111101010", 
    29 => "10111100110111110110101011100100", 
    30 => "10111101110110110110111110101011", 
    31 => "00111101111001101110000001101100", 
    32 => "10111101101000100000010001000000", 
    33 => "10111101110001000011011110100011", 
    34 => "10111100111110101111101111101111", 
    35 => "10111110010110100001010011100001", 
    36 => "00111110001001010101001011111100", 
    37 => "00111110001100110000011011111011", 
    38 => "10111110010001111111101010010111", 
    39 => "10111101110010111000110001011010", 
    40 => "00111110011101110110000110011100", 
    41 => "00111100101100111110101111100000", 
    42 => "00111101000000011001111111001000", 
    43 => "10111110110001111001100011010111", 
    44 => "10111101011011111111101100010000", 
    45 => "10111110001000010010010010000001", 
    46 => "10111101010110001111110100000111", 
    47 => "10111110101010001011000101010111", 
    48 => "10111110001000011110001011001110", 
    49 => "10111101110111101011101001011001", 
    50 => "00111110011100111111110000001101", 
    51 => "00111110001000000010000100110001", 
    52 => "10111110100011011011000100000111", 
    53 => "00111101100000000011100001000010", 
    54 => "00111101100111101001011010110000", 
    55 => "00111110100010101010001001100011", 
    56 => "00111101110110000111110010001010", 
    57 => "00111101011110110101100101011101", 
    58 => "00111110010101010110000100011011", 
    59 => "10111100000101011011001100110000", 
    60 => "10111101110000100000110001011101", 
    61 => "10111101010111100000101110110111", 
    62 => "00111100101101000110010011001100", 
    63 => "10111110011111010011000110000110", 
    64 => "00111101100101010001100101011111", 
    65 => "00111110001011001000110010111010", 
    66 => "10111110010110010110010011001111", 
    67 => "10111101101100100100101011110110", 
    68 => "00111110100111101011011101001110", 
    69 => "10111101101110010011010000110001", 
    70 => "00111110011000101101001011101110", 
    71 => "00111110100101110011110111111111", 
    72 => "00111110100111000001001000100010", 
    73 => "10111110011011101100111000011111", 
    74 => "10111110100100011101011000100001", 
    75 => "10111100001010101101011110101111", 
    76 => "10111101110101000010111010100111", 
    77 => "10111110001110011001001001011011", 
    78 => "10111110100110110111010000101110", 
    79 => "10111101101010100111001100000000", 
    80 => "00111101101101101001001000100011", 
    81 => "10111110000000000000101110000010", 
    82 => "00111110011101100110110110110101", 
    83 => "00111101100011010101101100010111", 
    84 => "10111101101001100100000101111111", 
    85 => "00111110010010111100010111101110", 
    86 => "10111101110110101010001011101111", 
    87 => "10111101111110000000101111111010", 
    88 => "10111101010010110100100010111110", 
    89 => "10111011001001010001111011011110", 
    90 => "00111101110000010011010101111011", 
    91 => "00111101000110100000011100111101", 
    92 => "00111101101100001110101100001000", 
    93 => "00111110011101010001001010100111", 
    94 => "00111110000111111111101000110011", 
    95 => "10111110001001001011001011111010", 
    96 => "00111101101100000011011001001100", 
    97 => "10111110100111010110000000001110", 
    98 => "00111110000000010101100000000001", 
    99 => "10111110101111010111100010100101", 
    100 => "00111101101101100111111000011110", 
    101 => "10111101111000110000011001010001", 
    102 => "10111110100000111001110000111010", 
    103 => "00111110100001110001010010101010", 
    104 => "10111011000000100111111101110111", 
    105 => "10111101110010111101100011010000", 
    106 => "00111110101010101100011101010100", 
    107 => "10111110000101010001110111101101", 
    108 => "10111101111101010000011110000100", 
    109 => "10111110000010000111010001001000", 
    110 => "10111101110011111010101100011001", 
    111 => "10111110100101001101000000111000", 
    112 => "00111110011101110011000110100110", 
    113 => "00111110000111010011001011001100", 
    114 => "00111110011001010101011001010110", 
    115 => "00111011001100000110101101101101", 
    116 => "10111110011001001111000100011001", 
    117 => "00111110011000111001011010011010", 
    118 => "10111110100001001110111011010100", 
    119 => "00111110100110111101101110000001", 
    120 => "10111101110100111101011010001100", 
    121 => "10111110100111011100000110111001", 
    122 => "00111110000000001101110001010101", 
    123 => "10111110110110001111011010011000", 
    124 => "10111110001101001100100100101101", 
    125 => "00111100101001000001010110011001", 
    126 => "00111110000011011101011001011011", 
    127 => "10111110010010010010100010100111", 
    128 => "00111101100011110101000100111011", 
    129 => "10111101010110001011100111101011", 
    130 => "00111100000010100001010100100010", 
    131 => "00111101100101111111111001111011", 
    132 => "10111110000111000111001000001001", 
    133 => "00111110010000001011011100101111", 
    134 => "10111110011000010111101111010110", 
    135 => "00111110000111001000101110100011", 
    136 => "00111100001001110001110010001111", 
    137 => "10111110100100011001111110100000", 
    138 => "10111011011001111111100110100100", 
    139 => "10111110000011100001001101111110", 
    140 => "10111110011100010011100110001010", 
    141 => "00111110100110001101001101101100", 
    142 => "00111100001100011101101100101111", 
    143 => "00111101100010001110100010010100", 
    144 => "10111110001101000011011010011001", 
    145 => "10111110101001110011100001001110", 
    146 => "10111111000110101101001010000001", 
    147 => "10111101000000110111111101010110", 
    148 => "10111101011110110011011101100110", 
    149 => "10111110001001100100001101010101", 
    150 => "10111101001100111001011101100111", 
    151 => "00111110100010010011011000111001", 
    152 => "00111110011100001000011110110000", 
    153 => "10111101110001100101000101110000", 
    154 => "10111101001111101100111101001110", 
    155 => "10111101100011111000110001111010", 
    156 => "10111101011011101010111111000001", 
    157 => "10111100010000011001010110010111", 
    158 => "00111110100001001011100101010010", 
    159 => "00111110000111011110100011101100", 
    160 => "00111101101000111110001011100001", 
    161 => "10111101100101010001000011010110", 
    162 => "10111110001100010101001011011000", 
    163 => "10111110101101011110110110101010", 
    164 => "10111101100110101111011010111111", 
    165 => "00111101110010110111110100011101", 
    166 => "10111110010010110001110000100011", 
    167 => "00111110010101001010010110010011", 
    168 => "10111110101000101100011101000000", 
    169 => "10111011111010100100010100101110", 
    170 => "10111101101111111110001001000000", 
    171 => "10111101011010000110000100010101", 
    172 => "10111110100011111111000101111001", 
    173 => "10111101101001111010000010110001", 
    174 => "00111110011000000001101100110110", 
    175 => "00111101100101011111001011111101", 
    176 => "10111110000101010011111000001110", 
    177 => "00111110100011010101001011111001", 
    178 => "00111110001011010010101100111010", 
    179 => "00111110010000111111100111110010", 
    180 => "10111110011100100010101001110100", 
    181 => "10111010111010110001001010001000", 
    182 => "10111101000000000011111101100011", 
    183 => "00111100100011001111100011001100", 
    184 => "00111110010101001001111110100010", 
    185 => "10111110001100111001111111010011", 
    186 => "00111101100111001101110010101000", 
    187 => "10111101010010110101001011111101", 
    188 => "10111101100101110111100010110000", 
    189 => "00111110100001001010010101101011", 
    190 => "00111101111111010000101001111010", 
    191 => "00111110100000110001001001110000", 
    192 => "10111101110110011110011110010010", 
    193 => "00111110111010111101000011010111", 
    194 => "00111110001000111111001010000110", 
    195 => "10111110100000000111001110111000", 
    196 => "00111110011101001011010111000101", 
    197 => "00111101110111000110100010010001", 
    198 => "10111101111000001110010110000000", 
    199 => "10111110000110010001101100101000", 
    200 => "00111110010010111010011110101110", 
    201 => "10111110000100100010001011111010", 
    202 => "00111101011000101110101100010100", 
    203 => "10111101100011011101000101000001", 
    204 => "00111101011110011011101011100111", 
    205 => "00111100101001111011011110111010", 
    206 => "10111101100111111000100010010100", 
    207 => "10111101111100111010000010011010", 
    208 => "10111110100011000111101010010000", 
    209 => "00111101000100001101110101100101", 
    210 => "00111100010000101000010000110100", 
    211 => "00111110101001111111101011101001", 
    212 => "10111110001101110110111010000010", 
    213 => "10111110001110110101111001110111", 
    214 => "10111101100000110101101001101011", 
    215 => "10111011110100011101111001101111", 
    216 => "10111101101101001100000011101001", 
    217 => "00111110000110110000000000001001", 
    218 => "00111110011101000001011001011000", 
    219 => "10111110100101110010111111011011", 
    220 => "10111110000010110100010111111110", 
    221 => "10111101101110001001111100011000", 
    222 => "10111101100111111001001111111000", 
    223 => "10111101011010010000110111111110", 
    224 => "10111110101001100000100100111110", 
    225 => "10111010110011010100100001001000", 
    226 => "10111110101110101101110001010011", 
    227 => "00111101010101000111010110001011", 
    228 => "00111110100010110100001100000001", 
    229 => "00111110100101100110101101111100", 
    230 => "10111110101100001000001101010111", 
    231 => "10111101111000010100110000101000", 
    232 => "10111110010110100101010000100011", 
    233 => "00111110011100100101100100000100", 
    234 => "10111110010001010100111110010111", 
    235 => "10111101110011011001010001101010", 
    236 => "10111110110000011010010111010000", 
    237 => "00111110010000111101001110000100", 
    238 => "00111101111011110000010010111101", 
    239 => "00111101000011111000111111111011", 
    240 => "10111101101001000011001101101010", 
    241 => "00111110100100100010100000001101", 
    242 => "00111110011110001010000000100100", 
    243 => "10111110010110011011110110011100", 
    244 => "00111101010000110001100010101001", 
    245 => "10111110001110110101000101010100", 
    246 => "00111110011011101100011010111110", 
    247 => "10111110001100011100111111010111", 
    248 => "10111101111000010101011011111111", 
    249 => "10111101011000110110001100000001", 
    250 => "10111110000110000100110010110101", 
    251 => "10111101000010100001111011101101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity lenet_top_fc3_layer_fc3_weights_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 252;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of lenet_top_fc3_layer_fc3_weights_1 is
    component lenet_top_fc3_layer_fc3_weights_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    lenet_top_fc3_layer_fc3_weights_1_rom_U :  component lenet_top_fc3_layer_fc3_weights_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


