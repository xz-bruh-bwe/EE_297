-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity lenet_top_fc3_layer_fc3_weights_2_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 252
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of lenet_top_fc3_layer_fc3_weights_2_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110100110100001000010001110", 
    1 => "00111110100001010111010010011000", 
    2 => "00111101100111100100000111101100", 
    3 => "10111101011001111110000110111110", 
    4 => "00111110010001010110110010010101", 
    5 => "00111110010110001011111111100011", 
    6 => "10111110010110011100110000111001", 
    7 => "10111101111100011100110101011110", 
    8 => "00111101101101110111111011010001", 
    9 => "10111110100010011101000101001100", 
    10 => "10111101011010111011101001100001", 
    11 => "00111100100111010001000010000111", 
    12 => "10111101010101001000001010000110", 
    13 => "00111100110111001110000000100000", 
    14 => "00111110100000110111000010010010", 
    15 => "10111110110010101111101101100110", 
    16 => "10111110100111110100000110000000", 
    17 => "10111100101000111000011000101100", 
    18 => "00111110010011011011011100111110", 
    19 => "00111101000110010011111101001001", 
    20 => "00111110001001001000110011101111", 
    21 => "00111110100100011110110111111001", 
    22 => "10111110100100101011101101010111", 
    23 => "10111110100110101010011100101011", 
    24 => "00111101000111100010001001010101", 
    25 => "00111101111111011011001010100101", 
    26 => "00111110011000110101110001011010", 
    27 => "00111110000011111011010111110100", 
    28 => "00111010011100101110100100010110", 
    29 => "10111110100001001101011001100100", 
    30 => "10111100010111000000110011111100", 
    31 => "00111110001010010101010110001000", 
    32 => "00111110100100001011111100000000", 
    33 => "00111101000010101111001000100001", 
    34 => "10111100111000001101001101101010", 
    35 => "00111101001110100110010100001110", 
    36 => "00111110001010000100010111001000", 
    37 => "10111110001110111111000001100111", 
    38 => "10111110110011100001010001011001", 
    39 => "00111110001101000110010111111010", 
    40 => "10111110010010101010000100111110", 
    41 => "10111100010000011010100011000010", 
    42 => "10111100101011010101000010010000", 
    43 => "10111110011011110100001100101111", 
    44 => "00111110001111000011001111100111", 
    45 => "10111101101111011011011111000000", 
    46 => "10111110010000101110001011100000", 
    47 => "10111100001111000110101000011110", 
    48 => "00111101010111110011000011101000", 
    49 => "10111110100100010101101000111011", 
    50 => "10111110001011001100001000110111", 
    51 => "00111110010110000101000100111011", 
    52 => "00111100001010010111110111001000", 
    53 => "00111100101010000101111000011101", 
    54 => "10111101110000001010110011000011", 
    55 => "00111101010101001110011000101110", 
    56 => "00111101101111100101100011100101", 
    57 => "10111110001001010001011101101111", 
    58 => "00111101000110011110011110000101", 
    59 => "00111110011111001101010000110010", 
    60 => "00111101101001000010010000100100", 
    61 => "00111101011011110100011001101111", 
    62 => "10111110001011101010001001101100", 
    63 => "10111110000110000000110000011011", 
    64 => "00111110011110110010100101000000", 
    65 => "00111110010000011101110000100010", 
    66 => "00111110100110111110010110000100", 
    67 => "10111011001101001100011101110010", 
    68 => "00111101110011011011111101000011", 
    69 => "00111100111111010101101110101011", 
    70 => "10111110000000110000010111101001", 
    71 => "00111110001000001001001001010001", 
    72 => "10111110010010000000101001010000", 
    73 => "00111110100101100011001110000011", 
    74 => "10111101010001000110011111000110", 
    75 => "00111101110110111110010001111110", 
    76 => "00111110100100111011001111110001", 
    77 => "00111110000100001101111101101101", 
    78 => "00111110101000001011001010001000", 
    79 => "00111101010011010100001111011011", 
    80 => "00111101110100101000001110001010", 
    81 => "10111100101110111010111111001001", 
    82 => "10111110001110000101111101010101", 
    83 => "10111110100000010101010100110101", 
    84 => "00111100111111110100001011010001", 
    85 => "00111101111101011100100100001100", 
    86 => "00111110000011000010001010001111", 
    87 => "00111101111001001100000111010000", 
    88 => "10111110001110001110001100011101", 
    89 => "10111101100110111000001010100000", 
    90 => "10111011111111101110111000011101", 
    91 => "10111101100001111110100001100111", 
    92 => "10111110100001100010111011110110", 
    93 => "10111110001000000100100010010110", 
    94 => "00111110010011101100000011111010", 
    95 => "00111110010001000100010010011001", 
    96 => "10111101110011011101111110111011", 
    97 => "00111100100100011000011110010010", 
    98 => "10111100111100001000000011011100", 
    99 => "00111101110000101100011000000110", 
    100 => "00111110001001110010001111010100", 
    101 => "10111101101111101111110011010011", 
    102 => "10111101110101110101000001000101", 
    103 => "10111110110100000001100111100001", 
    104 => "10111110101000100111011011011011", 
    105 => "10111101110010111110110011011011", 
    106 => "10111100101100001000111111010000", 
    107 => "10111110000011100010111100111110", 
    108 => "10111101111101000001111110101011", 
    109 => "10111110001100111110011110100111", 
    110 => "10111110010111101011111111001101", 
    111 => "10111101111110100010101110010111", 
    112 => "00111110101011001000000111010110", 
    113 => "10111110111101000010100111101100", 
    114 => "00111110010100011100111010100000", 
    115 => "10111110001110100000111010101100", 
    116 => "10111110101001110000010111011000", 
    117 => "10111101000000100111111010110011", 
    118 => "00111110011111000010100000000001", 
    119 => "10111101000110100001100011001110", 
    120 => "00111110001011001100111101010011", 
    121 => "00111110001101010101101101110100", 
    122 => "10111100111111000000011111100011", 
    123 => "10111101110110011001101101011110", 
    124 => "00111110000011010001011101101101", 
    125 => "10111110101010111000110010000001", 
    126 => "10111110000110111001010010000010", 
    127 => "10111110100001100001100110000011", 
    128 => "00111100110110110101010001001010", 
    129 => "00111110011001111010101111110010", 
    130 => "10111110000101001001010000111011", 
    131 => "00111110010010011011101001001010", 
    132 => "00111110010101000101101101010110", 
    133 => "10111101100000110110111011110011", 
    134 => "10111110011101010000100011001101", 
    135 => "10111101101011101101000001001100", 
    136 => "10111110100100111100100110010011", 
    137 => "10111101101010110111000011011111", 
    138 => "00111110001111110011000100001100", 
    139 => "10111110111100111111010111100010", 
    140 => "10111101010111001011110010101111", 
    141 => "10111101100000101010000010001101", 
    142 => "10111110100101001000111110011110", 
    143 => "00111101100101100101011010101001", 
    144 => "10111110011111101110000011000000", 
    145 => "00111101100101001010001011111000", 
    146 => "10111101101010101111100010101000", 
    147 => "10111110011110100111111010011110", 
    148 => "10111110010000000100000110111110", 
    149 => "00111101111100110011001010011010", 
    150 => "10111110011100110010000010001101", 
    151 => "10111110001101010100110011101000", 
    152 => "10111101100111000001111000111000", 
    153 => "00111101011101110101111100100010", 
    154 => "10111110110011101011110010100100", 
    155 => "00111100110001001101011101100101", 
    156 => "10111101110111101111010000011011", 
    157 => "00111110010110110010111000101000", 
    158 => "00111011100101011010101000001011", 
    159 => "00111101011101010100001110101100", 
    160 => "10111101001000000100010000110110", 
    161 => "10111110000100100010010100100000", 
    162 => "00111110000010111100001001011101", 
    163 => "10111110101110101011100001101011", 
    164 => "00111110100110010110100101101001", 
    165 => "10111110000111110101001000010111", 
    166 => "00111110010010110101000011000111", 
    167 => "10111110100000011110111100111010", 
    168 => "00111110011011110010111100010111", 
    169 => "10111110010011101000010011110100", 
    170 => "10111101011011010110101100000101", 
    171 => "10111110100011010111111001001000", 
    172 => "00111110100100101010101101101100", 
    173 => "10111110000100000011000111101001", 
    174 => "00111110000011101100001110000011", 
    175 => "00111101000101111100011010101110", 
    176 => "10111110100100100111001011100101", 
    177 => "10111110011001001010011001111010", 
    178 => "00111101101100111000100010101101", 
    179 => "10111110011110110011010011011111", 
    180 => "10111110010111101111011011010100", 
    181 => "00111101110011100101010010001000", 
    182 => "10111110010000100000011101111111", 
    183 => "10111101110010010010111010100001", 
    184 => "10111110001111101100001001000011", 
    185 => "10111100000010100111001101001011", 
    186 => "10111110101110010011110010101101", 
    187 => "10111110100010011011111010001011", 
    188 => "10111110011010011011000100011110", 
    189 => "00111110000001111101000100000000", 
    190 => "00111100011000000110110010000111", 
    191 => "10111101101011111100001100010011", 
    192 => "00111110001101100110000000011111", 
    193 => "10111110110000101001101011100001", 
    194 => "10111101101100111010010110111100", 
    195 => "00111101100111110110110010010110", 
    196 => "00111110000010101101111101010010", 
    197 => "00111110000001101001001101101101", 
    198 => "00111101100110001000111000001100", 
    199 => "00111110001101001000000001100010", 
    200 => "00111101000011000000011101000000", 
    201 => "10111101100001110110111100101110", 
    202 => "00111110010001110111100011011000", 
    203 => "00111110101011010111001111010011", 
    204 => "10111110000010101011010110100010", 
    205 => "10111110001011001011010011011011", 
    206 => "10111110101000110101010111010110", 
    207 => "10111110100101001100111010001100", 
    208 => "10111110101011110011000101111111", 
    209 => "00111110101001010110011011000110", 
    210 => "00111110001010101111100010010010", 
    211 => "00111101011010111010101111111000", 
    212 => "10111110000010100101000010110001", 
    213 => "00111101110111100100011101000111", 
    214 => "10111100111111000110111011011100", 
    215 => "10111110011110101100001011011100", 
    216 => "00111110000001001101001111010011", 
    217 => "00111101001110101010110011100111", 
    218 => "00111110010011001000010000011111", 
    219 => "10111101011101110000101100100111", 
    220 => "10111110010100111111111000001101", 
    221 => "00111110011001101111101111010011", 
    222 => "10111100101100101111001110011000", 
    223 => "00111110000010010101011001010011", 
    224 => "10111110101011100100110001000011", 
    225 => "00111101110100110010100100010110", 
    226 => "00111101101110001101000001111110", 
    227 => "00111110100010011000110110101010", 
    228 => "00111110011011000111001010111000", 
    229 => "10111101101111111111100111001111", 
    230 => "00111101001101101001000101000111", 
    231 => "00111110000100110101000110000010", 
    232 => "10111101100001011001100101100101", 
    233 => "00111101111001110011001111010000", 
    234 => "00111110010111101011000011000001", 
    235 => "10111101101110111001100000111110", 
    236 => "10111110000110001001010011011100", 
    237 => "10111110110000111100010001001001", 
    238 => "00111110010011110010011001100101", 
    239 => "10111110101001100000100101111001", 
    240 => "00111110011000111000111100011010", 
    241 => "10111110010000111110010010110110", 
    242 => "00111101101010011010101101110000", 
    243 => "10111110100011110000101001111011", 
    244 => "00111110011011101110001110011100", 
    245 => "10111101110000010110100110000010", 
    246 => "10111110010011001100101001110010", 
    247 => "00111101010101000010000001100001", 
    248 => "10111100110101111001001111010000", 
    249 => "00111110011011011001100111101001", 
    250 => "10111110011101010101010010010010", 
    251 => "10111110010100001011010010100001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity lenet_top_fc3_layer_fc3_weights_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 252;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of lenet_top_fc3_layer_fc3_weights_2 is
    component lenet_top_fc3_layer_fc3_weights_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    lenet_top_fc3_layer_fc3_weights_2_rom_U :  component lenet_top_fc3_layer_fc3_weights_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


