-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity lenet_top_fc_layer_400_120_s_fc1_biases_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of lenet_top_fc_layer_400_120_s_fc1_biases_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100110000001011101000011111", 
    1 => "00111100010100101001110010100101", 
    2 => "10111011111011101000111011010100", 
    3 => "10111100001001111001111111101101", 
    4 => "00111100010100101111101101010000", 
    5 => "00111100011100000111101111111110", 
    6 => "00111100111010001011011100000011", 
    7 => "10111100101010110011100010101110", 
    8 => "10111100000001000001010001110111", 
    9 => "10111100000101010111001101001111", 
    10 => "10111010011001100011000001001011", 
    11 => "00111100011000000000001010010100", 
    12 => "00111101000101111111111101010011", 
    13 => "00111100010000001001000101001010", 
    14 => "10111011000111000101110101000011", 
    15 => "00111011010011011101001000000101", 
    16 => "00111011011100010101101110100010", 
    17 => "00111100011000101111011000101111", 
    18 => "10111100011011110000010101011100", 
    19 => "00111100110001010111110110111110", 
    20 => "10111010100110011100111100011111", 
    21 => "00111101001000001111100101110101", 
    22 => "10111100111010010011100000101000", 
    23 => "00111101001111110001000001001001", 
    24 => "10111100100100111001010101011110", 
    25 => "10111011110111110111110000111100", 
    26 => "10111100101000000110011110001001", 
    27 => "10111100001001100000011011100101", 
    28 => "10111100100000111001010001111010", 
    29 => "10111100011100101010011101111101", 
    30 => "10111100110101110010000011000011", 
    31 => "00111100100110000100101101010000", 
    32 => "10111011101110011010110010001010", 
    33 => "10111100100101111011011011000000", 
    34 => "10111100010110110110001101011110", 
    35 => "00111011001100111011101110101111", 
    36 => "10111100001000000110010001100100", 
    37 => "10111100101100010010011111000000", 
    38 => "00111011001011100000110110011010", 
    39 => "00111011010000111100000000001001", 
    40 => "10111100010101011010001101101011", 
    41 => "00111100100110111110110111010010", 
    42 => "00111100011000011101111001001100", 
    43 => "00111101000100101011001100011011", 
    44 => "00111101001000011101010011110010", 
    45 => "00111101000011000011100001100101", 
    46 => "00111100000100111101011111011001", 
    47 => "10111100100000011101110010011111", 
    48 => "00111101000000000100111111000100", 
    49 => "10111011001000001101000000011010", 
    50 => "00111011111001110100011001110110", 
    51 => "00111101000010101000111010000001", 
    52 => "00111000111110010110111101101101", 
    53 => "00111101010010100010110001001001", 
    54 => "10111100101100011000010111010100", 
    55 => "00111100000101101011001010010100", 
    56 => "10111100111100111000001010000100", 
    57 => "00111101001010010101101110011100", 
    58 => "10111011111100010100111110111001", 
    59 => "00111101001110101001110110011011", 
    60 => "00111100011011111001100111100001", 
    61 => "10111100001111010110000001111110", 
    62 => "00111010111101001010110100010001", 
    63 => "00111101000000100001111101110101", 
    64 => "00111100101010000110011101001000", 
    65 => "00111101000010010001010111001001", 
    66 => "00111101000101001001100100011100", 
    67 => "10111100100101110011011000101101", 
    68 => "00111100001100001011010011111111", 
    69 => "10111100110110111100100001001000", 
    70 => "10111100100010011111110000010010", 
    71 => "00111100110101111100101110010100", 
    72 => "00111100111110110101001000110001", 
    73 => "00111011111101010111011001111010", 
    74 => "10111011100000001010101001001010", 
    75 => "00111101010011000001011010111111", 
    76 => "10111011011110111011011000011001", 
    77 => "10111100001110111100100111011011", 
    78 => "10111100101101110101010001100101", 
    79 => "00111100110111101000100011101101", 
    80 => "00111101010000110011101101010110", 
    81 => "00111101000100110001001000011011", 
    82 => "00111100101111110100111010111010", 
    83 => "00111100110110010111110101001111", 
    84 => "00111100111001100010100111010110", 
    85 => "00111100011101001100101000010111", 
    86 => "10111100101001011000000001101000", 
    87 => "10111100011111010000100001110100", 
    88 => "10111011101100111111001101111000", 
    89 => "00111101000100011111111000101111", 
    90 => "00111100100110111011011010001010", 
    91 => "00111101000110110010000111100010", 
    92 => "00111101000010011011011111001010", 
    93 => "00111100100001110100111110110101", 
    94 => "10111101000100101101110110001101", 
    95 => "10111100010100011000111000010010", 
    96 => "10111100011110110100110110101001", 
    97 => "10111101000010010100011110100010", 
    98 => "10111010110000011000000010111110", 
    99 => "10111100101010110000101110001100", 
    100 => "10111100110101010100111100010010", 
    101 => "10111100100011010110001001101111", 
    102 => "00111101001000000110100111100000", 
    103 => "00111100000101000100101111100111", 
    104 => "10111011101100110000101011000100", 
    105 => "10111100011111001110000101101000", 
    106 => "00111101010101100111001001000101", 
    107 => "10111100110000000100100110100111", 
    108 => "00111100010111000111100011000111", 
    109 => "10111100101110110011111111110111", 
    110 => "00111100010010101111001101000011", 
    111 => "00111101010000110010100100111000", 
    112 => "10111100000010000111101000001101", 
    113 => "10111011110010111110011111110101", 
    114 => "10111011110101100100111000000000", 
    115 => "10111011001010101010110111101001", 
    116 => "00111100101100011101000110110100", 
    117 => "00111010111111111111101001110111", 
    118 => "10111011100111111000110110111010", 
    119 => "00111100111000101000111010000101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity lenet_top_fc_layer_400_120_s_fc1_biases is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of lenet_top_fc_layer_400_120_s_fc1_biases is
    component lenet_top_fc_layer_400_120_s_fc1_biases_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    lenet_top_fc_layer_400_120_s_fc1_biases_rom_U :  component lenet_top_fc_layer_400_120_s_fc1_biases_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


