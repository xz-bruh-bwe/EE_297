// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module lenet_top_maxpool2_layer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        input_r,
        output_r
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_pp0_stage1 = 6'd4;
parameter    ap_ST_fsm_pp0_stage2 = 6'd8;
parameter    ap_ST_fsm_pp0_stage3 = 6'd16;
parameter    ap_ST_fsm_state27 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] input_r;
input  [63:0] output_r;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage3;
reg   [0:0] icmp_ln112_reg_1091;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage2;
reg   [0:0] icmp_ln112_reg_1091_pp0_iter2_reg;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln112_reg_1091_pp0_iter1_reg;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] icmp_ln112_reg_1091_pp0_iter3_reg;
reg    gmem_blk_n_AW;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] icmp_ln112_reg_1091_pp0_iter4_reg;
reg    gmem_blk_n_W;
reg    gmem_blk_n_B;
reg    ap_enable_reg_pp0_iter6;
reg   [0:0] icmp_ln112_reg_1091_pp0_iter5_reg;
reg   [8:0] indvar_flatten59_reg_192;
reg   [4:0] c_reg_204;
reg   [5:0] indvar_flatten_reg_216;
reg   [3:0] i_reg_228;
reg   [3:0] j_reg_240;
wire   [63:0] add_ln116_fu_272_p2;
reg   [63:0] add_ln116_reg_1084;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
reg    ap_block_state6_io;
wire    ap_block_state10_pp0_stage0_iter2;
reg    ap_block_state14_pp0_stage0_iter3;
wire    ap_block_state18_pp0_stage0_iter4;
wire    ap_block_state22_pp0_stage0_iter5;
reg    ap_block_state26_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln112_fu_277_p2;
wire   [4:0] add_ln112_fu_283_p2;
reg   [4:0] add_ln112_reg_1095;
wire   [0:0] icmp_ln113_fu_289_p2;
reg   [0:0] icmp_ln113_reg_1100;
wire   [3:0] select_ln112_fu_295_p3;
reg   [3:0] select_ln112_reg_1112;
wire   [5:0] select_ln112_2_fu_315_p3;
reg   [5:0] select_ln112_2_reg_1118;
wire   [63:0] add_ln116_4_fu_327_p2;
reg   [63:0] add_ln116_4_reg_1123;
wire   [8:0] add_ln112_1_fu_426_p2;
reg   [8:0] add_ln112_1_reg_1130;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
reg    ap_block_state7_io;
wire    ap_block_state11_pp0_stage1_iter2;
reg    ap_block_state15_pp0_stage1_iter3;
wire    ap_block_state19_pp0_stage1_iter4;
wire    ap_block_state23_pp0_stage1_iter5;
reg    ap_block_pp0_stage1_11001;
wire   [0:0] or_ln112_fu_468_p2;
reg   [0:0] or_ln112_reg_1135;
wire   [3:0] add_ln113_fu_473_p2;
reg   [3:0] add_ln113_reg_1141;
wire   [63:0] select_ln113_1_fu_520_p3;
reg   [63:0] select_ln113_1_reg_1146;
wire   [63:0] select_ln113_2_fu_564_p3;
reg   [63:0] select_ln113_2_reg_1152;
wire   [10:0] select_ln113_3_fu_590_p3;
reg   [10:0] select_ln113_3_reg_1158;
wire   [3:0] select_ln113_fu_605_p3;
reg   [3:0] select_ln113_reg_1163;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state8_pp0_stage2_iter1;
reg    ap_block_state8_io;
reg    ap_block_state12_pp0_stage2_iter2;
wire    ap_block_state16_pp0_stage2_iter3;
wire    ap_block_state20_pp0_stage2_iter4;
reg    ap_block_state20_io;
wire    ap_block_state24_pp0_stage2_iter5;
reg    ap_block_pp0_stage2_11001;
reg   [63:0] gmem_addr_reg_1168;
reg   [63:0] gmem_addr_5_reg_1174;
reg   [63:0] gmem_addr_6_reg_1180;
reg   [63:0] gmem_addr_7_reg_1186;
reg   [63:0] gmem_addr_8_reg_1192;
reg   [63:0] gmem_addr_8_reg_1192_pp0_iter1_reg;
reg   [63:0] gmem_addr_8_reg_1192_pp0_iter2_reg;
reg   [63:0] gmem_addr_8_reg_1192_pp0_iter3_reg;
wire   [5:0] add_ln113_1_fu_789_p2;
reg   [5:0] add_ln113_1_reg_1198;
wire   [4:0] select_ln112_7_fu_795_p3;
reg   [4:0] select_ln112_7_reg_1203;
wire    ap_block_state5_pp0_stage3_iter0;
reg    ap_block_state5_io;
wire    ap_block_state9_pp0_stage3_iter1;
reg    ap_block_state13_pp0_stage3_iter2;
wire    ap_block_state17_pp0_stage3_iter3;
wire    ap_block_state21_pp0_stage3_iter4;
reg    ap_block_state21_io;
wire    ap_block_state25_pp0_stage3_iter5;
reg    ap_block_pp0_stage3_11001;
wire   [3:0] select_ln113_4_fu_801_p3;
reg   [3:0] select_ln113_4_reg_1208;
wire   [5:0] select_ln113_5_fu_806_p3;
reg   [5:0] select_ln113_5_reg_1213;
wire   [3:0] add_ln114_fu_812_p2;
reg   [3:0] add_ln114_reg_1218;
reg   [31:0] gmem_addr_read_reg_1223;
reg   [7:0] tmp_reg_1228;
wire   [22:0] trunc_ln121_fu_827_p1;
reg   [22:0] trunc_ln121_reg_1233;
wire   [31:0] v1_fu_831_p1;
reg   [31:0] v1_reg_1238;
reg   [7:0] tmp_s_reg_1244;
wire   [22:0] trunc_ln121_1_fu_845_p1;
reg   [22:0] trunc_ln121_1_reg_1249;
wire   [0:0] icmp_ln121_fu_849_p2;
reg   [0:0] icmp_ln121_reg_1254;
wire   [0:0] icmp_ln121_1_fu_854_p2;
reg   [0:0] icmp_ln121_1_reg_1259;
wire   [31:0] v0_fu_859_p1;
reg   [31:0] v0_reg_1264;
reg   [31:0] gmem_addr_6_read_reg_1270;
wire   [0:0] icmp_ln121_2_fu_863_p2;
reg   [0:0] icmp_ln121_2_reg_1275;
wire   [0:0] icmp_ln121_3_fu_868_p2;
reg   [0:0] icmp_ln121_3_reg_1280;
reg   [7:0] tmp_4_reg_1285;
wire   [22:0] trunc_ln122_fu_883_p1;
reg   [22:0] trunc_ln122_reg_1290;
wire   [31:0] v3_fu_887_p1;
reg   [31:0] v3_reg_1295;
wire   [31:0] max1_fu_911_p3;
reg   [31:0] max1_reg_1301;
reg   [31:0] max1_reg_1301_pp0_iter4_reg;
reg   [7:0] tmp_5_reg_1308;
wire   [22:0] trunc_ln122_1_fu_927_p1;
reg   [22:0] trunc_ln122_1_reg_1313;
wire   [0:0] icmp_ln122_fu_931_p2;
reg   [0:0] icmp_ln122_reg_1318;
wire   [0:0] icmp_ln122_1_fu_936_p2;
reg   [0:0] icmp_ln122_1_reg_1323;
wire   [31:0] v2_fu_941_p1;
reg   [31:0] v2_reg_1328;
wire   [0:0] icmp_ln122_2_fu_945_p2;
reg   [0:0] icmp_ln122_2_reg_1334;
wire   [0:0] icmp_ln122_3_fu_950_p2;
reg   [0:0] icmp_ln122_3_reg_1339;
wire   [31:0] max2_fu_975_p3;
reg   [31:0] max2_reg_1344;
wire   [31:0] max_final_fu_1063_p3;
reg   [31:0] max_final_reg_1351;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter5;
reg   [8:0] ap_phi_mux_indvar_flatten59_phi_fu_196_p4;
reg   [4:0] ap_phi_mux_c_phi_fu_208_p4;
reg   [5:0] ap_phi_mux_indvar_flatten_phi_fu_220_p4;
reg   [3:0] ap_phi_mux_i_phi_fu_232_p4;
reg   [3:0] ap_phi_mux_j_phi_fu_244_p4;
wire  signed [63:0] sext_ln116_fu_642_p1;
wire  signed [63:0] sext_ln117_fu_677_p1;
wire  signed [63:0] sext_ln118_fu_702_p1;
wire  signed [63:0] sext_ln119_fu_727_p1;
wire  signed [63:0] sext_ln125_fu_779_p1;
reg    ap_block_pp0_stage3_01001;
reg   [31:0] grp_fu_252_p0;
reg   [31:0] grp_fu_252_p1;
wire   [3:0] trunc_ln116_fu_256_p1;
wire   [5:0] shl_ln_fu_260_p3;
wire   [63:0] zext_ln116_fu_268_p1;
wire   [3:0] trunc_ln116_1_fu_303_p1;
wire   [5:0] shl_ln116_mid1_fu_307_p3;
wire   [63:0] zext_ln116_3_fu_323_p1;
wire   [12:0] shl_ln116_2_fu_338_p3;
wire   [10:0] shl_ln116_3_fu_350_p3;
wire   [63:0] zext_ln116_2_fu_358_p1;
wire   [63:0] add_ln116_3_fu_362_p2;
wire   [63:0] zext_ln116_1_fu_346_p1;
wire   [3:0] empty_fu_332_p2;
wire   [12:0] shl_ln3_fu_373_p3;
wire   [10:0] shl_ln118_1_fu_385_p3;
wire   [63:0] zext_ln118_1_fu_393_p1;
wire   [63:0] add_ln118_fu_397_p2;
wire   [63:0] zext_ln118_fu_381_p1;
wire   [8:0] shl_ln4_fu_408_p3;
wire   [10:0] zext_ln114_fu_416_p1;
wire   [63:0] add_ln116_1_fu_367_p2;
wire   [63:0] add_ln118_3_fu_443_p2;
wire   [63:0] add_ln118_1_fu_402_p2;
wire   [10:0] add_ln125_fu_420_p2;
wire   [0:0] icmp_ln114_fu_462_p2;
wire   [12:0] shl_ln116_2_mid1_fu_484_p3;
wire   [10:0] shl_ln116_3_mid1_fu_496_p3;
wire   [63:0] zext_ln116_6_fu_504_p1;
wire   [63:0] select_ln112_3_fu_432_p3;
wire   [63:0] add_ln116_5_fu_508_p2;
wire   [63:0] zext_ln116_4_fu_492_p1;
wire   [63:0] select_ln112_4_fu_437_p3;
wire   [63:0] add_ln116_6_fu_514_p2;
wire   [3:0] p_mid1_fu_478_p2;
wire   [12:0] shl_ln118_mid1_fu_528_p3;
wire   [10:0] shl_ln118_1_mid1_fu_540_p3;
wire   [63:0] zext_ln118_3_fu_548_p1;
wire   [63:0] add_ln118_4_fu_552_p2;
wire   [63:0] zext_ln118_2_fu_536_p1;
wire   [63:0] select_ln112_5_fu_448_p3;
wire   [63:0] add_ln118_5_fu_558_p2;
wire   [8:0] shl_ln125_mid1_fu_572_p3;
wire   [10:0] zext_ln114_1_fu_580_p1;
wire   [10:0] select_ln112_6_fu_455_p3;
wire   [10:0] add_ln125_3_fu_584_p2;
wire   [3:0] select_ln112_1_fu_598_p3;
wire   [9:0] shl_ln116_1_fu_615_p3;
wire   [63:0] zext_ln116_5_fu_623_p1;
wire   [63:0] add_ln116_2_fu_627_p2;
wire   [61:0] trunc_ln_fu_632_p4;
wire   [9:0] or_ln117_fu_652_p2;
wire   [63:0] zext_ln117_fu_658_p1;
wire   [63:0] add_ln117_fu_662_p2;
wire   [61:0] trunc_ln8_fu_667_p4;
wire   [63:0] add_ln118_2_fu_687_p2;
wire   [61:0] trunc_ln9_fu_692_p4;
wire   [63:0] add_ln119_fu_712_p2;
wire   [61:0] trunc_ln1_fu_717_p4;
wire   [2:0] tmp_1_fu_737_p4;
wire   [8:0] tmp4_fu_747_p3;
wire   [63:0] zext_ln125_fu_754_p1;
wire   [63:0] select_ln113_3_cast_fu_612_p1;
wire   [63:0] add_ln125_1_fu_758_p2;
wire   [63:0] add_ln125_2_fu_763_p2;
wire   [61:0] trunc_ln2_fu_769_p4;
wire   [0:0] or_ln121_fu_891_p2;
wire   [0:0] or_ln121_1_fu_895_p2;
wire   [0:0] and_ln121_fu_899_p2;
wire   [0:0] grp_fu_252_p2;
wire   [0:0] and_ln121_1_fu_905_p2;
wire   [0:0] or_ln122_fu_955_p2;
wire   [0:0] or_ln122_1_fu_959_p2;
wire   [0:0] and_ln122_fu_963_p2;
wire   [0:0] and_ln122_1_fu_969_p2;
wire   [31:0] bitcast_ln123_fu_981_p1;
wire   [31:0] bitcast_ln123_1_fu_998_p1;
wire   [7:0] tmp_7_fu_984_p4;
wire   [22:0] trunc_ln123_fu_994_p1;
wire   [0:0] icmp_ln123_1_fu_1021_p2;
wire   [0:0] icmp_ln123_fu_1015_p2;
wire   [7:0] tmp_8_fu_1001_p4;
wire   [22:0] trunc_ln123_1_fu_1011_p1;
wire   [0:0] icmp_ln123_3_fu_1039_p2;
wire   [0:0] icmp_ln123_2_fu_1033_p2;
wire   [0:0] or_ln123_fu_1027_p2;
wire   [0:0] or_ln123_1_fu_1045_p2;
wire   [0:0] and_ln123_fu_1051_p2;
wire   [0:0] and_ln123_1_fu_1057_p2;
reg    grp_fu_252_ce;
reg    ap_block_pp0_stage0_00001;
reg    ap_block_pp0_stage2_00001;
reg    ap_block_pp0_stage1_00001;
wire    ap_CS_fsm_state27;
reg   [5:0] ap_NS_fsm;
reg    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

lenet_top_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U90(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_252_p0),
    .din1(grp_fu_252_p1),
    .ce(grp_fu_252_ce),
    .opcode(5'd2),
    .dout(grp_fu_252_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln112_reg_1091 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        c_reg_204 <= select_ln112_7_reg_1203;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_reg_204 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln112_reg_1091 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_reg_228 <= select_ln113_4_reg_1208;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_228 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln112_reg_1091 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten59_reg_192 <= add_ln112_1_reg_1130;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten59_reg_192 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln112_reg_1091 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_216 <= select_ln113_5_reg_1213;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_216 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln112_reg_1091_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_reg_240 <= add_ln114_reg_1218;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_240 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln112_1_reg_1130 <= add_ln112_1_fu_426_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln112_fu_277_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln112_reg_1095 <= add_ln112_fu_283_p2;
        add_ln116_4_reg_1123 <= add_ln116_4_fu_327_p2;
        icmp_ln113_reg_1100 <= icmp_ln113_fu_289_p2;
        select_ln112_2_reg_1118[5 : 2] <= select_ln112_2_fu_315_p3[5 : 2];
        select_ln112_reg_1112 <= select_ln112_fu_295_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln112_reg_1091 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln113_reg_1100 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln113_1_reg_1198 <= add_ln113_1_fu_789_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln112_reg_1091 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln113_reg_1141 <= add_ln113_fu_473_p2;
        or_ln112_reg_1135 <= or_ln112_fu_468_p2;
        select_ln113_1_reg_1146 <= select_ln113_1_fu_520_p3;
        select_ln113_2_reg_1152 <= select_ln113_2_fu_564_p3;
        select_ln113_3_reg_1158[10 : 5] <= select_ln113_3_fu_590_p3[10 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln112_reg_1091 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        add_ln114_reg_1218 <= add_ln114_fu_812_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln116_reg_1084 <= add_ln116_fu_272_p2;
        icmp_ln112_reg_1091 <= icmp_ln112_fu_277_p2;
        icmp_ln112_reg_1091_pp0_iter1_reg <= icmp_ln112_reg_1091;
        icmp_ln112_reg_1091_pp0_iter2_reg <= icmp_ln112_reg_1091_pp0_iter1_reg;
        icmp_ln112_reg_1091_pp0_iter3_reg <= icmp_ln112_reg_1091_pp0_iter2_reg;
        icmp_ln112_reg_1091_pp0_iter4_reg <= icmp_ln112_reg_1091_pp0_iter3_reg;
        icmp_ln112_reg_1091_pp0_iter5_reg <= icmp_ln112_reg_1091_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln112_reg_1091 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        gmem_addr_5_reg_1174 <= sext_ln117_fu_677_p1;
        gmem_addr_6_reg_1180 <= sext_ln118_fu_702_p1;
        gmem_addr_7_reg_1186 <= sext_ln119_fu_727_p1;
        gmem_addr_8_reg_1192 <= sext_ln125_fu_779_p1;
        gmem_addr_reg_1168 <= sext_ln116_fu_642_p1;
        select_ln113_reg_1163 <= select_ln113_fu_605_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln112_reg_1091_pp0_iter2_reg == 1'd0))) begin
        gmem_addr_6_read_reg_1270 <= m_axi_gmem_RDATA;
        icmp_ln121_2_reg_1275 <= icmp_ln121_2_fu_863_p2;
        icmp_ln121_3_reg_1280 <= icmp_ln121_3_fu_868_p2;
        tmp_4_reg_1285 <= {{m_axi_gmem_RDATA[30:23]}};
        trunc_ln122_reg_1290 <= trunc_ln122_fu_883_p1;
        v0_reg_1264 <= v0_fu_859_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        gmem_addr_8_reg_1192_pp0_iter1_reg <= gmem_addr_8_reg_1192;
        gmem_addr_8_reg_1192_pp0_iter2_reg <= gmem_addr_8_reg_1192_pp0_iter1_reg;
        gmem_addr_8_reg_1192_pp0_iter3_reg <= gmem_addr_8_reg_1192_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln112_reg_1091_pp0_iter2_reg == 1'd0))) begin
        gmem_addr_read_reg_1223 <= m_axi_gmem_RDATA;
        tmp_reg_1228 <= {{m_axi_gmem_RDATA[30:23]}};
        trunc_ln121_reg_1233 <= trunc_ln121_fu_827_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln112_reg_1091_pp0_iter2_reg == 1'd0))) begin
        icmp_ln121_1_reg_1259 <= icmp_ln121_1_fu_854_p2;
        icmp_ln121_reg_1254 <= icmp_ln121_fu_849_p2;
        tmp_s_reg_1244 <= {{m_axi_gmem_RDATA[30:23]}};
        trunc_ln121_1_reg_1249 <= trunc_ln121_1_fu_845_p1;
        v1_reg_1238 <= v1_fu_831_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln112_reg_1091_pp0_iter3_reg == 1'd0))) begin
        icmp_ln122_1_reg_1323 <= icmp_ln122_1_fu_936_p2;
        icmp_ln122_reg_1318 <= icmp_ln122_fu_931_p2;
        max1_reg_1301 <= max1_fu_911_p3;
        tmp_5_reg_1308 <= {{m_axi_gmem_RDATA[30:23]}};
        trunc_ln122_1_reg_1313 <= trunc_ln122_1_fu_927_p1;
        v3_reg_1295 <= v3_fu_887_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln112_reg_1091_pp0_iter3_reg == 1'd0))) begin
        icmp_ln122_2_reg_1334 <= icmp_ln122_2_fu_945_p2;
        icmp_ln122_3_reg_1339 <= icmp_ln122_3_fu_950_p2;
        v2_reg_1328 <= v2_fu_941_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        max1_reg_1301_pp0_iter4_reg <= max1_reg_1301;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln112_reg_1091_pp0_iter3_reg == 1'd0))) begin
        max2_reg_1344 <= max2_fu_975_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln112_reg_1091_pp0_iter4_reg == 1'd0))) begin
        max_final_reg_1351 <= max_final_fu_1063_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln112_reg_1091 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        select_ln112_7_reg_1203 <= select_ln112_7_fu_795_p3;
        select_ln113_4_reg_1208 <= select_ln113_4_fu_801_p3;
        select_ln113_5_reg_1213 <= select_ln113_5_fu_806_p3;
    end
end

always @ (*) begin
    if ((icmp_ln112_reg_1091 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln112_reg_1091 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_c_phi_fu_208_p4 = select_ln112_7_reg_1203;
    end else begin
        ap_phi_mux_c_phi_fu_208_p4 = c_reg_204;
    end
end

always @ (*) begin
    if (((icmp_ln112_reg_1091 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_phi_fu_232_p4 = select_ln113_4_reg_1208;
    end else begin
        ap_phi_mux_i_phi_fu_232_p4 = i_reg_228;
    end
end

always @ (*) begin
    if (((icmp_ln112_reg_1091 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten59_phi_fu_196_p4 = add_ln112_1_reg_1130;
    end else begin
        ap_phi_mux_indvar_flatten59_phi_fu_196_p4 = indvar_flatten59_reg_192;
    end
end

always @ (*) begin
    if (((icmp_ln112_reg_1091 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_220_p4 = select_ln113_5_reg_1213;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_220_p4 = indvar_flatten_reg_216;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln112_reg_1091_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_j_phi_fu_244_p4 = add_ln114_reg_1218;
    end else begin
        ap_phi_mux_j_phi_fu_244_p4 = j_reg_240;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln112_reg_1091 == 1'd0) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln112_reg_1091 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln112_reg_1091_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln112_reg_1091_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln112_reg_1091_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln112_reg_1091_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln112_reg_1091_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln112_reg_1091_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln112_reg_1091_pp0_iter2_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln112_reg_1091_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln112_reg_1091_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_252_ce = 1'b1;
    end else begin
        grp_fu_252_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        grp_fu_252_p0 = max1_reg_1301;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_252_p0 = v2_fu_941_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_252_p0 = v0_fu_859_p1;
    end else begin
        grp_fu_252_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        grp_fu_252_p1 = max2_reg_1344;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_252_p1 = v3_reg_1295;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_252_p1 = v1_reg_1238;
    end else begin
        grp_fu_252_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln112_reg_1091_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        m_axi_gmem_ARADDR = gmem_addr_7_reg_1186;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln112_reg_1091_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        m_axi_gmem_ARADDR = gmem_addr_6_reg_1180;
    end else if (((icmp_ln112_reg_1091 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        m_axi_gmem_ARADDR = gmem_addr_5_reg_1174;
    end else if (((icmp_ln112_reg_1091 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        m_axi_gmem_ARADDR = gmem_addr_reg_1168;
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln112_reg_1091 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln112_reg_1091 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln112_reg_1091_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln112_reg_1091_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln112_reg_1091_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln112_reg_1091_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln112_reg_1091_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln112_reg_1091_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln112_reg_1091_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln112_reg_1091_pp0_iter2_reg == 1'd0)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln112_reg_1091_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((icmp_ln112_reg_1091 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((icmp_ln112_reg_1091 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln112_1_fu_426_p2 = (9'd1 + indvar_flatten59_reg_192);

assign add_ln112_fu_283_p2 = (5'd1 + ap_phi_mux_c_phi_fu_208_p4);

assign add_ln113_1_fu_789_p2 = (6'd1 + indvar_flatten_reg_216);

assign add_ln113_fu_473_p2 = (4'd2 + select_ln112_reg_1112);

assign add_ln114_fu_812_p2 = (4'd2 + select_ln113_reg_1163);

assign add_ln116_1_fu_367_p2 = (add_ln116_3_fu_362_p2 + zext_ln116_1_fu_346_p1);

assign add_ln116_2_fu_627_p2 = (zext_ln116_5_fu_623_p1 + select_ln113_1_reg_1146);

assign add_ln116_3_fu_362_p2 = (zext_ln116_2_fu_358_p1 + add_ln116_reg_1084);

assign add_ln116_4_fu_327_p2 = (input_r + zext_ln116_3_fu_323_p1);

assign add_ln116_5_fu_508_p2 = (zext_ln116_6_fu_504_p1 + select_ln112_3_fu_432_p3);

assign add_ln116_6_fu_514_p2 = (add_ln116_5_fu_508_p2 + zext_ln116_4_fu_492_p1);

assign add_ln116_fu_272_p2 = (input_r + zext_ln116_fu_268_p1);

assign add_ln117_fu_662_p2 = (zext_ln117_fu_658_p1 + select_ln113_1_reg_1146);

assign add_ln118_1_fu_402_p2 = (add_ln118_fu_397_p2 + zext_ln118_fu_381_p1);

assign add_ln118_2_fu_687_p2 = (zext_ln116_5_fu_623_p1 + select_ln113_2_reg_1152);

assign add_ln118_3_fu_443_p2 = (64'd640 + add_ln116_4_reg_1123);

assign add_ln118_4_fu_552_p2 = (zext_ln118_3_fu_548_p1 + select_ln112_3_fu_432_p3);

assign add_ln118_5_fu_558_p2 = (add_ln118_4_fu_552_p2 + zext_ln118_2_fu_536_p1);

assign add_ln118_fu_397_p2 = (zext_ln118_1_fu_393_p1 + add_ln116_reg_1084);

assign add_ln119_fu_712_p2 = (zext_ln117_fu_658_p1 + select_ln113_2_reg_1152);

assign add_ln125_1_fu_758_p2 = (output_r + zext_ln125_fu_754_p1);

assign add_ln125_2_fu_763_p2 = (select_ln113_3_cast_fu_612_p1 + add_ln125_1_fu_758_p2);

assign add_ln125_3_fu_584_p2 = (zext_ln114_1_fu_580_p1 + shl_ln116_3_mid1_fu_496_p3);

assign add_ln125_fu_420_p2 = (zext_ln114_fu_416_p1 + shl_ln116_3_fu_350_p3);

assign and_ln121_1_fu_905_p2 = (grp_fu_252_p2 & and_ln121_fu_899_p2);

assign and_ln121_fu_899_p2 = (or_ln121_fu_891_p2 & or_ln121_1_fu_895_p2);

assign and_ln122_1_fu_969_p2 = (grp_fu_252_p2 & and_ln122_fu_963_p2);

assign and_ln122_fu_963_p2 = (or_ln122_fu_955_p2 & or_ln122_1_fu_959_p2);

assign and_ln123_1_fu_1057_p2 = (grp_fu_252_p2 & and_ln123_fu_1051_p2);

assign and_ln123_fu_1051_p2 = (or_ln123_fu_1027_p2 & or_ln123_1_fu_1045_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = (((m_axi_gmem_BVALID == 1'b0) & (icmp_ln112_reg_1091_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln112_reg_1091_pp0_iter2_reg == 1'd0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_gmem_BVALID == 1'b0) & (icmp_ln112_reg_1091_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln112_reg_1091_pp0_iter2_reg == 1'd0)) | ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_gmem_BVALID == 1'b0) & (icmp_ln112_reg_1091_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln112_reg_1091_pp0_iter2_reg == 1'd0)) | ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_00001 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln112_reg_1091_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln112_reg_1091_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln112_reg_1091_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_00001 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln112_reg_1091_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln112_reg_1091_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state20_io)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln112_reg_1091_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state20_io)));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_01001 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln112_reg_1091_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state5_io)) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln112_reg_1091_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state21_io)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state5_io)) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln112_reg_1091_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state21_io)));
end

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage2_iter2 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln112_reg_1091_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_block_state13_pp0_stage3_iter2 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln112_reg_1091_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_block_state14_pp0_stage0_iter3 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln112_reg_1091_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_block_state15_pp0_stage1_iter3 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln112_reg_1091_pp0_iter3_reg == 1'd0));
end

assign ap_block_state16_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_io = ((m_axi_gmem_AWREADY == 1'b0) & (icmp_ln112_reg_1091_pp0_iter4_reg == 1'd0));
end

assign ap_block_state20_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_io = ((m_axi_gmem_WREADY == 1'b0) & (icmp_ln112_reg_1091_pp0_iter4_reg == 1'd0));
end

assign ap_block_state21_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage3_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state26_pp0_stage0_iter6 = ((m_axi_gmem_BVALID == 1'b0) & (icmp_ln112_reg_1091_pp0_iter5_reg == 1'd0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((icmp_ln112_reg_1091 == 1'd0) & (m_axi_gmem_ARREADY == 1'b0));
end

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((icmp_ln112_reg_1091 == 1'd0) & (m_axi_gmem_ARREADY == 1'b0));
end

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln112_reg_1091_pp0_iter1_reg == 1'd0));
end

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln112_reg_1091_pp0_iter1_reg == 1'd0));
end

assign ap_block_state8_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln123_1_fu_998_p1 = max2_reg_1344;

assign bitcast_ln123_fu_981_p1 = max1_reg_1301_pp0_iter4_reg;

assign empty_fu_332_p2 = (i_reg_228 | 4'd1);

assign icmp_ln112_fu_277_p2 = ((ap_phi_mux_indvar_flatten59_phi_fu_196_p4 == 9'd400) ? 1'b1 : 1'b0);

assign icmp_ln113_fu_289_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_220_p4 == 6'd25) ? 1'b1 : 1'b0);

assign icmp_ln114_fu_462_p2 = ((ap_phi_mux_j_phi_fu_244_p4 < 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln121_1_fu_854_p2 = ((trunc_ln121_reg_1233 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln121_2_fu_863_p2 = ((tmp_s_reg_1244 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln121_3_fu_868_p2 = ((trunc_ln121_1_reg_1249 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_849_p2 = ((tmp_reg_1228 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln122_1_fu_936_p2 = ((trunc_ln122_reg_1290 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln122_2_fu_945_p2 = ((tmp_5_reg_1308 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln122_3_fu_950_p2 = ((trunc_ln122_1_reg_1313 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_931_p2 = ((tmp_4_reg_1285 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln123_1_fu_1021_p2 = ((trunc_ln123_fu_994_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln123_2_fu_1033_p2 = ((tmp_8_fu_1001_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln123_3_fu_1039_p2 = ((trunc_ln123_1_fu_1011_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln123_fu_1015_p2 = ((tmp_7_fu_984_p4 != 8'd255) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = gmem_addr_8_reg_1192_pp0_iter3_reg;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd1;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WDATA = max_final_reg_1351;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd15;

assign m_axi_gmem_WUSER = 1'd0;

assign max1_fu_911_p3 = ((and_ln121_1_fu_905_p2[0:0] === 1'b1) ? v0_reg_1264 : v1_reg_1238);

assign max2_fu_975_p3 = ((and_ln122_1_fu_969_p2[0:0] === 1'b1) ? v2_reg_1328 : v3_reg_1295);

assign max_final_fu_1063_p3 = ((and_ln123_1_fu_1057_p2[0:0] === 1'b1) ? max1_reg_1301_pp0_iter4_reg : max2_reg_1344);

assign or_ln112_fu_468_p2 = (icmp_ln114_fu_462_p2 | icmp_ln113_reg_1100);

assign or_ln117_fu_652_p2 = (shl_ln116_1_fu_615_p3 | 10'd64);

assign or_ln121_1_fu_895_p2 = (icmp_ln121_3_reg_1280 | icmp_ln121_2_reg_1275);

assign or_ln121_fu_891_p2 = (icmp_ln121_reg_1254 | icmp_ln121_1_reg_1259);

assign or_ln122_1_fu_959_p2 = (icmp_ln122_3_reg_1339 | icmp_ln122_2_reg_1334);

assign or_ln122_fu_955_p2 = (icmp_ln122_reg_1318 | icmp_ln122_1_reg_1323);

assign or_ln123_1_fu_1045_p2 = (icmp_ln123_3_fu_1039_p2 | icmp_ln123_2_fu_1033_p2);

assign or_ln123_fu_1027_p2 = (icmp_ln123_fu_1015_p2 | icmp_ln123_1_fu_1021_p2);

assign p_mid1_fu_478_p2 = (4'd1 | add_ln113_fu_473_p2);

assign select_ln112_1_fu_598_p3 = ((icmp_ln113_reg_1100[0:0] === 1'b1) ? 4'd0 : j_reg_240);

assign select_ln112_2_fu_315_p3 = ((icmp_ln113_fu_289_p2[0:0] === 1'b1) ? shl_ln116_mid1_fu_307_p3 : shl_ln_fu_260_p3);

assign select_ln112_3_fu_432_p3 = ((icmp_ln113_reg_1100[0:0] === 1'b1) ? add_ln116_4_reg_1123 : add_ln116_reg_1084);

assign select_ln112_4_fu_437_p3 = ((icmp_ln113_reg_1100[0:0] === 1'b1) ? add_ln116_4_reg_1123 : add_ln116_1_fu_367_p2);

assign select_ln112_5_fu_448_p3 = ((icmp_ln113_reg_1100[0:0] === 1'b1) ? add_ln118_3_fu_443_p2 : add_ln118_1_fu_402_p2);

assign select_ln112_6_fu_455_p3 = ((icmp_ln113_reg_1100[0:0] === 1'b1) ? 11'd0 : add_ln125_fu_420_p2);

assign select_ln112_7_fu_795_p3 = ((icmp_ln113_reg_1100[0:0] === 1'b1) ? add_ln112_reg_1095 : c_reg_204);

assign select_ln112_fu_295_p3 = ((icmp_ln113_fu_289_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_i_phi_fu_232_p4);

assign select_ln113_1_fu_520_p3 = ((or_ln112_fu_468_p2[0:0] === 1'b1) ? select_ln112_4_fu_437_p3 : add_ln116_6_fu_514_p2);

assign select_ln113_2_fu_564_p3 = ((or_ln112_fu_468_p2[0:0] === 1'b1) ? select_ln112_5_fu_448_p3 : add_ln118_5_fu_558_p2);

assign select_ln113_3_cast_fu_612_p1 = select_ln113_3_reg_1158;

assign select_ln113_3_fu_590_p3 = ((or_ln112_fu_468_p2[0:0] === 1'b1) ? select_ln112_6_fu_455_p3 : add_ln125_3_fu_584_p2);

assign select_ln113_4_fu_801_p3 = ((or_ln112_reg_1135[0:0] === 1'b1) ? select_ln112_reg_1112 : add_ln113_reg_1141);

assign select_ln113_5_fu_806_p3 = ((icmp_ln113_reg_1100[0:0] === 1'b1) ? 6'd1 : add_ln113_1_reg_1198);

assign select_ln113_fu_605_p3 = ((or_ln112_reg_1135[0:0] === 1'b1) ? select_ln112_1_fu_598_p3 : 4'd0);

assign sext_ln116_fu_642_p1 = $signed(trunc_ln_fu_632_p4);

assign sext_ln117_fu_677_p1 = $signed(trunc_ln8_fu_667_p4);

assign sext_ln118_fu_702_p1 = $signed(trunc_ln9_fu_692_p4);

assign sext_ln119_fu_727_p1 = $signed(trunc_ln1_fu_717_p4);

assign sext_ln125_fu_779_p1 = $signed(trunc_ln2_fu_769_p4);

assign shl_ln116_1_fu_615_p3 = {{select_ln113_fu_605_p3}, {6'd0}};

assign shl_ln116_2_fu_338_p3 = {{i_reg_228}, {9'd0}};

assign shl_ln116_2_mid1_fu_484_p3 = {{add_ln113_fu_473_p2}, {9'd0}};

assign shl_ln116_3_fu_350_p3 = {{i_reg_228}, {7'd0}};

assign shl_ln116_3_mid1_fu_496_p3 = {{add_ln113_fu_473_p2}, {7'd0}};

assign shl_ln116_mid1_fu_307_p3 = {{trunc_ln116_1_fu_303_p1}, {2'd0}};

assign shl_ln118_1_fu_385_p3 = {{empty_fu_332_p2}, {7'd0}};

assign shl_ln118_1_mid1_fu_540_p3 = {{p_mid1_fu_478_p2}, {7'd0}};

assign shl_ln118_mid1_fu_528_p3 = {{p_mid1_fu_478_p2}, {9'd0}};

assign shl_ln125_mid1_fu_572_p3 = {{add_ln113_fu_473_p2}, {5'd0}};

assign shl_ln3_fu_373_p3 = {{empty_fu_332_p2}, {9'd0}};

assign shl_ln4_fu_408_p3 = {{i_reg_228}, {5'd0}};

assign shl_ln_fu_260_p3 = {{trunc_ln116_fu_256_p1}, {2'd0}};

assign tmp4_fu_747_p3 = {{tmp_1_fu_737_p4}, {select_ln112_2_reg_1118}};

assign tmp_1_fu_737_p4 = {{select_ln113_fu_605_p3[3:1]}};

assign tmp_7_fu_984_p4 = {{bitcast_ln123_fu_981_p1[30:23]}};

assign tmp_8_fu_1001_p4 = {{bitcast_ln123_1_fu_998_p1[30:23]}};

assign trunc_ln116_1_fu_303_p1 = add_ln112_fu_283_p2[3:0];

assign trunc_ln116_fu_256_p1 = ap_phi_mux_c_phi_fu_208_p4[3:0];

assign trunc_ln121_1_fu_845_p1 = m_axi_gmem_RDATA[22:0];

assign trunc_ln121_fu_827_p1 = m_axi_gmem_RDATA[22:0];

assign trunc_ln122_1_fu_927_p1 = m_axi_gmem_RDATA[22:0];

assign trunc_ln122_fu_883_p1 = m_axi_gmem_RDATA[22:0];

assign trunc_ln123_1_fu_1011_p1 = bitcast_ln123_1_fu_998_p1[22:0];

assign trunc_ln123_fu_994_p1 = bitcast_ln123_fu_981_p1[22:0];

assign trunc_ln1_fu_717_p4 = {{add_ln119_fu_712_p2[63:2]}};

assign trunc_ln2_fu_769_p4 = {{add_ln125_2_fu_763_p2[63:2]}};

assign trunc_ln8_fu_667_p4 = {{add_ln117_fu_662_p2[63:2]}};

assign trunc_ln9_fu_692_p4 = {{add_ln118_2_fu_687_p2[63:2]}};

assign trunc_ln_fu_632_p4 = {{add_ln116_2_fu_627_p2[63:2]}};

assign v0_fu_859_p1 = gmem_addr_read_reg_1223;

assign v1_fu_831_p1 = m_axi_gmem_RDATA;

assign v2_fu_941_p1 = gmem_addr_6_read_reg_1270;

assign v3_fu_887_p1 = m_axi_gmem_RDATA;

assign zext_ln114_1_fu_580_p1 = shl_ln125_mid1_fu_572_p3;

assign zext_ln114_fu_416_p1 = shl_ln4_fu_408_p3;

assign zext_ln116_1_fu_346_p1 = shl_ln116_2_fu_338_p3;

assign zext_ln116_2_fu_358_p1 = shl_ln116_3_fu_350_p3;

assign zext_ln116_3_fu_323_p1 = shl_ln116_mid1_fu_307_p3;

assign zext_ln116_4_fu_492_p1 = shl_ln116_2_mid1_fu_484_p3;

assign zext_ln116_5_fu_623_p1 = shl_ln116_1_fu_615_p3;

assign zext_ln116_6_fu_504_p1 = shl_ln116_3_mid1_fu_496_p3;

assign zext_ln116_fu_268_p1 = shl_ln_fu_260_p3;

assign zext_ln117_fu_658_p1 = or_ln117_fu_652_p2;

assign zext_ln118_1_fu_393_p1 = shl_ln118_1_fu_385_p3;

assign zext_ln118_2_fu_536_p1 = shl_ln118_mid1_fu_528_p3;

assign zext_ln118_3_fu_548_p1 = shl_ln118_1_mid1_fu_540_p3;

assign zext_ln118_fu_381_p1 = shl_ln3_fu_373_p3;

assign zext_ln125_fu_754_p1 = tmp4_fu_747_p3;

always @ (posedge ap_clk) begin
    select_ln112_2_reg_1118[1:0] <= 2'b00;
    select_ln113_3_reg_1158[4:0] <= 5'b00000;
end

endmodule //lenet_top_maxpool2_layer
