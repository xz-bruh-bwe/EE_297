-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lane_seg_top is
generic (
    C_M_AXI_GMEM_IN_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_IN_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_IN_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_IN_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_IN_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_IN_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_IN_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_IN_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OUT_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_OUT_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OUT_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OUT_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_OUT_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OUT_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OUT_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_OUT_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_IN_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_IN_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_IN_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM_OUT_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_OUT_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_OUT_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_in_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_in_AWREADY : IN STD_LOGIC;
    m_axi_gmem_in_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_IN_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_in_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_IN_ID_WIDTH-1 downto 0);
    m_axi_gmem_in_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_IN_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_in_WVALID : OUT STD_LOGIC;
    m_axi_gmem_in_WREADY : IN STD_LOGIC;
    m_axi_gmem_in_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_IN_DATA_WIDTH-1 downto 0);
    m_axi_gmem_in_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_IN_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_in_WLAST : OUT STD_LOGIC;
    m_axi_gmem_in_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_IN_ID_WIDTH-1 downto 0);
    m_axi_gmem_in_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_IN_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_in_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_in_ARREADY : IN STD_LOGIC;
    m_axi_gmem_in_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_IN_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_in_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_IN_ID_WIDTH-1 downto 0);
    m_axi_gmem_in_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_IN_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_in_RVALID : IN STD_LOGIC;
    m_axi_gmem_in_RREADY : OUT STD_LOGIC;
    m_axi_gmem_in_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_IN_DATA_WIDTH-1 downto 0);
    m_axi_gmem_in_RLAST : IN STD_LOGIC;
    m_axi_gmem_in_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_IN_ID_WIDTH-1 downto 0);
    m_axi_gmem_in_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_IN_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_BVALID : IN STD_LOGIC;
    m_axi_gmem_in_BREADY : OUT STD_LOGIC;
    m_axi_gmem_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_IN_ID_WIDTH-1 downto 0);
    m_axi_gmem_in_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_IN_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_out_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_out_AWREADY : IN STD_LOGIC;
    m_axi_gmem_out_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_out_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_ID_WIDTH-1 downto 0);
    m_axi_gmem_out_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_out_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_out_WVALID : OUT STD_LOGIC;
    m_axi_gmem_out_WREADY : IN STD_LOGIC;
    m_axi_gmem_out_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_DATA_WIDTH-1 downto 0);
    m_axi_gmem_out_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_out_WLAST : OUT STD_LOGIC;
    m_axi_gmem_out_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_ID_WIDTH-1 downto 0);
    m_axi_gmem_out_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_out_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_out_ARREADY : IN STD_LOGIC;
    m_axi_gmem_out_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_out_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_ID_WIDTH-1 downto 0);
    m_axi_gmem_out_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_out_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_out_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_out_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_out_RVALID : IN STD_LOGIC;
    m_axi_gmem_out_RREADY : OUT STD_LOGIC;
    m_axi_gmem_out_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_DATA_WIDTH-1 downto 0);
    m_axi_gmem_out_RLAST : IN STD_LOGIC;
    m_axi_gmem_out_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_ID_WIDTH-1 downto 0);
    m_axi_gmem_out_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_out_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_BVALID : IN STD_LOGIC;
    m_axi_gmem_out_BREADY : OUT STD_LOGIC;
    m_axi_gmem_out_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_out_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_ID_WIDTH-1 downto 0);
    m_axi_gmem_out_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_OUT_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of lane_seg_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lane_seg_top_lane_seg_top,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=15.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.950000,HLS_SYN_LAT=551974,HLS_SYN_TPT=none,HLS_SYN_MEM=148,HLS_SYN_DSP=0,HLS_SYN_FF=15492,HLS_SYN_LUT=38763,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1EAF0002 : STD_LOGIC_VECTOR (31 downto 0) := "00011110101011110000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal image_r : STD_LOGIC_VECTOR (63 downto 0);
    signal out0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ctrl : STD_LOGIC_VECTOR (31 downto 0);
    signal status_i : STD_LOGIC_VECTOR (31 downto 0);
    signal status_o : STD_LOGIC_VECTOR (31 downto 0);
    signal status_o_ap_vld : STD_LOGIC;
    signal magic_ap_vld : STD_LOGIC;
    signal out0_read_reg_141 : STD_LOGIC_VECTOR (63 downto 0);
    signal image_r_read_reg_146 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_encoder0_c1_fu_116_ap_start : STD_LOGIC;
    signal grp_encoder0_c1_fu_116_ap_done : STD_LOGIC;
    signal grp_encoder0_c1_fu_116_ap_idle : STD_LOGIC;
    signal grp_encoder0_c1_fu_116_ap_ready : STD_LOGIC;
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_AWVALID : STD_LOGIC;
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_WVALID : STD_LOGIC;
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_WLAST : STD_LOGIC;
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_ARVALID : STD_LOGIC;
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_RREADY : STD_LOGIC;
    signal grp_encoder0_c1_fu_116_m_axi_gmem_in_BREADY : STD_LOGIC;
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_AWVALID : STD_LOGIC;
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_WVALID : STD_LOGIC;
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_WSTRB : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_WLAST : STD_LOGIC;
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_ARVALID : STD_LOGIC;
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_RREADY : STD_LOGIC;
    signal grp_encoder0_c1_fu_116_m_axi_gmem_out_BREADY : STD_LOGIC;
    signal gmem_in_AWREADY : STD_LOGIC;
    signal gmem_in_WREADY : STD_LOGIC;
    signal gmem_in_ARVALID : STD_LOGIC;
    signal gmem_in_ARREADY : STD_LOGIC;
    signal gmem_in_RVALID : STD_LOGIC;
    signal gmem_in_RREADY : STD_LOGIC;
    signal gmem_in_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_in_RFIFONUM : STD_LOGIC_VECTOR (9 downto 0);
    signal gmem_in_BVALID : STD_LOGIC;
    signal gmem_out_AWVALID : STD_LOGIC;
    signal gmem_out_AWREADY : STD_LOGIC;
    signal gmem_out_WVALID : STD_LOGIC;
    signal gmem_out_WREADY : STD_LOGIC;
    signal gmem_out_ARREADY : STD_LOGIC;
    signal gmem_out_RVALID : STD_LOGIC;
    signal gmem_out_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal gmem_out_RFIFONUM : STD_LOGIC_VECTOR (9 downto 0);
    signal gmem_out_BVALID : STD_LOGIC;
    signal gmem_out_BREADY : STD_LOGIC;
    signal grp_encoder0_c1_fu_116_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_fu_126_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_fu_134_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component lane_seg_top_encoder0_c1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_in_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_in_AWREADY : IN STD_LOGIC;
        m_axi_gmem_in_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_in_WVALID : OUT STD_LOGIC;
        m_axi_gmem_in_WREADY : IN STD_LOGIC;
        m_axi_gmem_in_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem_in_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_in_WLAST : OUT STD_LOGIC;
        m_axi_gmem_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_in_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_in_ARREADY : IN STD_LOGIC;
        m_axi_gmem_in_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_in_RVALID : IN STD_LOGIC;
        m_axi_gmem_in_RREADY : OUT STD_LOGIC;
        m_axi_gmem_in_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem_in_RLAST : IN STD_LOGIC;
        m_axi_gmem_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_in_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
        m_axi_gmem_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_in_BVALID : IN STD_LOGIC;
        m_axi_gmem_in_BREADY : OUT STD_LOGIC;
        m_axi_gmem_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_out_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_out_AWREADY : IN STD_LOGIC;
        m_axi_gmem_out_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_out_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_out_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_out_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_out_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_out_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_out_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_out_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_out_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_out_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_WVALID : OUT STD_LOGIC;
        m_axi_gmem_out_WREADY : IN STD_LOGIC;
        m_axi_gmem_out_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem_out_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_out_WLAST : OUT STD_LOGIC;
        m_axi_gmem_out_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_out_ARREADY : IN STD_LOGIC;
        m_axi_gmem_out_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_out_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_out_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_out_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_out_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_out_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_out_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_out_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_out_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_out_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_RVALID : IN STD_LOGIC;
        m_axi_gmem_out_RREADY : OUT STD_LOGIC;
        m_axi_gmem_out_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem_out_RLAST : IN STD_LOGIC;
        m_axi_gmem_out_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
        m_axi_gmem_out_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_out_BVALID : IN STD_LOGIC;
        m_axi_gmem_out_BREADY : OUT STD_LOGIC;
        m_axi_gmem_out_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_out_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_out_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        output_r : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lane_seg_top_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        image_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        out0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ctrl : OUT STD_LOGIC_VECTOR (31 downto 0);
        status_o : IN STD_LOGIC_VECTOR (31 downto 0);
        status_o_ap_vld : IN STD_LOGIC;
        status_i : OUT STD_LOGIC_VECTOR (31 downto 0);
        magic : IN STD_LOGIC_VECTOR (31 downto 0);
        magic_ap_vld : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component lane_seg_top_gmem_in_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component lane_seg_top_gmem_out_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (9 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    grp_encoder0_c1_fu_116 : component lane_seg_top_encoder0_c1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_encoder0_c1_fu_116_ap_start,
        ap_done => grp_encoder0_c1_fu_116_ap_done,
        ap_idle => grp_encoder0_c1_fu_116_ap_idle,
        ap_ready => grp_encoder0_c1_fu_116_ap_ready,
        m_axi_gmem_in_AWVALID => grp_encoder0_c1_fu_116_m_axi_gmem_in_AWVALID,
        m_axi_gmem_in_AWREADY => ap_const_logic_0,
        m_axi_gmem_in_AWADDR => grp_encoder0_c1_fu_116_m_axi_gmem_in_AWADDR,
        m_axi_gmem_in_AWID => grp_encoder0_c1_fu_116_m_axi_gmem_in_AWID,
        m_axi_gmem_in_AWLEN => grp_encoder0_c1_fu_116_m_axi_gmem_in_AWLEN,
        m_axi_gmem_in_AWSIZE => grp_encoder0_c1_fu_116_m_axi_gmem_in_AWSIZE,
        m_axi_gmem_in_AWBURST => grp_encoder0_c1_fu_116_m_axi_gmem_in_AWBURST,
        m_axi_gmem_in_AWLOCK => grp_encoder0_c1_fu_116_m_axi_gmem_in_AWLOCK,
        m_axi_gmem_in_AWCACHE => grp_encoder0_c1_fu_116_m_axi_gmem_in_AWCACHE,
        m_axi_gmem_in_AWPROT => grp_encoder0_c1_fu_116_m_axi_gmem_in_AWPROT,
        m_axi_gmem_in_AWQOS => grp_encoder0_c1_fu_116_m_axi_gmem_in_AWQOS,
        m_axi_gmem_in_AWREGION => grp_encoder0_c1_fu_116_m_axi_gmem_in_AWREGION,
        m_axi_gmem_in_AWUSER => grp_encoder0_c1_fu_116_m_axi_gmem_in_AWUSER,
        m_axi_gmem_in_WVALID => grp_encoder0_c1_fu_116_m_axi_gmem_in_WVALID,
        m_axi_gmem_in_WREADY => ap_const_logic_0,
        m_axi_gmem_in_WDATA => grp_encoder0_c1_fu_116_m_axi_gmem_in_WDATA,
        m_axi_gmem_in_WSTRB => grp_encoder0_c1_fu_116_m_axi_gmem_in_WSTRB,
        m_axi_gmem_in_WLAST => grp_encoder0_c1_fu_116_m_axi_gmem_in_WLAST,
        m_axi_gmem_in_WID => grp_encoder0_c1_fu_116_m_axi_gmem_in_WID,
        m_axi_gmem_in_WUSER => grp_encoder0_c1_fu_116_m_axi_gmem_in_WUSER,
        m_axi_gmem_in_ARVALID => grp_encoder0_c1_fu_116_m_axi_gmem_in_ARVALID,
        m_axi_gmem_in_ARREADY => gmem_in_ARREADY,
        m_axi_gmem_in_ARADDR => grp_encoder0_c1_fu_116_m_axi_gmem_in_ARADDR,
        m_axi_gmem_in_ARID => grp_encoder0_c1_fu_116_m_axi_gmem_in_ARID,
        m_axi_gmem_in_ARLEN => grp_encoder0_c1_fu_116_m_axi_gmem_in_ARLEN,
        m_axi_gmem_in_ARSIZE => grp_encoder0_c1_fu_116_m_axi_gmem_in_ARSIZE,
        m_axi_gmem_in_ARBURST => grp_encoder0_c1_fu_116_m_axi_gmem_in_ARBURST,
        m_axi_gmem_in_ARLOCK => grp_encoder0_c1_fu_116_m_axi_gmem_in_ARLOCK,
        m_axi_gmem_in_ARCACHE => grp_encoder0_c1_fu_116_m_axi_gmem_in_ARCACHE,
        m_axi_gmem_in_ARPROT => grp_encoder0_c1_fu_116_m_axi_gmem_in_ARPROT,
        m_axi_gmem_in_ARQOS => grp_encoder0_c1_fu_116_m_axi_gmem_in_ARQOS,
        m_axi_gmem_in_ARREGION => grp_encoder0_c1_fu_116_m_axi_gmem_in_ARREGION,
        m_axi_gmem_in_ARUSER => grp_encoder0_c1_fu_116_m_axi_gmem_in_ARUSER,
        m_axi_gmem_in_RVALID => gmem_in_RVALID,
        m_axi_gmem_in_RREADY => grp_encoder0_c1_fu_116_m_axi_gmem_in_RREADY,
        m_axi_gmem_in_RDATA => gmem_in_RDATA,
        m_axi_gmem_in_RLAST => ap_const_logic_0,
        m_axi_gmem_in_RID => ap_const_lv1_0,
        m_axi_gmem_in_RFIFONUM => gmem_in_RFIFONUM,
        m_axi_gmem_in_RUSER => ap_const_lv1_0,
        m_axi_gmem_in_RRESP => ap_const_lv2_0,
        m_axi_gmem_in_BVALID => ap_const_logic_0,
        m_axi_gmem_in_BREADY => grp_encoder0_c1_fu_116_m_axi_gmem_in_BREADY,
        m_axi_gmem_in_BRESP => ap_const_lv2_0,
        m_axi_gmem_in_BID => ap_const_lv1_0,
        m_axi_gmem_in_BUSER => ap_const_lv1_0,
        input_r => image_r_read_reg_146,
        m_axi_gmem_out_AWVALID => grp_encoder0_c1_fu_116_m_axi_gmem_out_AWVALID,
        m_axi_gmem_out_AWREADY => gmem_out_AWREADY,
        m_axi_gmem_out_AWADDR => grp_encoder0_c1_fu_116_m_axi_gmem_out_AWADDR,
        m_axi_gmem_out_AWID => grp_encoder0_c1_fu_116_m_axi_gmem_out_AWID,
        m_axi_gmem_out_AWLEN => grp_encoder0_c1_fu_116_m_axi_gmem_out_AWLEN,
        m_axi_gmem_out_AWSIZE => grp_encoder0_c1_fu_116_m_axi_gmem_out_AWSIZE,
        m_axi_gmem_out_AWBURST => grp_encoder0_c1_fu_116_m_axi_gmem_out_AWBURST,
        m_axi_gmem_out_AWLOCK => grp_encoder0_c1_fu_116_m_axi_gmem_out_AWLOCK,
        m_axi_gmem_out_AWCACHE => grp_encoder0_c1_fu_116_m_axi_gmem_out_AWCACHE,
        m_axi_gmem_out_AWPROT => grp_encoder0_c1_fu_116_m_axi_gmem_out_AWPROT,
        m_axi_gmem_out_AWQOS => grp_encoder0_c1_fu_116_m_axi_gmem_out_AWQOS,
        m_axi_gmem_out_AWREGION => grp_encoder0_c1_fu_116_m_axi_gmem_out_AWREGION,
        m_axi_gmem_out_AWUSER => grp_encoder0_c1_fu_116_m_axi_gmem_out_AWUSER,
        m_axi_gmem_out_WVALID => grp_encoder0_c1_fu_116_m_axi_gmem_out_WVALID,
        m_axi_gmem_out_WREADY => gmem_out_WREADY,
        m_axi_gmem_out_WDATA => grp_encoder0_c1_fu_116_m_axi_gmem_out_WDATA,
        m_axi_gmem_out_WSTRB => grp_encoder0_c1_fu_116_m_axi_gmem_out_WSTRB,
        m_axi_gmem_out_WLAST => grp_encoder0_c1_fu_116_m_axi_gmem_out_WLAST,
        m_axi_gmem_out_WID => grp_encoder0_c1_fu_116_m_axi_gmem_out_WID,
        m_axi_gmem_out_WUSER => grp_encoder0_c1_fu_116_m_axi_gmem_out_WUSER,
        m_axi_gmem_out_ARVALID => grp_encoder0_c1_fu_116_m_axi_gmem_out_ARVALID,
        m_axi_gmem_out_ARREADY => ap_const_logic_0,
        m_axi_gmem_out_ARADDR => grp_encoder0_c1_fu_116_m_axi_gmem_out_ARADDR,
        m_axi_gmem_out_ARID => grp_encoder0_c1_fu_116_m_axi_gmem_out_ARID,
        m_axi_gmem_out_ARLEN => grp_encoder0_c1_fu_116_m_axi_gmem_out_ARLEN,
        m_axi_gmem_out_ARSIZE => grp_encoder0_c1_fu_116_m_axi_gmem_out_ARSIZE,
        m_axi_gmem_out_ARBURST => grp_encoder0_c1_fu_116_m_axi_gmem_out_ARBURST,
        m_axi_gmem_out_ARLOCK => grp_encoder0_c1_fu_116_m_axi_gmem_out_ARLOCK,
        m_axi_gmem_out_ARCACHE => grp_encoder0_c1_fu_116_m_axi_gmem_out_ARCACHE,
        m_axi_gmem_out_ARPROT => grp_encoder0_c1_fu_116_m_axi_gmem_out_ARPROT,
        m_axi_gmem_out_ARQOS => grp_encoder0_c1_fu_116_m_axi_gmem_out_ARQOS,
        m_axi_gmem_out_ARREGION => grp_encoder0_c1_fu_116_m_axi_gmem_out_ARREGION,
        m_axi_gmem_out_ARUSER => grp_encoder0_c1_fu_116_m_axi_gmem_out_ARUSER,
        m_axi_gmem_out_RVALID => ap_const_logic_0,
        m_axi_gmem_out_RREADY => grp_encoder0_c1_fu_116_m_axi_gmem_out_RREADY,
        m_axi_gmem_out_RDATA => ap_const_lv16_0,
        m_axi_gmem_out_RLAST => ap_const_logic_0,
        m_axi_gmem_out_RID => ap_const_lv1_0,
        m_axi_gmem_out_RFIFONUM => ap_const_lv10_0,
        m_axi_gmem_out_RUSER => ap_const_lv1_0,
        m_axi_gmem_out_RRESP => ap_const_lv2_0,
        m_axi_gmem_out_BVALID => gmem_out_BVALID,
        m_axi_gmem_out_BREADY => grp_encoder0_c1_fu_116_m_axi_gmem_out_BREADY,
        m_axi_gmem_out_BRESP => ap_const_lv2_0,
        m_axi_gmem_out_BID => ap_const_lv1_0,
        m_axi_gmem_out_BUSER => ap_const_lv1_0,
        output_r => out0_read_reg_141);

    control_s_axi_U : component lane_seg_top_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        image_r => image_r,
        out0 => out0,
        ctrl => ctrl,
        status_o => status_o,
        status_o_ap_vld => status_o_ap_vld,
        status_i => status_i,
        magic => ap_const_lv32_1EAF0002,
        magic_ap_vld => magic_ap_vld,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem_in_m_axi_U : component lane_seg_top_gmem_in_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_IN_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_IN_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_IN_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_IN_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_IN_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_IN_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_IN_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_IN_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_IN_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_IN_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_IN_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 10,
        USER_DW => 16,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_in_AWVALID,
        AWREADY => m_axi_gmem_in_AWREADY,
        AWADDR => m_axi_gmem_in_AWADDR,
        AWID => m_axi_gmem_in_AWID,
        AWLEN => m_axi_gmem_in_AWLEN,
        AWSIZE => m_axi_gmem_in_AWSIZE,
        AWBURST => m_axi_gmem_in_AWBURST,
        AWLOCK => m_axi_gmem_in_AWLOCK,
        AWCACHE => m_axi_gmem_in_AWCACHE,
        AWPROT => m_axi_gmem_in_AWPROT,
        AWQOS => m_axi_gmem_in_AWQOS,
        AWREGION => m_axi_gmem_in_AWREGION,
        AWUSER => m_axi_gmem_in_AWUSER,
        WVALID => m_axi_gmem_in_WVALID,
        WREADY => m_axi_gmem_in_WREADY,
        WDATA => m_axi_gmem_in_WDATA,
        WSTRB => m_axi_gmem_in_WSTRB,
        WLAST => m_axi_gmem_in_WLAST,
        WID => m_axi_gmem_in_WID,
        WUSER => m_axi_gmem_in_WUSER,
        ARVALID => m_axi_gmem_in_ARVALID,
        ARREADY => m_axi_gmem_in_ARREADY,
        ARADDR => m_axi_gmem_in_ARADDR,
        ARID => m_axi_gmem_in_ARID,
        ARLEN => m_axi_gmem_in_ARLEN,
        ARSIZE => m_axi_gmem_in_ARSIZE,
        ARBURST => m_axi_gmem_in_ARBURST,
        ARLOCK => m_axi_gmem_in_ARLOCK,
        ARCACHE => m_axi_gmem_in_ARCACHE,
        ARPROT => m_axi_gmem_in_ARPROT,
        ARQOS => m_axi_gmem_in_ARQOS,
        ARREGION => m_axi_gmem_in_ARREGION,
        ARUSER => m_axi_gmem_in_ARUSER,
        RVALID => m_axi_gmem_in_RVALID,
        RREADY => m_axi_gmem_in_RREADY,
        RDATA => m_axi_gmem_in_RDATA,
        RLAST => m_axi_gmem_in_RLAST,
        RID => m_axi_gmem_in_RID,
        RUSER => m_axi_gmem_in_RUSER,
        RRESP => m_axi_gmem_in_RRESP,
        BVALID => m_axi_gmem_in_BVALID,
        BREADY => m_axi_gmem_in_BREADY,
        BRESP => m_axi_gmem_in_BRESP,
        BID => m_axi_gmem_in_BID,
        BUSER => m_axi_gmem_in_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_in_ARVALID,
        I_ARREADY => gmem_in_ARREADY,
        I_ARADDR => grp_encoder0_c1_fu_116_m_axi_gmem_in_ARADDR,
        I_ARLEN => grp_encoder0_c1_fu_116_m_axi_gmem_in_ARLEN,
        I_RVALID => gmem_in_RVALID,
        I_RREADY => gmem_in_RREADY,
        I_RDATA => gmem_in_RDATA,
        I_RFIFONUM => gmem_in_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem_in_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem_in_WREADY,
        I_WDATA => ap_const_lv16_0,
        I_WSTRB => ap_const_lv2_0,
        I_BVALID => gmem_in_BVALID,
        I_BREADY => ap_const_logic_0);

    gmem_out_m_axi_U : component lane_seg_top_gmem_out_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_OUT_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_OUT_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_OUT_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_OUT_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_OUT_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_OUT_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_OUT_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_OUT_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_OUT_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_OUT_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_OUT_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 10,
        USER_DW => 16,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_gmem_out_AWVALID,
        AWREADY => m_axi_gmem_out_AWREADY,
        AWADDR => m_axi_gmem_out_AWADDR,
        AWID => m_axi_gmem_out_AWID,
        AWLEN => m_axi_gmem_out_AWLEN,
        AWSIZE => m_axi_gmem_out_AWSIZE,
        AWBURST => m_axi_gmem_out_AWBURST,
        AWLOCK => m_axi_gmem_out_AWLOCK,
        AWCACHE => m_axi_gmem_out_AWCACHE,
        AWPROT => m_axi_gmem_out_AWPROT,
        AWQOS => m_axi_gmem_out_AWQOS,
        AWREGION => m_axi_gmem_out_AWREGION,
        AWUSER => m_axi_gmem_out_AWUSER,
        WVALID => m_axi_gmem_out_WVALID,
        WREADY => m_axi_gmem_out_WREADY,
        WDATA => m_axi_gmem_out_WDATA,
        WSTRB => m_axi_gmem_out_WSTRB,
        WLAST => m_axi_gmem_out_WLAST,
        WID => m_axi_gmem_out_WID,
        WUSER => m_axi_gmem_out_WUSER,
        ARVALID => m_axi_gmem_out_ARVALID,
        ARREADY => m_axi_gmem_out_ARREADY,
        ARADDR => m_axi_gmem_out_ARADDR,
        ARID => m_axi_gmem_out_ARID,
        ARLEN => m_axi_gmem_out_ARLEN,
        ARSIZE => m_axi_gmem_out_ARSIZE,
        ARBURST => m_axi_gmem_out_ARBURST,
        ARLOCK => m_axi_gmem_out_ARLOCK,
        ARCACHE => m_axi_gmem_out_ARCACHE,
        ARPROT => m_axi_gmem_out_ARPROT,
        ARQOS => m_axi_gmem_out_ARQOS,
        ARREGION => m_axi_gmem_out_ARREGION,
        ARUSER => m_axi_gmem_out_ARUSER,
        RVALID => m_axi_gmem_out_RVALID,
        RREADY => m_axi_gmem_out_RREADY,
        RDATA => m_axi_gmem_out_RDATA,
        RLAST => m_axi_gmem_out_RLAST,
        RID => m_axi_gmem_out_RID,
        RUSER => m_axi_gmem_out_RUSER,
        RRESP => m_axi_gmem_out_RRESP,
        BVALID => m_axi_gmem_out_BVALID,
        BREADY => m_axi_gmem_out_BREADY,
        BRESP => m_axi_gmem_out_BRESP,
        BID => m_axi_gmem_out_BID,
        BUSER => m_axi_gmem_out_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem_out_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => gmem_out_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem_out_RDATA,
        I_RFIFONUM => gmem_out_RFIFONUM,
        I_AWVALID => gmem_out_AWVALID,
        I_AWREADY => gmem_out_AWREADY,
        I_AWADDR => grp_encoder0_c1_fu_116_m_axi_gmem_out_AWADDR,
        I_AWLEN => grp_encoder0_c1_fu_116_m_axi_gmem_out_AWLEN,
        I_WVALID => gmem_out_WVALID,
        I_WREADY => gmem_out_WREADY,
        I_WDATA => grp_encoder0_c1_fu_116_m_axi_gmem_out_WDATA,
        I_WSTRB => grp_encoder0_c1_fu_116_m_axi_gmem_out_WSTRB,
        I_BVALID => gmem_out_BVALID,
        I_BREADY => gmem_out_BREADY);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_encoder0_c1_fu_116_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_encoder0_c1_fu_116_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_encoder0_c1_fu_116_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_encoder0_c1_fu_116_ap_ready = ap_const_logic_1)) then 
                    grp_encoder0_c1_fu_116_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                image_r_read_reg_146 <= image_r;
                out0_read_reg_141 <= out0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_encoder0_c1_fu_116_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_encoder0_c1_fu_116_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_encoder0_c1_fu_116_ap_done)
    begin
        if ((grp_encoder0_c1_fu_116_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(grp_encoder0_c1_fu_116_ap_done, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_encoder0_c1_fu_116_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_encoder0_c1_fu_116_ap_done, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_encoder0_c1_fu_116_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    gmem_in_ARVALID_assign_proc : process(grp_encoder0_c1_fu_116_m_axi_gmem_in_ARVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_in_ARVALID <= grp_encoder0_c1_fu_116_m_axi_gmem_in_ARVALID;
        else 
            gmem_in_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_in_RREADY_assign_proc : process(grp_encoder0_c1_fu_116_m_axi_gmem_in_RREADY, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_in_RREADY <= grp_encoder0_c1_fu_116_m_axi_gmem_in_RREADY;
        else 
            gmem_in_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_out_AWVALID_assign_proc : process(grp_encoder0_c1_fu_116_m_axi_gmem_out_AWVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_out_AWVALID <= grp_encoder0_c1_fu_116_m_axi_gmem_out_AWVALID;
        else 
            gmem_out_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_out_BREADY_assign_proc : process(grp_encoder0_c1_fu_116_m_axi_gmem_out_BREADY, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_out_BREADY <= grp_encoder0_c1_fu_116_m_axi_gmem_out_BREADY;
        else 
            gmem_out_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_out_WVALID_assign_proc : process(grp_encoder0_c1_fu_116_m_axi_gmem_out_WVALID, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_out_WVALID <= grp_encoder0_c1_fu_116_m_axi_gmem_out_WVALID;
        else 
            gmem_out_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    grp_encoder0_c1_fu_116_ap_start <= grp_encoder0_c1_fu_116_ap_start_reg;

    magic_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            magic_ap_vld <= ap_const_logic_1;
        else 
            magic_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    or_ln55_fu_134_p2 <= (status_i or ap_const_lv32_1);

    status_o_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_126_p3, or_ln55_fu_134_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            status_o <= or_ln55_fu_134_p2;
        elsif (((tmp_fu_126_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            status_o <= ap_const_lv32_0;
        else 
            status_o <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    status_o_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_126_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((tmp_fu_126_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            status_o_ap_vld <= ap_const_logic_1;
        else 
            status_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_126_p3 <= ctrl(1 downto 1);
end behav;
