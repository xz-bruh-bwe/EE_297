-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lane_seg_top_encoder0_c1_Pipeline_VITIS_LOOP_36_1_VITIS_LOOP_37_2_VITIS_LOOP_38_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_in_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_in_AWREADY : IN STD_LOGIC;
    m_axi_gmem_in_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_WVALID : OUT STD_LOGIC;
    m_axi_gmem_in_WREADY : IN STD_LOGIC;
    m_axi_gmem_in_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_in_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_WLAST : OUT STD_LOGIC;
    m_axi_gmem_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_in_ARREADY : IN STD_LOGIC;
    m_axi_gmem_in_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_RVALID : IN STD_LOGIC;
    m_axi_gmem_in_RREADY : OUT STD_LOGIC;
    m_axi_gmem_in_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_in_RLAST : IN STD_LOGIC;
    m_axi_gmem_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_BVALID : IN STD_LOGIC;
    m_axi_gmem_in_BREADY : OUT STD_LOGIC;
    m_axi_gmem_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln36 : IN STD_LOGIC_VECTOR (61 downto 0);
    padded_address0 : OUT STD_LOGIC_VECTOR (17 downto 0);
    padded_ce0 : OUT STD_LOGIC;
    padded_we0 : OUT STD_LOGIC;
    padded_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of lane_seg_top_encoder0_c1_Pipeline_VITIS_LOOP_36_1_VITIS_LOOP_37_2_VITIS_LOOP_38_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv18_24C00 : STD_LOGIC_VECTOR (17 downto 0) := "100100110000000000";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv10_2A0 : STD_LOGIC_VECTOR (9 downto 0) := "1010100000";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv16_E2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000011100010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal icmp_ln36_reg_433 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_433_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln36_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_in_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln37_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_437 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_437_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln37_fu_299_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln37_reg_450 : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_in_addr_read_reg_460 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter3_stage0 : STD_LOGIC;
    signal zext_ln39_4_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_fu_78 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln38_fu_333_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal x_fu_82 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln37_2_fu_325_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_fu_86 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln37_3_fu_216_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_fu_90 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln36_3_fu_202_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten14_fu_94 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln36_fu_160_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal indvars_iv_next52333_mid1_fu_178_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvars_iv_next52333248_fu_184_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln36_1_fu_190_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_fu_210_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvars_iv_next52330_fu_248_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln38_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln36_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln36_fu_257_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln36_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln37_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next52330_mid1_fu_307_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln36_2_fu_264_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln37_1_fu_313_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvars_iv_next52330_dup_fu_288_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_383_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_fu_352_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln39_2_fu_349_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sub_ln39_fu_359_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln39_3_fu_365_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln39_1_fu_368_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_383_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_383_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_383_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_383_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_383_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_383_p20 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component lane_seg_top_mac_muladd_8ns_8ns_8ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component lane_seg_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_8ns_8ns_8ns_16_4_1_U2 : component lane_seg_top_mac_muladd_8ns_8ns_8ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_383_p0,
        din1 => grp_fu_383_p1,
        din2 => grp_fu_383_p2,
        ce => grp_fu_383_ce,
        dout => grp_fu_383_p3);

    flow_control_loop_pipe_sequential_init_U : component lane_seg_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    c_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    c_fu_78 <= ap_const_lv2_0;
                elsif (((icmp_ln36_reg_433_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    c_fu_78 <= add_ln38_fu_333_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten14_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten14_fu_94 <= ap_const_lv18_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln36_fu_154_p2 = ap_const_lv1_0))) then 
                    indvar_flatten14_fu_94 <= add_ln36_fu_160_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_86 <= ap_const_lv10_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln36_fu_154_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_86 <= select_ln37_3_fu_216_p3;
                end if;
            end if; 
        end if;
    end process;

    x_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    x_fu_82 <= ap_const_lv8_0;
                elsif (((icmp_ln36_reg_433_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    x_fu_82 <= select_ln37_2_fu_325_p3;
                end if;
            end if; 
        end if;
    end process;

    y_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_90 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln36_fu_154_p2 = ap_const_lv1_0))) then 
                    y_fu_90 <= select_ln36_3_fu_202_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln36_reg_433 <= icmp_ln36_fu_154_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                icmp_ln36_reg_433_pp0_iter2_reg <= icmp_ln36_reg_433;
                icmp_ln37_reg_437_pp0_iter2_reg <= icmp_ln37_reg_437;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_reg_433_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem_in_addr_read_reg_460 <= m_axi_gmem_in_RDATA;
                select_ln37_reg_450 <= select_ln37_fu_299_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln36_fu_154_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln37_reg_437 <= icmp_ln37_fu_172_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln36_fu_160_p2 <= std_logic_vector(unsigned(indvar_flatten14_fu_94) + unsigned(ap_const_lv18_1));
    add_ln37_fu_210_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_86) + unsigned(ap_const_lv10_1));
    add_ln38_fu_333_p2 <= std_logic_vector(unsigned(select_ln37_fu_299_p3) + unsigned(ap_const_lv2_1));
    add_ln39_1_fu_368_p2 <= std_logic_vector(unsigned(sub_ln39_fu_359_p2) + unsigned(zext_ln39_3_fu_365_p1));
    and_ln36_fu_282_p2 <= (xor_ln36_fu_271_p2 and icmp_ln38_fu_276_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_gmem_in_RVALID, icmp_ln36_reg_433_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln36_reg_433_pp0_iter2_reg = ap_const_lv1_0) and (m_axi_gmem_in_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_gmem_in_RVALID, icmp_ln36_reg_433_pp0_iter2_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln36_reg_433_pp0_iter2_reg = ap_const_lv1_0) and (m_axi_gmem_in_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter3_assign_proc : process(m_axi_gmem_in_RVALID, icmp_ln36_reg_433_pp0_iter2_reg)
    begin
                ap_block_state4_pp0_stage0_iter3 <= ((icmp_ln36_reg_433_pp0_iter2_reg = ap_const_lv1_0) and (m_axi_gmem_in_RVALID = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln36_fu_154_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln36_fu_154_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage0_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln36_reg_433_pp0_iter2_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((icmp_ln36_reg_433_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    gmem_in_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_gmem_in_RVALID, icmp_ln36_reg_433_pp0_iter2_reg, ap_block_pp0_stage0)
    begin
        if (((icmp_ln36_reg_433_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem_in_blk_n_R <= m_axi_gmem_in_RVALID;
        else 
            gmem_in_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_383_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_383_ce <= ap_const_logic_1;
        else 
            grp_fu_383_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_383_p0 <= grp_fu_383_p00(8 - 1 downto 0);
    grp_fu_383_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_1_fu_190_p3),16));
    grp_fu_383_p1 <= ap_const_lv16_E2(8 - 1 downto 0);
    grp_fu_383_p2 <= grp_fu_383_p20(8 - 1 downto 0);
    grp_fu_383_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_1_fu_313_p3),16));
    icmp_ln36_fu_154_p2 <= "1" when (indvar_flatten14_fu_94 = ap_const_lv18_24C00) else "0";
    icmp_ln37_fu_172_p2 <= "1" when (indvar_flatten_fu_86 = ap_const_lv10_2A0) else "0";
    icmp_ln38_fu_276_p2 <= "1" when (c_fu_78 = ap_const_lv2_3) else "0";
    indvars_iv_next52330_dup_fu_288_p2 <= std_logic_vector(unsigned(select_ln36_fu_257_p3) + unsigned(ap_const_lv8_1));
    indvars_iv_next52330_fu_248_p2 <= std_logic_vector(unsigned(x_fu_82) + unsigned(ap_const_lv8_1));
    indvars_iv_next52330_mid1_fu_307_p2 <= std_logic_vector(unsigned(select_ln36_fu_257_p3) + unsigned(ap_const_lv8_2));
    indvars_iv_next52333248_fu_184_p2 <= std_logic_vector(unsigned(y_fu_90) + unsigned(ap_const_lv8_1));
    indvars_iv_next52333_mid1_fu_178_p2 <= std_logic_vector(unsigned(y_fu_90) + unsigned(ap_const_lv8_2));
    m_axi_gmem_in_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_in_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_in_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_in_ARID <= ap_const_lv1_0;
    m_axi_gmem_in_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_in_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_in_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_in_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_in_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_in_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_in_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_in_ARVALID <= ap_const_logic_0;
    m_axi_gmem_in_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_in_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_in_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_in_AWID <= ap_const_lv1_0;
    m_axi_gmem_in_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_in_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_in_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_in_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_in_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_in_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_in_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_in_AWVALID <= ap_const_logic_0;
    m_axi_gmem_in_BREADY <= ap_const_logic_0;

    m_axi_gmem_in_RREADY_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln36_reg_433_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln36_reg_433_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem_in_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_in_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_in_WDATA <= ap_const_lv32_0;
    m_axi_gmem_in_WID <= ap_const_lv1_0;
    m_axi_gmem_in_WLAST <= ap_const_logic_0;
    m_axi_gmem_in_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_in_WUSER <= ap_const_lv1_0;
    m_axi_gmem_in_WVALID <= ap_const_logic_0;
    or_ln37_fu_294_p2 <= (icmp_ln37_reg_437_pp0_iter2_reg or and_ln36_fu_282_p2);
    p_shl_fu_352_p3 <= (grp_fu_383_p3 & ap_const_lv2_0);
    padded_address0 <= zext_ln39_4_fu_374_p1(18 - 1 downto 0);

    padded_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_ce0 <= ap_const_logic_1;
        else 
            padded_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_d0 <= gmem_in_addr_read_reg_460;

    padded_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_we0 <= ap_const_logic_1;
        else 
            padded_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln36_1_fu_190_p3 <= 
        indvars_iv_next52333_mid1_fu_178_p2 when (icmp_ln37_fu_172_p2(0) = '1') else 
        indvars_iv_next52333248_fu_184_p2;
    select_ln36_2_fu_264_p3 <= 
        ap_const_lv8_1 when (icmp_ln37_reg_437_pp0_iter2_reg(0) = '1') else 
        indvars_iv_next52330_fu_248_p2;
    select_ln36_3_fu_202_p3 <= 
        indvars_iv_next52333248_fu_184_p2 when (icmp_ln37_fu_172_p2(0) = '1') else 
        y_fu_90;
    select_ln36_fu_257_p3 <= 
        ap_const_lv8_0 when (icmp_ln37_reg_437_pp0_iter2_reg(0) = '1') else 
        x_fu_82;
    select_ln37_1_fu_313_p3 <= 
        indvars_iv_next52330_mid1_fu_307_p2 when (and_ln36_fu_282_p2(0) = '1') else 
        select_ln36_2_fu_264_p3;
    select_ln37_2_fu_325_p3 <= 
        indvars_iv_next52330_dup_fu_288_p2 when (and_ln36_fu_282_p2(0) = '1') else 
        select_ln36_fu_257_p3;
    select_ln37_3_fu_216_p3 <= 
        ap_const_lv10_1 when (icmp_ln37_fu_172_p2(0) = '1') else 
        add_ln37_fu_210_p2;
    select_ln37_fu_299_p3 <= 
        ap_const_lv2_0 when (or_ln37_fu_294_p2(0) = '1') else 
        c_fu_78;
    sub_ln39_fu_359_p2 <= std_logic_vector(unsigned(p_shl_fu_352_p3) - unsigned(zext_ln39_2_fu_349_p1));
    xor_ln36_fu_271_p2 <= (icmp_ln37_reg_437_pp0_iter2_reg xor ap_const_lv1_1);
    zext_ln39_2_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_383_p3),18));
    zext_ln39_3_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_reg_450),18));
    zext_ln39_4_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_1_fu_368_p2),64));
end behav;
