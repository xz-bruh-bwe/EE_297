// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module lane_seg_top_encoder0_c1_Pipeline_VITIS_LOOP_36_1_VITIS_LOOP_37_2_VITIS_LOOP_38_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_in_AWVALID,
        m_axi_gmem_in_AWREADY,
        m_axi_gmem_in_AWADDR,
        m_axi_gmem_in_AWID,
        m_axi_gmem_in_AWLEN,
        m_axi_gmem_in_AWSIZE,
        m_axi_gmem_in_AWBURST,
        m_axi_gmem_in_AWLOCK,
        m_axi_gmem_in_AWCACHE,
        m_axi_gmem_in_AWPROT,
        m_axi_gmem_in_AWQOS,
        m_axi_gmem_in_AWREGION,
        m_axi_gmem_in_AWUSER,
        m_axi_gmem_in_WVALID,
        m_axi_gmem_in_WREADY,
        m_axi_gmem_in_WDATA,
        m_axi_gmem_in_WSTRB,
        m_axi_gmem_in_WLAST,
        m_axi_gmem_in_WID,
        m_axi_gmem_in_WUSER,
        m_axi_gmem_in_ARVALID,
        m_axi_gmem_in_ARREADY,
        m_axi_gmem_in_ARADDR,
        m_axi_gmem_in_ARID,
        m_axi_gmem_in_ARLEN,
        m_axi_gmem_in_ARSIZE,
        m_axi_gmem_in_ARBURST,
        m_axi_gmem_in_ARLOCK,
        m_axi_gmem_in_ARCACHE,
        m_axi_gmem_in_ARPROT,
        m_axi_gmem_in_ARQOS,
        m_axi_gmem_in_ARREGION,
        m_axi_gmem_in_ARUSER,
        m_axi_gmem_in_RVALID,
        m_axi_gmem_in_RREADY,
        m_axi_gmem_in_RDATA,
        m_axi_gmem_in_RLAST,
        m_axi_gmem_in_RID,
        m_axi_gmem_in_RFIFONUM,
        m_axi_gmem_in_RUSER,
        m_axi_gmem_in_RRESP,
        m_axi_gmem_in_BVALID,
        m_axi_gmem_in_BREADY,
        m_axi_gmem_in_BRESP,
        m_axi_gmem_in_BID,
        m_axi_gmem_in_BUSER,
        sext_ln36,
        padded_address0,
        padded_ce0,
        padded_we0,
        padded_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_in_AWVALID;
input   m_axi_gmem_in_AWREADY;
output  [63:0] m_axi_gmem_in_AWADDR;
output  [0:0] m_axi_gmem_in_AWID;
output  [31:0] m_axi_gmem_in_AWLEN;
output  [2:0] m_axi_gmem_in_AWSIZE;
output  [1:0] m_axi_gmem_in_AWBURST;
output  [1:0] m_axi_gmem_in_AWLOCK;
output  [3:0] m_axi_gmem_in_AWCACHE;
output  [2:0] m_axi_gmem_in_AWPROT;
output  [3:0] m_axi_gmem_in_AWQOS;
output  [3:0] m_axi_gmem_in_AWREGION;
output  [0:0] m_axi_gmem_in_AWUSER;
output   m_axi_gmem_in_WVALID;
input   m_axi_gmem_in_WREADY;
output  [31:0] m_axi_gmem_in_WDATA;
output  [3:0] m_axi_gmem_in_WSTRB;
output   m_axi_gmem_in_WLAST;
output  [0:0] m_axi_gmem_in_WID;
output  [0:0] m_axi_gmem_in_WUSER;
output   m_axi_gmem_in_ARVALID;
input   m_axi_gmem_in_ARREADY;
output  [63:0] m_axi_gmem_in_ARADDR;
output  [0:0] m_axi_gmem_in_ARID;
output  [31:0] m_axi_gmem_in_ARLEN;
output  [2:0] m_axi_gmem_in_ARSIZE;
output  [1:0] m_axi_gmem_in_ARBURST;
output  [1:0] m_axi_gmem_in_ARLOCK;
output  [3:0] m_axi_gmem_in_ARCACHE;
output  [2:0] m_axi_gmem_in_ARPROT;
output  [3:0] m_axi_gmem_in_ARQOS;
output  [3:0] m_axi_gmem_in_ARREGION;
output  [0:0] m_axi_gmem_in_ARUSER;
input   m_axi_gmem_in_RVALID;
output   m_axi_gmem_in_RREADY;
input  [31:0] m_axi_gmem_in_RDATA;
input   m_axi_gmem_in_RLAST;
input  [0:0] m_axi_gmem_in_RID;
input  [8:0] m_axi_gmem_in_RFIFONUM;
input  [0:0] m_axi_gmem_in_RUSER;
input  [1:0] m_axi_gmem_in_RRESP;
input   m_axi_gmem_in_BVALID;
output   m_axi_gmem_in_BREADY;
input  [1:0] m_axi_gmem_in_BRESP;
input  [0:0] m_axi_gmem_in_BID;
input  [0:0] m_axi_gmem_in_BUSER;
input  [61:0] sext_ln36;
output  [17:0] padded_address0;
output   padded_ce0;
output   padded_we0;
output  [31:0] padded_d0;

reg ap_idle;
reg m_axi_gmem_in_RREADY;
reg padded_ce0;
reg padded_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg   [0:0] icmp_ln36_reg_433;
reg   [0:0] icmp_ln36_reg_433_pp0_iter2_reg;
reg    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln36_fu_154_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_in_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln37_fu_172_p2;
reg   [0:0] icmp_ln37_reg_437;
reg   [0:0] icmp_ln37_reg_437_pp0_iter2_reg;
wire   [1:0] select_ln37_fu_299_p3;
reg   [1:0] select_ln37_reg_450;
reg   [31:0] gmem_in_addr_read_reg_460;
reg    ap_condition_exit_pp0_iter3_stage0;
wire   [63:0] zext_ln39_4_fu_374_p1;
reg   [1:0] c_fu_78;
wire   [1:0] add_ln38_fu_333_p2;
wire    ap_loop_init;
reg   [7:0] x_fu_82;
wire   [7:0] select_ln37_2_fu_325_p3;
reg   [9:0] indvar_flatten_fu_86;
wire   [9:0] select_ln37_3_fu_216_p3;
reg   [7:0] y_fu_90;
wire   [7:0] select_ln36_3_fu_202_p3;
reg   [17:0] indvar_flatten14_fu_94;
wire   [17:0] add_ln36_fu_160_p2;
wire   [7:0] indvars_iv_next52333_mid1_fu_178_p2;
wire   [7:0] indvars_iv_next52333248_fu_184_p2;
wire   [7:0] select_ln36_1_fu_190_p3;
wire   [9:0] add_ln37_fu_210_p2;
wire   [7:0] indvars_iv_next52330_fu_248_p2;
wire   [0:0] icmp_ln38_fu_276_p2;
wire   [0:0] xor_ln36_fu_271_p2;
wire   [7:0] select_ln36_fu_257_p3;
wire   [0:0] and_ln36_fu_282_p2;
wire   [0:0] or_ln37_fu_294_p2;
wire   [7:0] indvars_iv_next52330_mid1_fu_307_p2;
wire   [7:0] select_ln36_2_fu_264_p3;
wire   [7:0] select_ln37_1_fu_313_p3;
wire   [7:0] indvars_iv_next52330_dup_fu_288_p2;
wire   [15:0] grp_fu_383_p3;
wire   [17:0] p_shl_fu_352_p3;
wire   [17:0] zext_ln39_2_fu_349_p1;
wire   [17:0] sub_ln39_fu_359_p2;
wire   [17:0] zext_ln39_3_fu_365_p1;
wire   [17:0] add_ln39_1_fu_368_p2;
wire   [7:0] grp_fu_383_p0;
wire   [7:0] grp_fu_383_p1;
wire   [7:0] grp_fu_383_p2;
reg    grp_fu_383_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [15:0] grp_fu_383_p00;
wire   [15:0] grp_fu_383_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

lane_seg_top_mac_muladd_8ns_8ns_8ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_8ns_8ns_16_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_383_p0),
    .din1(grp_fu_383_p1),
    .din2(grp_fu_383_p2),
    .ce(grp_fu_383_ce),
    .dout(grp_fu_383_p3)
);

lane_seg_top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter3_stage0)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            c_fu_78 <= 2'd0;
        end else if (((icmp_ln36_reg_433_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            c_fu_78 <= add_ln38_fu_333_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten14_fu_94 <= 18'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln36_fu_154_p2 == 1'd0))) begin
            indvar_flatten14_fu_94 <= add_ln36_fu_160_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_86 <= 10'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln36_fu_154_p2 == 1'd0))) begin
            indvar_flatten_fu_86 <= select_ln37_3_fu_216_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            x_fu_82 <= 8'd0;
        end else if (((icmp_ln36_reg_433_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            x_fu_82 <= select_ln37_2_fu_325_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            y_fu_90 <= 8'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln36_fu_154_p2 == 1'd0))) begin
            y_fu_90 <= select_ln36_3_fu_202_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln36_reg_433 <= icmp_ln36_fu_154_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln36_reg_433_pp0_iter2_reg <= icmp_ln36_reg_433;
        icmp_ln37_reg_437_pp0_iter2_reg <= icmp_ln37_reg_437;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln36_reg_433_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_in_addr_read_reg_460 <= m_axi_gmem_in_RDATA;
        select_ln37_reg_450 <= select_ln37_fu_299_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_fu_154_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln37_reg_437 <= icmp_ln37_fu_172_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_fu_154_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_reg_433_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter3_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_reg_433_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_in_blk_n_R = m_axi_gmem_in_RVALID;
    end else begin
        gmem_in_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_383_ce = 1'b1;
    end else begin
        grp_fu_383_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln36_reg_433_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_in_RREADY = 1'b1;
    end else begin
        m_axi_gmem_in_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        padded_ce0 = 1'b1;
    end else begin
        padded_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        padded_we0 = 1'b1;
    end else begin
        padded_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln36_fu_160_p2 = (indvar_flatten14_fu_94 + 18'd1);

assign add_ln37_fu_210_p2 = (indvar_flatten_fu_86 + 10'd1);

assign add_ln38_fu_333_p2 = (select_ln37_fu_299_p3 + 2'd1);

assign add_ln39_1_fu_368_p2 = (sub_ln39_fu_359_p2 + zext_ln39_3_fu_365_p1);

assign and_ln36_fu_282_p2 = (xor_ln36_fu_271_p2 & icmp_ln38_fu_276_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln36_reg_433_pp0_iter2_reg == 1'd0) & (m_axi_gmem_in_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln36_reg_433_pp0_iter2_reg == 1'd0) & (m_axi_gmem_in_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter3 = ((icmp_ln36_reg_433_pp0_iter2_reg == 1'd0) & (m_axi_gmem_in_RVALID == 1'b0));
end

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign grp_fu_383_p0 = grp_fu_383_p00;

assign grp_fu_383_p00 = select_ln36_1_fu_190_p3;

assign grp_fu_383_p1 = 16'd226;

assign grp_fu_383_p2 = grp_fu_383_p20;

assign grp_fu_383_p20 = select_ln37_1_fu_313_p3;

assign icmp_ln36_fu_154_p2 = ((indvar_flatten14_fu_94 == 18'd150528) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_172_p2 = ((indvar_flatten_fu_86 == 10'd672) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_276_p2 = ((c_fu_78 == 2'd3) ? 1'b1 : 1'b0);

assign indvars_iv_next52330_dup_fu_288_p2 = (select_ln36_fu_257_p3 + 8'd1);

assign indvars_iv_next52330_fu_248_p2 = (x_fu_82 + 8'd1);

assign indvars_iv_next52330_mid1_fu_307_p2 = (select_ln36_fu_257_p3 + 8'd2);

assign indvars_iv_next52333248_fu_184_p2 = (y_fu_90 + 8'd1);

assign indvars_iv_next52333_mid1_fu_178_p2 = (y_fu_90 + 8'd2);

assign m_axi_gmem_in_ARADDR = 64'd0;

assign m_axi_gmem_in_ARBURST = 2'd0;

assign m_axi_gmem_in_ARCACHE = 4'd0;

assign m_axi_gmem_in_ARID = 1'd0;

assign m_axi_gmem_in_ARLEN = 32'd0;

assign m_axi_gmem_in_ARLOCK = 2'd0;

assign m_axi_gmem_in_ARPROT = 3'd0;

assign m_axi_gmem_in_ARQOS = 4'd0;

assign m_axi_gmem_in_ARREGION = 4'd0;

assign m_axi_gmem_in_ARSIZE = 3'd0;

assign m_axi_gmem_in_ARUSER = 1'd0;

assign m_axi_gmem_in_ARVALID = 1'b0;

assign m_axi_gmem_in_AWADDR = 64'd0;

assign m_axi_gmem_in_AWBURST = 2'd0;

assign m_axi_gmem_in_AWCACHE = 4'd0;

assign m_axi_gmem_in_AWID = 1'd0;

assign m_axi_gmem_in_AWLEN = 32'd0;

assign m_axi_gmem_in_AWLOCK = 2'd0;

assign m_axi_gmem_in_AWPROT = 3'd0;

assign m_axi_gmem_in_AWQOS = 4'd0;

assign m_axi_gmem_in_AWREGION = 4'd0;

assign m_axi_gmem_in_AWSIZE = 3'd0;

assign m_axi_gmem_in_AWUSER = 1'd0;

assign m_axi_gmem_in_AWVALID = 1'b0;

assign m_axi_gmem_in_BREADY = 1'b0;

assign m_axi_gmem_in_WDATA = 32'd0;

assign m_axi_gmem_in_WID = 1'd0;

assign m_axi_gmem_in_WLAST = 1'b0;

assign m_axi_gmem_in_WSTRB = 4'd0;

assign m_axi_gmem_in_WUSER = 1'd0;

assign m_axi_gmem_in_WVALID = 1'b0;

assign or_ln37_fu_294_p2 = (icmp_ln37_reg_437_pp0_iter2_reg | and_ln36_fu_282_p2);

assign p_shl_fu_352_p3 = {{grp_fu_383_p3}, {2'd0}};

assign padded_address0 = zext_ln39_4_fu_374_p1;

assign padded_d0 = gmem_in_addr_read_reg_460;

assign select_ln36_1_fu_190_p3 = ((icmp_ln37_fu_172_p2[0:0] == 1'b1) ? indvars_iv_next52333_mid1_fu_178_p2 : indvars_iv_next52333248_fu_184_p2);

assign select_ln36_2_fu_264_p3 = ((icmp_ln37_reg_437_pp0_iter2_reg[0:0] == 1'b1) ? 8'd1 : indvars_iv_next52330_fu_248_p2);

assign select_ln36_3_fu_202_p3 = ((icmp_ln37_fu_172_p2[0:0] == 1'b1) ? indvars_iv_next52333248_fu_184_p2 : y_fu_90);

assign select_ln36_fu_257_p3 = ((icmp_ln37_reg_437_pp0_iter2_reg[0:0] == 1'b1) ? 8'd0 : x_fu_82);

assign select_ln37_1_fu_313_p3 = ((and_ln36_fu_282_p2[0:0] == 1'b1) ? indvars_iv_next52330_mid1_fu_307_p2 : select_ln36_2_fu_264_p3);

assign select_ln37_2_fu_325_p3 = ((and_ln36_fu_282_p2[0:0] == 1'b1) ? indvars_iv_next52330_dup_fu_288_p2 : select_ln36_fu_257_p3);

assign select_ln37_3_fu_216_p3 = ((icmp_ln37_fu_172_p2[0:0] == 1'b1) ? 10'd1 : add_ln37_fu_210_p2);

assign select_ln37_fu_299_p3 = ((or_ln37_fu_294_p2[0:0] == 1'b1) ? 2'd0 : c_fu_78);

assign sub_ln39_fu_359_p2 = (p_shl_fu_352_p3 - zext_ln39_2_fu_349_p1);

assign xor_ln36_fu_271_p2 = (icmp_ln37_reg_437_pp0_iter2_reg ^ 1'd1);

assign zext_ln39_2_fu_349_p1 = grp_fu_383_p3;

assign zext_ln39_3_fu_365_p1 = select_ln37_reg_450;

assign zext_ln39_4_fu_374_p1 = add_ln39_1_fu_368_p2;

endmodule //lane_seg_top_encoder0_c1_Pipeline_VITIS_LOOP_36_1_VITIS_LOOP_37_2_VITIS_LOOP_38_3
