-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lane_seg_top_encoder0_c1_Pipeline_VITIS_LOOP_36_1_VITIS_LOOP_37_2_VITIS_LOOP_38_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_in_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_in_AWREADY : IN STD_LOGIC;
    m_axi_gmem_in_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_in_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_in_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_in_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_in_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_WVALID : OUT STD_LOGIC;
    m_axi_gmem_in_WREADY : IN STD_LOGIC;
    m_axi_gmem_in_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_in_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_WLAST : OUT STD_LOGIC;
    m_axi_gmem_in_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_in_ARREADY : IN STD_LOGIC;
    m_axi_gmem_in_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_in_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_in_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_in_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_in_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_in_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_RVALID : IN STD_LOGIC;
    m_axi_gmem_in_RREADY : OUT STD_LOGIC;
    m_axi_gmem_in_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_in_RLAST : IN STD_LOGIC;
    m_axi_gmem_in_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_in_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_BVALID : IN STD_LOGIC;
    m_axi_gmem_in_BREADY : OUT STD_LOGIC;
    m_axi_gmem_in_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_in_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_in_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln36 : IN STD_LOGIC_VECTOR (61 downto 0);
    padded_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_ce0 : OUT STD_LOGIC;
    padded_we0 : OUT STD_LOGIC;
    padded_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_1_ce0 : OUT STD_LOGIC;
    padded_1_we0 : OUT STD_LOGIC;
    padded_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_2_ce0 : OUT STD_LOGIC;
    padded_2_we0 : OUT STD_LOGIC;
    padded_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_3_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_3_ce0 : OUT STD_LOGIC;
    padded_3_we0 : OUT STD_LOGIC;
    padded_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_4_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_4_ce0 : OUT STD_LOGIC;
    padded_4_we0 : OUT STD_LOGIC;
    padded_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_5_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_5_ce0 : OUT STD_LOGIC;
    padded_5_we0 : OUT STD_LOGIC;
    padded_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_6_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_6_ce0 : OUT STD_LOGIC;
    padded_6_we0 : OUT STD_LOGIC;
    padded_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_7_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_7_ce0 : OUT STD_LOGIC;
    padded_7_we0 : OUT STD_LOGIC;
    padded_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_8_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_8_ce0 : OUT STD_LOGIC;
    padded_8_we0 : OUT STD_LOGIC;
    padded_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_9_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_9_ce0 : OUT STD_LOGIC;
    padded_9_we0 : OUT STD_LOGIC;
    padded_9_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_10_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_10_ce0 : OUT STD_LOGIC;
    padded_10_we0 : OUT STD_LOGIC;
    padded_10_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_11_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_11_ce0 : OUT STD_LOGIC;
    padded_11_we0 : OUT STD_LOGIC;
    padded_11_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_12_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_12_ce0 : OUT STD_LOGIC;
    padded_12_we0 : OUT STD_LOGIC;
    padded_12_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_13_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_13_ce0 : OUT STD_LOGIC;
    padded_13_we0 : OUT STD_LOGIC;
    padded_13_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_14_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_14_ce0 : OUT STD_LOGIC;
    padded_14_we0 : OUT STD_LOGIC;
    padded_14_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_15_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_15_ce0 : OUT STD_LOGIC;
    padded_15_we0 : OUT STD_LOGIC;
    padded_15_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_16_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_16_ce0 : OUT STD_LOGIC;
    padded_16_we0 : OUT STD_LOGIC;
    padded_16_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_17_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_17_ce0 : OUT STD_LOGIC;
    padded_17_we0 : OUT STD_LOGIC;
    padded_17_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_18_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_18_ce0 : OUT STD_LOGIC;
    padded_18_we0 : OUT STD_LOGIC;
    padded_18_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_19_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_19_ce0 : OUT STD_LOGIC;
    padded_19_we0 : OUT STD_LOGIC;
    padded_19_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_20_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_20_ce0 : OUT STD_LOGIC;
    padded_20_we0 : OUT STD_LOGIC;
    padded_20_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_21_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_21_ce0 : OUT STD_LOGIC;
    padded_21_we0 : OUT STD_LOGIC;
    padded_21_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_22_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_22_ce0 : OUT STD_LOGIC;
    padded_22_we0 : OUT STD_LOGIC;
    padded_22_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_23_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_23_ce0 : OUT STD_LOGIC;
    padded_23_we0 : OUT STD_LOGIC;
    padded_23_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_24_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_24_ce0 : OUT STD_LOGIC;
    padded_24_we0 : OUT STD_LOGIC;
    padded_24_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_25_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_25_ce0 : OUT STD_LOGIC;
    padded_25_we0 : OUT STD_LOGIC;
    padded_25_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    padded_26_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    padded_26_ce0 : OUT STD_LOGIC;
    padded_26_we0 : OUT STD_LOGIC;
    padded_26_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of lane_seg_top_encoder0_c1_Pipeline_VITIS_LOOP_36_1_VITIS_LOOP_37_2_VITIS_LOOP_38_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv18_24C00 : STD_LOGIC_VECTOR (17 downto 0) := "100100110000000000";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv10_2A0 : STD_LOGIC_VECTOR (9 downto 0) := "1010100000";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv17_156 : STD_LOGIC_VECTOR (16 downto 0) := "00000000101010110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv13_4C : STD_LOGIC_VECTOR (12 downto 0) := "0000001001100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal icmp_ln36_reg_938 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_938_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln36_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_in_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal x_1_reg_932 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln36_reg_938_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_938_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_938_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_938_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_938_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_938_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_938_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_938_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_938_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_942 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_942_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_942_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_942_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_942_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_942_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_942_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_942_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_942_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_942_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_942_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln36_fu_588_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln36_reg_948 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln36_2_fu_640_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln36_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_reg_963 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_reg_963_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_reg_963_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_reg_963_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_reg_963_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_reg_963_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_reg_963_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_reg_963_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_reg_963_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_reg_963_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_reg_963_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvars_iv_next1473_dup_fu_672_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln37_fu_684_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln37_reg_974 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln37_reg_974_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln37_reg_974_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln37_reg_974_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln37_reg_974_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln37_reg_974_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln37_reg_974_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln37_reg_974_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln37_reg_974_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln37_reg_974_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln37_reg_974_pp0_iter11_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln37_1_fu_808_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln37_1_reg_978 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_884_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln39_reg_988 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln39_reg_988_pp0_iter5_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln39_reg_988_pp0_iter6_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln39_reg_988_pp0_iter7_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln39_reg_988_pp0_iter8_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln39_reg_988_pp0_iter9_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln39_reg_988_pp0_iter10_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln39_reg_988_pp0_iter11_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln39_fu_824_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln39_reg_993 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln39_1_fu_843_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal c_fu_138 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln38_fu_706_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal x_fu_142 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln37_3_fu_698_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_fu_146 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln37_4_fu_718_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_fu_150 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten47_fu_154 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln36_fu_570_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal trunc_ln36_fu_832_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln37_2_fu_877_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_558_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvars_iv_next1476_mid1_fu_596_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvars_iv_next14763620_fu_602_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln36_1_fu_608_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln36_fu_620_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln36_fu_620_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln36_fu_620_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_fu_626_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_648_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_648_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln38_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln36_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln37_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_692_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln37_fu_712_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvars_iv_next1473_fu_751_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln38_fu_760_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln38_fu_760_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln38_fu_760_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal udiv_ln_cast_fu_766_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvars_iv_next1473_mid1_fu_783_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln38_1_fu_792_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln38_1_fu_792_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln38_1_fu_792_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal udiv_ln38_mid1_cast_fu_798_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln36_3_fu_776_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_558_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_648_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln39_fu_828_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_692_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln39_1_fu_873_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln36_4_fu_836_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_884_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_884_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_884_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_558_ce : STD_LOGIC;
    signal grp_fu_648_ce : STD_LOGIC;
    signal grp_fu_692_ce : STD_LOGIC;
    signal grp_fu_884_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_884_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_884_p20 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln36_fu_620_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln38_1_fu_792_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln38_fu_760_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component lane_seg_top_urem_8ns_3ns_2_12_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component lane_seg_top_mul_8ns_10ns_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component lane_seg_top_mac_muladd_7ns_7ns_7ns_13_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component lane_seg_top_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    urem_8ns_3ns_2_12_1_U36 : component lane_seg_top_urem_8ns_3ns_2_12_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 8,
        din1_WIDTH => 3,
        dout_WIDTH => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x_fu_142,
        din1 => grp_fu_558_p1,
        ce => grp_fu_558_ce,
        dout => grp_fu_558_p2);

    mul_8ns_10ns_17_1_1_U37 : component lane_seg_top_mul_8ns_10ns_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        dout_WIDTH => 17)
    port map (
        din0 => mul_ln36_fu_620_p0,
        din1 => mul_ln36_fu_620_p1,
        dout => mul_ln36_fu_620_p2);

    urem_8ns_3ns_2_12_1_U38 : component lane_seg_top_urem_8ns_3ns_2_12_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 8,
        din1_WIDTH => 3,
        dout_WIDTH => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_648_p0,
        din1 => grp_fu_648_p1,
        ce => grp_fu_648_ce,
        dout => grp_fu_648_p2);

    urem_8ns_3ns_2_12_1_U39 : component lane_seg_top_urem_8ns_3ns_2_12_1
    generic map (
        ID => 1,
        NUM_STAGE => 12,
        din0_WIDTH => 8,
        din1_WIDTH => 3,
        dout_WIDTH => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => indvars_iv_next1473_dup_fu_672_p2,
        din1 => grp_fu_692_p1,
        ce => grp_fu_692_ce,
        dout => grp_fu_692_p2);

    mul_8ns_10ns_17_1_1_U40 : component lane_seg_top_mul_8ns_10ns_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        dout_WIDTH => 17)
    port map (
        din0 => mul_ln38_fu_760_p0,
        din1 => mul_ln38_fu_760_p1,
        dout => mul_ln38_fu_760_p2);

    mul_8ns_10ns_17_1_1_U41 : component lane_seg_top_mul_8ns_10ns_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        dout_WIDTH => 17)
    port map (
        din0 => mul_ln38_1_fu_792_p0,
        din1 => mul_ln38_1_fu_792_p1,
        dout => mul_ln38_1_fu_792_p2);

    mac_muladd_7ns_7ns_7ns_13_4_1_U42 : component lane_seg_top_mac_muladd_7ns_7ns_7ns_13_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 7,
        din1_WIDTH => 7,
        din2_WIDTH => 7,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_884_p0,
        din1 => grp_fu_884_p1,
        din2 => grp_fu_884_p2,
        ce => grp_fu_884_ce,
        dout => grp_fu_884_p3);

    flow_control_loop_pipe_sequential_init_U : component lane_seg_top_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter12_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter11_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
            end if; 
        end if;
    end process;

    c_fu_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    c_fu_138 <= ap_const_lv2_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln36_fu_564_p2 = ap_const_lv1_0))) then 
                    c_fu_138 <= add_ln38_fu_706_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten47_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten47_fu_154 <= ap_const_lv18_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln36_fu_564_p2 = ap_const_lv1_0))) then 
                    indvar_flatten47_fu_154 <= add_ln36_fu_570_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_146 <= ap_const_lv10_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln36_fu_564_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_146 <= select_ln37_4_fu_718_p3;
                end if;
            end if; 
        end if;
    end process;

    x_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_142 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln36_fu_564_p2 = ap_const_lv1_0))) then 
                    x_fu_142 <= select_ln37_3_fu_698_p3;
                end if;
            end if; 
        end if;
    end process;

    y_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_150 <= ap_const_lv8_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln36_fu_564_p2 = ap_const_lv1_0))) then 
                    y_fu_150 <= select_ln36_2_fu_640_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln36_reg_938_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln39_reg_988 <= grp_fu_884_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln39_reg_988_pp0_iter10_reg <= add_ln39_reg_988_pp0_iter9_reg;
                add_ln39_reg_988_pp0_iter11_reg <= add_ln39_reg_988_pp0_iter10_reg;
                add_ln39_reg_988_pp0_iter5_reg <= add_ln39_reg_988;
                add_ln39_reg_988_pp0_iter6_reg <= add_ln39_reg_988_pp0_iter5_reg;
                add_ln39_reg_988_pp0_iter7_reg <= add_ln39_reg_988_pp0_iter6_reg;
                add_ln39_reg_988_pp0_iter8_reg <= add_ln39_reg_988_pp0_iter7_reg;
                add_ln39_reg_988_pp0_iter9_reg <= add_ln39_reg_988_pp0_iter8_reg;
                and_ln36_reg_963_pp0_iter10_reg <= and_ln36_reg_963_pp0_iter9_reg;
                and_ln36_reg_963_pp0_iter11_reg <= and_ln36_reg_963_pp0_iter10_reg;
                and_ln36_reg_963_pp0_iter2_reg <= and_ln36_reg_963;
                and_ln36_reg_963_pp0_iter3_reg <= and_ln36_reg_963_pp0_iter2_reg;
                and_ln36_reg_963_pp0_iter4_reg <= and_ln36_reg_963_pp0_iter3_reg;
                and_ln36_reg_963_pp0_iter5_reg <= and_ln36_reg_963_pp0_iter4_reg;
                and_ln36_reg_963_pp0_iter6_reg <= and_ln36_reg_963_pp0_iter5_reg;
                and_ln36_reg_963_pp0_iter7_reg <= and_ln36_reg_963_pp0_iter6_reg;
                and_ln36_reg_963_pp0_iter8_reg <= and_ln36_reg_963_pp0_iter7_reg;
                and_ln36_reg_963_pp0_iter9_reg <= and_ln36_reg_963_pp0_iter8_reg;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln36_reg_938_pp0_iter10_reg <= icmp_ln36_reg_938_pp0_iter9_reg;
                icmp_ln36_reg_938_pp0_iter11_reg <= icmp_ln36_reg_938_pp0_iter10_reg;
                icmp_ln36_reg_938_pp0_iter2_reg <= icmp_ln36_reg_938;
                icmp_ln36_reg_938_pp0_iter3_reg <= icmp_ln36_reg_938_pp0_iter2_reg;
                icmp_ln36_reg_938_pp0_iter4_reg <= icmp_ln36_reg_938_pp0_iter3_reg;
                icmp_ln36_reg_938_pp0_iter5_reg <= icmp_ln36_reg_938_pp0_iter4_reg;
                icmp_ln36_reg_938_pp0_iter6_reg <= icmp_ln36_reg_938_pp0_iter5_reg;
                icmp_ln36_reg_938_pp0_iter7_reg <= icmp_ln36_reg_938_pp0_iter6_reg;
                icmp_ln36_reg_938_pp0_iter8_reg <= icmp_ln36_reg_938_pp0_iter7_reg;
                icmp_ln36_reg_938_pp0_iter9_reg <= icmp_ln36_reg_938_pp0_iter8_reg;
                icmp_ln37_reg_942_pp0_iter10_reg <= icmp_ln37_reg_942_pp0_iter9_reg;
                icmp_ln37_reg_942_pp0_iter11_reg <= icmp_ln37_reg_942_pp0_iter10_reg;
                icmp_ln37_reg_942_pp0_iter2_reg <= icmp_ln37_reg_942;
                icmp_ln37_reg_942_pp0_iter3_reg <= icmp_ln37_reg_942_pp0_iter2_reg;
                icmp_ln37_reg_942_pp0_iter4_reg <= icmp_ln37_reg_942_pp0_iter3_reg;
                icmp_ln37_reg_942_pp0_iter5_reg <= icmp_ln37_reg_942_pp0_iter4_reg;
                icmp_ln37_reg_942_pp0_iter6_reg <= icmp_ln37_reg_942_pp0_iter5_reg;
                icmp_ln37_reg_942_pp0_iter7_reg <= icmp_ln37_reg_942_pp0_iter6_reg;
                icmp_ln37_reg_942_pp0_iter8_reg <= icmp_ln37_reg_942_pp0_iter7_reg;
                icmp_ln37_reg_942_pp0_iter9_reg <= icmp_ln37_reg_942_pp0_iter8_reg;
                select_ln37_reg_974_pp0_iter10_reg <= select_ln37_reg_974_pp0_iter9_reg;
                select_ln37_reg_974_pp0_iter11_reg <= select_ln37_reg_974_pp0_iter10_reg;
                select_ln37_reg_974_pp0_iter2_reg <= select_ln37_reg_974;
                select_ln37_reg_974_pp0_iter3_reg <= select_ln37_reg_974_pp0_iter2_reg;
                select_ln37_reg_974_pp0_iter4_reg <= select_ln37_reg_974_pp0_iter3_reg;
                select_ln37_reg_974_pp0_iter5_reg <= select_ln37_reg_974_pp0_iter4_reg;
                select_ln37_reg_974_pp0_iter6_reg <= select_ln37_reg_974_pp0_iter5_reg;
                select_ln37_reg_974_pp0_iter7_reg <= select_ln37_reg_974_pp0_iter6_reg;
                select_ln37_reg_974_pp0_iter8_reg <= select_ln37_reg_974_pp0_iter7_reg;
                select_ln37_reg_974_pp0_iter9_reg <= select_ln37_reg_974_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln36_fu_564_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln36_reg_963 <= and_ln36_fu_666_p2;
                icmp_ln37_reg_942 <= icmp_ln37_fu_582_p2;
                select_ln36_reg_948 <= select_ln36_fu_588_p3;
                select_ln37_reg_974 <= select_ln37_fu_684_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln36_reg_938 <= icmp_ln36_fu_564_p2;
                x_1_reg_932 <= x_fu_142;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_reg_938_pp0_iter10_reg = ap_const_lv1_0))) then
                bitcast_ln39_reg_993 <= bitcast_ln39_fu_824_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_reg_938 = ap_const_lv1_0))) then
                select_ln37_1_reg_978 <= select_ln37_1_fu_808_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln36_fu_570_p2 <= std_logic_vector(unsigned(indvar_flatten47_fu_154) + unsigned(ap_const_lv18_1));
    add_ln37_fu_712_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_146) + unsigned(ap_const_lv10_1));
    add_ln38_fu_706_p2 <= std_logic_vector(unsigned(select_ln37_fu_684_p3) + unsigned(ap_const_lv2_1));
    and_ln36_fu_666_p2 <= (xor_ln36_fu_654_p2 and icmp_ln38_fu_660_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter11, m_axi_gmem_in_RVALID, icmp_ln36_reg_938_pp0_iter10_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (icmp_ln36_reg_938_pp0_iter10_reg = ap_const_lv1_0) and (m_axi_gmem_in_RVALID = ap_const_logic_0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter11, m_axi_gmem_in_RVALID, icmp_ln36_reg_938_pp0_iter10_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (icmp_ln36_reg_938_pp0_iter10_reg = ap_const_lv1_0) and (m_axi_gmem_in_RVALID = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage0_iter11_assign_proc : process(m_axi_gmem_in_RVALID, icmp_ln36_reg_938_pp0_iter10_reg)
    begin
                ap_block_state12_pp0_stage0_iter11 <= ((icmp_ln36_reg_938_pp0_iter10_reg = ap_const_lv1_0) and (m_axi_gmem_in_RVALID = ap_const_logic_0));
    end process;

        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln36_fu_564_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln36_fu_564_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter12_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter12_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln39_fu_824_p1 <= m_axi_gmem_in_RDATA;

    gmem_in_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter11, m_axi_gmem_in_RVALID, icmp_ln36_reg_938_pp0_iter10_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln36_reg_938_pp0_iter10_reg = ap_const_lv1_0))) then 
            gmem_in_blk_n_R <= m_axi_gmem_in_RVALID;
        else 
            gmem_in_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_558_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_558_ce <= ap_const_logic_1;
        else 
            grp_fu_558_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_558_p1 <= ap_const_lv8_3(3 - 1 downto 0);

    grp_fu_648_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_648_ce <= ap_const_logic_1;
        else 
            grp_fu_648_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_648_p0 <= 
        indvars_iv_next14763620_fu_602_p2 when (icmp_ln37_fu_582_p2(0) = '1') else 
        y_fu_150;
    grp_fu_648_p1 <= ap_const_lv8_3(3 - 1 downto 0);

    grp_fu_692_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_692_ce <= ap_const_logic_1;
        else 
            grp_fu_692_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_692_p1 <= ap_const_lv8_3(3 - 1 downto 0);

    grp_fu_884_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_884_ce <= ap_const_logic_1;
        else 
            grp_fu_884_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_884_p0 <= grp_fu_884_p00(7 - 1 downto 0);
    grp_fu_884_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_626_p4),13));
    grp_fu_884_p1 <= ap_const_lv13_4C(7 - 1 downto 0);
    grp_fu_884_p2 <= grp_fu_884_p20(7 - 1 downto 0);
    grp_fu_884_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_1_reg_978),13));
    icmp_ln36_fu_564_p2 <= "1" when (indvar_flatten47_fu_154 = ap_const_lv18_24C00) else "0";
    icmp_ln37_fu_582_p2 <= "1" when (indvar_flatten_fu_146 = ap_const_lv10_2A0) else "0";
    icmp_ln38_fu_660_p2 <= "1" when (c_fu_138 = ap_const_lv2_3) else "0";
    indvars_iv_next1473_dup_fu_672_p2 <= std_logic_vector(unsigned(select_ln36_fu_588_p3) + unsigned(ap_const_lv8_1));
    indvars_iv_next1473_fu_751_p2 <= std_logic_vector(unsigned(x_1_reg_932) + unsigned(ap_const_lv8_1));
    indvars_iv_next1473_mid1_fu_783_p2 <= std_logic_vector(unsigned(select_ln36_reg_948) + unsigned(ap_const_lv8_2));
    indvars_iv_next14763620_fu_602_p2 <= std_logic_vector(unsigned(y_fu_150) + unsigned(ap_const_lv8_1));
    indvars_iv_next1476_mid1_fu_596_p2 <= std_logic_vector(unsigned(y_fu_150) + unsigned(ap_const_lv8_2));
    m_axi_gmem_in_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_in_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_in_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_in_ARID <= ap_const_lv1_0;
    m_axi_gmem_in_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_in_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_in_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_in_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_in_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_in_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_in_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_in_ARVALID <= ap_const_logic_0;
    m_axi_gmem_in_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_in_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_in_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_in_AWID <= ap_const_lv1_0;
    m_axi_gmem_in_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_in_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_in_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_in_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_in_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_in_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_in_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_in_AWVALID <= ap_const_logic_0;
    m_axi_gmem_in_BREADY <= ap_const_logic_0;

    m_axi_gmem_in_RREADY_assign_proc : process(ap_enable_reg_pp0_iter11, icmp_ln36_reg_938_pp0_iter10_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln36_reg_938_pp0_iter10_reg = ap_const_lv1_0))) then 
            m_axi_gmem_in_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_in_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_in_WDATA <= ap_const_lv32_0;
    m_axi_gmem_in_WID <= ap_const_lv1_0;
    m_axi_gmem_in_WLAST <= ap_const_logic_0;
    m_axi_gmem_in_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_in_WUSER <= ap_const_lv1_0;
    m_axi_gmem_in_WVALID <= ap_const_logic_0;
    mul_ln36_fu_620_p0 <= mul_ln36_fu_620_p00(8 - 1 downto 0);
    mul_ln36_fu_620_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_1_fu_608_p3),17));
    mul_ln36_fu_620_p1 <= ap_const_lv17_156(10 - 1 downto 0);
    mul_ln38_1_fu_792_p0 <= mul_ln38_1_fu_792_p00(8 - 1 downto 0);
    mul_ln38_1_fu_792_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_next1473_mid1_fu_783_p2),17));
    mul_ln38_1_fu_792_p1 <= ap_const_lv17_156(10 - 1 downto 0);
    mul_ln38_fu_760_p0 <= mul_ln38_fu_760_p00(8 - 1 downto 0);
    mul_ln38_fu_760_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_next1473_fu_751_p2),17));
    mul_ln38_fu_760_p1 <= ap_const_lv17_156(10 - 1 downto 0);
    or_ln37_fu_678_p2 <= (icmp_ln37_fu_582_p2 or and_ln36_fu_666_p2);
    padded_10_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_10_ce0 <= ap_const_logic_1;
        else 
            padded_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_10_d0 <= bitcast_ln39_reg_993;

    padded_10_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if ((not((select_ln37_2_fu_877_p3 = ap_const_lv2_1)) and not((select_ln37_2_fu_877_p3 = ap_const_lv2_0)) and (trunc_ln36_fu_832_p1 = ap_const_lv2_0) and (select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_1) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_10_we0 <= ap_const_logic_1;
        else 
            padded_10_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_11_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_11_ce0 <= ap_const_logic_1;
        else 
            padded_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_11_d0 <= bitcast_ln39_reg_993;

    padded_11_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if ((not((select_ln37_2_fu_877_p3 = ap_const_lv2_1)) and not((select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_0)) and not((select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_1)) and not((select_ln37_2_fu_877_p3 = ap_const_lv2_0)) and (trunc_ln36_fu_832_p1 = ap_const_lv2_0) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_11_we0 <= ap_const_logic_1;
        else 
            padded_11_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_12_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_12_ce0 <= ap_const_logic_1;
        else 
            padded_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_12_d0 <= bitcast_ln39_reg_993;

    padded_12_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if (((select_ln37_2_fu_877_p3 = ap_const_lv2_0) and (trunc_ln36_fu_832_p1 = ap_const_lv2_0) and (select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_0) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_12_we0 <= ap_const_logic_1;
        else 
            padded_12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_13_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_13_ce0 <= ap_const_logic_1;
        else 
            padded_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_13_d0 <= bitcast_ln39_reg_993;

    padded_13_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if (((select_ln37_2_fu_877_p3 = ap_const_lv2_0) and (trunc_ln36_fu_832_p1 = ap_const_lv2_0) and (select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_1) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_13_we0 <= ap_const_logic_1;
        else 
            padded_13_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_14_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_14_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_14_ce0 <= ap_const_logic_1;
        else 
            padded_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_14_d0 <= bitcast_ln39_reg_993;

    padded_14_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if ((not((select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_0)) and not((select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_1)) and (select_ln37_2_fu_877_p3 = ap_const_lv2_0) and (trunc_ln36_fu_832_p1 = ap_const_lv2_0) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_14_we0 <= ap_const_logic_1;
        else 
            padded_14_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_15_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_15_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_15_ce0 <= ap_const_logic_1;
        else 
            padded_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_15_d0 <= bitcast_ln39_reg_993;

    padded_15_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if (((select_ln37_2_fu_877_p3 = ap_const_lv2_1) and (trunc_ln36_fu_832_p1 = ap_const_lv2_0) and (select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_0) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_15_we0 <= ap_const_logic_1;
        else 
            padded_15_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_16_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_16_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_16_ce0 <= ap_const_logic_1;
        else 
            padded_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_16_d0 <= bitcast_ln39_reg_993;

    padded_16_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if (((select_ln37_2_fu_877_p3 = ap_const_lv2_1) and (trunc_ln36_fu_832_p1 = ap_const_lv2_0) and (select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_1) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_16_we0 <= ap_const_logic_1;
        else 
            padded_16_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_17_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_17_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_17_ce0 <= ap_const_logic_1;
        else 
            padded_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_17_d0 <= bitcast_ln39_reg_993;

    padded_17_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if ((not((select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_0)) and not((select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_1)) and (select_ln37_2_fu_877_p3 = ap_const_lv2_1) and (trunc_ln36_fu_832_p1 = ap_const_lv2_0) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_17_we0 <= ap_const_logic_1;
        else 
            padded_17_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_18_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_18_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_18_ce0 <= ap_const_logic_1;
        else 
            padded_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_18_d0 <= bitcast_ln39_reg_993;

    padded_18_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if ((not((select_ln37_2_fu_877_p3 = ap_const_lv2_1)) and not((select_ln37_2_fu_877_p3 = ap_const_lv2_0)) and (trunc_ln36_fu_832_p1 = ap_const_lv2_1) and (select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_0) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_18_we0 <= ap_const_logic_1;
        else 
            padded_18_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_19_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_19_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_19_ce0 <= ap_const_logic_1;
        else 
            padded_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_19_d0 <= bitcast_ln39_reg_993;

    padded_19_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if ((not((select_ln37_2_fu_877_p3 = ap_const_lv2_1)) and not((select_ln37_2_fu_877_p3 = ap_const_lv2_0)) and (trunc_ln36_fu_832_p1 = ap_const_lv2_1) and (select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_1) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_19_we0 <= ap_const_logic_1;
        else 
            padded_19_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_1_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_1_ce0 <= ap_const_logic_1;
        else 
            padded_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_1_d0 <= bitcast_ln39_reg_993;

    padded_1_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if ((not((select_ln37_2_fu_877_p3 = ap_const_lv2_1)) and not((select_ln37_2_fu_877_p3 = ap_const_lv2_0)) and not((trunc_ln36_fu_832_p1 = ap_const_lv2_0)) and not((trunc_ln36_fu_832_p1 = ap_const_lv2_1)) and (select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_1) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_1_we0 <= ap_const_logic_1;
        else 
            padded_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_20_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_20_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_20_ce0 <= ap_const_logic_1;
        else 
            padded_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_20_d0 <= bitcast_ln39_reg_993;

    padded_20_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if ((not((select_ln37_2_fu_877_p3 = ap_const_lv2_1)) and not((select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_0)) and not((select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_1)) and not((select_ln37_2_fu_877_p3 = ap_const_lv2_0)) and (trunc_ln36_fu_832_p1 = ap_const_lv2_1) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_20_we0 <= ap_const_logic_1;
        else 
            padded_20_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_21_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_21_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_21_ce0 <= ap_const_logic_1;
        else 
            padded_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_21_d0 <= bitcast_ln39_reg_993;

    padded_21_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if (((select_ln37_2_fu_877_p3 = ap_const_lv2_0) and (trunc_ln36_fu_832_p1 = ap_const_lv2_1) and (select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_0) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_21_we0 <= ap_const_logic_1;
        else 
            padded_21_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_22_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_22_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_22_ce0 <= ap_const_logic_1;
        else 
            padded_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_22_d0 <= bitcast_ln39_reg_993;

    padded_22_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if (((select_ln37_2_fu_877_p3 = ap_const_lv2_0) and (trunc_ln36_fu_832_p1 = ap_const_lv2_1) and (select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_1) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_22_we0 <= ap_const_logic_1;
        else 
            padded_22_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_23_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_23_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_23_ce0 <= ap_const_logic_1;
        else 
            padded_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_23_d0 <= bitcast_ln39_reg_993;

    padded_23_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if ((not((select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_0)) and not((select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_1)) and (select_ln37_2_fu_877_p3 = ap_const_lv2_0) and (trunc_ln36_fu_832_p1 = ap_const_lv2_1) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_23_we0 <= ap_const_logic_1;
        else 
            padded_23_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_24_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_24_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_24_ce0 <= ap_const_logic_1;
        else 
            padded_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_24_d0 <= bitcast_ln39_reg_993;

    padded_24_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if (((select_ln37_2_fu_877_p3 = ap_const_lv2_1) and (trunc_ln36_fu_832_p1 = ap_const_lv2_1) and (select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_0) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_24_we0 <= ap_const_logic_1;
        else 
            padded_24_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_25_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_25_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_25_ce0 <= ap_const_logic_1;
        else 
            padded_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_25_d0 <= bitcast_ln39_reg_993;

    padded_25_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if (((select_ln37_2_fu_877_p3 = ap_const_lv2_1) and (trunc_ln36_fu_832_p1 = ap_const_lv2_1) and (select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_1) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_25_we0 <= ap_const_logic_1;
        else 
            padded_25_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_26_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_26_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_26_ce0 <= ap_const_logic_1;
        else 
            padded_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_26_d0 <= bitcast_ln39_reg_993;

    padded_26_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if ((not((select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_0)) and not((select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_1)) and (select_ln37_2_fu_877_p3 = ap_const_lv2_1) and (trunc_ln36_fu_832_p1 = ap_const_lv2_1) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_26_we0 <= ap_const_logic_1;
        else 
            padded_26_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_2_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_2_ce0 <= ap_const_logic_1;
        else 
            padded_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_2_d0 <= bitcast_ln39_reg_993;

    padded_2_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if ((not((select_ln37_2_fu_877_p3 = ap_const_lv2_1)) and not((select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_0)) and not((select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_1)) and not((select_ln37_2_fu_877_p3 = ap_const_lv2_0)) and not((trunc_ln36_fu_832_p1 = ap_const_lv2_0)) and not((trunc_ln36_fu_832_p1 = ap_const_lv2_1)) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_2_we0 <= ap_const_logic_1;
        else 
            padded_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_3_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_3_ce0 <= ap_const_logic_1;
        else 
            padded_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_3_d0 <= bitcast_ln39_reg_993;

    padded_3_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if ((not((trunc_ln36_fu_832_p1 = ap_const_lv2_0)) and not((trunc_ln36_fu_832_p1 = ap_const_lv2_1)) and (select_ln37_2_fu_877_p3 = ap_const_lv2_0) and (select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_0) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_3_we0 <= ap_const_logic_1;
        else 
            padded_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_4_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_4_ce0 <= ap_const_logic_1;
        else 
            padded_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_4_d0 <= bitcast_ln39_reg_993;

    padded_4_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if ((not((trunc_ln36_fu_832_p1 = ap_const_lv2_0)) and not((trunc_ln36_fu_832_p1 = ap_const_lv2_1)) and (select_ln37_2_fu_877_p3 = ap_const_lv2_0) and (select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_1) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_4_we0 <= ap_const_logic_1;
        else 
            padded_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_5_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_5_ce0 <= ap_const_logic_1;
        else 
            padded_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_5_d0 <= bitcast_ln39_reg_993;

    padded_5_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if ((not((select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_0)) and not((select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_1)) and not((trunc_ln36_fu_832_p1 = ap_const_lv2_0)) and not((trunc_ln36_fu_832_p1 = ap_const_lv2_1)) and (select_ln37_2_fu_877_p3 = ap_const_lv2_0) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_5_we0 <= ap_const_logic_1;
        else 
            padded_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_6_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_6_ce0 <= ap_const_logic_1;
        else 
            padded_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_6_d0 <= bitcast_ln39_reg_993;

    padded_6_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if ((not((trunc_ln36_fu_832_p1 = ap_const_lv2_0)) and not((trunc_ln36_fu_832_p1 = ap_const_lv2_1)) and (select_ln37_2_fu_877_p3 = ap_const_lv2_1) and (select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_0) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_6_we0 <= ap_const_logic_1;
        else 
            padded_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_7_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_7_ce0 <= ap_const_logic_1;
        else 
            padded_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_7_d0 <= bitcast_ln39_reg_993;

    padded_7_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if ((not((trunc_ln36_fu_832_p1 = ap_const_lv2_0)) and not((trunc_ln36_fu_832_p1 = ap_const_lv2_1)) and (select_ln37_2_fu_877_p3 = ap_const_lv2_1) and (select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_1) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_7_we0 <= ap_const_logic_1;
        else 
            padded_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_8_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_8_ce0 <= ap_const_logic_1;
        else 
            padded_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_8_d0 <= bitcast_ln39_reg_993;

    padded_8_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if ((not((select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_0)) and not((select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_1)) and not((trunc_ln36_fu_832_p1 = ap_const_lv2_0)) and not((trunc_ln36_fu_832_p1 = ap_const_lv2_1)) and (select_ln37_2_fu_877_p3 = ap_const_lv2_1) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_8_we0 <= ap_const_logic_1;
        else 
            padded_8_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_9_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_9_ce0 <= ap_const_logic_1;
        else 
            padded_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_9_d0 <= bitcast_ln39_reg_993;

    padded_9_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if ((not((select_ln37_2_fu_877_p3 = ap_const_lv2_1)) and not((select_ln37_2_fu_877_p3 = ap_const_lv2_0)) and (trunc_ln36_fu_832_p1 = ap_const_lv2_0) and (select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_0) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_9_we0 <= ap_const_logic_1;
        else 
            padded_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_address0 <= zext_ln39_1_fu_843_p1(13 - 1 downto 0);

    padded_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_ce0 <= ap_const_logic_1;
        else 
            padded_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    padded_d0 <= bitcast_ln39_reg_993;

    padded_we0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, icmp_ln36_reg_938_pp0_iter11_reg, select_ln37_reg_974_pp0_iter11_reg, trunc_ln36_fu_832_p1, select_ln37_2_fu_877_p3)
    begin
        if ((not((select_ln37_2_fu_877_p3 = ap_const_lv2_1)) and not((select_ln37_2_fu_877_p3 = ap_const_lv2_0)) and not((trunc_ln36_fu_832_p1 = ap_const_lv2_0)) and not((trunc_ln36_fu_832_p1 = ap_const_lv2_1)) and (select_ln37_reg_974_pp0_iter11_reg = ap_const_lv2_0) and (icmp_ln36_reg_938_pp0_iter11_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            padded_we0 <= ap_const_logic_1;
        else 
            padded_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln36_1_fu_608_p3 <= 
        indvars_iv_next1476_mid1_fu_596_p2 when (icmp_ln37_fu_582_p2(0) = '1') else 
        indvars_iv_next14763620_fu_602_p2;
    select_ln36_2_fu_640_p3 <= 
        indvars_iv_next14763620_fu_602_p2 when (icmp_ln37_fu_582_p2(0) = '1') else 
        y_fu_150;
    select_ln36_3_fu_776_p3 <= 
        ap_const_lv7_0 when (icmp_ln37_reg_942(0) = '1') else 
        udiv_ln_cast_fu_766_p4;
    select_ln36_4_fu_836_p3 <= 
        ap_const_lv2_0 when (icmp_ln37_reg_942_pp0_iter11_reg(0) = '1') else 
        trunc_ln39_fu_828_p1;
    select_ln36_fu_588_p3 <= 
        ap_const_lv8_0 when (icmp_ln37_fu_582_p2(0) = '1') else 
        x_fu_142;
    select_ln37_1_fu_808_p3 <= 
        udiv_ln38_mid1_cast_fu_798_p4 when (and_ln36_reg_963(0) = '1') else 
        select_ln36_3_fu_776_p3;
    select_ln37_2_fu_877_p3 <= 
        trunc_ln39_1_fu_873_p1 when (and_ln36_reg_963_pp0_iter11_reg(0) = '1') else 
        select_ln36_4_fu_836_p3;
    select_ln37_3_fu_698_p3 <= 
        indvars_iv_next1473_dup_fu_672_p2 when (and_ln36_fu_666_p2(0) = '1') else 
        select_ln36_fu_588_p3;
    select_ln37_4_fu_718_p3 <= 
        ap_const_lv10_1 when (icmp_ln37_fu_582_p2(0) = '1') else 
        add_ln37_fu_712_p2;
    select_ln37_fu_684_p3 <= 
        ap_const_lv2_0 when (or_ln37_fu_678_p2(0) = '1') else 
        c_fu_138;
    tmp_fu_626_p4 <= mul_ln36_fu_620_p2(16 downto 10);
    trunc_ln36_fu_832_p1 <= grp_fu_648_p2(2 - 1 downto 0);
    trunc_ln39_1_fu_873_p1 <= grp_fu_692_p2(2 - 1 downto 0);
    trunc_ln39_fu_828_p1 <= grp_fu_558_p2(2 - 1 downto 0);
    udiv_ln38_mid1_cast_fu_798_p4 <= mul_ln38_1_fu_792_p2(16 downto 10);
    udiv_ln_cast_fu_766_p4 <= mul_ln38_fu_760_p2(16 downto 10);
    xor_ln36_fu_654_p2 <= (icmp_ln37_fu_582_p2 xor ap_const_lv1_1);
    zext_ln39_1_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_reg_988_pp0_iter11_reg),64));
end behav;
