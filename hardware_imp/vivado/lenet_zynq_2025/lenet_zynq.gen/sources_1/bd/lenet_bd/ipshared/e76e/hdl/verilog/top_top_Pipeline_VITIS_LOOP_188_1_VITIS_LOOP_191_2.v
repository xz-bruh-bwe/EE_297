// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_top_Pipeline_VITIS_LOOP_188_1_VITIS_LOOP_191_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_out_0_AWVALID,
        m_axi_gmem_out_0_AWREADY,
        m_axi_gmem_out_0_AWADDR,
        m_axi_gmem_out_0_AWID,
        m_axi_gmem_out_0_AWLEN,
        m_axi_gmem_out_0_AWSIZE,
        m_axi_gmem_out_0_AWBURST,
        m_axi_gmem_out_0_AWLOCK,
        m_axi_gmem_out_0_AWCACHE,
        m_axi_gmem_out_0_AWPROT,
        m_axi_gmem_out_0_AWQOS,
        m_axi_gmem_out_0_AWREGION,
        m_axi_gmem_out_0_AWUSER,
        m_axi_gmem_out_0_WVALID,
        m_axi_gmem_out_0_WREADY,
        m_axi_gmem_out_0_WDATA,
        m_axi_gmem_out_0_WSTRB,
        m_axi_gmem_out_0_WLAST,
        m_axi_gmem_out_0_WID,
        m_axi_gmem_out_0_WUSER,
        m_axi_gmem_out_0_ARVALID,
        m_axi_gmem_out_0_ARREADY,
        m_axi_gmem_out_0_ARADDR,
        m_axi_gmem_out_0_ARID,
        m_axi_gmem_out_0_ARLEN,
        m_axi_gmem_out_0_ARSIZE,
        m_axi_gmem_out_0_ARBURST,
        m_axi_gmem_out_0_ARLOCK,
        m_axi_gmem_out_0_ARCACHE,
        m_axi_gmem_out_0_ARPROT,
        m_axi_gmem_out_0_ARQOS,
        m_axi_gmem_out_0_ARREGION,
        m_axi_gmem_out_0_ARUSER,
        m_axi_gmem_out_0_RVALID,
        m_axi_gmem_out_0_RREADY,
        m_axi_gmem_out_0_RDATA,
        m_axi_gmem_out_0_RLAST,
        m_axi_gmem_out_0_RID,
        m_axi_gmem_out_0_RFIFONUM,
        m_axi_gmem_out_0_RUSER,
        m_axi_gmem_out_0_RRESP,
        m_axi_gmem_out_0_BVALID,
        m_axi_gmem_out_0_BREADY,
        m_axi_gmem_out_0_BRESP,
        m_axi_gmem_out_0_BID,
        m_axi_gmem_out_0_BUSER,
        logits_address0,
        logits_ce0,
        logits_we0,
        logits_d0,
        p_cast_cast,
        grp_fu_626_p_din0,
        grp_fu_626_p_din1,
        grp_fu_626_p_opcode,
        grp_fu_626_p_dout0,
        grp_fu_626_p_ce,
        grp_fu_630_p_din0,
        grp_fu_630_p_din1,
        grp_fu_630_p_dout0,
        grp_fu_630_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_out_0_AWVALID;
input   m_axi_gmem_out_0_AWREADY;
output  [63:0] m_axi_gmem_out_0_AWADDR;
output  [0:0] m_axi_gmem_out_0_AWID;
output  [31:0] m_axi_gmem_out_0_AWLEN;
output  [2:0] m_axi_gmem_out_0_AWSIZE;
output  [1:0] m_axi_gmem_out_0_AWBURST;
output  [1:0] m_axi_gmem_out_0_AWLOCK;
output  [3:0] m_axi_gmem_out_0_AWCACHE;
output  [2:0] m_axi_gmem_out_0_AWPROT;
output  [3:0] m_axi_gmem_out_0_AWQOS;
output  [3:0] m_axi_gmem_out_0_AWREGION;
output  [0:0] m_axi_gmem_out_0_AWUSER;
output   m_axi_gmem_out_0_WVALID;
input   m_axi_gmem_out_0_WREADY;
output  [31:0] m_axi_gmem_out_0_WDATA;
output  [3:0] m_axi_gmem_out_0_WSTRB;
output   m_axi_gmem_out_0_WLAST;
output  [0:0] m_axi_gmem_out_0_WID;
output  [0:0] m_axi_gmem_out_0_WUSER;
output   m_axi_gmem_out_0_ARVALID;
input   m_axi_gmem_out_0_ARREADY;
output  [63:0] m_axi_gmem_out_0_ARADDR;
output  [0:0] m_axi_gmem_out_0_ARID;
output  [31:0] m_axi_gmem_out_0_ARLEN;
output  [2:0] m_axi_gmem_out_0_ARSIZE;
output  [1:0] m_axi_gmem_out_0_ARBURST;
output  [1:0] m_axi_gmem_out_0_ARLOCK;
output  [3:0] m_axi_gmem_out_0_ARCACHE;
output  [2:0] m_axi_gmem_out_0_ARPROT;
output  [3:0] m_axi_gmem_out_0_ARQOS;
output  [3:0] m_axi_gmem_out_0_ARREGION;
output  [0:0] m_axi_gmem_out_0_ARUSER;
input   m_axi_gmem_out_0_RVALID;
output   m_axi_gmem_out_0_RREADY;
input  [31:0] m_axi_gmem_out_0_RDATA;
input   m_axi_gmem_out_0_RLAST;
input  [0:0] m_axi_gmem_out_0_RID;
input  [8:0] m_axi_gmem_out_0_RFIFONUM;
input  [0:0] m_axi_gmem_out_0_RUSER;
input  [1:0] m_axi_gmem_out_0_RRESP;
input   m_axi_gmem_out_0_BVALID;
output   m_axi_gmem_out_0_BREADY;
input  [1:0] m_axi_gmem_out_0_BRESP;
input  [0:0] m_axi_gmem_out_0_BID;
input  [0:0] m_axi_gmem_out_0_BUSER;
output  [3:0] logits_address0;
output   logits_ce0;
output   logits_we0;
output  [31:0] logits_d0;
input  [61:0] p_cast_cast;
output  [31:0] grp_fu_626_p_din0;
output  [31:0] grp_fu_626_p_din1;
output  [1:0] grp_fu_626_p_opcode;
input  [31:0] grp_fu_626_p_dout0;
output   grp_fu_626_p_ce;
output  [31:0] grp_fu_630_p_din0;
output  [31:0] grp_fu_630_p_din1;
input  [31:0] grp_fu_630_p_dout0;
output   grp_fu_630_p_ce;

reg ap_idle;
reg m_axi_gmem_out_0_ARVALID;
reg m_axi_gmem_out_0_RREADY;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] icmp_ln188_reg_474;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [7:0] fc3_weights_0_address0;
wire   [31:0] fc3_weights_0_q0;
wire   [7:0] fc3_weights_1_address0;
wire   [31:0] fc3_weights_1_q0;
wire   [7:0] fc3_weights_2_address0;
wire   [31:0] fc3_weights_2_q0;
wire   [7:0] fc3_weights_3_address0;
wire   [31:0] fc3_weights_3_q0;
wire   [3:0] fc3_biases_address0;
wire   [31:0] fc3_biases_q0;
reg    gmem_out_blk_n_R;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_grp1;
reg    gmem_out_blk_n_AR;
reg   [0:0] first_iter_0_reg_491;
wire    ap_block_pp0_stage0_11001;
wire  signed [63:0] p_cast_cast_cast_fu_225_p1;
reg  signed [63:0] p_cast_cast_cast_reg_469;
wire   [0:0] icmp_ln188_fu_247_p2;
wire   [6:0] select_ln188_fu_277_p3;
reg   [6:0] select_ln188_reg_478;
reg   [6:0] select_ln188_reg_478_pp0_iter1_reg;
wire   [3:0] select_ln188_1_fu_285_p3;
reg   [3:0] select_ln188_1_reg_484;
reg   [3:0] select_ln188_1_reg_484_pp0_iter1_reg;
reg   [3:0] select_ln188_1_reg_484_pp0_iter2_reg;
wire   [0:0] first_iter_0_fu_293_p2;
reg   [0:0] first_iter_0_reg_491_pp0_iter1_reg;
reg   [0:0] first_iter_0_reg_491_pp0_iter2_reg;
reg   [0:0] first_iter_0_reg_491_pp0_iter3_reg;
wire   [0:0] icmp_ln191_1_fu_311_p2;
reg   [0:0] icmp_ln191_1_reg_495;
reg   [0:0] icmp_ln191_1_reg_495_pp0_iter1_reg;
reg   [0:0] icmp_ln191_1_reg_495_pp0_iter2_reg;
reg   [0:0] icmp_ln191_1_reg_495_pp0_iter3_reg;
reg   [0:0] icmp_ln191_1_reg_495_pp0_iter4_reg;
reg    ap_predicate_op59_readreq_state2;
reg    ap_block_state2_io_grp1;
reg    ap_block_pp0_stage1_11001_grp1;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] tmp_fu_395_p11;
reg   [31:0] tmp_reg_525;
reg   [31:0] gmem_out_addr_read_reg_530;
wire   [31:0] bitcast_ln192_fu_419_p1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
reg   [3:0] logits_addr_reg_545;
reg   [3:0] logits_addr_reg_545_pp0_iter4_reg;
reg   [31:0] fc3_biases_load_reg_550;
wire    ap_block_pp0_stage1_11001_grp0;
reg    ap_block_pp0_stage1_subdone_grp0_done_reg;
wire    ap_block_pp0_stage1_subdone_grp0;
reg    ap_block_pp0_stage1_subdone;
reg   [31:0] mul_i_reg_555;
reg   [31:0] add_i_reg_565;
wire   [63:0] zext_ln192_1_fu_368_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln188_fu_423_p1;
wire    ap_block_pp0_stage0;
reg   [6:0] j_fu_106;
wire   [6:0] add_ln191_fu_305_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_110;
reg   [3:0] ap_sig_allocacmp_i_load;
reg   [9:0] indvar_flatten_fu_114;
wire   [9:0] add_ln188_1_fu_253_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [31:0] add_i8_fu_118;
reg   [31:0] ap_sig_allocacmp_add_i8_load;
wire    ap_block_pp0_stage2;
reg    fc3_weights_0_ce0_local;
reg    fc3_weights_1_ce0_local;
reg    fc3_weights_2_ce0_local;
reg    fc3_weights_3_ce0_local;
reg    fc3_biases_ce0_local;
reg    logits_we0_local;
reg    logits_ce0_local;
wire   [0:0] icmp_ln191_fu_271_p2;
wire   [3:0] add_ln188_fu_265_p2;
wire   [3:0] grp_fu_299_p0;
wire   [2:0] grp_fu_299_p1;
wire   [3:0] grp_fu_299_p2;
wire   [5:0] trunc_ln192_fu_342_p1;
wire   [7:0] tmp_1_fu_345_p3;
wire   [7:0] zext_ln192_fu_353_p1;
wire   [7:0] sub_ln192_fu_356_p2;
wire   [7:0] zext_ln188_1_fu_338_p1;
wire   [7:0] add_ln192_fu_362_p2;
wire   [3:0] mul_ln188_fu_379_p0;
wire   [5:0] mul_ln188_fu_379_p1;
wire   [8:0] mul_ln188_fu_379_p2;
wire   [31:0] tmp_fu_395_p9;
wire   [1:0] tmp_fu_395_p10;
reg    grp_fu_217_ce;
reg    ap_block_pp0_stage1_11001;
reg    grp_fu_221_ce;
reg    grp_fu_299_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [3:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to4;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_block_pp0_stage2_00001;
wire   [8:0] mul_ln188_fu_379_p00;
wire   [1:0] tmp_fu_395_p1;
wire   [1:0] tmp_fu_395_p3;
wire  signed [1:0] tmp_fu_395_p5;
wire  signed [1:0] tmp_fu_395_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp0_done_reg = 1'b0;
#0 j_fu_106 = 7'd0;
#0 i_fu_110 = 4'd0;
#0 indvar_flatten_fu_114 = 10'd0;
#0 add_i8_fu_118 = 32'd0;
#0 ap_done_reg = 1'b0;
end

top_top_Pipeline_VITIS_LOOP_188_1_VITIS_LOOP_191_2_fc3_weights_0_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 252 ),
    .AddressWidth( 8 ))
fc3_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc3_weights_0_address0),
    .ce0(fc3_weights_0_ce0_local),
    .q0(fc3_weights_0_q0)
);

top_top_Pipeline_VITIS_LOOP_188_1_VITIS_LOOP_191_2_fc3_weights_1_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 252 ),
    .AddressWidth( 8 ))
fc3_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc3_weights_1_address0),
    .ce0(fc3_weights_1_ce0_local),
    .q0(fc3_weights_1_q0)
);

top_top_Pipeline_VITIS_LOOP_188_1_VITIS_LOOP_191_2_fc3_weights_2_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 252 ),
    .AddressWidth( 8 ))
fc3_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc3_weights_2_address0),
    .ce0(fc3_weights_2_ce0_local),
    .q0(fc3_weights_2_q0)
);

top_top_Pipeline_VITIS_LOOP_188_1_VITIS_LOOP_191_2_fc3_weights_3_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 252 ),
    .AddressWidth( 8 ))
fc3_weights_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc3_weights_3_address0),
    .ce0(fc3_weights_3_ce0_local),
    .q0(fc3_weights_3_q0)
);

top_top_Pipeline_VITIS_LOOP_188_1_VITIS_LOOP_191_2_fc3_biases_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
fc3_biases_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc3_biases_address0),
    .ce0(fc3_biases_ce0_local),
    .q0(fc3_biases_q0)
);

top_urem_4ns_3ns_4_8_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 3 ),
    .dout_WIDTH( 4 ))
urem_4ns_3ns_4_8_1_U208(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_299_p0),
    .din1(grp_fu_299_p1),
    .ce(grp_fu_299_ce),
    .dout(grp_fu_299_p2)
);

top_mul_4ns_6ns_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 6 ),
    .dout_WIDTH( 9 ))
mul_4ns_6ns_9_1_1_U209(
    .din0(mul_ln188_fu_379_p0),
    .din1(mul_ln188_fu_379_p1),
    .dout(mul_ln188_fu_379_p2)
);

(* dissolve_hierarchy = "yes" *) top_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U210(
    .din0(fc3_weights_0_q0),
    .din1(fc3_weights_1_q0),
    .din2(fc3_weights_2_q0),
    .din3(fc3_weights_3_q0),
    .def(tmp_fu_395_p9),
    .sel(tmp_fu_395_p10),
    .dout(tmp_fu_395_p11)
);

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp0)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        if (((ap_enable_reg_pp0_iter3 == 1'b1) & (first_iter_0_reg_491_pp0_iter3_reg == 1'd1))) begin
            add_i8_fu_118 <= fc3_biases_load_reg_550;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            add_i8_fu_118 <= grp_fu_626_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln188_fu_247_p2 == 1'd0))) begin
            i_fu_110 <= select_ln188_1_fu_285_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_110 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln188_fu_247_p2 == 1'd0))) begin
            indvar_flatten_fu_114 <= add_ln188_1_fu_253_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_114 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln188_fu_247_p2 == 1'd0))) begin
            j_fu_106 <= add_ln191_fu_305_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_106 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_i_reg_565 <= grp_fu_626_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        fc3_biases_load_reg_550 <= fc3_biases_q0;
        mul_i_reg_555 <= grp_fu_630_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        first_iter_0_reg_491 <= first_iter_0_fu_293_p2;
        first_iter_0_reg_491_pp0_iter1_reg <= first_iter_0_reg_491;
        first_iter_0_reg_491_pp0_iter2_reg <= first_iter_0_reg_491_pp0_iter1_reg;
        first_iter_0_reg_491_pp0_iter3_reg <= first_iter_0_reg_491_pp0_iter2_reg;
        icmp_ln188_reg_474 <= icmp_ln188_fu_247_p2;
        icmp_ln191_1_reg_495 <= icmp_ln191_1_fu_311_p2;
        icmp_ln191_1_reg_495_pp0_iter1_reg <= icmp_ln191_1_reg_495;
        icmp_ln191_1_reg_495_pp0_iter2_reg <= icmp_ln191_1_reg_495_pp0_iter1_reg;
        icmp_ln191_1_reg_495_pp0_iter3_reg <= icmp_ln191_1_reg_495_pp0_iter2_reg;
        icmp_ln191_1_reg_495_pp0_iter4_reg <= icmp_ln191_1_reg_495_pp0_iter3_reg;
        logits_addr_reg_545 <= zext_ln188_fu_423_p1;
        logits_addr_reg_545_pp0_iter4_reg <= logits_addr_reg_545;
        p_cast_cast_cast_reg_469 <= p_cast_cast_cast_fu_225_p1;
        select_ln188_1_reg_484 <= select_ln188_1_fu_285_p3;
        select_ln188_1_reg_484_pp0_iter1_reg <= select_ln188_1_reg_484;
        select_ln188_1_reg_484_pp0_iter2_reg <= select_ln188_1_reg_484_pp0_iter1_reg;
        select_ln188_reg_478 <= select_ln188_fu_277_p3;
        select_ln188_reg_478_pp0_iter1_reg <= select_ln188_reg_478;
        tmp_reg_525 <= tmp_fu_395_p11;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001_grp1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        gmem_out_addr_read_reg_530 <= m_axi_gmem_out_0_RDATA;
    end
end

always @ (*) begin
    if (((icmp_ln188_reg_474 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to4 = 1'b1;
    end else begin
        ap_idle_pp0_1to4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        if (((ap_enable_reg_pp0_iter3 == 1'b1) & (first_iter_0_reg_491_pp0_iter3_reg == 1'd1))) begin
            ap_sig_allocacmp_add_i8_load = fc3_biases_load_reg_550;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            ap_sig_allocacmp_add_i8_load = grp_fu_626_p_dout0;
        end else begin
            ap_sig_allocacmp_add_i8_load = add_i8_fu_118;
        end
    end else begin
        ap_sig_allocacmp_add_i8_load = add_i8_fu_118;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_110;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_114;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 7'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_106;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fc3_biases_ce0_local = 1'b1;
    end else begin
        fc3_biases_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        fc3_weights_0_ce0_local = 1'b1;
    end else begin
        fc3_weights_0_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        fc3_weights_1_ce0_local = 1'b1;
    end else begin
        fc3_weights_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        fc3_weights_2_ce0_local = 1'b1;
    end else begin
        fc3_weights_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        fc3_weights_3_ce0_local = 1'b1;
    end else begin
        fc3_weights_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln188_reg_474 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_grp1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (first_iter_0_reg_491 == 1'd1))) begin
        gmem_out_blk_n_AR = m_axi_gmem_out_0_ARREADY;
    end else begin
        gmem_out_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_grp1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        gmem_out_blk_n_R = m_axi_gmem_out_0_RVALID;
    end else begin
        gmem_out_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_217_ce = 1'b1;
    end else begin
        grp_fu_217_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_221_ce = 1'b1;
    end else begin
        grp_fu_221_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_299_ce = 1'b1;
    end else begin
        grp_fu_299_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        logits_ce0_local = 1'b1;
    end else begin
        logits_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln191_1_reg_495_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        logits_we0_local = 1'b1;
    end else begin
        logits_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001_grp1) & (ap_predicate_op59_readreq_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m_axi_gmem_out_0_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_out_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001_grp1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m_axi_gmem_out_0_RREADY = 1'b1;
    end else begin
        m_axi_gmem_out_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to4 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln188_1_fu_253_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln188_fu_265_p2 = (ap_sig_allocacmp_i_load + 4'd1);

assign add_ln191_fu_305_p2 = (select_ln188_fu_277_p3 + 7'd1);

assign add_ln192_fu_362_p2 = (sub_ln192_fu_356_p2 + zext_ln188_1_fu_338_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b1 == ap_block_state2_io_grp1)) | ((m_axi_gmem_out_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

assign ap_block_pp0_stage1_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001_grp1 = (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b1 == ap_block_state2_io_grp1)) | ((m_axi_gmem_out_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

assign ap_block_pp0_stage1_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b1 == ap_block_state2_io_grp1)) | ((m_axi_gmem_out_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

assign ap_block_pp0_stage1_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_io_grp1 = ((m_axi_gmem_out_0_ARREADY == 1'b0) & (ap_predicate_op59_readreq_state2 == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

always @ (*) begin
    ap_predicate_op59_readreq_state2 = ((icmp_ln188_reg_474 == 1'd0) & (first_iter_0_reg_491 == 1'd1));
end

assign ap_ready = ap_ready_sig;

assign bitcast_ln192_fu_419_p1 = gmem_out_addr_read_reg_530;

assign fc3_biases_address0 = zext_ln188_fu_423_p1;

assign fc3_weights_0_address0 = zext_ln192_1_fu_368_p1;

assign fc3_weights_1_address0 = zext_ln192_1_fu_368_p1;

assign fc3_weights_2_address0 = zext_ln192_1_fu_368_p1;

assign fc3_weights_3_address0 = zext_ln192_1_fu_368_p1;

assign first_iter_0_fu_293_p2 = ((select_ln188_fu_277_p3 == 7'd0) ? 1'b1 : 1'b0);

assign grp_fu_299_p0 = ((icmp_ln191_fu_271_p2[0:0] == 1'b1) ? add_ln188_fu_265_p2 : ap_sig_allocacmp_i_load);

assign grp_fu_299_p1 = 4'd3;

assign grp_fu_626_p_ce = grp_fu_217_ce;

assign grp_fu_626_p_din0 = ap_sig_allocacmp_add_i8_load;

assign grp_fu_626_p_din1 = mul_i_reg_555;

assign grp_fu_626_p_opcode = 2'd0;

assign grp_fu_630_p_ce = grp_fu_221_ce;

assign grp_fu_630_p_din0 = bitcast_ln192_fu_419_p1;

assign grp_fu_630_p_din1 = tmp_reg_525;

assign icmp_ln188_fu_247_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd840) ? 1'b1 : 1'b0);

assign icmp_ln191_1_fu_311_p2 = ((add_ln191_fu_305_p2 == 7'd84) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_271_p2 = ((ap_sig_allocacmp_j_load == 7'd84) ? 1'b1 : 1'b0);

assign logits_address0 = logits_addr_reg_545_pp0_iter4_reg;

assign logits_ce0 = logits_ce0_local;

assign logits_d0 = add_i_reg_565;

assign logits_we0 = logits_we0_local;

assign m_axi_gmem_out_0_ARADDR = p_cast_cast_cast_reg_469;

assign m_axi_gmem_out_0_ARBURST = 2'd0;

assign m_axi_gmem_out_0_ARCACHE = 4'd0;

assign m_axi_gmem_out_0_ARID = 1'd0;

assign m_axi_gmem_out_0_ARLEN = 64'd84;

assign m_axi_gmem_out_0_ARLOCK = 2'd0;

assign m_axi_gmem_out_0_ARPROT = 3'd0;

assign m_axi_gmem_out_0_ARQOS = 4'd0;

assign m_axi_gmem_out_0_ARREGION = 4'd0;

assign m_axi_gmem_out_0_ARSIZE = 3'd0;

assign m_axi_gmem_out_0_ARUSER = 1'd0;

assign m_axi_gmem_out_0_AWADDR = 64'd0;

assign m_axi_gmem_out_0_AWBURST = 2'd0;

assign m_axi_gmem_out_0_AWCACHE = 4'd0;

assign m_axi_gmem_out_0_AWID = 1'd0;

assign m_axi_gmem_out_0_AWLEN = 32'd0;

assign m_axi_gmem_out_0_AWLOCK = 2'd0;

assign m_axi_gmem_out_0_AWPROT = 3'd0;

assign m_axi_gmem_out_0_AWQOS = 4'd0;

assign m_axi_gmem_out_0_AWREGION = 4'd0;

assign m_axi_gmem_out_0_AWSIZE = 3'd0;

assign m_axi_gmem_out_0_AWUSER = 1'd0;

assign m_axi_gmem_out_0_AWVALID = 1'b0;

assign m_axi_gmem_out_0_BREADY = 1'b0;

assign m_axi_gmem_out_0_WDATA = 32'd0;

assign m_axi_gmem_out_0_WID = 1'd0;

assign m_axi_gmem_out_0_WLAST = 1'b0;

assign m_axi_gmem_out_0_WSTRB = 4'd0;

assign m_axi_gmem_out_0_WUSER = 1'd0;

assign m_axi_gmem_out_0_WVALID = 1'b0;

assign mul_ln188_fu_379_p0 = mul_ln188_fu_379_p00;

assign mul_ln188_fu_379_p00 = select_ln188_1_reg_484_pp0_iter1_reg;

assign mul_ln188_fu_379_p1 = 9'd22;

assign p_cast_cast_cast_fu_225_p1 = $signed(p_cast_cast);

assign select_ln188_1_fu_285_p3 = ((icmp_ln191_fu_271_p2[0:0] == 1'b1) ? add_ln188_fu_265_p2 : ap_sig_allocacmp_i_load);

assign select_ln188_fu_277_p3 = ((icmp_ln191_fu_271_p2[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_j_load);

assign sub_ln192_fu_356_p2 = (tmp_1_fu_345_p3 - zext_ln192_fu_353_p1);

assign tmp_1_fu_345_p3 = {{trunc_ln192_fu_342_p1}, {2'd0}};

assign tmp_fu_395_p10 = {{mul_ln188_fu_379_p2[7:6]}};

assign tmp_fu_395_p9 = 'bx;

assign trunc_ln192_fu_342_p1 = select_ln188_reg_478_pp0_iter1_reg[5:0];

assign zext_ln188_1_fu_338_p1 = grp_fu_299_p2;

assign zext_ln188_fu_423_p1 = select_ln188_1_reg_484_pp0_iter2_reg;

assign zext_ln192_1_fu_368_p1 = add_ln192_fu_362_p2;

assign zext_ln192_fu_353_p1 = select_ln188_reg_478_pp0_iter1_reg;

endmodule //top_top_Pipeline_VITIS_LOOP_188_1_VITIS_LOOP_191_2
