// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_c2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_out_0_AWVALID,
        m_axi_gmem_out_0_AWREADY,
        m_axi_gmem_out_0_AWADDR,
        m_axi_gmem_out_0_AWID,
        m_axi_gmem_out_0_AWLEN,
        m_axi_gmem_out_0_AWSIZE,
        m_axi_gmem_out_0_AWBURST,
        m_axi_gmem_out_0_AWLOCK,
        m_axi_gmem_out_0_AWCACHE,
        m_axi_gmem_out_0_AWPROT,
        m_axi_gmem_out_0_AWQOS,
        m_axi_gmem_out_0_AWREGION,
        m_axi_gmem_out_0_AWUSER,
        m_axi_gmem_out_0_WVALID,
        m_axi_gmem_out_0_WREADY,
        m_axi_gmem_out_0_WDATA,
        m_axi_gmem_out_0_WSTRB,
        m_axi_gmem_out_0_WLAST,
        m_axi_gmem_out_0_WID,
        m_axi_gmem_out_0_WUSER,
        m_axi_gmem_out_0_ARVALID,
        m_axi_gmem_out_0_ARREADY,
        m_axi_gmem_out_0_ARADDR,
        m_axi_gmem_out_0_ARID,
        m_axi_gmem_out_0_ARLEN,
        m_axi_gmem_out_0_ARSIZE,
        m_axi_gmem_out_0_ARBURST,
        m_axi_gmem_out_0_ARLOCK,
        m_axi_gmem_out_0_ARCACHE,
        m_axi_gmem_out_0_ARPROT,
        m_axi_gmem_out_0_ARQOS,
        m_axi_gmem_out_0_ARREGION,
        m_axi_gmem_out_0_ARUSER,
        m_axi_gmem_out_0_RVALID,
        m_axi_gmem_out_0_RREADY,
        m_axi_gmem_out_0_RDATA,
        m_axi_gmem_out_0_RLAST,
        m_axi_gmem_out_0_RID,
        m_axi_gmem_out_0_RFIFONUM,
        m_axi_gmem_out_0_RUSER,
        m_axi_gmem_out_0_RRESP,
        m_axi_gmem_out_0_BVALID,
        m_axi_gmem_out_0_BREADY,
        m_axi_gmem_out_0_BRESP,
        m_axi_gmem_out_0_BID,
        m_axi_gmem_out_0_BUSER,
        input_r,
        output_r,
        grp_fu_626_p_din0,
        grp_fu_626_p_din1,
        grp_fu_626_p_opcode,
        grp_fu_626_p_dout0,
        grp_fu_626_p_ce,
        grp_fu_630_p_din0,
        grp_fu_630_p_din1,
        grp_fu_630_p_dout0,
        grp_fu_630_p_ce,
        grp_fu_634_p_din0,
        grp_fu_634_p_din1,
        grp_fu_634_p_opcode,
        grp_fu_634_p_dout0,
        grp_fu_634_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 5'd1;
parameter    ap_ST_fsm_pp0_stage1 = 5'd2;
parameter    ap_ST_fsm_pp0_stage2 = 5'd4;
parameter    ap_ST_fsm_pp0_stage3 = 5'd8;
parameter    ap_ST_fsm_pp0_stage4 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_out_0_AWVALID;
input   m_axi_gmem_out_0_AWREADY;
output  [63:0] m_axi_gmem_out_0_AWADDR;
output  [0:0] m_axi_gmem_out_0_AWID;
output  [31:0] m_axi_gmem_out_0_AWLEN;
output  [2:0] m_axi_gmem_out_0_AWSIZE;
output  [1:0] m_axi_gmem_out_0_AWBURST;
output  [1:0] m_axi_gmem_out_0_AWLOCK;
output  [3:0] m_axi_gmem_out_0_AWCACHE;
output  [2:0] m_axi_gmem_out_0_AWPROT;
output  [3:0] m_axi_gmem_out_0_AWQOS;
output  [3:0] m_axi_gmem_out_0_AWREGION;
output  [0:0] m_axi_gmem_out_0_AWUSER;
output   m_axi_gmem_out_0_WVALID;
input   m_axi_gmem_out_0_WREADY;
output  [31:0] m_axi_gmem_out_0_WDATA;
output  [3:0] m_axi_gmem_out_0_WSTRB;
output   m_axi_gmem_out_0_WLAST;
output  [0:0] m_axi_gmem_out_0_WID;
output  [0:0] m_axi_gmem_out_0_WUSER;
output   m_axi_gmem_out_0_ARVALID;
input   m_axi_gmem_out_0_ARREADY;
output  [63:0] m_axi_gmem_out_0_ARADDR;
output  [0:0] m_axi_gmem_out_0_ARID;
output  [31:0] m_axi_gmem_out_0_ARLEN;
output  [2:0] m_axi_gmem_out_0_ARSIZE;
output  [1:0] m_axi_gmem_out_0_ARBURST;
output  [1:0] m_axi_gmem_out_0_ARLOCK;
output  [3:0] m_axi_gmem_out_0_ARCACHE;
output  [2:0] m_axi_gmem_out_0_ARPROT;
output  [3:0] m_axi_gmem_out_0_ARQOS;
output  [3:0] m_axi_gmem_out_0_ARREGION;
output  [0:0] m_axi_gmem_out_0_ARUSER;
input   m_axi_gmem_out_0_RVALID;
output   m_axi_gmem_out_0_RREADY;
input  [31:0] m_axi_gmem_out_0_RDATA;
input   m_axi_gmem_out_0_RLAST;
input  [0:0] m_axi_gmem_out_0_RID;
input  [8:0] m_axi_gmem_out_0_RFIFONUM;
input  [0:0] m_axi_gmem_out_0_RUSER;
input  [1:0] m_axi_gmem_out_0_RRESP;
input   m_axi_gmem_out_0_BVALID;
output   m_axi_gmem_out_0_BREADY;
input  [1:0] m_axi_gmem_out_0_BRESP;
input  [0:0] m_axi_gmem_out_0_BID;
input  [0:0] m_axi_gmem_out_0_BUSER;
input  [63:0] input_r;
input  [63:0] output_r;
output  [31:0] grp_fu_626_p_din0;
output  [31:0] grp_fu_626_p_din1;
output  [1:0] grp_fu_626_p_opcode;
input  [31:0] grp_fu_626_p_dout0;
output   grp_fu_626_p_ce;
output  [31:0] grp_fu_630_p_din0;
output  [31:0] grp_fu_630_p_din1;
input  [31:0] grp_fu_630_p_dout0;
output   grp_fu_630_p_ce;
output  [31:0] grp_fu_634_p_din0;
output  [31:0] grp_fu_634_p_din1;
output  [4:0] grp_fu_634_p_opcode;
input  [0:0] grp_fu_634_p_dout0;
output   grp_fu_634_p_ce;

reg ap_idle;
reg m_axi_gmem_out_0_AWVALID;
reg m_axi_gmem_out_0_WVALID;
reg m_axi_gmem_out_0_ARVALID;
reg m_axi_gmem_out_0_RREADY;
reg m_axi_gmem_out_0_BREADY;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage4;
reg    ap_block_pp0_stage4_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] icmp_ln83_reg_1242;
reg    ap_condition_exit_pp0_iter0_stage4;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [3:0] conv2_biases_address0;
wire   [31:0] conv2_biases_q0;
wire   [11:0] conv2_weights_address0;
wire   [31:0] conv2_weights_q0;
reg    gmem_out_blk_n_AR;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_grp1;
reg    ap_block_pp0_stage1_subdone_grp1_done_reg;
reg    ap_block_pp0_stage1_subdone_grp1;
reg    ap_block_pp0_stage1_subdone;
reg    gmem_out_blk_n_R;
wire    ap_block_pp0_stage4_grp2;
reg    gmem_out_blk_n_AW;
wire    ap_block_pp0_stage1_grp3;
reg   [0:0] icmp_ln91_3_reg_1325;
reg   [0:0] icmp_ln91_3_reg_1325_pp0_iter5_reg;
reg   [0:0] icmp_ln90_1_reg_1329;
reg   [0:0] icmp_ln90_1_reg_1329_pp0_iter5_reg;
reg   [0:0] icmp_ln89_1_reg_1345;
reg   [0:0] icmp_ln89_1_reg_1345_pp0_iter5_reg;
reg    ap_block_pp0_stage1_subdone_grp3_done_reg;
reg    ap_block_pp0_stage1_subdone_grp3;
reg    gmem_out_blk_n_W;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_grp4;
reg    gmem_out_blk_n_B;
reg   [0:0] icmp_ln91_3_reg_1325_pp0_iter6_reg;
reg   [0:0] icmp_ln90_1_reg_1329_pp0_iter6_reg;
reg   [0:0] icmp_ln89_1_reg_1345_pp0_iter6_reg;
wire    ap_block_pp0_stage0_11001;
reg   [5:0] indvar_flatten_load_reg_1232;
reg    ap_predicate_op258_writereq_state32;
reg    ap_block_state32_io_grp3;
reg    ap_block_pp0_stage1_11001;
reg   [7:0] indvar_flatten15_load_reg_1237;
wire   [0:0] icmp_ln83_fu_360_p2;
reg   [0:0] icmp_ln83_reg_1242_pp0_iter1_reg;
reg   [0:0] icmp_ln83_reg_1242_pp0_iter2_reg;
reg   [0:0] icmp_ln83_reg_1242_pp0_iter3_reg;
reg   [0:0] icmp_ln83_reg_1242_pp0_iter4_reg;
reg   [0:0] icmp_ln83_reg_1242_pp0_iter5_reg;
reg   [0:0] icmp_ln83_reg_1242_pp0_iter6_reg;
wire   [0:0] icmp_ln84_fu_372_p2;
reg   [0:0] icmp_ln84_reg_1246;
reg   [0:0] icmp_ln84_reg_1246_pp0_iter1_reg;
reg   [0:0] icmp_ln84_reg_1246_pp0_iter2_reg;
wire   [0:0] xor_ln83_fu_378_p2;
reg   [0:0] xor_ln83_reg_1254;
wire   [0:0] and_ln83_3_fu_408_p2;
reg   [0:0] and_ln83_3_reg_1259;
wire   [0:0] empty_fu_414_p2;
reg   [0:0] empty_reg_1265;
wire   [0:0] not_exitcond_flatten43_mid2122131_fu_426_p2;
reg   [0:0] not_exitcond_flatten43_mid2122131_reg_1271;
wire   [0:0] exitcond_flatten_mid272_fu_432_p2;
reg   [0:0] exitcond_flatten_mid272_reg_1276;
wire   [0:0] exitcond_flatten17_mid276_fu_444_p2;
reg   [0:0] exitcond_flatten17_mid276_reg_1282;
wire   [0:0] not_exitcond_flatten17_mid276_fu_450_p2;
reg   [0:0] not_exitcond_flatten17_mid276_reg_1290;
wire   [3:0] select_ln84_fu_537_p3;
reg   [3:0] select_ln84_reg_1296;
reg    ap_predicate_op259_write_state33;
reg    ap_block_state33_io_grp4;
reg    ap_predicate_op264_writeresp_state38;
reg    ap_block_state38_pp0_stage2_iter7_grp4;
reg    ap_block_pp0_stage2_11001_grp4;
reg   [3:0] select_ln84_reg_1296_pp0_iter1_reg;
reg   [3:0] select_ln84_reg_1296_pp0_iter2_reg;
reg   [3:0] select_ln84_reg_1296_pp0_iter3_reg;
reg   [3:0] select_ln84_reg_1296_pp0_iter4_reg;
reg   [3:0] select_ln84_reg_1296_pp0_iter5_reg;
wire   [0:0] empty_51_fu_548_p2;
reg   [0:0] empty_51_reg_1302;
reg   [0:0] empty_51_reg_1302_pp0_iter1_reg;
reg   [0:0] empty_51_reg_1302_pp0_iter2_reg;
reg   [0:0] empty_51_reg_1302_pp0_iter3_reg;
wire   [0:0] exitcond_flatten_mid240_fu_553_p2;
reg   [0:0] exitcond_flatten_mid240_reg_1308;
wire   [2:0] kj_mid2_fu_619_p3;
reg   [2:0] kj_mid2_reg_1313;
wire   [2:0] select_ln90_fu_627_p3;
reg   [2:0] select_ln90_reg_1319;
wire   [0:0] icmp_ln91_3_fu_645_p2;
reg   [0:0] icmp_ln91_3_reg_1325_pp0_iter1_reg;
reg   [0:0] icmp_ln91_3_reg_1325_pp0_iter2_reg;
reg   [0:0] icmp_ln91_3_reg_1325_pp0_iter3_reg;
reg   [0:0] icmp_ln91_3_reg_1325_pp0_iter4_reg;
wire   [0:0] icmp_ln90_1_fu_651_p2;
reg   [0:0] icmp_ln90_1_reg_1329_pp0_iter1_reg;
reg   [0:0] icmp_ln90_1_reg_1329_pp0_iter2_reg;
reg   [0:0] icmp_ln90_1_reg_1329_pp0_iter3_reg;
reg   [0:0] icmp_ln90_1_reg_1329_pp0_iter4_reg;
wire   [3:0] j_mid248_fu_714_p3;
reg   [3:0] j_mid248_reg_1333;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_11001;
wire   [2:0] select_ln89_fu_734_p3;
reg   [2:0] select_ln89_reg_1339;
wire   [0:0] icmp_ln89_1_fu_741_p2;
reg   [0:0] icmp_ln89_1_reg_1345_pp0_iter1_reg;
reg   [0:0] icmp_ln89_1_reg_1345_pp0_iter2_reg;
reg   [0:0] icmp_ln89_1_reg_1345_pp0_iter3_reg;
reg   [0:0] icmp_ln89_1_reg_1345_pp0_iter4_reg;
wire   [3:0] select_ln85_fu_757_p3;
reg   [3:0] select_ln85_reg_1349;
wire    ap_block_pp0_stage4_11001_grp0;
reg    ap_block_pp0_stage4_subdone_grp0_done_reg;
wire    ap_block_pp0_stage4_subdone_grp0;
reg   [3:0] select_ln85_reg_1349_pp0_iter1_reg;
reg   [3:0] select_ln85_reg_1349_pp0_iter2_reg;
reg   [3:0] select_ln85_reg_1349_pp0_iter3_reg;
reg   [3:0] select_ln85_reg_1349_pp0_iter4_reg;
reg   [3:0] select_ln85_reg_1349_pp0_iter5_reg;
wire   [7:0] add_ln93_1_fu_880_p2;
reg   [7:0] add_ln93_1_reg_1359;
reg   [7:0] add_ln93_1_reg_1359_pp0_iter2_reg;
reg   [63:0] gmem_out_addr_12_reg_1364;
wire   [4:0] select_ln83_1_fu_929_p3;
reg   [4:0] select_ln83_1_reg_1370;
reg   [4:0] select_ln83_1_reg_1370_pp0_iter3_reg;
wire   [3:0] empty_57_fu_940_p1;
reg   [3:0] empty_57_reg_1375;
reg   [3:0] empty_57_reg_1375_pp0_iter3_reg;
reg   [3:0] empty_57_reg_1375_pp0_iter4_reg;
reg   [3:0] empty_57_reg_1375_pp0_iter5_reg;
reg   [31:0] gmem_out_addr_12_read_reg_1385;
reg    ap_block_pp0_stage4_11001_grp2;
reg   [31:0] weight_reg_1390;
wire   [31:0] pixel_fu_967_p1;
reg   [31:0] mul_reg_1400;
wire   [31:0] sum_8_mid228_fu_974_p3;
wire    ap_block_pp0_stage1_11001_grp0;
reg    ap_block_pp0_stage1_subdone_grp0_done_reg;
wire    ap_block_pp0_stage1_subdone_grp0;
reg   [31:0] conv2_biases_load_reg_1415;
wire    ap_block_pp0_stage2_11001_grp0;
reg    ap_block_pp0_stage2_subdone_grp0_done_reg;
wire    ap_block_pp0_stage2_subdone_grp0;
reg    ap_block_pp0_stage2_subdone;
reg   [31:0] sum_5_reg_1420;
reg   [31:0] sum_reg_1425;
reg   [63:0] gmem_out_addr_reg_1431;
wire   [31:0] select_ln100_fu_1119_p3;
reg   [31:0] select_ln100_reg_1438;
wire   [63:0] zext_ln93_4_fu_957_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln83_fu_982_p1;
wire    ap_block_pp0_stage1_grp0;
wire  signed [63:0] sext_ln92_fu_910_p1;
wire    ap_block_pp0_stage0;
wire  signed [63:0] sext_ln100_fu_1068_p1;
reg    ap_block_pp0_stage1_11001_grp1;
reg    ap_block_pp0_stage1_11001_grp3;
reg    ap_block_pp0_stage2_01001_grp4;
reg   [31:0] sum_6_fu_154;
wire    ap_loop_init;
wire    ap_block_pp0_stage4_grp0;
reg   [2:0] kj_fu_158;
wire   [2:0] add_ln91_fu_639_p2;
reg   [2:0] ki_fu_162;
reg   [5:0] indvar_flatten_fu_166;
wire   [5:0] select_ln90_1_fu_662_p3;
wire    ap_block_pp0_stage1;
reg   [2:0] ic_fu_170;
reg   [7:0] indvar_flatten15_fu_174;
wire   [7:0] select_ln89_1_fu_675_p3;
reg   [3:0] j_fu_178;
reg   [11:0] indvar_flatten41_fu_182;
wire   [11:0] select_ln85_1_fu_462_p3;
reg   [3:0] i_fu_186;
reg   [14:0] indvar_flatten77_fu_190;
wire   [14:0] select_ln84_1_fu_476_p3;
reg   [4:0] oc_fu_194;
reg   [17:0] indvar_flatten123_fu_198;
wire   [17:0] add_ln83_1_fu_366_p2;
reg    conv2_weights_ce0_local;
reg    conv2_biases_ce0_local;
reg   [31:0] grp_fu_272_p0;
reg   [31:0] grp_fu_272_p1;
wire   [0:0] icmp_ln90_fu_384_p2;
wire   [0:0] icmp_ln85_fu_402_p2;
wire   [0:0] exitcond_flatten43_not132_fu_420_p2;
wire   [0:0] and_ln83_1_fu_390_p2;
wire   [0:0] icmp_ln89_fu_396_p2;
wire   [0:0] and_ln83_2_fu_438_p2;
wire   [11:0] add_ln85_1_fu_456_p2;
wire   [14:0] add_ln84_1_fu_470_p2;
wire   [0:0] icmp_ln91_fu_515_p2;
wire   [3:0] select_ln83_fu_508_p3;
wire   [0:0] and_ln83_fu_521_p2;
wire   [3:0] add_ln84_fu_526_p2;
wire   [0:0] empty_50_fu_544_p2;
wire   [0:0] empty_52_fu_557_p2;
wire   [0:0] empty_53_fu_562_p2;
wire   [0:0] exitcond_flatten_mid272_not_fu_575_p2;
wire   [0:0] icmp_ln91_mid268_fu_532_p2;
wire   [0:0] icmp_ln91_mid236_fu_585_p2;
wire   [0:0] not_exitcond_flatten_mid240_fu_580_p2;
wire   [2:0] ki_mid27_fu_567_p3;
wire   [0:0] icmp_ln91_mid214_fu_590_p2;
wire   [0:0] empty_54_fu_602_p2;
wire   [0:0] empty_55_fu_608_p2;
wire   [0:0] empty_56_fu_614_p2;
wire   [2:0] add_ln90_fu_596_p2;
wire   [5:0] add_ln90_1_fu_657_p2;
wire   [7:0] add_ln89_1_fu_670_p2;
wire   [2:0] ic_mid222_fu_721_p3;
wire   [2:0] add_ln89_fu_728_p2;
wire   [3:0] add_ln85_fu_752_p2;
wire   [3:0] zext_ln91_fu_763_p1;
wire   [3:0] add_ln92_fu_766_p2;
wire   [6:0] tmp_23_fu_780_p3;
wire   [8:0] p_shl_fu_772_p3;
wire   [8:0] zext_ln92_fu_788_p1;
wire   [8:0] sub_ln92_fu_792_p2;
wire   [4:0] tmp_17_fu_810_p3;
wire   [4:0] tmp_19_fu_824_p3;
wire   [5:0] zext_ln93_1_fu_831_p1;
wire   [5:0] zext_ln93_fu_821_p1;
wire   [5:0] add_ln93_3_fu_835_p2;
wire   [5:0] zext_ln93_2_fu_841_p1;
wire   [5:0] add_ln93_fu_844_p2;
wire   [4:0] trunc_ln93_fu_850_p1;
wire   [6:0] tmp_20_fu_854_p3;
wire   [7:0] tmp_21_fu_862_p3;
wire   [7:0] zext_ln93_3_fu_870_p1;
wire   [7:0] sub_ln93_fu_874_p2;
wire   [7:0] select_ln89_cast_fu_807_p1;
wire   [63:0] zext_ln90_fu_817_p1;
wire   [12:0] grp_fu_1127_p4;
wire   [63:0] zext_ln92_2_fu_891_p1;
wire   [63:0] add_ln92_1_fu_886_p2;
wire   [63:0] add_ln92_2_fu_894_p2;
wire   [61:0] trunc_ln_fu_900_p4;
wire   [4:0] add_ln83_fu_923_p2;
wire   [11:0] tmp_22_fu_944_p3;
wire   [11:0] select_ln83_4_cast170_fu_936_p1;
wire   [11:0] add_ln93_2_fu_951_p2;
wire   [5:0] tmp_16_fu_991_p3;
wire   [63:0] zext_ln84_fu_998_p1;
wire   [10:0] tmp_fu_1014_p3;
wire   [12:0] p_shl2_fu_1007_p3;
wire   [12:0] zext_ln85_fu_1021_p1;
wire   [9:0] shl_ln_fu_1031_p3;
wire   [12:0] add_ln85_2_fu_1025_p2;
wire   [12:0] zext_ln100_fu_1038_p1;
wire   [12:0] add_ln100_2_fu_1042_p2;
wire   [63:0] zext_ln100_1_fu_1048_p1;
wire   [63:0] add_ln100_fu_1002_p2;
wire   [63:0] add_ln100_1_fu_1052_p2;
wire   [61:0] trunc_ln4_fu_1058_p4;
wire   [31:0] bitcast_ln100_fu_1078_p1;
wire   [7:0] tmp_s_fu_1081_p4;
wire   [22:0] trunc_ln100_fu_1091_p1;
wire   [0:0] icmp_ln100_1_fu_1101_p2;
wire   [0:0] icmp_ln100_fu_1095_p2;
wire   [0:0] or_ln100_fu_1107_p2;
wire   [0:0] and_ln100_fu_1113_p2;
wire   [2:0] grp_fu_1127_p0;
wire   [3:0] grp_fu_1127_p1;
wire   [8:0] grp_fu_1127_p2;
wire   [8:0] grp_fu_1127_p3;
reg    grp_fu_272_ce;
reg    ap_block_pp0_stage4_11001;
reg    ap_block_pp0_stage2_11001;
reg    grp_fu_276_ce;
reg    grp_fu_280_ce;
wire    ap_block_pp0_stage0_00001;
reg    grp_fu_1127_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter6_stage2;
reg    ap_idle_pp0_0to5;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [4:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to7;
wire    ap_block_pp0_stage3_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_block_pp0_stage4_00001_grp0;
wire   [3:0] grp_fu_1127_p00;
wire   [12:0] grp_fu_1127_p30;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp1_done_reg = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp3_done_reg = 1'b0;
#0 ap_block_pp0_stage4_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage2_subdone_grp0_done_reg = 1'b0;
#0 sum_6_fu_154 = 32'd0;
#0 kj_fu_158 = 3'd0;
#0 ki_fu_162 = 3'd0;
#0 indvar_flatten_fu_166 = 6'd0;
#0 ic_fu_170 = 3'd0;
#0 indvar_flatten15_fu_174 = 8'd0;
#0 j_fu_178 = 4'd0;
#0 indvar_flatten41_fu_182 = 12'd0;
#0 i_fu_186 = 4'd0;
#0 indvar_flatten77_fu_190 = 15'd0;
#0 oc_fu_194 = 5'd0;
#0 indvar_flatten123_fu_198 = 18'd0;
#0 ap_done_reg = 1'b0;
end

top_c2_conv2_biases_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv2_biases_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv2_biases_address0),
    .ce0(conv2_biases_ce0_local),
    .q0(conv2_biases_q0)
);

top_c2_conv2_weights_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
conv2_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv2_weights_address0),
    .ce0(conv2_weights_ce0_local),
    .q0(conv2_weights_q0)
);

top_ama_addmuladd_3ns_4ns_9ns_9ns_13_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 9 ),
    .din3_WIDTH( 9 ),
    .dout_WIDTH( 13 ))
ama_addmuladd_3ns_4ns_9ns_9ns_13_4_1_U159(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1127_p0),
    .din1(grp_fu_1127_p1),
    .din2(grp_fu_1127_p2),
    .din3(grp_fu_1127_p3),
    .ce(grp_fu_1127_ce),
    .dout(grp_fu_1127_p4)
);

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage4),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp0)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp1_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp1_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp1)) begin
                ap_block_pp0_stage1_subdone_grp1_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp3_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp3_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp3)) begin
                ap_block_pp0_stage1_subdone_grp3_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage2_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage2)) begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_block_pp0_stage2_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage2_subdone_grp0)) begin
                ap_block_pp0_stage2_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage4_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage4)) begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_block_pp0_stage4_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage4_subdone_grp0)) begin
                ap_block_pp0_stage4_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage4)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_condition_exit_pp0_iter6_stage2) & (ap_idle_pp0_0to5 == 1'b1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_condition_exit_pp0_iter6_stage2) & (ap_idle_pp0_0to5 == 1'b1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_condition_exit_pp0_iter6_stage2) & (ap_idle_pp0_0to5 == 1'b1))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_condition_exit_pp0_iter6_stage2) & (ap_idle_pp0_0to5 == 1'b1))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_condition_exit_pp0_iter6_stage2) & (ap_idle_pp0_0to5 == 1'b1))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_condition_exit_pp0_iter6_stage2) & (ap_idle_pp0_0to5 == 1'b1))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_fu_186 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln83_reg_1242 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001_grp4))) begin
        i_fu_186 <= select_ln84_fu_537_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ic_fu_170 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln83_reg_1242 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ic_fu_170 <= select_ln89_fu_734_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten123_fu_198 <= 18'd0;
    end else if (((icmp_ln83_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar_flatten123_fu_198 <= add_ln83_1_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten15_fu_174 <= 8'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln83_reg_1242 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001_grp4))) begin
        indvar_flatten15_fu_174 <= select_ln89_1_fu_675_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten41_fu_182 <= 12'd0;
    end else if (((icmp_ln83_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar_flatten41_fu_182 <= select_ln85_1_fu_462_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten77_fu_190 <= 15'd0;
    end else if (((icmp_ln83_fu_360_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar_flatten77_fu_190 <= select_ln84_1_fu_476_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_fu_166 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln83_reg_1242 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001_grp4))) begin
        indvar_flatten_fu_166 <= select_ln90_1_fu_662_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_fu_178 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln83_reg_1242 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0))) begin
        j_fu_178 <= select_ln85_fu_757_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ki_fu_162 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln83_reg_1242 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001_grp4))) begin
        ki_fu_162 <= select_ln90_fu_627_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kj_fu_158 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln83_reg_1242 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001_grp4))) begin
        kj_fu_158 <= add_ln91_fu_639_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        oc_fu_194 <= 5'd0;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        oc_fu_194 <= select_ln83_1_fu_929_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_6_fu_154 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        sum_6_fu_154 <= grp_fu_626_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln93_1_reg_1359 <= add_ln93_1_fu_880_p2;
        add_ln93_1_reg_1359_pp0_iter2_reg <= add_ln93_1_reg_1359;
        gmem_out_addr_12_reg_1364 <= sext_ln92_fu_910_p1;
        gmem_out_addr_reg_1431 <= sext_ln100_fu_1068_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        and_ln83_3_reg_1259 <= and_ln83_3_fu_408_p2;
        empty_reg_1265 <= empty_fu_414_p2;
        exitcond_flatten17_mid276_reg_1282 <= exitcond_flatten17_mid276_fu_444_p2;
        exitcond_flatten_mid272_reg_1276 <= exitcond_flatten_mid272_fu_432_p2;
        icmp_ln83_reg_1242 <= icmp_ln83_fu_360_p2;
        icmp_ln83_reg_1242_pp0_iter1_reg <= icmp_ln83_reg_1242;
        icmp_ln83_reg_1242_pp0_iter2_reg <= icmp_ln83_reg_1242_pp0_iter1_reg;
        icmp_ln83_reg_1242_pp0_iter3_reg <= icmp_ln83_reg_1242_pp0_iter2_reg;
        icmp_ln83_reg_1242_pp0_iter4_reg <= icmp_ln83_reg_1242_pp0_iter3_reg;
        icmp_ln83_reg_1242_pp0_iter5_reg <= icmp_ln83_reg_1242_pp0_iter4_reg;
        icmp_ln83_reg_1242_pp0_iter6_reg <= icmp_ln83_reg_1242_pp0_iter5_reg;
        icmp_ln84_reg_1246 <= icmp_ln84_fu_372_p2;
        icmp_ln84_reg_1246_pp0_iter1_reg <= icmp_ln84_reg_1246;
        icmp_ln84_reg_1246_pp0_iter2_reg <= icmp_ln84_reg_1246_pp0_iter1_reg;
        indvar_flatten15_load_reg_1237 <= indvar_flatten15_fu_174;
        indvar_flatten_load_reg_1232 <= indvar_flatten_fu_166;
        not_exitcond_flatten17_mid276_reg_1290 <= not_exitcond_flatten17_mid276_fu_450_p2;
        not_exitcond_flatten43_mid2122131_reg_1271 <= not_exitcond_flatten43_mid2122131_fu_426_p2;
        xor_ln83_reg_1254 <= xor_ln83_fu_378_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage2_11001_grp0))) begin
        conv2_biases_load_reg_1415 <= conv2_biases_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001_grp4))) begin
        empty_51_reg_1302 <= empty_51_fu_548_p2;
        empty_51_reg_1302_pp0_iter1_reg <= empty_51_reg_1302;
        empty_51_reg_1302_pp0_iter2_reg <= empty_51_reg_1302_pp0_iter1_reg;
        empty_51_reg_1302_pp0_iter3_reg <= empty_51_reg_1302_pp0_iter2_reg;
        exitcond_flatten_mid240_reg_1308 <= exitcond_flatten_mid240_fu_553_p2;
        icmp_ln90_1_reg_1329 <= icmp_ln90_1_fu_651_p2;
        icmp_ln90_1_reg_1329_pp0_iter1_reg <= icmp_ln90_1_reg_1329;
        icmp_ln90_1_reg_1329_pp0_iter2_reg <= icmp_ln90_1_reg_1329_pp0_iter1_reg;
        icmp_ln90_1_reg_1329_pp0_iter3_reg <= icmp_ln90_1_reg_1329_pp0_iter2_reg;
        icmp_ln90_1_reg_1329_pp0_iter4_reg <= icmp_ln90_1_reg_1329_pp0_iter3_reg;
        icmp_ln90_1_reg_1329_pp0_iter5_reg <= icmp_ln90_1_reg_1329_pp0_iter4_reg;
        icmp_ln90_1_reg_1329_pp0_iter6_reg <= icmp_ln90_1_reg_1329_pp0_iter5_reg;
        icmp_ln91_3_reg_1325 <= icmp_ln91_3_fu_645_p2;
        icmp_ln91_3_reg_1325_pp0_iter1_reg <= icmp_ln91_3_reg_1325;
        icmp_ln91_3_reg_1325_pp0_iter2_reg <= icmp_ln91_3_reg_1325_pp0_iter1_reg;
        icmp_ln91_3_reg_1325_pp0_iter3_reg <= icmp_ln91_3_reg_1325_pp0_iter2_reg;
        icmp_ln91_3_reg_1325_pp0_iter4_reg <= icmp_ln91_3_reg_1325_pp0_iter3_reg;
        icmp_ln91_3_reg_1325_pp0_iter5_reg <= icmp_ln91_3_reg_1325_pp0_iter4_reg;
        icmp_ln91_3_reg_1325_pp0_iter6_reg <= icmp_ln91_3_reg_1325_pp0_iter5_reg;
        kj_mid2_reg_1313 <= kj_mid2_fu_619_p3;
        select_ln84_reg_1296 <= select_ln84_fu_537_p3;
        select_ln84_reg_1296_pp0_iter1_reg <= select_ln84_reg_1296;
        select_ln84_reg_1296_pp0_iter2_reg <= select_ln84_reg_1296_pp0_iter1_reg;
        select_ln84_reg_1296_pp0_iter3_reg <= select_ln84_reg_1296_pp0_iter2_reg;
        select_ln84_reg_1296_pp0_iter4_reg <= select_ln84_reg_1296_pp0_iter3_reg;
        select_ln84_reg_1296_pp0_iter5_reg <= select_ln84_reg_1296_pp0_iter4_reg;
        select_ln90_reg_1319 <= select_ln90_fu_627_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        empty_57_reg_1375 <= empty_57_fu_940_p1;
        empty_57_reg_1375_pp0_iter3_reg <= empty_57_reg_1375;
        empty_57_reg_1375_pp0_iter4_reg <= empty_57_reg_1375_pp0_iter3_reg;
        empty_57_reg_1375_pp0_iter5_reg <= empty_57_reg_1375_pp0_iter4_reg;
        icmp_ln89_1_reg_1345 <= icmp_ln89_1_fu_741_p2;
        icmp_ln89_1_reg_1345_pp0_iter1_reg <= icmp_ln89_1_reg_1345;
        icmp_ln89_1_reg_1345_pp0_iter2_reg <= icmp_ln89_1_reg_1345_pp0_iter1_reg;
        icmp_ln89_1_reg_1345_pp0_iter3_reg <= icmp_ln89_1_reg_1345_pp0_iter2_reg;
        icmp_ln89_1_reg_1345_pp0_iter4_reg <= icmp_ln89_1_reg_1345_pp0_iter3_reg;
        icmp_ln89_1_reg_1345_pp0_iter5_reg <= icmp_ln89_1_reg_1345_pp0_iter4_reg;
        icmp_ln89_1_reg_1345_pp0_iter6_reg <= icmp_ln89_1_reg_1345_pp0_iter5_reg;
        j_mid248_reg_1333 <= j_mid248_fu_714_p3;
        mul_reg_1400 <= grp_fu_630_p_dout0;
        select_ln83_1_reg_1370 <= select_ln83_1_fu_929_p3;
        select_ln83_1_reg_1370_pp0_iter3_reg <= select_ln83_1_reg_1370;
        select_ln89_reg_1339 <= select_ln89_fu_734_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001_grp2))) begin
        gmem_out_addr_12_read_reg_1385 <= m_axi_gmem_out_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0))) begin
        select_ln100_reg_1438 <= select_ln100_fu_1119_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0))) begin
        select_ln85_reg_1349 <= select_ln85_fu_757_p3;
        select_ln85_reg_1349_pp0_iter1_reg <= select_ln85_reg_1349;
        select_ln85_reg_1349_pp0_iter2_reg <= select_ln85_reg_1349_pp0_iter1_reg;
        select_ln85_reg_1349_pp0_iter3_reg <= select_ln85_reg_1349_pp0_iter2_reg;
        select_ln85_reg_1349_pp0_iter4_reg <= select_ln85_reg_1349_pp0_iter3_reg;
        select_ln85_reg_1349_pp0_iter5_reg <= select_ln85_reg_1349_pp0_iter4_reg;
        weight_reg_1390 <= conv2_weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        sum_5_reg_1420 <= grp_fu_626_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0))) begin
        sum_reg_1425 <= grp_fu_626_p_dout0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln83_reg_1242 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
        ap_condition_exit_pp0_iter0_stage4 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln83_reg_1242_pp0_iter6_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
        ap_condition_exit_pp0_iter6_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter6_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to5 = 1'b1;
    end else begin
        ap_idle_pp0_0to5 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to7 = 1'b1;
    end else begin
        ap_idle_pp0_1to7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0))) begin
        conv2_biases_ce0_local = 1'b1;
    end else begin
        conv2_biases_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        conv2_weights_ce0_local = 1'b1;
    end else begin
        conv2_weights_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg) & (1'b0 == ap_block_pp0_stage1_grp1))) begin
        gmem_out_blk_n_AR = m_axi_gmem_out_0_ARREADY;
    end else begin
        gmem_out_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln89_1_reg_1345_pp0_iter5_reg == 1'd1) & (icmp_ln90_1_reg_1329_pp0_iter5_reg == 1'd1) & (icmp_ln91_3_reg_1325_pp0_iter5_reg == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone_grp3_done_reg) & (1'b0 == ap_block_pp0_stage1_grp3))) begin
        gmem_out_blk_n_AW = m_axi_gmem_out_0_AWREADY;
    end else begin
        gmem_out_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln89_1_reg_1345_pp0_iter6_reg == 1'd1) & (icmp_ln90_1_reg_1329_pp0_iter6_reg == 1'd1) & (icmp_ln91_3_reg_1325_pp0_iter6_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_grp4))) begin
        gmem_out_blk_n_B = m_axi_gmem_out_0_BVALID;
    end else begin
        gmem_out_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_grp2))) begin
        gmem_out_blk_n_R = m_axi_gmem_out_0_RVALID;
    end else begin
        gmem_out_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln89_1_reg_1345_pp0_iter5_reg == 1'd1) & (icmp_ln90_1_reg_1329_pp0_iter5_reg == 1'd1) & (icmp_ln91_3_reg_1325_pp0_iter5_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2_grp4))) begin
        gmem_out_blk_n_W = m_axi_gmem_out_0_WREADY;
    end else begin
        gmem_out_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001_grp4)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        grp_fu_1127_ce = 1'b1;
    end else begin
        grp_fu_1127_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage2_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0)))) begin
        grp_fu_272_ce = 1'b1;
    end else begin
        grp_fu_272_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_272_p0 = sum_5_reg_1420;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_grp0))) begin
        grp_fu_272_p0 = sum_8_mid228_fu_974_p3;
    end else begin
        grp_fu_272_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_272_p1 = conv2_biases_load_reg_1415;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_grp0))) begin
        grp_fu_272_p1 = mul_reg_1400;
    end else begin
        grp_fu_272_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage2_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0)))) begin
        grp_fu_276_ce = 1'b1;
    end else begin
        grp_fu_276_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0)))) begin
        grp_fu_280_ce = 1'b1;
    end else begin
        grp_fu_280_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_grp1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg))) begin
        m_axi_gmem_out_0_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_out_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (ap_predicate_op258_writereq_state32 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001_grp3) & (1'b0 == ap_block_pp0_stage1_subdone_grp3_done_reg))) begin
        m_axi_gmem_out_0_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_out_0_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (ap_predicate_op264_writeresp_state38 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001_grp4))) begin
        m_axi_gmem_out_0_BREADY = 1'b1;
    end else begin
        m_axi_gmem_out_0_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001_grp2))) begin
        m_axi_gmem_out_0_RREADY = 1'b1;
    end else begin
        m_axi_gmem_out_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (ap_predicate_op259_write_state33 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001_grp4))) begin
        m_axi_gmem_out_0_WVALID = 1'b1;
    end else begin
        m_axi_gmem_out_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to7 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if (((1'b1 == ap_condition_exit_pp0_iter6_stage2) & (ap_idle_pp0_0to5 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln100_1_fu_1052_p2 = (zext_ln100_1_fu_1048_p1 + add_ln100_fu_1002_p2);

assign add_ln100_2_fu_1042_p2 = (add_ln85_2_fu_1025_p2 + zext_ln100_fu_1038_p1);

assign add_ln100_fu_1002_p2 = (zext_ln84_fu_998_p1 + output_r);

assign add_ln83_1_fu_366_p2 = (indvar_flatten123_fu_198 + 18'd1);

assign add_ln83_fu_923_p2 = (oc_fu_194 + 5'd1);

assign add_ln84_1_fu_470_p2 = (indvar_flatten77_fu_190 + 15'd1);

assign add_ln84_fu_526_p2 = (select_ln83_fu_508_p3 + 4'd1);

assign add_ln85_1_fu_456_p2 = (indvar_flatten41_fu_182 + 12'd1);

assign add_ln85_2_fu_1025_p2 = (p_shl2_fu_1007_p3 + zext_ln85_fu_1021_p1);

assign add_ln85_fu_752_p2 = (j_mid248_reg_1333 + 4'd1);

assign add_ln89_1_fu_670_p2 = (indvar_flatten15_load_reg_1237 + 8'd1);

assign add_ln89_fu_728_p2 = (ic_mid222_fu_721_p3 + 3'd1);

assign add_ln90_1_fu_657_p2 = (indvar_flatten_load_reg_1232 + 6'd1);

assign add_ln90_fu_596_p2 = (ki_mid27_fu_567_p3 + 3'd1);

assign add_ln91_fu_639_p2 = (kj_mid2_fu_619_p3 + 3'd1);

assign add_ln92_1_fu_886_p2 = (zext_ln90_fu_817_p1 + input_r);

assign add_ln92_2_fu_894_p2 = (zext_ln92_2_fu_891_p1 + add_ln92_1_fu_886_p2);

assign add_ln92_fu_766_p2 = (zext_ln91_fu_763_p1 + select_ln85_fu_757_p3);

assign add_ln93_1_fu_880_p2 = (sub_ln93_fu_874_p2 + select_ln89_cast_fu_807_p1);

assign add_ln93_2_fu_951_p2 = (tmp_22_fu_944_p3 + select_ln83_4_cast170_fu_936_p1);

assign add_ln93_3_fu_835_p2 = (zext_ln93_1_fu_831_p1 + zext_ln93_fu_821_p1);

assign add_ln93_fu_844_p2 = (add_ln93_3_fu_835_p2 + zext_ln93_2_fu_841_p1);

assign and_ln100_fu_1113_p2 = (or_ln100_fu_1107_p2 & grp_fu_634_p_dout0);

assign and_ln83_1_fu_390_p2 = (xor_ln83_fu_378_p2 & icmp_ln90_fu_384_p2);

assign and_ln83_2_fu_438_p2 = (xor_ln83_fu_378_p2 & icmp_ln89_fu_396_p2);

assign and_ln83_3_fu_408_p2 = (xor_ln83_fu_378_p2 & icmp_ln85_fu_402_p2);

assign and_ln83_fu_521_p2 = (xor_ln83_reg_1254 & icmp_ln91_fu_515_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((m_axi_gmem_out_0_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_block_state32_io_grp3) & (1'b0 == ap_block_pp0_stage1_subdone_grp3_done_reg)));
end

assign ap_block_pp0_stage1_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001_grp1 = ((m_axi_gmem_out_0_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg));
end

always @ (*) begin
    ap_block_pp0_stage1_11001_grp3 = ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_block_state32_io_grp3) & (1'b0 == ap_block_pp0_stage1_subdone_grp3_done_reg));
end

assign ap_block_pp0_stage1_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_grp1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_grp3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((m_axi_gmem_out_0_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_block_state32_io_grp3) & (1'b0 == ap_block_pp0_stage1_subdone_grp3_done_reg)));
end

assign ap_block_pp0_stage1_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone_grp1 = ((m_axi_gmem_out_0_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone_grp1_done_reg));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone_grp3 = ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_block_state32_io_grp3) & (1'b0 == ap_block_pp0_stage1_subdone_grp3_done_reg));
end

always @ (*) begin
    ap_block_pp0_stage2_01001_grp4 = ((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state38_pp0_stage2_iter7_grp4));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state38_pp0_stage2_iter7_grp4)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_block_state33_io_grp4)));
end

assign ap_block_pp0_stage2_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001_grp4 = (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state38_pp0_stage2_iter7_grp4)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_block_state33_io_grp4)));
end

assign ap_block_pp0_stage2_grp4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_block_state38_pp0_stage2_iter7_grp4)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_block_state33_io_grp4)));
end

assign ap_block_pp0_stage2_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_00001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((m_axi_gmem_out_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_pp0_stage4_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001_grp2 = ((m_axi_gmem_out_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_pp0_stage4_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_grp2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((m_axi_gmem_out_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_pp0_stage4_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state32_io_grp3 = ((m_axi_gmem_out_0_AWREADY == 1'b0) & (ap_predicate_op258_writereq_state32 == 1'b1));
end

always @ (*) begin
    ap_block_state33_io_grp4 = ((m_axi_gmem_out_0_WREADY == 1'b0) & (ap_predicate_op259_write_state33 == 1'b1));
end

always @ (*) begin
    ap_block_state38_pp0_stage2_iter7_grp4 = ((ap_predicate_op264_writeresp_state38 == 1'b1) & (m_axi_gmem_out_0_BVALID == 1'b0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage4;

always @ (*) begin
    ap_predicate_op258_writereq_state32 = ((icmp_ln89_1_reg_1345_pp0_iter5_reg == 1'd1) & (icmp_ln90_1_reg_1329_pp0_iter5_reg == 1'd1) & (icmp_ln91_3_reg_1325_pp0_iter5_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op259_write_state33 = ((icmp_ln89_1_reg_1345_pp0_iter5_reg == 1'd1) & (icmp_ln90_1_reg_1329_pp0_iter5_reg == 1'd1) & (icmp_ln91_3_reg_1325_pp0_iter5_reg == 1'd1));
end

always @ (*) begin
    ap_predicate_op264_writeresp_state38 = ((icmp_ln89_1_reg_1345_pp0_iter6_reg == 1'd1) & (icmp_ln90_1_reg_1329_pp0_iter6_reg == 1'd1) & (icmp_ln91_3_reg_1325_pp0_iter6_reg == 1'd1));
end

assign ap_ready = ap_ready_sig;

assign bitcast_ln100_fu_1078_p1 = sum_reg_1425;

assign conv2_biases_address0 = zext_ln83_fu_982_p1;

assign conv2_weights_address0 = zext_ln93_4_fu_957_p1;

assign empty_50_fu_544_p2 = (exitcond_flatten17_mid276_reg_1282 | and_ln83_3_reg_1259);

assign empty_51_fu_548_p2 = (icmp_ln84_reg_1246 | empty_50_fu_544_p2);

assign empty_52_fu_557_p2 = (exitcond_flatten_mid240_fu_553_p2 | exitcond_flatten17_mid276_reg_1282);

assign empty_53_fu_562_p2 = (empty_reg_1265 | empty_52_fu_557_p2);

assign empty_54_fu_602_p2 = (exitcond_flatten_mid240_fu_553_p2 | empty_50_fu_544_p2);

assign empty_55_fu_608_p2 = (icmp_ln91_mid214_fu_590_p2 | empty_54_fu_602_p2);

assign empty_56_fu_614_p2 = (icmp_ln84_reg_1246 | empty_55_fu_608_p2);

assign empty_57_fu_940_p1 = select_ln83_1_fu_929_p3[3:0];

assign empty_fu_414_p2 = (icmp_ln84_fu_372_p2 | and_ln83_3_fu_408_p2);

assign exitcond_flatten17_mid276_fu_444_p2 = (not_exitcond_flatten43_mid2122131_fu_426_p2 & and_ln83_2_fu_438_p2);

assign exitcond_flatten43_not132_fu_420_p2 = (icmp_ln85_fu_402_p2 ^ 1'd1);

assign exitcond_flatten_mid240_fu_553_p2 = (not_exitcond_flatten17_mid276_reg_1290 & exitcond_flatten_mid272_reg_1276);

assign exitcond_flatten_mid272_fu_432_p2 = (not_exitcond_flatten43_mid2122131_fu_426_p2 & and_ln83_1_fu_390_p2);

assign exitcond_flatten_mid272_not_fu_575_p2 = (exitcond_flatten_mid272_reg_1276 ^ 1'd1);

assign grp_fu_1127_p0 = grp_fu_1127_p00;

assign grp_fu_1127_p00 = select_ln90_fu_627_p3;

assign grp_fu_1127_p1 = ((and_ln83_3_reg_1259[0:0] == 1'b1) ? add_ln84_fu_526_p2 : select_ln83_fu_508_p3);

assign grp_fu_1127_p2 = 13'd336;

assign grp_fu_1127_p3 = grp_fu_1127_p30;

assign grp_fu_1127_p30 = sub_ln92_fu_792_p2;

assign grp_fu_626_p_ce = grp_fu_272_ce;

assign grp_fu_626_p_din0 = grp_fu_272_p0;

assign grp_fu_626_p_din1 = grp_fu_272_p1;

assign grp_fu_626_p_opcode = 2'd0;

assign grp_fu_630_p_ce = grp_fu_276_ce;

assign grp_fu_630_p_din0 = pixel_fu_967_p1;

assign grp_fu_630_p_din1 = weight_reg_1390;

assign grp_fu_634_p_ce = grp_fu_280_ce;

assign grp_fu_634_p_din0 = sum_reg_1425;

assign grp_fu_634_p_din1 = 32'd0;

assign grp_fu_634_p_opcode = 5'd2;

assign ic_mid222_fu_721_p3 = ((empty_51_reg_1302[0:0] == 1'b1) ? 3'd0 : ic_fu_170);

assign icmp_ln100_1_fu_1101_p2 = ((trunc_ln100_fu_1091_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln100_fu_1095_p2 = ((tmp_s_fu_1081_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_360_p2 = ((indvar_flatten123_fu_198 == 18'd240000) ? 1'b1 : 1'b0);

assign icmp_ln84_fu_372_p2 = ((indvar_flatten77_fu_190 == 15'd15000) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_402_p2 = ((indvar_flatten41_fu_182 == 12'd1500) ? 1'b1 : 1'b0);

assign icmp_ln89_1_fu_741_p2 = ((select_ln89_fu_734_p3 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_396_p2 = ((indvar_flatten15_fu_174 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln90_1_fu_651_p2 = ((select_ln90_fu_627_p3 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_384_p2 = ((indvar_flatten_fu_166 == 6'd25) ? 1'b1 : 1'b0);

assign icmp_ln91_3_fu_645_p2 = ((add_ln91_fu_639_p2 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_515_p2 = ((kj_fu_158 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln91_mid214_fu_590_p2 = (not_exitcond_flatten_mid240_fu_580_p2 & icmp_ln91_mid236_fu_585_p2);

assign icmp_ln91_mid236_fu_585_p2 = (not_exitcond_flatten17_mid276_reg_1290 & icmp_ln91_mid268_fu_532_p2);

assign icmp_ln91_mid268_fu_532_p2 = (not_exitcond_flatten43_mid2122131_reg_1271 & and_ln83_fu_521_p2);

assign j_mid248_fu_714_p3 = ((empty_reg_1265[0:0] == 1'b1) ? 4'd0 : j_fu_178);

assign ki_mid27_fu_567_p3 = ((empty_53_fu_562_p2[0:0] == 1'b1) ? 3'd0 : ki_fu_162);

assign kj_mid2_fu_619_p3 = ((empty_56_fu_614_p2[0:0] == 1'b1) ? 3'd0 : kj_fu_158);

assign m_axi_gmem_out_0_ARADDR = gmem_out_addr_12_reg_1364;

assign m_axi_gmem_out_0_ARBURST = 2'd0;

assign m_axi_gmem_out_0_ARCACHE = 4'd0;

assign m_axi_gmem_out_0_ARID = 1'd0;

assign m_axi_gmem_out_0_ARLEN = 64'd1;

assign m_axi_gmem_out_0_ARLOCK = 2'd0;

assign m_axi_gmem_out_0_ARPROT = 3'd0;

assign m_axi_gmem_out_0_ARQOS = 4'd0;

assign m_axi_gmem_out_0_ARREGION = 4'd0;

assign m_axi_gmem_out_0_ARSIZE = 3'd0;

assign m_axi_gmem_out_0_ARUSER = 1'd0;

assign m_axi_gmem_out_0_AWADDR = gmem_out_addr_reg_1431;

assign m_axi_gmem_out_0_AWBURST = 2'd0;

assign m_axi_gmem_out_0_AWCACHE = 4'd0;

assign m_axi_gmem_out_0_AWID = 1'd0;

assign m_axi_gmem_out_0_AWLEN = 64'd1;

assign m_axi_gmem_out_0_AWLOCK = 2'd0;

assign m_axi_gmem_out_0_AWPROT = 3'd0;

assign m_axi_gmem_out_0_AWQOS = 4'd0;

assign m_axi_gmem_out_0_AWREGION = 4'd0;

assign m_axi_gmem_out_0_AWSIZE = 3'd0;

assign m_axi_gmem_out_0_AWUSER = 1'd0;

assign m_axi_gmem_out_0_WDATA = select_ln100_reg_1438;

assign m_axi_gmem_out_0_WID = 1'd0;

assign m_axi_gmem_out_0_WLAST = 1'b0;

assign m_axi_gmem_out_0_WSTRB = 4'd15;

assign m_axi_gmem_out_0_WUSER = 1'd0;

assign not_exitcond_flatten17_mid276_fu_450_p2 = (exitcond_flatten17_mid276_fu_444_p2 ^ 1'd1);

assign not_exitcond_flatten43_mid2122131_fu_426_p2 = (icmp_ln84_fu_372_p2 | exitcond_flatten43_not132_fu_420_p2);

assign not_exitcond_flatten_mid240_fu_580_p2 = (exitcond_flatten_mid272_not_fu_575_p2 | exitcond_flatten17_mid276_reg_1282);

assign or_ln100_fu_1107_p2 = (icmp_ln100_fu_1095_p2 | icmp_ln100_1_fu_1101_p2);

assign p_shl2_fu_1007_p3 = {{select_ln84_reg_1296_pp0_iter5_reg}, {9'd0}};

assign p_shl_fu_772_p3 = {{add_ln92_fu_766_p2}, {5'd0}};

assign pixel_fu_967_p1 = gmem_out_addr_12_read_reg_1385;

assign select_ln100_fu_1119_p3 = ((and_ln100_fu_1113_p2[0:0] == 1'b1) ? bitcast_ln100_fu_1078_p1 : 32'd0);

assign select_ln83_1_fu_929_p3 = ((icmp_ln84_reg_1246_pp0_iter2_reg[0:0] == 1'b1) ? add_ln83_fu_923_p2 : oc_fu_194);

assign select_ln83_4_cast170_fu_936_p1 = select_ln83_1_fu_929_p3;

assign select_ln83_fu_508_p3 = ((icmp_ln84_reg_1246[0:0] == 1'b1) ? 4'd0 : i_fu_186);

assign select_ln84_1_fu_476_p3 = ((icmp_ln84_fu_372_p2[0:0] == 1'b1) ? 15'd1 : add_ln84_1_fu_470_p2);

assign select_ln84_fu_537_p3 = ((and_ln83_3_reg_1259[0:0] == 1'b1) ? add_ln84_fu_526_p2 : select_ln83_fu_508_p3);

assign select_ln85_1_fu_462_p3 = ((empty_fu_414_p2[0:0] == 1'b1) ? 12'd1 : add_ln85_1_fu_456_p2);

assign select_ln85_fu_757_p3 = ((exitcond_flatten17_mid276_reg_1282[0:0] == 1'b1) ? add_ln85_fu_752_p2 : j_mid248_reg_1333);

assign select_ln89_1_fu_675_p3 = ((empty_51_fu_548_p2[0:0] == 1'b1) ? 8'd1 : add_ln89_1_fu_670_p2);

assign select_ln89_cast_fu_807_p1 = select_ln89_reg_1339;

assign select_ln89_fu_734_p3 = ((exitcond_flatten_mid240_reg_1308[0:0] == 1'b1) ? add_ln89_fu_728_p2 : ic_mid222_fu_721_p3);

assign select_ln90_1_fu_662_p3 = ((empty_53_fu_562_p2[0:0] == 1'b1) ? 6'd1 : add_ln90_1_fu_657_p2);

assign select_ln90_fu_627_p3 = ((icmp_ln91_mid214_fu_590_p2[0:0] == 1'b1) ? add_ln90_fu_596_p2 : ki_mid27_fu_567_p3);

assign sext_ln100_fu_1068_p1 = $signed(trunc_ln4_fu_1058_p4);

assign sext_ln92_fu_910_p1 = $signed(trunc_ln_fu_900_p4);

assign shl_ln_fu_1031_p3 = {{select_ln85_reg_1349_pp0_iter5_reg}, {6'd0}};

assign sub_ln92_fu_792_p2 = (p_shl_fu_772_p3 - zext_ln92_fu_788_p1);

assign sub_ln93_fu_874_p2 = (tmp_21_fu_862_p3 - zext_ln93_3_fu_870_p1);

assign sum_8_mid228_fu_974_p3 = ((empty_51_reg_1302_pp0_iter3_reg[0:0] == 1'b1) ? 32'd0 : sum_6_fu_154);

assign tmp_16_fu_991_p3 = {{empty_57_reg_1375_pp0_iter5_reg}, {2'd0}};

assign tmp_17_fu_810_p3 = {{select_ln89_reg_1339}, {2'd0}};

assign tmp_19_fu_824_p3 = {{select_ln90_reg_1319}, {2'd0}};

assign tmp_20_fu_854_p3 = {{add_ln93_fu_844_p2}, {1'd0}};

assign tmp_21_fu_862_p3 = {{trunc_ln93_fu_850_p1}, {3'd0}};

assign tmp_22_fu_944_p3 = {{add_ln93_1_reg_1359_pp0_iter2_reg}, {4'd0}};

assign tmp_23_fu_780_p3 = {{add_ln92_fu_766_p2}, {3'd0}};

assign tmp_fu_1014_p3 = {{select_ln84_reg_1296_pp0_iter5_reg}, {7'd0}};

assign tmp_s_fu_1081_p4 = {{bitcast_ln100_fu_1078_p1[30:23]}};

assign trunc_ln100_fu_1091_p1 = bitcast_ln100_fu_1078_p1[22:0];

assign trunc_ln4_fu_1058_p4 = {{add_ln100_1_fu_1052_p2[63:2]}};

assign trunc_ln93_fu_850_p1 = add_ln93_fu_844_p2[4:0];

assign trunc_ln_fu_900_p4 = {{add_ln92_2_fu_894_p2[63:2]}};

assign xor_ln83_fu_378_p2 = (icmp_ln84_fu_372_p2 ^ 1'd1);

assign zext_ln100_1_fu_1048_p1 = add_ln100_2_fu_1042_p2;

assign zext_ln100_fu_1038_p1 = shl_ln_fu_1031_p3;

assign zext_ln83_fu_982_p1 = select_ln83_1_reg_1370_pp0_iter3_reg;

assign zext_ln84_fu_998_p1 = tmp_16_fu_991_p3;

assign zext_ln85_fu_1021_p1 = tmp_fu_1014_p3;

assign zext_ln90_fu_817_p1 = tmp_17_fu_810_p3;

assign zext_ln91_fu_763_p1 = kj_mid2_reg_1313;

assign zext_ln92_2_fu_891_p1 = grp_fu_1127_p4;

assign zext_ln92_fu_788_p1 = tmp_23_fu_780_p3;

assign zext_ln93_1_fu_831_p1 = tmp_19_fu_824_p3;

assign zext_ln93_2_fu_841_p1 = kj_mid2_reg_1313;

assign zext_ln93_3_fu_870_p1 = tmp_20_fu_854_p3;

assign zext_ln93_4_fu_957_p1 = add_ln93_2_fu_951_p2;

assign zext_ln93_fu_821_p1 = select_ln90_reg_1319;

endmodule //top_c2
