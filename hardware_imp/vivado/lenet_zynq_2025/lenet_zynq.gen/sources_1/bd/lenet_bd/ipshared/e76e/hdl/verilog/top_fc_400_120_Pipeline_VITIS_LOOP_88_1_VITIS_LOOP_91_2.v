// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_fc_400_120_Pipeline_VITIS_LOOP_88_1_VITIS_LOOP_91_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_out_0_AWVALID,
        m_axi_gmem_out_0_AWREADY,
        m_axi_gmem_out_0_AWADDR,
        m_axi_gmem_out_0_AWID,
        m_axi_gmem_out_0_AWLEN,
        m_axi_gmem_out_0_AWSIZE,
        m_axi_gmem_out_0_AWBURST,
        m_axi_gmem_out_0_AWLOCK,
        m_axi_gmem_out_0_AWCACHE,
        m_axi_gmem_out_0_AWPROT,
        m_axi_gmem_out_0_AWQOS,
        m_axi_gmem_out_0_AWREGION,
        m_axi_gmem_out_0_AWUSER,
        m_axi_gmem_out_0_WVALID,
        m_axi_gmem_out_0_WREADY,
        m_axi_gmem_out_0_WDATA,
        m_axi_gmem_out_0_WSTRB,
        m_axi_gmem_out_0_WLAST,
        m_axi_gmem_out_0_WID,
        m_axi_gmem_out_0_WUSER,
        m_axi_gmem_out_0_ARVALID,
        m_axi_gmem_out_0_ARREADY,
        m_axi_gmem_out_0_ARADDR,
        m_axi_gmem_out_0_ARID,
        m_axi_gmem_out_0_ARLEN,
        m_axi_gmem_out_0_ARSIZE,
        m_axi_gmem_out_0_ARBURST,
        m_axi_gmem_out_0_ARLOCK,
        m_axi_gmem_out_0_ARCACHE,
        m_axi_gmem_out_0_ARPROT,
        m_axi_gmem_out_0_ARQOS,
        m_axi_gmem_out_0_ARREGION,
        m_axi_gmem_out_0_ARUSER,
        m_axi_gmem_out_0_RVALID,
        m_axi_gmem_out_0_RREADY,
        m_axi_gmem_out_0_RDATA,
        m_axi_gmem_out_0_RLAST,
        m_axi_gmem_out_0_RID,
        m_axi_gmem_out_0_RFIFONUM,
        m_axi_gmem_out_0_RUSER,
        m_axi_gmem_out_0_RRESP,
        m_axi_gmem_out_0_BVALID,
        m_axi_gmem_out_0_BREADY,
        m_axi_gmem_out_0_BRESP,
        m_axi_gmem_out_0_BID,
        m_axi_gmem_out_0_BUSER,
        sext_ln88,
        p_cast_cast,
        grp_fu_135_p_din0,
        grp_fu_135_p_din1,
        grp_fu_135_p_opcode,
        grp_fu_135_p_dout0,
        grp_fu_135_p_ce,
        grp_fu_139_p_din0,
        grp_fu_139_p_din1,
        grp_fu_139_p_dout0,
        grp_fu_139_p_ce,
        grp_fu_143_p_din0,
        grp_fu_143_p_din1,
        grp_fu_143_p_opcode,
        grp_fu_143_p_dout0,
        grp_fu_143_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 5'd1;
parameter    ap_ST_fsm_pp0_stage1 = 5'd2;
parameter    ap_ST_fsm_pp0_stage2 = 5'd4;
parameter    ap_ST_fsm_pp0_stage3 = 5'd8;
parameter    ap_ST_fsm_pp0_stage4 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_out_0_AWVALID;
input   m_axi_gmem_out_0_AWREADY;
output  [63:0] m_axi_gmem_out_0_AWADDR;
output  [0:0] m_axi_gmem_out_0_AWID;
output  [31:0] m_axi_gmem_out_0_AWLEN;
output  [2:0] m_axi_gmem_out_0_AWSIZE;
output  [1:0] m_axi_gmem_out_0_AWBURST;
output  [1:0] m_axi_gmem_out_0_AWLOCK;
output  [3:0] m_axi_gmem_out_0_AWCACHE;
output  [2:0] m_axi_gmem_out_0_AWPROT;
output  [3:0] m_axi_gmem_out_0_AWQOS;
output  [3:0] m_axi_gmem_out_0_AWREGION;
output  [0:0] m_axi_gmem_out_0_AWUSER;
output   m_axi_gmem_out_0_WVALID;
input   m_axi_gmem_out_0_WREADY;
output  [31:0] m_axi_gmem_out_0_WDATA;
output  [3:0] m_axi_gmem_out_0_WSTRB;
output   m_axi_gmem_out_0_WLAST;
output  [0:0] m_axi_gmem_out_0_WID;
output  [0:0] m_axi_gmem_out_0_WUSER;
output   m_axi_gmem_out_0_ARVALID;
input   m_axi_gmem_out_0_ARREADY;
output  [63:0] m_axi_gmem_out_0_ARADDR;
output  [0:0] m_axi_gmem_out_0_ARID;
output  [31:0] m_axi_gmem_out_0_ARLEN;
output  [2:0] m_axi_gmem_out_0_ARSIZE;
output  [1:0] m_axi_gmem_out_0_ARBURST;
output  [1:0] m_axi_gmem_out_0_ARLOCK;
output  [3:0] m_axi_gmem_out_0_ARCACHE;
output  [2:0] m_axi_gmem_out_0_ARPROT;
output  [3:0] m_axi_gmem_out_0_ARQOS;
output  [3:0] m_axi_gmem_out_0_ARREGION;
output  [0:0] m_axi_gmem_out_0_ARUSER;
input   m_axi_gmem_out_0_RVALID;
output   m_axi_gmem_out_0_RREADY;
input  [31:0] m_axi_gmem_out_0_RDATA;
input   m_axi_gmem_out_0_RLAST;
input  [0:0] m_axi_gmem_out_0_RID;
input  [8:0] m_axi_gmem_out_0_RFIFONUM;
input  [0:0] m_axi_gmem_out_0_RUSER;
input  [1:0] m_axi_gmem_out_0_RRESP;
input   m_axi_gmem_out_0_BVALID;
output   m_axi_gmem_out_0_BREADY;
input  [1:0] m_axi_gmem_out_0_BRESP;
input  [0:0] m_axi_gmem_out_0_BID;
input  [0:0] m_axi_gmem_out_0_BUSER;
input  [61:0] sext_ln88;
input  [61:0] p_cast_cast;
output  [31:0] grp_fu_135_p_din0;
output  [31:0] grp_fu_135_p_din1;
output  [1:0] grp_fu_135_p_opcode;
input  [31:0] grp_fu_135_p_dout0;
output   grp_fu_135_p_ce;
output  [31:0] grp_fu_139_p_din0;
output  [31:0] grp_fu_139_p_din1;
input  [31:0] grp_fu_139_p_dout0;
output   grp_fu_139_p_ce;
output  [31:0] grp_fu_143_p_din0;
output  [31:0] grp_fu_143_p_din1;
output  [4:0] grp_fu_143_p_opcode;
input  [0:0] grp_fu_143_p_dout0;
output   grp_fu_143_p_ce;

reg ap_idle;
reg m_axi_gmem_out_0_WVALID;
reg m_axi_gmem_out_0_ARVALID;
reg m_axi_gmem_out_0_RREADY;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage4;
reg    ap_block_pp0_stage4_subdone;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [0:0] icmp_ln88_reg_453;
reg    ap_condition_exit_pp0_iter0_stage4;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [15:0] fc1_weights_address0;
wire   [31:0] fc1_weights_q0;
wire   [6:0] fc1_biases_address0;
wire   [31:0] fc1_biases_q0;
reg    gmem_out_blk_n_W;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_grp3;
reg   [0:0] icmp_ln91_1_reg_480;
reg   [0:0] icmp_ln91_1_reg_480_pp0_iter4_reg;
reg    gmem_out_blk_n_R;
wire    ap_block_pp0_stage4_grp2;
reg    gmem_out_blk_n_AR;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_grp1;
reg   [0:0] first_iter_0_reg_470;
wire    ap_block_pp0_stage0_11001;
wire  signed [63:0] p_cast_cast_cast_fu_183_p1;
reg  signed [63:0] p_cast_cast_cast_reg_443;
wire   [0:0] icmp_ln88_fu_214_p2;
reg   [0:0] icmp_ln88_reg_453_pp0_iter1_reg;
reg   [0:0] icmp_ln88_reg_453_pp0_iter2_reg;
reg   [0:0] icmp_ln88_reg_453_pp0_iter3_reg;
reg   [0:0] icmp_ln88_reg_453_pp0_iter4_reg;
wire   [0:0] icmp_ln91_fu_229_p2;
reg   [0:0] icmp_ln91_reg_457;
reg   [0:0] icmp_ln91_reg_457_pp0_iter1_reg;
reg   [0:0] icmp_ln91_reg_457_pp0_iter2_reg;
wire   [8:0] select_ln88_fu_235_p3;
reg   [8:0] select_ln88_reg_463;
reg   [8:0] select_ln88_reg_463_pp0_iter1_reg;
wire   [0:0] first_iter_0_fu_243_p2;
reg    ap_predicate_op57_readreq_state2;
reg    ap_block_state2_io_grp1;
reg    ap_block_pp0_stage1_11001_grp1;
wire   [0:0] icmp_ln91_1_fu_265_p2;
wire    ap_block_pp0_stage4_11001_grp0;
reg    ap_block_pp0_stage4_subdone_grp0_done_reg;
wire    ap_block_pp0_stage4_subdone_grp0;
reg   [0:0] icmp_ln91_1_reg_480_pp0_iter1_reg;
reg   [0:0] icmp_ln91_1_reg_480_pp0_iter2_reg;
reg   [0:0] icmp_ln91_1_reg_480_pp0_iter3_reg;
wire   [6:0] select_ln88_2_fu_285_p3;
reg   [6:0] select_ln88_2_reg_484;
wire    ap_block_pp0_stage1_11001_grp0;
reg    ap_block_pp0_stage1_subdone_grp0_done_reg;
wire    ap_block_pp0_stage1_subdone_grp0;
reg    ap_block_pp0_stage1_subdone;
reg   [6:0] select_ln88_2_reg_484_pp0_iter2_reg;
reg   [31:0] fc1_weights_load_reg_494;
wire    ap_block_pp0_stage2_11001_grp0;
reg    ap_block_pp0_stage2_subdone_grp0_done_reg;
wire    ap_block_pp0_stage2_subdone_grp0;
reg    ap_block_pp0_stage2_subdone;
reg   [31:0] gmem_out_addr_9_read_reg_499;
reg    ap_block_pp0_stage4_11001_grp2;
wire   [31:0] bitcast_ln92_fu_336_p1;
reg   [31:0] mul_reg_509;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] select_ln88_1_fu_343_p3;
reg   [31:0] fc1_biases_load_reg_524;
reg   [31:0] sum_2_reg_529;
reg   [31:0] sum_reg_534;
wire   [31:0] select_ln95_fu_401_p3;
reg   [31:0] select_ln95_reg_540;
reg    ap_block_state28_io_grp3;
wire   [63:0] zext_ln92_1_fu_326_p1;
wire    ap_block_pp0_stage1_grp0;
wire   [63:0] zext_ln88_fu_351_p1;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage2_11001_grp3;
wire    ap_block_pp0_stage2_01001_grp3;
reg   [31:0] sum_1_fu_96;
wire    ap_loop_init;
wire    ap_block_pp0_stage4_grp0;
reg   [8:0] j_fu_100;
wire   [8:0] add_ln91_fu_260_p2;
reg   [8:0] ap_sig_allocacmp_j_load;
reg   [6:0] i_fu_104;
reg   [15:0] indvar_flatten_fu_108;
wire   [15:0] add_ln88_1_fu_220_p2;
reg   [15:0] ap_sig_allocacmp_indvar_flatten_load;
reg    fc1_weights_ce0_local;
reg    fc1_biases_ce0_local;
reg   [31:0] grp_fu_170_p0;
reg   [31:0] grp_fu_170_p1;
wire   [6:0] add_ln88_fu_279_p2;
wire   [11:0] tmp_18_fu_303_p3;
wire   [15:0] p_shl_fu_296_p3;
wire   [15:0] zext_ln92_fu_310_p1;
wire   [15:0] sub_ln92_fu_314_p2;
wire   [15:0] zext_ln91_fu_292_p1;
wire   [15:0] add_ln92_fu_320_p2;
wire   [31:0] bitcast_ln95_fu_360_p1;
wire   [7:0] tmp_fu_363_p4;
wire   [22:0] trunc_ln95_fu_373_p1;
wire   [0:0] icmp_ln95_1_fu_383_p2;
wire   [0:0] icmp_ln95_fu_377_p2;
wire   [0:0] or_ln95_fu_389_p2;
wire   [0:0] and_ln95_fu_395_p2;
reg    grp_fu_170_ce;
reg    ap_block_pp0_stage4_11001;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_pp0_stage2_11001;
reg    grp_fu_174_ce;
reg    grp_fu_178_ce;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter4_stage2;
reg    ap_idle_pp0_0to3;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [4:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to5;
wire    ap_block_pp0_stage3_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_block_pp0_stage4_00001_grp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_block_pp0_stage4_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage1_subdone_grp0_done_reg = 1'b0;
#0 ap_block_pp0_stage2_subdone_grp0_done_reg = 1'b0;
#0 sum_1_fu_96 = 32'd0;
#0 j_fu_100 = 9'd0;
#0 i_fu_104 = 7'd0;
#0 indvar_flatten_fu_108 = 16'd0;
#0 ap_done_reg = 1'b0;
end

top_fc_400_120_Pipeline_VITIS_LOOP_88_1_VITIS_LOOP_91_2_fc1_weights_RAM_1P_LUTRAMBew #(
    .DataWidth( 32 ),
    .AddressRange( 48000 ),
    .AddressWidth( 16 ))
fc1_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc1_weights_address0),
    .ce0(fc1_weights_ce0_local),
    .q0(fc1_weights_q0)
);

top_fc_400_120_Pipeline_VITIS_LOOP_88_1_VITIS_LOOP_91_2_fc1_biases_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 120 ),
    .AddressWidth( 7 ))
fc1_biases_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc1_biases_address0),
    .ce0(fc1_biases_ce0_local),
    .q0(fc1_biases_q0)
);

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage4),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage1)) begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone_grp0)) begin
                ap_block_pp0_stage1_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage2_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage2)) begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_block_pp0_stage2_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage2_subdone_grp0)) begin
                ap_block_pp0_stage2_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_block_pp0_stage4_subdone_grp0_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage4)) begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_block_pp0_stage4_subdone_grp0_done_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage4_subdone_grp0)) begin
                ap_block_pp0_stage4_subdone_grp0_done_reg <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage4)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage2))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage2))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_fu_104 <= 7'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0))) begin
        i_fu_104 <= select_ln88_2_fu_285_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln88_fu_214_p2 == 1'd0))) begin
            indvar_flatten_fu_108 <= add_ln88_1_fu_220_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_108 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_fu_100 <= 9'd0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln88_reg_453 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0))) begin
        j_fu_100 <= add_ln91_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_1_fu_96 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        sum_1_fu_96 <= grp_fu_135_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0))) begin
        fc1_biases_load_reg_524 <= fc1_biases_q0;
        select_ln88_2_reg_484 <= select_ln88_2_fu_285_p3;
        select_ln88_2_reg_484_pp0_iter2_reg <= select_ln88_2_reg_484;
        select_ln95_reg_540 <= select_ln95_fu_401_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage2_11001_grp0))) begin
        fc1_weights_load_reg_494 <= fc1_weights_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        first_iter_0_reg_470 <= first_iter_0_fu_243_p2;
        icmp_ln88_reg_453 <= icmp_ln88_fu_214_p2;
        icmp_ln88_reg_453_pp0_iter1_reg <= icmp_ln88_reg_453;
        icmp_ln88_reg_453_pp0_iter2_reg <= icmp_ln88_reg_453_pp0_iter1_reg;
        icmp_ln88_reg_453_pp0_iter3_reg <= icmp_ln88_reg_453_pp0_iter2_reg;
        icmp_ln88_reg_453_pp0_iter4_reg <= icmp_ln88_reg_453_pp0_iter3_reg;
        icmp_ln91_reg_457 <= icmp_ln91_fu_229_p2;
        icmp_ln91_reg_457_pp0_iter1_reg <= icmp_ln91_reg_457;
        icmp_ln91_reg_457_pp0_iter2_reg <= icmp_ln91_reg_457_pp0_iter1_reg;
        p_cast_cast_cast_reg_443 <= p_cast_cast_cast_fu_183_p1;
        select_ln88_reg_463 <= select_ln88_fu_235_p3;
        select_ln88_reg_463_pp0_iter1_reg <= select_ln88_reg_463;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001_grp2))) begin
        gmem_out_addr_9_read_reg_499 <= m_axi_gmem_out_0_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0))) begin
        icmp_ln91_1_reg_480 <= icmp_ln91_1_fu_265_p2;
        icmp_ln91_1_reg_480_pp0_iter1_reg <= icmp_ln91_1_reg_480;
        icmp_ln91_1_reg_480_pp0_iter2_reg <= icmp_ln91_1_reg_480_pp0_iter1_reg;
        icmp_ln91_1_reg_480_pp0_iter3_reg <= icmp_ln91_1_reg_480_pp0_iter2_reg;
        icmp_ln91_1_reg_480_pp0_iter4_reg <= icmp_ln91_1_reg_480_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        mul_reg_509 <= grp_fu_139_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        sum_2_reg_529 <= grp_fu_135_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0))) begin
        sum_reg_534 <= grp_fu_135_p_dout0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln88_reg_453 == 1'd1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
        ap_condition_exit_pp0_iter0_stage4 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln88_reg_453_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
        ap_condition_exit_pp0_iter4_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter4_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to5 = 1'b1;
    end else begin
        ap_idle_pp0_1to5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 16'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_108;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 9'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_100;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        fc1_biases_ce0_local = 1'b1;
    end else begin
        fc1_biases_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0))) begin
        fc1_weights_ce0_local = 1'b1;
    end else begin
        fc1_weights_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (first_iter_0_reg_470 == 1'd1) & (icmp_ln88_reg_453 == 1'd0) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_grp1))) begin
        gmem_out_blk_n_AR = m_axi_gmem_out_0_ARREADY;
    end else begin
        gmem_out_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_grp2))) begin
        gmem_out_blk_n_R = m_axi_gmem_out_0_RVALID;
    end else begin
        gmem_out_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln91_1_reg_480_pp0_iter4_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2_grp3))) begin
        gmem_out_blk_n_W = m_axi_gmem_out_0_WREADY;
    end else begin
        gmem_out_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage4_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage2_11001_grp0)))) begin
        grp_fu_170_ce = 1'b1;
    end else begin
        grp_fu_170_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_170_p0 = sum_2_reg_529;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_grp0))) begin
        grp_fu_170_p0 = select_ln88_1_fu_343_p3;
    end else begin
        grp_fu_170_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_170_p1 = fc1_biases_load_reg_524;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_grp0))) begin
        grp_fu_170_p1 = mul_reg_509;
    end else begin
        grp_fu_170_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage2_11001_grp0)))) begin
        grp_fu_174_ce = 1'b1;
    end else begin
        grp_fu_174_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone_grp0_done_reg) & (1'b0 == ap_block_pp0_stage1_11001_grp0)))) begin
        grp_fu_178_ce = 1'b1;
    end else begin
        grp_fu_178_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_predicate_op57_readreq_state2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001_grp1))) begin
        m_axi_gmem_out_0_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_out_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001_grp2))) begin
        m_axi_gmem_out_0_RREADY = 1'b1;
    end else begin
        m_axi_gmem_out_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln91_1_reg_480_pp0_iter4_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001_grp3))) begin
        m_axi_gmem_out_0_WVALID = 1'b1;
    end else begin
        m_axi_gmem_out_0_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to5 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln88_1_fu_220_p2 = (ap_sig_allocacmp_indvar_flatten_load + 16'd1);

assign add_ln88_fu_279_p2 = (i_fu_104 + 7'd1);

assign add_ln91_fu_260_p2 = (select_ln88_reg_463 + 9'd1);

assign add_ln92_fu_320_p2 = (sub_ln92_fu_314_p2 + zext_ln91_fu_292_p1);

assign and_ln95_fu_395_p2 = (or_ln95_fu_389_p2 & grp_fu_143_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((1'b1 == ap_block_state2_io_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage1_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001_grp1 = ((1'b1 == ap_block_state2_io_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage1_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_grp1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((1'b1 == ap_block_state2_io_grp1) & (ap_enable_reg_pp0_iter0_reg == 1'b1));
end

assign ap_block_pp0_stage1_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001_grp3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state28_io_grp3));
end

assign ap_block_pp0_stage2_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001_grp3 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state28_io_grp3));
end

assign ap_block_pp0_stage2_grp3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state28_io_grp3));
end

assign ap_block_pp0_stage2_subdone_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_00001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((m_axi_gmem_out_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage4_11001_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001_grp2 = ((m_axi_gmem_out_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage4_grp0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_grp2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((m_axi_gmem_out_0_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage4_subdone_grp0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state28_io_grp3 = ((m_axi_gmem_out_0_WREADY == 1'b0) & (icmp_ln91_1_reg_480_pp0_iter4_reg == 1'd1));
end

always @ (*) begin
    ap_block_state2_io_grp1 = ((m_axi_gmem_out_0_ARREADY == 1'b0) & (ap_predicate_op57_readreq_state2 == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage4;

always @ (*) begin
    ap_predicate_op57_readreq_state2 = ((first_iter_0_reg_470 == 1'd1) & (icmp_ln88_reg_453 == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign bitcast_ln92_fu_336_p1 = gmem_out_addr_9_read_reg_499;

assign bitcast_ln95_fu_360_p1 = sum_reg_534;

assign fc1_biases_address0 = zext_ln88_fu_351_p1;

assign fc1_weights_address0 = zext_ln92_1_fu_326_p1;

assign first_iter_0_fu_243_p2 = ((select_ln88_fu_235_p3 == 9'd0) ? 1'b1 : 1'b0);

assign grp_fu_135_p_ce = grp_fu_170_ce;

assign grp_fu_135_p_din0 = grp_fu_170_p0;

assign grp_fu_135_p_din1 = grp_fu_170_p1;

assign grp_fu_135_p_opcode = 2'd0;

assign grp_fu_139_p_ce = grp_fu_174_ce;

assign grp_fu_139_p_din0 = bitcast_ln92_fu_336_p1;

assign grp_fu_139_p_din1 = fc1_weights_load_reg_494;

assign grp_fu_143_p_ce = grp_fu_178_ce;

assign grp_fu_143_p_din0 = sum_reg_534;

assign grp_fu_143_p_din1 = 32'd0;

assign grp_fu_143_p_opcode = 5'd2;

assign icmp_ln88_fu_214_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 16'd48000) ? 1'b1 : 1'b0);

assign icmp_ln91_1_fu_265_p2 = ((add_ln91_fu_260_p2 == 9'd400) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_229_p2 = ((ap_sig_allocacmp_j_load == 9'd400) ? 1'b1 : 1'b0);

assign icmp_ln95_1_fu_383_p2 = ((trunc_ln95_fu_373_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_377_p2 = ((tmp_fu_363_p4 != 8'd255) ? 1'b1 : 1'b0);

assign m_axi_gmem_out_0_ARADDR = p_cast_cast_cast_reg_443;

assign m_axi_gmem_out_0_ARBURST = 2'd0;

assign m_axi_gmem_out_0_ARCACHE = 4'd0;

assign m_axi_gmem_out_0_ARID = 1'd0;

assign m_axi_gmem_out_0_ARLEN = 64'd400;

assign m_axi_gmem_out_0_ARLOCK = 2'd0;

assign m_axi_gmem_out_0_ARPROT = 3'd0;

assign m_axi_gmem_out_0_ARQOS = 4'd0;

assign m_axi_gmem_out_0_ARREGION = 4'd0;

assign m_axi_gmem_out_0_ARSIZE = 3'd0;

assign m_axi_gmem_out_0_ARUSER = 1'd0;

assign m_axi_gmem_out_0_AWADDR = 64'd0;

assign m_axi_gmem_out_0_AWBURST = 2'd0;

assign m_axi_gmem_out_0_AWCACHE = 4'd0;

assign m_axi_gmem_out_0_AWID = 1'd0;

assign m_axi_gmem_out_0_AWLEN = 32'd0;

assign m_axi_gmem_out_0_AWLOCK = 2'd0;

assign m_axi_gmem_out_0_AWPROT = 3'd0;

assign m_axi_gmem_out_0_AWQOS = 4'd0;

assign m_axi_gmem_out_0_AWREGION = 4'd0;

assign m_axi_gmem_out_0_AWSIZE = 3'd0;

assign m_axi_gmem_out_0_AWUSER = 1'd0;

assign m_axi_gmem_out_0_AWVALID = 1'b0;

assign m_axi_gmem_out_0_BREADY = 1'b0;

assign m_axi_gmem_out_0_WDATA = select_ln95_reg_540;

assign m_axi_gmem_out_0_WID = 1'd0;

assign m_axi_gmem_out_0_WLAST = 1'b0;

assign m_axi_gmem_out_0_WSTRB = 4'd15;

assign m_axi_gmem_out_0_WUSER = 1'd0;

assign or_ln95_fu_389_p2 = (icmp_ln95_fu_377_p2 | icmp_ln95_1_fu_383_p2);

assign p_cast_cast_cast_fu_183_p1 = $signed(p_cast_cast);

assign p_shl_fu_296_p3 = {{select_ln88_reg_463_pp0_iter1_reg}, {7'd0}};

assign select_ln88_1_fu_343_p3 = ((icmp_ln91_reg_457_pp0_iter2_reg[0:0] == 1'b1) ? 32'd0 : sum_1_fu_96);

assign select_ln88_2_fu_285_p3 = ((icmp_ln91_reg_457_pp0_iter1_reg[0:0] == 1'b1) ? add_ln88_fu_279_p2 : i_fu_104);

assign select_ln88_fu_235_p3 = ((icmp_ln91_fu_229_p2[0:0] == 1'b1) ? 9'd0 : ap_sig_allocacmp_j_load);

assign select_ln95_fu_401_p3 = ((and_ln95_fu_395_p2[0:0] == 1'b1) ? bitcast_ln95_fu_360_p1 : 32'd0);

assign sub_ln92_fu_314_p2 = (p_shl_fu_296_p3 - zext_ln92_fu_310_p1);

assign tmp_18_fu_303_p3 = {{select_ln88_reg_463_pp0_iter1_reg}, {3'd0}};

assign tmp_fu_363_p4 = {{bitcast_ln95_fu_360_p1[30:23]}};

assign trunc_ln95_fu_373_p1 = bitcast_ln95_fu_360_p1[22:0];

assign zext_ln88_fu_351_p1 = select_ln88_2_reg_484_pp0_iter2_reg;

assign zext_ln91_fu_292_p1 = select_ln88_2_fu_285_p3;

assign zext_ln92_1_fu_326_p1 = add_ln92_fu_320_p2;

assign zext_ln92_fu_310_p1 = tmp_18_fu_303_p3;

endmodule //top_fc_400_120_Pipeline_VITIS_LOOP_88_1_VITIS_LOOP_91_2
