// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_m2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_out_AWVALID,
        m_axi_gmem_out_AWREADY,
        m_axi_gmem_out_AWADDR,
        m_axi_gmem_out_AWID,
        m_axi_gmem_out_AWLEN,
        m_axi_gmem_out_AWSIZE,
        m_axi_gmem_out_AWBURST,
        m_axi_gmem_out_AWLOCK,
        m_axi_gmem_out_AWCACHE,
        m_axi_gmem_out_AWPROT,
        m_axi_gmem_out_AWQOS,
        m_axi_gmem_out_AWREGION,
        m_axi_gmem_out_AWUSER,
        m_axi_gmem_out_WVALID,
        m_axi_gmem_out_WREADY,
        m_axi_gmem_out_WDATA,
        m_axi_gmem_out_WSTRB,
        m_axi_gmem_out_WLAST,
        m_axi_gmem_out_WID,
        m_axi_gmem_out_WUSER,
        m_axi_gmem_out_ARVALID,
        m_axi_gmem_out_ARREADY,
        m_axi_gmem_out_ARADDR,
        m_axi_gmem_out_ARID,
        m_axi_gmem_out_ARLEN,
        m_axi_gmem_out_ARSIZE,
        m_axi_gmem_out_ARBURST,
        m_axi_gmem_out_ARLOCK,
        m_axi_gmem_out_ARCACHE,
        m_axi_gmem_out_ARPROT,
        m_axi_gmem_out_ARQOS,
        m_axi_gmem_out_ARREGION,
        m_axi_gmem_out_ARUSER,
        m_axi_gmem_out_RVALID,
        m_axi_gmem_out_RREADY,
        m_axi_gmem_out_RDATA,
        m_axi_gmem_out_RLAST,
        m_axi_gmem_out_RID,
        m_axi_gmem_out_RFIFONUM,
        m_axi_gmem_out_RUSER,
        m_axi_gmem_out_RRESP,
        m_axi_gmem_out_BVALID,
        m_axi_gmem_out_BREADY,
        m_axi_gmem_out_BRESP,
        m_axi_gmem_out_BID,
        m_axi_gmem_out_BUSER,
        input_r,
        output_r,
        grp_fu_838_p_din0,
        grp_fu_838_p_din1,
        grp_fu_838_p_opcode,
        grp_fu_838_p_dout0,
        grp_fu_838_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_out_AWVALID;
input   m_axi_gmem_out_AWREADY;
output  [63:0] m_axi_gmem_out_AWADDR;
output  [0:0] m_axi_gmem_out_AWID;
output  [31:0] m_axi_gmem_out_AWLEN;
output  [2:0] m_axi_gmem_out_AWSIZE;
output  [1:0] m_axi_gmem_out_AWBURST;
output  [1:0] m_axi_gmem_out_AWLOCK;
output  [3:0] m_axi_gmem_out_AWCACHE;
output  [2:0] m_axi_gmem_out_AWPROT;
output  [3:0] m_axi_gmem_out_AWQOS;
output  [3:0] m_axi_gmem_out_AWREGION;
output  [0:0] m_axi_gmem_out_AWUSER;
output   m_axi_gmem_out_WVALID;
input   m_axi_gmem_out_WREADY;
output  [31:0] m_axi_gmem_out_WDATA;
output  [3:0] m_axi_gmem_out_WSTRB;
output   m_axi_gmem_out_WLAST;
output  [0:0] m_axi_gmem_out_WID;
output  [0:0] m_axi_gmem_out_WUSER;
output   m_axi_gmem_out_ARVALID;
input   m_axi_gmem_out_ARREADY;
output  [63:0] m_axi_gmem_out_ARADDR;
output  [0:0] m_axi_gmem_out_ARID;
output  [31:0] m_axi_gmem_out_ARLEN;
output  [2:0] m_axi_gmem_out_ARSIZE;
output  [1:0] m_axi_gmem_out_ARBURST;
output  [1:0] m_axi_gmem_out_ARLOCK;
output  [3:0] m_axi_gmem_out_ARCACHE;
output  [2:0] m_axi_gmem_out_ARPROT;
output  [3:0] m_axi_gmem_out_ARQOS;
output  [3:0] m_axi_gmem_out_ARREGION;
output  [0:0] m_axi_gmem_out_ARUSER;
input   m_axi_gmem_out_RVALID;
output   m_axi_gmem_out_RREADY;
input  [31:0] m_axi_gmem_out_RDATA;
input   m_axi_gmem_out_RLAST;
input  [0:0] m_axi_gmem_out_RID;
input  [8:0] m_axi_gmem_out_RFIFONUM;
input  [0:0] m_axi_gmem_out_RUSER;
input  [1:0] m_axi_gmem_out_RRESP;
input   m_axi_gmem_out_BVALID;
output   m_axi_gmem_out_BREADY;
input  [1:0] m_axi_gmem_out_BRESP;
input  [0:0] m_axi_gmem_out_BID;
input  [0:0] m_axi_gmem_out_BUSER;
input  [63:0] input_r;
input  [63:0] output_r;
output  [31:0] grp_fu_838_p_din0;
output  [31:0] grp_fu_838_p_din1;
output  [4:0] grp_fu_838_p_opcode;
input  [0:0] grp_fu_838_p_dout0;
output   grp_fu_838_p_ce;

reg ap_idle;
reg m_axi_gmem_out_AWVALID;
reg m_axi_gmem_out_WVALID;
reg m_axi_gmem_out_ARVALID;
reg[63:0] m_axi_gmem_out_ARADDR;
reg m_axi_gmem_out_RREADY;
reg m_axi_gmem_out_BREADY;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
reg   [0:0] icmp_ln112_reg_1129;
reg    ap_block_state4_io;
wire    ap_block_state8_pp0_stage3_iter1;
reg    ap_block_state12_pp0_stage3_iter2;
wire    ap_block_state16_pp0_stage3_iter3;
wire    ap_block_state20_pp0_stage3_iter4;
wire    ap_block_state24_pp0_stage3_iter5;
reg    ap_block_pp0_stage3_subdone;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_out_blk_n_AR;
wire    ap_block_pp0_stage3;
reg    gmem_out_blk_n_R;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg    gmem_out_blk_n_AW;
reg    gmem_out_blk_n_W;
reg    gmem_out_blk_n_B;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state9_pp0_stage0_iter2;
reg    ap_block_state13_pp0_stage0_iter3;
wire    ap_block_state17_pp0_stage0_iter4;
wire    ap_block_state21_pp0_stage0_iter5;
wire    ap_block_state25_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
reg   [4:0] c_1_reg_1108;
reg   [8:0] indvar_flatten44_load_reg_1113;
wire   [3:0] trunc_ln116_fu_250_p1;
reg   [3:0] trunc_ln116_reg_1118;
wire   [12:0] add_ln116_fu_274_p2;
reg   [12:0] add_ln116_reg_1123;
wire   [0:0] icmp_ln112_fu_288_p2;
reg   [0:0] icmp_ln112_reg_1129_pp0_iter1_reg;
reg   [0:0] icmp_ln112_reg_1129_pp0_iter2_reg;
reg   [0:0] icmp_ln112_reg_1129_pp0_iter3_reg;
reg   [0:0] icmp_ln112_reg_1129_pp0_iter4_reg;
reg   [0:0] icmp_ln112_reg_1129_pp0_iter5_reg;
reg   [5:0] indvar_flatten_load_reg_1133;
wire   [4:0] add_ln112_fu_300_p2;
reg   [4:0] add_ln112_reg_1138;
wire   [0:0] icmp_ln113_fu_306_p2;
reg   [0:0] icmp_ln113_reg_1143;
wire   [3:0] select_ln112_fu_312_p3;
reg   [3:0] select_ln112_reg_1153;
wire   [3:0] trunc_ln116_1_fu_328_p1;
reg   [3:0] trunc_ln116_1_reg_1158;
wire   [0:0] or_ln112_fu_354_p2;
reg   [0:0] or_ln112_reg_1163;
wire   [3:0] add_ln113_fu_360_p2;
reg   [3:0] add_ln113_reg_1170;
wire   [3:0] select_ln113_fu_366_p3;
reg   [3:0] select_ln113_reg_1176;
wire   [10:0] shl_ln116_3_mid1_fu_374_p3;
reg   [10:0] shl_ln116_3_mid1_reg_1183;
wire   [10:0] select_ln113_1_fu_382_p3;
reg   [10:0] select_ln113_1_reg_1188;
wire   [8:0] select_ln113_4_fu_398_p3;
reg   [8:0] select_ln113_4_reg_1193;
wire   [63:0] select_ln113_2_fu_541_p3;
reg   [63:0] select_ln113_2_reg_1198;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state10_pp0_stage1_iter2;
reg    ap_block_state14_pp0_stage1_iter3;
wire    ap_block_state18_pp0_stage1_iter4;
wire    ap_block_state22_pp0_stage1_iter5;
reg    ap_block_state26_pp0_stage1_iter6;
reg    ap_block_pp0_stage1_11001;
wire   [63:0] select_ln113_3_fu_564_p3;
reg   [63:0] select_ln113_3_reg_1204;
reg   [63:0] gmem_out_addr_4_reg_1210;
reg   [63:0] gmem_out_addr_4_reg_1210_pp0_iter1_reg;
reg   [63:0] gmem_out_addr_4_reg_1210_pp0_iter2_reg;
reg   [63:0] gmem_out_addr_4_reg_1210_pp0_iter3_reg;
reg   [63:0] gmem_out_addr_4_reg_1210_pp0_iter4_reg;
reg   [63:0] gmem_out_addr_reg_1216;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_state11_pp0_stage2_iter2;
reg    ap_block_state15_pp0_stage2_iter3;
wire    ap_block_state19_pp0_stage2_iter4;
wire    ap_block_state23_pp0_stage2_iter5;
reg    ap_block_pp0_stage2_11001;
reg   [63:0] gmem_out_addr_1_reg_1222;
reg   [63:0] gmem_out_addr_2_reg_1228;
reg   [63:0] gmem_out_addr_3_reg_1234;
reg   [31:0] gmem_out_addr_read_reg_1240;
reg    ap_block_pp0_stage3_11001;
reg   [7:0] tmp_reg_1245;
wire   [22:0] trunc_ln121_fu_814_p1;
reg   [22:0] trunc_ln121_reg_1250;
wire   [31:0] v1_fu_818_p1;
reg   [31:0] v1_reg_1255;
reg   [7:0] tmp_4_reg_1261;
wire   [22:0] trunc_ln121_1_fu_832_p1;
reg   [22:0] trunc_ln121_1_reg_1266;
wire   [0:0] icmp_ln121_fu_836_p2;
reg   [0:0] icmp_ln121_reg_1271;
wire   [0:0] icmp_ln121_1_fu_841_p2;
reg   [0:0] icmp_ln121_1_reg_1276;
wire   [31:0] v0_fu_846_p1;
reg   [31:0] v0_reg_1281;
reg   [31:0] gmem_out_addr_2_read_reg_1287;
wire   [0:0] icmp_ln121_2_fu_850_p2;
reg   [0:0] icmp_ln121_2_reg_1292;
wire   [0:0] icmp_ln121_3_fu_855_p2;
reg   [0:0] icmp_ln121_3_reg_1297;
reg   [7:0] tmp_6_reg_1302;
wire   [22:0] trunc_ln122_fu_870_p1;
reg   [22:0] trunc_ln122_reg_1307;
wire   [31:0] v3_fu_874_p1;
reg   [31:0] v3_reg_1312;
wire   [31:0] max1_fu_898_p3;
reg   [31:0] max1_reg_1318;
reg   [31:0] max1_reg_1318_pp0_iter4_reg;
reg   [7:0] tmp_7_reg_1325;
wire   [22:0] trunc_ln122_1_fu_914_p1;
reg   [22:0] trunc_ln122_1_reg_1330;
wire   [0:0] icmp_ln122_fu_918_p2;
reg   [0:0] icmp_ln122_reg_1335;
wire   [0:0] icmp_ln122_1_fu_923_p2;
reg   [0:0] icmp_ln122_1_reg_1340;
wire   [31:0] v2_fu_928_p1;
reg   [31:0] v2_reg_1345;
wire   [0:0] icmp_ln122_2_fu_932_p2;
reg   [0:0] icmp_ln122_2_reg_1351;
wire   [0:0] icmp_ln122_3_fu_937_p2;
reg   [0:0] icmp_ln122_3_reg_1356;
wire   [31:0] max2_fu_962_p3;
reg   [31:0] max2_reg_1361;
wire   [31:0] max_final_fu_1050_p3;
reg   [31:0] max_final_reg_1368;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage1_subdone;
wire  signed [63:0] sext_ln125_fu_621_p1;
wire  signed [63:0] sext_ln116_fu_662_p1;
wire  signed [63:0] sext_ln117_fu_697_p1;
wire  signed [63:0] sext_ln118_fu_722_p1;
wire  signed [63:0] sext_ln119_fu_747_p1;
reg    ap_block_pp0_stage0_01001;
reg   [3:0] j_fu_116;
wire   [3:0] add_ln114_fu_767_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_j_load;
reg   [3:0] i_fu_120;
wire   [3:0] select_ln113_5_fu_762_p3;
reg   [3:0] ap_sig_allocacmp_i_2;
reg   [5:0] indvar_flatten_fu_124;
wire   [5:0] select_ln113_6_fu_777_p3;
reg   [5:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [4:0] c_fu_128;
wire   [4:0] select_ln112_8_fu_757_p3;
reg   [4:0] ap_sig_allocacmp_c_1;
reg   [8:0] indvar_flatten44_fu_132;
wire   [8:0] add_ln112_1_fu_451_p2;
reg   [8:0] ap_sig_allocacmp_indvar_flatten44_load;
reg   [31:0] grp_fu_212_p0;
reg   [31:0] grp_fu_212_p1;
wire   [10:0] shl_ln116_3_fu_262_p3;
wire   [12:0] shl_ln116_2_fu_254_p3;
wire   [12:0] zext_ln116_fu_270_p1;
wire   [8:0] shl_ln1_fu_280_p3;
wire   [0:0] icmp_ln114_fu_348_p2;
wire   [3:0] select_ln112_1_fu_320_p3;
wire   [10:0] select_ln112_4_fu_332_p3;
wire   [8:0] select_ln112_7_fu_340_p3;
wire   [8:0] shl_ln125_mid1_fu_390_p3;
wire   [5:0] shl_ln_fu_406_p3;
wire   [63:0] zext_ln113_fu_413_p1;
wire   [63:0] zext_ln116_1_fu_422_p1;
wire   [63:0] add_ln116_3_fu_425_p2;
wire   [12:0] add_ln118_1_fu_436_p2;
wire   [63:0] zext_ln118_fu_441_p1;
wire   [63:0] add_ln118_fu_417_p2;
wire   [5:0] shl_ln116_mid1_fu_456_p3;
wire   [5:0] select_ln112_2_fu_467_p3;
wire   [63:0] zext_ln113_1_fu_463_p1;
wire   [63:0] add_ln118_4_fu_478_p2;
wire   [63:0] add_ln116_1_fu_430_p2;
wire   [63:0] add_ln118_5_fu_497_p2;
wire   [63:0] add_ln118_2_fu_445_p2;
wire   [12:0] shl_ln116_2_mid1_fu_510_p3;
wire   [12:0] zext_ln116_3_fu_517_p1;
wire   [12:0] add_ln116_4_fu_520_p2;
wire   [63:0] zext_ln116_4_fu_526_p1;
wire   [63:0] add_ln116_5_fu_530_p2;
wire   [63:0] zext_ln112_fu_474_p1;
wire   [63:0] select_ln112_5_fu_490_p3;
wire   [63:0] add_ln116_6_fu_535_p2;
wire   [12:0] add_ln118_6_fu_548_p2;
wire   [63:0] zext_ln118_1_fu_554_p1;
wire   [63:0] select_ln112_3_fu_483_p3;
wire   [63:0] select_ln112_6_fu_503_p3;
wire   [63:0] add_ln118_7_fu_558_p2;
wire   [8:0] shl_ln125_1_fu_574_p3;
wire   [10:0] zext_ln125_fu_581_p1;
wire   [10:0] add_ln125_1_fu_590_p2;
wire   [10:0] select_ln113_4_cast_fu_571_p1;
wire   [10:0] add_ln125_3_fu_595_p2;
wire   [63:0] zext_ln125_1_fu_601_p1;
wire   [63:0] add_ln125_fu_585_p2;
wire   [63:0] add_ln125_2_fu_605_p2;
wire   [61:0] trunc_ln1_fu_611_p4;
wire   [9:0] shl_ln116_1_fu_636_p3;
wire   [63:0] zext_ln116_2_fu_643_p1;
wire   [63:0] add_ln116_2_fu_647_p2;
wire   [61:0] trunc_ln_fu_652_p4;
wire   [9:0] or_ln117_fu_672_p2;
wire   [63:0] zext_ln117_fu_678_p1;
wire   [63:0] add_ln117_fu_682_p2;
wire   [61:0] trunc_ln4_fu_687_p4;
wire   [63:0] add_ln118_3_fu_707_p2;
wire   [61:0] trunc_ln5_fu_712_p4;
wire   [63:0] add_ln119_fu_732_p2;
wire   [61:0] trunc_ln6_fu_737_p4;
wire   [5:0] add_ln113_1_fu_772_p2;
wire   [0:0] or_ln121_fu_878_p2;
wire   [0:0] or_ln121_1_fu_882_p2;
wire   [0:0] and_ln121_fu_886_p2;
wire   [0:0] and_ln121_1_fu_892_p2;
wire   [0:0] or_ln122_fu_942_p2;
wire   [0:0] or_ln122_1_fu_946_p2;
wire   [0:0] and_ln122_fu_950_p2;
wire   [0:0] and_ln122_1_fu_956_p2;
wire   [31:0] bitcast_ln123_fu_968_p1;
wire   [31:0] bitcast_ln123_1_fu_985_p1;
wire   [7:0] tmp_9_fu_971_p4;
wire   [22:0] trunc_ln123_fu_981_p1;
wire   [0:0] icmp_ln123_1_fu_1008_p2;
wire   [0:0] icmp_ln123_fu_1002_p2;
wire   [7:0] tmp_s_fu_988_p4;
wire   [22:0] trunc_ln123_1_fu_998_p1;
wire   [0:0] icmp_ln123_3_fu_1026_p2;
wire   [0:0] icmp_ln123_2_fu_1020_p2;
wire   [0:0] or_ln123_fu_1014_p2;
wire   [0:0] or_ln123_1_fu_1032_p2;
wire   [0:0] and_ln123_fu_1038_p2;
wire   [0:0] and_ln123_1_fu_1044_p2;
reg    grp_fu_212_ce;
reg    ap_block_pp0_stage1_00001;
reg    ap_block_pp0_stage3_00001;
reg    ap_block_pp0_stage2_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter5_stage1;
reg    ap_idle_pp0_0to4;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [3:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to6;
reg    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage1))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage1))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage1))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c_fu_128 <= 5'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln112_reg_1129 == 1'd0))) begin
        c_fu_128 <= select_ln112_8_fu_757_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_fu_120 <= 4'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln112_reg_1129 == 1'd0))) begin
        i_fu_120 <= select_ln113_5_fu_762_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten44_fu_132 <= 9'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln112_reg_1129 == 1'd0))) begin
        indvar_flatten44_fu_132 <= add_ln112_1_fu_451_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_fu_124 <= 6'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln112_reg_1129 == 1'd0))) begin
        indvar_flatten_fu_124 <= select_ln113_6_fu_777_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_fu_116 <= 4'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln112_reg_1129 == 1'd0))) begin
        j_fu_116 <= add_ln114_fu_767_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln112_fu_288_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln112_reg_1138 <= add_ln112_fu_300_p2;
        add_ln113_reg_1170 <= add_ln113_fu_360_p2;
        icmp_ln113_reg_1143 <= icmp_ln113_fu_306_p2;
        indvar_flatten_load_reg_1133 <= ap_sig_allocacmp_indvar_flatten_load;
        or_ln112_reg_1163 <= or_ln112_fu_354_p2;
        select_ln112_reg_1153 <= select_ln112_fu_312_p3;
        select_ln113_1_reg_1188[10 : 7] <= select_ln113_1_fu_382_p3[10 : 7];
        select_ln113_4_reg_1193[8 : 5] <= select_ln113_4_fu_398_p3[8 : 5];
        select_ln113_reg_1176 <= select_ln113_fu_366_p3;
        shl_ln116_3_mid1_reg_1183[10 : 7] <= shl_ln116_3_mid1_fu_374_p3[10 : 7];
        trunc_ln116_1_reg_1158 <= trunc_ln116_1_fu_328_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln116_reg_1123[12 : 7] <= add_ln116_fu_274_p2[12 : 7];
        c_1_reg_1108 <= ap_sig_allocacmp_c_1;
        icmp_ln112_reg_1129 <= icmp_ln112_fu_288_p2;
        icmp_ln112_reg_1129_pp0_iter1_reg <= icmp_ln112_reg_1129;
        icmp_ln112_reg_1129_pp0_iter2_reg <= icmp_ln112_reg_1129_pp0_iter1_reg;
        icmp_ln112_reg_1129_pp0_iter3_reg <= icmp_ln112_reg_1129_pp0_iter2_reg;
        icmp_ln112_reg_1129_pp0_iter4_reg <= icmp_ln112_reg_1129_pp0_iter3_reg;
        icmp_ln112_reg_1129_pp0_iter5_reg <= icmp_ln112_reg_1129_pp0_iter4_reg;
        icmp_ln121_1_reg_1276 <= icmp_ln121_1_fu_841_p2;
        icmp_ln121_reg_1271 <= icmp_ln121_fu_836_p2;
        indvar_flatten44_load_reg_1113 <= ap_sig_allocacmp_indvar_flatten44_load;
        max2_reg_1361 <= max2_fu_962_p3;
        tmp_4_reg_1261 <= {{m_axi_gmem_out_RDATA[30:23]}};
        trunc_ln116_reg_1118 <= trunc_ln116_fu_250_p1;
        trunc_ln121_1_reg_1266 <= trunc_ln121_1_fu_832_p1;
        v1_reg_1255 <= v1_fu_818_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln112_reg_1129 == 1'd0))) begin
        gmem_out_addr_1_reg_1222 <= sext_ln117_fu_697_p1;
        gmem_out_addr_2_reg_1228 <= sext_ln118_fu_722_p1;
        gmem_out_addr_3_reg_1234 <= sext_ln119_fu_747_p1;
        gmem_out_addr_reg_1216 <= sext_ln116_fu_662_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        gmem_out_addr_2_read_reg_1287 <= m_axi_gmem_out_RDATA;
        gmem_out_addr_4_reg_1210_pp0_iter1_reg <= gmem_out_addr_4_reg_1210;
        gmem_out_addr_4_reg_1210_pp0_iter2_reg <= gmem_out_addr_4_reg_1210_pp0_iter1_reg;
        gmem_out_addr_4_reg_1210_pp0_iter3_reg <= gmem_out_addr_4_reg_1210_pp0_iter2_reg;
        gmem_out_addr_4_reg_1210_pp0_iter4_reg <= gmem_out_addr_4_reg_1210_pp0_iter3_reg;
        icmp_ln121_2_reg_1292 <= icmp_ln121_2_fu_850_p2;
        icmp_ln121_3_reg_1297 <= icmp_ln121_3_fu_855_p2;
        tmp_6_reg_1302 <= {{m_axi_gmem_out_RDATA[30:23]}};
        trunc_ln122_reg_1307 <= trunc_ln122_fu_870_p1;
        v0_reg_1281 <= v0_fu_846_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln112_reg_1129 == 1'd0))) begin
        gmem_out_addr_4_reg_1210 <= sext_ln125_fu_621_p1;
        select_ln113_2_reg_1198 <= select_ln113_2_fu_541_p3;
        select_ln113_3_reg_1204 <= select_ln113_3_fu_564_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        gmem_out_addr_read_reg_1240 <= m_axi_gmem_out_RDATA;
        icmp_ln122_2_reg_1351 <= icmp_ln122_2_fu_932_p2;
        icmp_ln122_3_reg_1356 <= icmp_ln122_3_fu_937_p2;
        max_final_reg_1368 <= max_final_fu_1050_p3;
        tmp_reg_1245 <= {{m_axi_gmem_out_RDATA[30:23]}};
        trunc_ln121_reg_1250 <= trunc_ln121_fu_814_p1;
        v2_reg_1345 <= v2_fu_928_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        icmp_ln122_1_reg_1340 <= icmp_ln122_1_fu_923_p2;
        icmp_ln122_reg_1335 <= icmp_ln122_fu_918_p2;
        max1_reg_1318 <= max1_fu_898_p3;
        max1_reg_1318_pp0_iter4_reg <= max1_reg_1318;
        tmp_7_reg_1325 <= {{m_axi_gmem_out_RDATA[30:23]}};
        trunc_ln122_1_reg_1330 <= trunc_ln122_1_fu_914_p1;
        v3_reg_1312 <= v3_fu_874_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone) & (icmp_ln112_reg_1129 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln112_reg_1129_pp0_iter5_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_condition_exit_pp0_iter5_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter5_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to4 = 1'b1;
    end else begin
        ap_idle_pp0_0to4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to6 = 1'b1;
    end else begin
        ap_idle_pp0_1to6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_c_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_c_1 = c_fu_128;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_2 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_120;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten44_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten44_load = indvar_flatten44_fu_132;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_124;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 4'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_116;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3) & (icmp_ln112_reg_1129 == 1'd0)))) begin
        gmem_out_blk_n_AR = m_axi_gmem_out_ARREADY;
    end else begin
        gmem_out_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        gmem_out_blk_n_AW = m_axi_gmem_out_AWREADY;
    end else begin
        gmem_out_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        gmem_out_blk_n_B = m_axi_gmem_out_BVALID;
    end else begin
        gmem_out_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3)))) begin
        gmem_out_blk_n_R = m_axi_gmem_out_RVALID;
    end else begin
        gmem_out_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_out_blk_n_W = m_axi_gmem_out_WREADY;
    end else begin
        gmem_out_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        grp_fu_212_ce = 1'b1;
    end else begin
        grp_fu_212_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_212_p0 = max1_reg_1318;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        grp_fu_212_p0 = v2_fu_928_p1;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_212_p0 = v0_fu_846_p1;
    end else begin
        grp_fu_212_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_212_p1 = max2_reg_1361;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        grp_fu_212_p1 = v3_reg_1312;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_212_p1 = v1_reg_1255;
    end else begin
        grp_fu_212_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        m_axi_gmem_out_ARADDR = gmem_out_addr_3_reg_1234;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_gmem_out_ARADDR = gmem_out_addr_2_reg_1228;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_out_ARADDR = gmem_out_addr_1_reg_1222;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln112_reg_1129 == 1'd0))) begin
        m_axi_gmem_out_ARADDR = gmem_out_addr_reg_1216;
    end else begin
        m_axi_gmem_out_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln112_reg_1129 == 1'd0)))) begin
        m_axi_gmem_out_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_out_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        m_axi_gmem_out_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_out_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_gmem_out_BREADY = 1'b1;
    end else begin
        m_axi_gmem_out_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        m_axi_gmem_out_RREADY = 1'b1;
    end else begin
        m_axi_gmem_out_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_out_WVALID = 1'b1;
    end else begin
        m_axi_gmem_out_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to6 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln112_1_fu_451_p2 = (indvar_flatten44_load_reg_1113 + 9'd1);

assign add_ln112_fu_300_p2 = (ap_sig_allocacmp_c_1 + 5'd1);

assign add_ln113_1_fu_772_p2 = (indvar_flatten_load_reg_1133 + 6'd1);

assign add_ln113_fu_360_p2 = (select_ln112_fu_312_p3 + 4'd2);

assign add_ln114_fu_767_p2 = (select_ln113_reg_1176 + 4'd2);

assign add_ln116_1_fu_430_p2 = (add_ln116_3_fu_425_p2 + zext_ln113_fu_413_p1);

assign add_ln116_2_fu_647_p2 = (zext_ln116_2_fu_643_p1 + select_ln113_2_reg_1198);

assign add_ln116_3_fu_425_p2 = (zext_ln116_1_fu_422_p1 + input_r);

assign add_ln116_4_fu_520_p2 = (shl_ln116_2_mid1_fu_510_p3 + zext_ln116_3_fu_517_p1);

assign add_ln116_5_fu_530_p2 = (zext_ln116_4_fu_526_p1 + input_r);

assign add_ln116_6_fu_535_p2 = (add_ln116_5_fu_530_p2 + zext_ln112_fu_474_p1);

assign add_ln116_fu_274_p2 = (shl_ln116_2_fu_254_p3 + zext_ln116_fu_270_p1);

assign add_ln117_fu_682_p2 = (zext_ln117_fu_678_p1 + select_ln113_2_reg_1198);

assign add_ln118_1_fu_436_p2 = (add_ln116_reg_1123 + 13'd640);

assign add_ln118_2_fu_445_p2 = (zext_ln118_fu_441_p1 + add_ln118_fu_417_p2);

assign add_ln118_3_fu_707_p2 = (zext_ln116_2_fu_643_p1 + select_ln113_3_reg_1204);

assign add_ln118_4_fu_478_p2 = (zext_ln113_1_fu_463_p1 + input_r);

assign add_ln118_5_fu_497_p2 = (add_ln118_4_fu_478_p2 + 64'd640);

assign add_ln118_6_fu_548_p2 = (add_ln116_4_fu_520_p2 + 13'd640);

assign add_ln118_7_fu_558_p2 = (zext_ln118_1_fu_554_p1 + select_ln112_3_fu_483_p3);

assign add_ln118_fu_417_p2 = (zext_ln113_fu_413_p1 + input_r);

assign add_ln119_fu_732_p2 = (zext_ln117_fu_678_p1 + select_ln113_3_reg_1204);

assign add_ln125_1_fu_590_p2 = (select_ln113_1_reg_1188 + zext_ln125_fu_581_p1);

assign add_ln125_2_fu_605_p2 = (zext_ln125_1_fu_601_p1 + add_ln125_fu_585_p2);

assign add_ln125_3_fu_595_p2 = (add_ln125_1_fu_590_p2 + select_ln113_4_cast_fu_571_p1);

assign add_ln125_fu_585_p2 = (zext_ln112_fu_474_p1 + output_r);

assign and_ln121_1_fu_892_p2 = (grp_fu_838_p_dout0 & and_ln121_fu_886_p2);

assign and_ln121_fu_886_p2 = (or_ln121_fu_878_p2 & or_ln121_1_fu_882_p2);

assign and_ln122_1_fu_956_p2 = (grp_fu_838_p_dout0 & and_ln122_fu_950_p2);

assign and_ln122_fu_950_p2 = (or_ln122_fu_942_p2 & or_ln122_1_fu_946_p2);

assign and_ln123_1_fu_1044_p2 = (grp_fu_838_p_dout0 & and_ln123_fu_1038_p2);

assign and_ln123_fu_1038_p2 = (or_ln123_fu_1014_p2 & or_ln123_1_fu_1032_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((m_axi_gmem_out_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_gmem_out_WREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((m_axi_gmem_out_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((m_axi_gmem_out_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_gmem_out_WREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((m_axi_gmem_out_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((m_axi_gmem_out_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_00001 = (((m_axi_gmem_out_BVALID == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((m_axi_gmem_out_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((m_axi_gmem_out_BVALID == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((m_axi_gmem_out_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((m_axi_gmem_out_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((m_axi_gmem_out_BVALID == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((m_axi_gmem_out_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((m_axi_gmem_out_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_00001 = ((m_axi_gmem_out_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((m_axi_gmem_out_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((m_axi_gmem_out_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((m_axi_gmem_out_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((m_axi_gmem_out_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_00001 = ((m_axi_gmem_out_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = (((m_axi_gmem_out_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((m_axi_gmem_out_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_io)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = (((m_axi_gmem_out_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((m_axi_gmem_out_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_io)));
end

assign ap_block_state10_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage3_iter2 = (m_axi_gmem_out_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state13_pp0_stage0_iter3 = (m_axi_gmem_out_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state14_pp0_stage1_iter3 = (m_axi_gmem_out_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state15_pp0_stage2_iter3 = (m_axi_gmem_out_RVALID == 1'b0);
end

assign ap_block_state16_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage3_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state26_pp0_stage1_iter6 = (m_axi_gmem_out_BVALID == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((m_axi_gmem_out_ARREADY == 1'b0) & (icmp_ln112_reg_1129 == 1'd0));
end

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign bitcast_ln123_1_fu_985_p1 = max2_reg_1361;

assign bitcast_ln123_fu_968_p1 = max1_reg_1318_pp0_iter4_reg;

assign grp_fu_838_p_ce = grp_fu_212_ce;

assign grp_fu_838_p_din0 = grp_fu_212_p0;

assign grp_fu_838_p_din1 = grp_fu_212_p1;

assign grp_fu_838_p_opcode = 5'd2;

assign icmp_ln112_fu_288_p2 = ((ap_sig_allocacmp_indvar_flatten44_load == 9'd400) ? 1'b1 : 1'b0);

assign icmp_ln113_fu_306_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 6'd25) ? 1'b1 : 1'b0);

assign icmp_ln114_fu_348_p2 = ((ap_sig_allocacmp_j_load < 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln121_1_fu_841_p2 = ((trunc_ln121_reg_1250 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln121_2_fu_850_p2 = ((tmp_4_reg_1261 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln121_3_fu_855_p2 = ((trunc_ln121_1_reg_1266 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_836_p2 = ((tmp_reg_1245 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln122_1_fu_923_p2 = ((trunc_ln122_reg_1307 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln122_2_fu_932_p2 = ((tmp_7_reg_1325 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln122_3_fu_937_p2 = ((trunc_ln122_1_reg_1330 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_918_p2 = ((tmp_6_reg_1302 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln123_1_fu_1008_p2 = ((trunc_ln123_fu_981_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln123_2_fu_1020_p2 = ((tmp_s_fu_988_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln123_3_fu_1026_p2 = ((trunc_ln123_1_fu_998_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln123_fu_1002_p2 = ((tmp_9_fu_971_p4 != 8'd255) ? 1'b1 : 1'b0);

assign m_axi_gmem_out_ARBURST = 2'd0;

assign m_axi_gmem_out_ARCACHE = 4'd0;

assign m_axi_gmem_out_ARID = 1'd0;

assign m_axi_gmem_out_ARLEN = 32'd1;

assign m_axi_gmem_out_ARLOCK = 2'd0;

assign m_axi_gmem_out_ARPROT = 3'd0;

assign m_axi_gmem_out_ARQOS = 4'd0;

assign m_axi_gmem_out_ARREGION = 4'd0;

assign m_axi_gmem_out_ARSIZE = 3'd0;

assign m_axi_gmem_out_ARUSER = 1'd0;

assign m_axi_gmem_out_AWADDR = gmem_out_addr_4_reg_1210_pp0_iter4_reg;

assign m_axi_gmem_out_AWBURST = 2'd0;

assign m_axi_gmem_out_AWCACHE = 4'd0;

assign m_axi_gmem_out_AWID = 1'd0;

assign m_axi_gmem_out_AWLEN = 32'd1;

assign m_axi_gmem_out_AWLOCK = 2'd0;

assign m_axi_gmem_out_AWPROT = 3'd0;

assign m_axi_gmem_out_AWQOS = 4'd0;

assign m_axi_gmem_out_AWREGION = 4'd0;

assign m_axi_gmem_out_AWSIZE = 3'd0;

assign m_axi_gmem_out_AWUSER = 1'd0;

assign m_axi_gmem_out_WDATA = max_final_reg_1368;

assign m_axi_gmem_out_WID = 1'd0;

assign m_axi_gmem_out_WLAST = 1'b0;

assign m_axi_gmem_out_WSTRB = 4'd15;

assign m_axi_gmem_out_WUSER = 1'd0;

assign max1_fu_898_p3 = ((and_ln121_1_fu_892_p2[0:0] == 1'b1) ? v0_reg_1281 : v1_reg_1255);

assign max2_fu_962_p3 = ((and_ln122_1_fu_956_p2[0:0] == 1'b1) ? v2_reg_1345 : v3_reg_1312);

assign max_final_fu_1050_p3 = ((and_ln123_1_fu_1044_p2[0:0] == 1'b1) ? max1_reg_1318_pp0_iter4_reg : max2_reg_1361);

assign or_ln112_fu_354_p2 = (icmp_ln114_fu_348_p2 | icmp_ln113_fu_306_p2);

assign or_ln117_fu_672_p2 = (shl_ln116_1_fu_636_p3 | 10'd64);

assign or_ln121_1_fu_882_p2 = (icmp_ln121_3_reg_1297 | icmp_ln121_2_reg_1292);

assign or_ln121_fu_878_p2 = (icmp_ln121_reg_1271 | icmp_ln121_1_reg_1276);

assign or_ln122_1_fu_946_p2 = (icmp_ln122_3_reg_1356 | icmp_ln122_2_reg_1351);

assign or_ln122_fu_942_p2 = (icmp_ln122_reg_1335 | icmp_ln122_1_reg_1340);

assign or_ln123_1_fu_1032_p2 = (icmp_ln123_3_fu_1026_p2 | icmp_ln123_2_fu_1020_p2);

assign or_ln123_fu_1014_p2 = (icmp_ln123_fu_1002_p2 | icmp_ln123_1_fu_1008_p2);

assign select_ln112_1_fu_320_p3 = ((icmp_ln113_fu_306_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_j_load);

assign select_ln112_2_fu_467_p3 = ((icmp_ln113_reg_1143[0:0] == 1'b1) ? shl_ln116_mid1_fu_456_p3 : shl_ln_fu_406_p3);

assign select_ln112_3_fu_483_p3 = ((icmp_ln113_reg_1143[0:0] == 1'b1) ? add_ln118_4_fu_478_p2 : add_ln118_fu_417_p2);

assign select_ln112_4_fu_332_p3 = ((icmp_ln113_fu_306_p2[0:0] == 1'b1) ? 11'd0 : shl_ln116_3_fu_262_p3);

assign select_ln112_5_fu_490_p3 = ((icmp_ln113_reg_1143[0:0] == 1'b1) ? add_ln118_4_fu_478_p2 : add_ln116_1_fu_430_p2);

assign select_ln112_6_fu_503_p3 = ((icmp_ln113_reg_1143[0:0] == 1'b1) ? add_ln118_5_fu_497_p2 : add_ln118_2_fu_445_p2);

assign select_ln112_7_fu_340_p3 = ((icmp_ln113_fu_306_p2[0:0] == 1'b1) ? 9'd0 : shl_ln1_fu_280_p3);

assign select_ln112_8_fu_757_p3 = ((icmp_ln113_reg_1143[0:0] == 1'b1) ? add_ln112_reg_1138 : c_1_reg_1108);

assign select_ln112_fu_312_p3 = ((icmp_ln113_fu_306_p2[0:0] == 1'b1) ? 4'd0 : ap_sig_allocacmp_i_2);

assign select_ln113_1_fu_382_p3 = ((or_ln112_fu_354_p2[0:0] == 1'b1) ? select_ln112_4_fu_332_p3 : shl_ln116_3_mid1_fu_374_p3);

assign select_ln113_2_fu_541_p3 = ((or_ln112_reg_1163[0:0] == 1'b1) ? select_ln112_5_fu_490_p3 : add_ln116_6_fu_535_p2);

assign select_ln113_3_fu_564_p3 = ((or_ln112_reg_1163[0:0] == 1'b1) ? select_ln112_6_fu_503_p3 : add_ln118_7_fu_558_p2);

assign select_ln113_4_cast_fu_571_p1 = select_ln113_4_reg_1193;

assign select_ln113_4_fu_398_p3 = ((or_ln112_fu_354_p2[0:0] == 1'b1) ? select_ln112_7_fu_340_p3 : shl_ln125_mid1_fu_390_p3);

assign select_ln113_5_fu_762_p3 = ((or_ln112_reg_1163[0:0] == 1'b1) ? select_ln112_reg_1153 : add_ln113_reg_1170);

assign select_ln113_6_fu_777_p3 = ((icmp_ln113_reg_1143[0:0] == 1'b1) ? 6'd1 : add_ln113_1_fu_772_p2);

assign select_ln113_fu_366_p3 = ((or_ln112_fu_354_p2[0:0] == 1'b1) ? select_ln112_1_fu_320_p3 : 4'd0);

assign sext_ln116_fu_662_p1 = $signed(trunc_ln_fu_652_p4);

assign sext_ln117_fu_697_p1 = $signed(trunc_ln4_fu_687_p4);

assign sext_ln118_fu_722_p1 = $signed(trunc_ln5_fu_712_p4);

assign sext_ln119_fu_747_p1 = $signed(trunc_ln6_fu_737_p4);

assign sext_ln125_fu_621_p1 = $signed(trunc_ln1_fu_611_p4);

assign shl_ln116_1_fu_636_p3 = {{select_ln113_reg_1176}, {6'd0}};

assign shl_ln116_2_fu_254_p3 = {{ap_sig_allocacmp_i_2}, {9'd0}};

assign shl_ln116_2_mid1_fu_510_p3 = {{add_ln113_reg_1170}, {9'd0}};

assign shl_ln116_3_fu_262_p3 = {{ap_sig_allocacmp_i_2}, {7'd0}};

assign shl_ln116_3_mid1_fu_374_p3 = {{add_ln113_fu_360_p2}, {7'd0}};

assign shl_ln116_mid1_fu_456_p3 = {{trunc_ln116_1_reg_1158}, {2'd0}};

assign shl_ln125_1_fu_574_p3 = {{select_ln113_reg_1176}, {5'd0}};

assign shl_ln125_mid1_fu_390_p3 = {{add_ln113_fu_360_p2}, {5'd0}};

assign shl_ln1_fu_280_p3 = {{ap_sig_allocacmp_i_2}, {5'd0}};

assign shl_ln_fu_406_p3 = {{trunc_ln116_reg_1118}, {2'd0}};

assign tmp_9_fu_971_p4 = {{bitcast_ln123_fu_968_p1[30:23]}};

assign tmp_s_fu_988_p4 = {{bitcast_ln123_1_fu_985_p1[30:23]}};

assign trunc_ln116_1_fu_328_p1 = add_ln112_fu_300_p2[3:0];

assign trunc_ln116_fu_250_p1 = ap_sig_allocacmp_c_1[3:0];

assign trunc_ln121_1_fu_832_p1 = m_axi_gmem_out_RDATA[22:0];

assign trunc_ln121_fu_814_p1 = m_axi_gmem_out_RDATA[22:0];

assign trunc_ln122_1_fu_914_p1 = m_axi_gmem_out_RDATA[22:0];

assign trunc_ln122_fu_870_p1 = m_axi_gmem_out_RDATA[22:0];

assign trunc_ln123_1_fu_998_p1 = bitcast_ln123_1_fu_985_p1[22:0];

assign trunc_ln123_fu_981_p1 = bitcast_ln123_fu_968_p1[22:0];

assign trunc_ln1_fu_611_p4 = {{add_ln125_2_fu_605_p2[63:2]}};

assign trunc_ln4_fu_687_p4 = {{add_ln117_fu_682_p2[63:2]}};

assign trunc_ln5_fu_712_p4 = {{add_ln118_3_fu_707_p2[63:2]}};

assign trunc_ln6_fu_737_p4 = {{add_ln119_fu_732_p2[63:2]}};

assign trunc_ln_fu_652_p4 = {{add_ln116_2_fu_647_p2[63:2]}};

assign v0_fu_846_p1 = gmem_out_addr_read_reg_1240;

assign v1_fu_818_p1 = m_axi_gmem_out_RDATA;

assign v2_fu_928_p1 = gmem_out_addr_2_read_reg_1287;

assign v3_fu_874_p1 = m_axi_gmem_out_RDATA;

assign zext_ln112_fu_474_p1 = select_ln112_2_fu_467_p3;

assign zext_ln113_1_fu_463_p1 = shl_ln116_mid1_fu_456_p3;

assign zext_ln113_fu_413_p1 = shl_ln_fu_406_p3;

assign zext_ln116_1_fu_422_p1 = add_ln116_reg_1123;

assign zext_ln116_2_fu_643_p1 = shl_ln116_1_fu_636_p3;

assign zext_ln116_3_fu_517_p1 = shl_ln116_3_mid1_reg_1183;

assign zext_ln116_4_fu_526_p1 = add_ln116_4_fu_520_p2;

assign zext_ln116_fu_270_p1 = shl_ln116_3_fu_262_p3;

assign zext_ln117_fu_678_p1 = or_ln117_fu_672_p2;

assign zext_ln118_1_fu_554_p1 = add_ln118_6_fu_548_p2;

assign zext_ln118_fu_441_p1 = add_ln118_1_fu_436_p2;

assign zext_ln125_1_fu_601_p1 = add_ln125_3_fu_595_p2;

assign zext_ln125_fu_581_p1 = shl_ln125_1_fu_574_p3;

always @ (posedge ap_clk) begin
    add_ln116_reg_1123[6:0] <= 7'b0000000;
    shl_ln116_3_mid1_reg_1183[6:0] <= 7'b0000000;
    select_ln113_1_reg_1188[6:0] <= 7'b0000000;
    select_ln113_4_reg_1193[4:0] <= 5'b00000;
end

endmodule //top_m2
