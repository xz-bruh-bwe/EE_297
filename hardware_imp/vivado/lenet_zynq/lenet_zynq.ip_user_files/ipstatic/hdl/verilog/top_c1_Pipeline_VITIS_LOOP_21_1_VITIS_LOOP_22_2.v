// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_c1_Pipeline_VITIS_LOOP_21_1_VITIS_LOOP_22_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_in_AWVALID,
        m_axi_gmem_in_AWREADY,
        m_axi_gmem_in_AWADDR,
        m_axi_gmem_in_AWID,
        m_axi_gmem_in_AWLEN,
        m_axi_gmem_in_AWSIZE,
        m_axi_gmem_in_AWBURST,
        m_axi_gmem_in_AWLOCK,
        m_axi_gmem_in_AWCACHE,
        m_axi_gmem_in_AWPROT,
        m_axi_gmem_in_AWQOS,
        m_axi_gmem_in_AWREGION,
        m_axi_gmem_in_AWUSER,
        m_axi_gmem_in_WVALID,
        m_axi_gmem_in_WREADY,
        m_axi_gmem_in_WDATA,
        m_axi_gmem_in_WSTRB,
        m_axi_gmem_in_WLAST,
        m_axi_gmem_in_WID,
        m_axi_gmem_in_WUSER,
        m_axi_gmem_in_ARVALID,
        m_axi_gmem_in_ARREADY,
        m_axi_gmem_in_ARADDR,
        m_axi_gmem_in_ARID,
        m_axi_gmem_in_ARLEN,
        m_axi_gmem_in_ARSIZE,
        m_axi_gmem_in_ARBURST,
        m_axi_gmem_in_ARLOCK,
        m_axi_gmem_in_ARCACHE,
        m_axi_gmem_in_ARPROT,
        m_axi_gmem_in_ARQOS,
        m_axi_gmem_in_ARREGION,
        m_axi_gmem_in_ARUSER,
        m_axi_gmem_in_RVALID,
        m_axi_gmem_in_RREADY,
        m_axi_gmem_in_RDATA,
        m_axi_gmem_in_RLAST,
        m_axi_gmem_in_RID,
        m_axi_gmem_in_RFIFONUM,
        m_axi_gmem_in_RUSER,
        m_axi_gmem_in_RRESP,
        m_axi_gmem_in_BVALID,
        m_axi_gmem_in_BREADY,
        m_axi_gmem_in_BRESP,
        m_axi_gmem_in_BID,
        m_axi_gmem_in_BUSER,
        sext_ln21,
        padded_address0,
        padded_ce0,
        padded_we0,
        padded_d0,
        padded_1_address0,
        padded_1_ce0,
        padded_1_we0,
        padded_1_d0,
        padded_2_address0,
        padded_2_ce0,
        padded_2_we0,
        padded_2_d0,
        padded_3_address0,
        padded_3_ce0,
        padded_3_we0,
        padded_3_d0,
        padded_4_address0,
        padded_4_ce0,
        padded_4_we0,
        padded_4_d0,
        padded_5_address0,
        padded_5_ce0,
        padded_5_we0,
        padded_5_d0,
        padded_6_address0,
        padded_6_ce0,
        padded_6_we0,
        padded_6_d0,
        padded_7_address0,
        padded_7_ce0,
        padded_7_we0,
        padded_7_d0,
        padded_8_address0,
        padded_8_ce0,
        padded_8_we0,
        padded_8_d0,
        padded_9_address0,
        padded_9_ce0,
        padded_9_we0,
        padded_9_d0,
        padded_10_address0,
        padded_10_ce0,
        padded_10_we0,
        padded_10_d0,
        padded_11_address0,
        padded_11_ce0,
        padded_11_we0,
        padded_11_d0,
        padded_12_address0,
        padded_12_ce0,
        padded_12_we0,
        padded_12_d0,
        padded_13_address0,
        padded_13_ce0,
        padded_13_we0,
        padded_13_d0,
        padded_14_address0,
        padded_14_ce0,
        padded_14_we0,
        padded_14_d0,
        padded_15_address0,
        padded_15_ce0,
        padded_15_we0,
        padded_15_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_in_AWVALID;
input   m_axi_gmem_in_AWREADY;
output  [63:0] m_axi_gmem_in_AWADDR;
output  [0:0] m_axi_gmem_in_AWID;
output  [31:0] m_axi_gmem_in_AWLEN;
output  [2:0] m_axi_gmem_in_AWSIZE;
output  [1:0] m_axi_gmem_in_AWBURST;
output  [1:0] m_axi_gmem_in_AWLOCK;
output  [3:0] m_axi_gmem_in_AWCACHE;
output  [2:0] m_axi_gmem_in_AWPROT;
output  [3:0] m_axi_gmem_in_AWQOS;
output  [3:0] m_axi_gmem_in_AWREGION;
output  [0:0] m_axi_gmem_in_AWUSER;
output   m_axi_gmem_in_WVALID;
input   m_axi_gmem_in_WREADY;
output  [31:0] m_axi_gmem_in_WDATA;
output  [3:0] m_axi_gmem_in_WSTRB;
output   m_axi_gmem_in_WLAST;
output  [0:0] m_axi_gmem_in_WID;
output  [0:0] m_axi_gmem_in_WUSER;
output   m_axi_gmem_in_ARVALID;
input   m_axi_gmem_in_ARREADY;
output  [63:0] m_axi_gmem_in_ARADDR;
output  [0:0] m_axi_gmem_in_ARID;
output  [31:0] m_axi_gmem_in_ARLEN;
output  [2:0] m_axi_gmem_in_ARSIZE;
output  [1:0] m_axi_gmem_in_ARBURST;
output  [1:0] m_axi_gmem_in_ARLOCK;
output  [3:0] m_axi_gmem_in_ARCACHE;
output  [2:0] m_axi_gmem_in_ARPROT;
output  [3:0] m_axi_gmem_in_ARQOS;
output  [3:0] m_axi_gmem_in_ARREGION;
output  [0:0] m_axi_gmem_in_ARUSER;
input   m_axi_gmem_in_RVALID;
output   m_axi_gmem_in_RREADY;
input  [31:0] m_axi_gmem_in_RDATA;
input   m_axi_gmem_in_RLAST;
input  [0:0] m_axi_gmem_in_RID;
input  [8:0] m_axi_gmem_in_RFIFONUM;
input  [0:0] m_axi_gmem_in_RUSER;
input  [1:0] m_axi_gmem_in_RRESP;
input   m_axi_gmem_in_BVALID;
output   m_axi_gmem_in_BREADY;
input  [1:0] m_axi_gmem_in_BRESP;
input  [0:0] m_axi_gmem_in_BID;
input  [0:0] m_axi_gmem_in_BUSER;
input  [61:0] sext_ln21;
output  [5:0] padded_address0;
output   padded_ce0;
output   padded_we0;
output  [31:0] padded_d0;
output  [5:0] padded_1_address0;
output   padded_1_ce0;
output   padded_1_we0;
output  [31:0] padded_1_d0;
output  [5:0] padded_2_address0;
output   padded_2_ce0;
output   padded_2_we0;
output  [31:0] padded_2_d0;
output  [5:0] padded_3_address0;
output   padded_3_ce0;
output   padded_3_we0;
output  [31:0] padded_3_d0;
output  [5:0] padded_4_address0;
output   padded_4_ce0;
output   padded_4_we0;
output  [31:0] padded_4_d0;
output  [5:0] padded_5_address0;
output   padded_5_ce0;
output   padded_5_we0;
output  [31:0] padded_5_d0;
output  [5:0] padded_6_address0;
output   padded_6_ce0;
output   padded_6_we0;
output  [31:0] padded_6_d0;
output  [5:0] padded_7_address0;
output   padded_7_ce0;
output   padded_7_we0;
output  [31:0] padded_7_d0;
output  [5:0] padded_8_address0;
output   padded_8_ce0;
output   padded_8_we0;
output  [31:0] padded_8_d0;
output  [5:0] padded_9_address0;
output   padded_9_ce0;
output   padded_9_we0;
output  [31:0] padded_9_d0;
output  [5:0] padded_10_address0;
output   padded_10_ce0;
output   padded_10_we0;
output  [31:0] padded_10_d0;
output  [5:0] padded_11_address0;
output   padded_11_ce0;
output   padded_11_we0;
output  [31:0] padded_11_d0;
output  [5:0] padded_12_address0;
output   padded_12_ce0;
output   padded_12_we0;
output  [31:0] padded_12_d0;
output  [5:0] padded_13_address0;
output   padded_13_ce0;
output   padded_13_we0;
output  [31:0] padded_13_d0;
output  [5:0] padded_14_address0;
output   padded_14_ce0;
output   padded_14_we0;
output  [31:0] padded_14_d0;
output  [5:0] padded_15_address0;
output   padded_15_ce0;
output   padded_15_we0;
output  [31:0] padded_15_d0;

reg ap_idle;
reg m_axi_gmem_in_RREADY;
reg padded_ce0;
reg padded_we0;
reg padded_1_ce0;
reg padded_1_we0;
reg padded_2_ce0;
reg padded_2_we0;
reg padded_3_ce0;
reg padded_3_we0;
reg padded_4_ce0;
reg padded_4_we0;
reg padded_5_ce0;
reg padded_5_we0;
reg padded_6_ce0;
reg padded_6_we0;
reg padded_7_ce0;
reg padded_7_we0;
reg padded_8_ce0;
reg padded_8_we0;
reg padded_9_ce0;
reg padded_9_we0;
reg padded_10_ce0;
reg padded_10_we0;
reg padded_11_ce0;
reg padded_11_we0;
reg padded_12_ce0;
reg padded_12_we0;
reg padded_13_ce0;
reg padded_13_we0;
reg padded_14_ce0;
reg padded_14_we0;
reg padded_15_ce0;
reg padded_15_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg   [0:0] icmp_ln21_reg_560;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln21_fu_369_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_in_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] bitcast_ln23_fu_392_p1;
reg   [31:0] bitcast_ln23_reg_564;
reg    ap_condition_exit_pp0_iter1_stage0;
wire   [63:0] zext_ln23_fu_488_p1;
reg   [4:0] j_fu_116;
wire   [4:0] add_ln22_fu_518_p2;
wire    ap_loop_init;
reg   [4:0] i_fu_120;
wire   [4:0] select_ln21_1_fu_422_p3;
reg   [9:0] indvar_flatten_fu_124;
wire   [9:0] add_ln21_3_fu_375_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [1:0] trunc_ln22_mid2_fu_454_p4;
wire   [1:0] trunc_ln_fu_508_p4;
wire   [0:0] icmp_ln22_fu_408_p2;
wire   [4:0] add_ln21_fu_402_p2;
wire   [2:0] trunc_ln21_fu_430_p1;
wire   [4:0] select_ln21_2_fu_440_p3;
wire   [4:0] add_ln21_2_fu_448_p2;
wire   [4:0] select_ln21_fu_414_p3;
wire   [2:0] trunc_ln23_fu_464_p1;
wire   [2:0] add_ln21_1_fu_434_p2;
wire   [2:0] add_ln23_1_fu_474_p2;
wire   [5:0] tmp_103_fu_480_p3;
wire   [4:0] add_ln23_fu_468_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i_fu_120 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            i_fu_120 <= select_ln21_1_fu_422_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln21_fu_369_p2 == 1'd0))) begin
            indvar_flatten_fu_124 <= add_ln21_3_fu_375_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_124 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            j_fu_116 <= 5'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            j_fu_116 <= add_ln22_fu_518_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln21_reg_560 <= icmp_ln21_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln21_reg_560 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bitcast_ln23_reg_564 <= bitcast_ln23_fu_392_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln21_fu_369_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln21_reg_560 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_124;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln21_reg_560 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_in_blk_n_R = m_axi_gmem_in_RVALID;
    end else begin
        gmem_in_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln21_reg_560 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_gmem_in_RREADY = 1'b1;
    end else begin
        m_axi_gmem_in_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_10_ce0 = 1'b1;
    end else begin
        padded_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln_fu_508_p4 == 2'd2) & (trunc_ln22_mid2_fu_454_p4 == 2'd2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_10_we0 = 1'b1;
    end else begin
        padded_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_11_ce0 = 1'b1;
    end else begin
        padded_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln_fu_508_p4 == 2'd3) & (trunc_ln22_mid2_fu_454_p4 == 2'd2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_11_we0 = 1'b1;
    end else begin
        padded_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_12_ce0 = 1'b1;
    end else begin
        padded_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln_fu_508_p4 == 2'd0) & (trunc_ln22_mid2_fu_454_p4 == 2'd3) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_12_we0 = 1'b1;
    end else begin
        padded_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_13_ce0 = 1'b1;
    end else begin
        padded_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln_fu_508_p4 == 2'd1) & (trunc_ln22_mid2_fu_454_p4 == 2'd3) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_13_we0 = 1'b1;
    end else begin
        padded_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_14_ce0 = 1'b1;
    end else begin
        padded_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln_fu_508_p4 == 2'd2) & (trunc_ln22_mid2_fu_454_p4 == 2'd3) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_14_we0 = 1'b1;
    end else begin
        padded_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_15_ce0 = 1'b1;
    end else begin
        padded_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln_fu_508_p4 == 2'd3) & (trunc_ln22_mid2_fu_454_p4 == 2'd3) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_15_we0 = 1'b1;
    end else begin
        padded_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_1_ce0 = 1'b1;
    end else begin
        padded_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln_fu_508_p4 == 2'd1) & (trunc_ln22_mid2_fu_454_p4 == 2'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_1_we0 = 1'b1;
    end else begin
        padded_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_2_ce0 = 1'b1;
    end else begin
        padded_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln_fu_508_p4 == 2'd2) & (trunc_ln22_mid2_fu_454_p4 == 2'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_2_we0 = 1'b1;
    end else begin
        padded_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_3_ce0 = 1'b1;
    end else begin
        padded_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln_fu_508_p4 == 2'd3) & (trunc_ln22_mid2_fu_454_p4 == 2'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_3_we0 = 1'b1;
    end else begin
        padded_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_4_ce0 = 1'b1;
    end else begin
        padded_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln_fu_508_p4 == 2'd0) & (trunc_ln22_mid2_fu_454_p4 == 2'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_4_we0 = 1'b1;
    end else begin
        padded_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_5_ce0 = 1'b1;
    end else begin
        padded_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln_fu_508_p4 == 2'd1) & (trunc_ln22_mid2_fu_454_p4 == 2'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_5_we0 = 1'b1;
    end else begin
        padded_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_6_ce0 = 1'b1;
    end else begin
        padded_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln_fu_508_p4 == 2'd2) & (trunc_ln22_mid2_fu_454_p4 == 2'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_6_we0 = 1'b1;
    end else begin
        padded_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_7_ce0 = 1'b1;
    end else begin
        padded_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln_fu_508_p4 == 2'd3) & (trunc_ln22_mid2_fu_454_p4 == 2'd1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_7_we0 = 1'b1;
    end else begin
        padded_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_8_ce0 = 1'b1;
    end else begin
        padded_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln_fu_508_p4 == 2'd0) & (trunc_ln22_mid2_fu_454_p4 == 2'd2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_8_we0 = 1'b1;
    end else begin
        padded_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_9_ce0 = 1'b1;
    end else begin
        padded_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln_fu_508_p4 == 2'd1) & (trunc_ln22_mid2_fu_454_p4 == 2'd2) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_9_we0 = 1'b1;
    end else begin
        padded_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_ce0 = 1'b1;
    end else begin
        padded_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (trunc_ln_fu_508_p4 == 2'd0) & (trunc_ln22_mid2_fu_454_p4 == 2'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        padded_we0 = 1'b1;
    end else begin
        padded_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_1_fu_434_p2 = (trunc_ln21_fu_430_p1 + 3'd2);

assign add_ln21_2_fu_448_p2 = (i_fu_120 + select_ln21_2_fu_440_p3);

assign add_ln21_3_fu_375_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln21_fu_402_p2 = (i_fu_120 + 5'd1);

assign add_ln22_fu_518_p2 = (select_ln21_fu_414_p3 + 5'd1);

assign add_ln23_1_fu_474_p2 = (trunc_ln23_fu_464_p1 + 3'd2);

assign add_ln23_fu_468_p2 = (select_ln21_fu_414_p3 + 5'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln21_reg_560 == 1'd0) & (m_axi_gmem_in_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln21_reg_560 == 1'd0) & (m_axi_gmem_in_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln21_reg_560 == 1'd0) & (m_axi_gmem_in_RVALID == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln23_fu_392_p1 = m_axi_gmem_in_RDATA;

assign icmp_ln21_fu_369_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_408_p2 = ((j_fu_116 == 5'd28) ? 1'b1 : 1'b0);

assign m_axi_gmem_in_ARADDR = 64'd0;

assign m_axi_gmem_in_ARBURST = 2'd0;

assign m_axi_gmem_in_ARCACHE = 4'd0;

assign m_axi_gmem_in_ARID = 1'd0;

assign m_axi_gmem_in_ARLEN = 32'd0;

assign m_axi_gmem_in_ARLOCK = 2'd0;

assign m_axi_gmem_in_ARPROT = 3'd0;

assign m_axi_gmem_in_ARQOS = 4'd0;

assign m_axi_gmem_in_ARREGION = 4'd0;

assign m_axi_gmem_in_ARSIZE = 3'd0;

assign m_axi_gmem_in_ARUSER = 1'd0;

assign m_axi_gmem_in_ARVALID = 1'b0;

assign m_axi_gmem_in_AWADDR = 64'd0;

assign m_axi_gmem_in_AWBURST = 2'd0;

assign m_axi_gmem_in_AWCACHE = 4'd0;

assign m_axi_gmem_in_AWID = 1'd0;

assign m_axi_gmem_in_AWLEN = 32'd0;

assign m_axi_gmem_in_AWLOCK = 2'd0;

assign m_axi_gmem_in_AWPROT = 3'd0;

assign m_axi_gmem_in_AWQOS = 4'd0;

assign m_axi_gmem_in_AWREGION = 4'd0;

assign m_axi_gmem_in_AWSIZE = 3'd0;

assign m_axi_gmem_in_AWUSER = 1'd0;

assign m_axi_gmem_in_AWVALID = 1'b0;

assign m_axi_gmem_in_BREADY = 1'b0;

assign m_axi_gmem_in_WDATA = 32'd0;

assign m_axi_gmem_in_WID = 1'd0;

assign m_axi_gmem_in_WLAST = 1'b0;

assign m_axi_gmem_in_WSTRB = 4'd0;

assign m_axi_gmem_in_WUSER = 1'd0;

assign m_axi_gmem_in_WVALID = 1'b0;

assign padded_10_address0 = zext_ln23_fu_488_p1;

assign padded_10_d0 = bitcast_ln23_reg_564;

assign padded_11_address0 = zext_ln23_fu_488_p1;

assign padded_11_d0 = bitcast_ln23_reg_564;

assign padded_12_address0 = zext_ln23_fu_488_p1;

assign padded_12_d0 = bitcast_ln23_reg_564;

assign padded_13_address0 = zext_ln23_fu_488_p1;

assign padded_13_d0 = bitcast_ln23_reg_564;

assign padded_14_address0 = zext_ln23_fu_488_p1;

assign padded_14_d0 = bitcast_ln23_reg_564;

assign padded_15_address0 = zext_ln23_fu_488_p1;

assign padded_15_d0 = bitcast_ln23_reg_564;

assign padded_1_address0 = zext_ln23_fu_488_p1;

assign padded_1_d0 = bitcast_ln23_reg_564;

assign padded_2_address0 = zext_ln23_fu_488_p1;

assign padded_2_d0 = bitcast_ln23_reg_564;

assign padded_3_address0 = zext_ln23_fu_488_p1;

assign padded_3_d0 = bitcast_ln23_reg_564;

assign padded_4_address0 = zext_ln23_fu_488_p1;

assign padded_4_d0 = bitcast_ln23_reg_564;

assign padded_5_address0 = zext_ln23_fu_488_p1;

assign padded_5_d0 = bitcast_ln23_reg_564;

assign padded_6_address0 = zext_ln23_fu_488_p1;

assign padded_6_d0 = bitcast_ln23_reg_564;

assign padded_7_address0 = zext_ln23_fu_488_p1;

assign padded_7_d0 = bitcast_ln23_reg_564;

assign padded_8_address0 = zext_ln23_fu_488_p1;

assign padded_8_d0 = bitcast_ln23_reg_564;

assign padded_9_address0 = zext_ln23_fu_488_p1;

assign padded_9_d0 = bitcast_ln23_reg_564;

assign padded_address0 = zext_ln23_fu_488_p1;

assign padded_d0 = bitcast_ln23_reg_564;

assign select_ln21_1_fu_422_p3 = ((icmp_ln22_fu_408_p2[0:0] == 1'b1) ? add_ln21_fu_402_p2 : i_fu_120);

assign select_ln21_2_fu_440_p3 = ((icmp_ln22_fu_408_p2[0:0] == 1'b1) ? 5'd3 : 5'd2);

assign select_ln21_fu_414_p3 = ((icmp_ln22_fu_408_p2[0:0] == 1'b1) ? 5'd0 : j_fu_116);

assign tmp_103_fu_480_p3 = {{add_ln21_1_fu_434_p2}, {add_ln23_1_fu_474_p2}};

assign trunc_ln21_fu_430_p1 = select_ln21_1_fu_422_p3[2:0];

assign trunc_ln22_mid2_fu_454_p4 = {{add_ln21_2_fu_448_p2[4:3]}};

assign trunc_ln23_fu_464_p1 = select_ln21_fu_414_p3[2:0];

assign trunc_ln_fu_508_p4 = {{add_ln23_fu_468_p2[4:3]}};

assign zext_ln23_fu_488_p1 = tmp_103_fu_480_p3;

endmodule //top_c1_Pipeline_VITIS_LOOP_21_1_VITIS_LOOP_22_2
