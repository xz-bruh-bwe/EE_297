// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_c2_Pipeline_VITIS_LOOP_89_4_VITIS_LOOP_90_5_VITIS_LOOP_91_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        select_ln84_3,
        zext_ln83,
        select_ln84,
        input_r,
        m_axi_gmem_out_AWVALID,
        m_axi_gmem_out_AWREADY,
        m_axi_gmem_out_AWADDR,
        m_axi_gmem_out_AWID,
        m_axi_gmem_out_AWLEN,
        m_axi_gmem_out_AWSIZE,
        m_axi_gmem_out_AWBURST,
        m_axi_gmem_out_AWLOCK,
        m_axi_gmem_out_AWCACHE,
        m_axi_gmem_out_AWPROT,
        m_axi_gmem_out_AWQOS,
        m_axi_gmem_out_AWREGION,
        m_axi_gmem_out_AWUSER,
        m_axi_gmem_out_WVALID,
        m_axi_gmem_out_WREADY,
        m_axi_gmem_out_WDATA,
        m_axi_gmem_out_WSTRB,
        m_axi_gmem_out_WLAST,
        m_axi_gmem_out_WID,
        m_axi_gmem_out_WUSER,
        m_axi_gmem_out_ARVALID,
        m_axi_gmem_out_ARREADY,
        m_axi_gmem_out_ARADDR,
        m_axi_gmem_out_ARID,
        m_axi_gmem_out_ARLEN,
        m_axi_gmem_out_ARSIZE,
        m_axi_gmem_out_ARBURST,
        m_axi_gmem_out_ARLOCK,
        m_axi_gmem_out_ARCACHE,
        m_axi_gmem_out_ARPROT,
        m_axi_gmem_out_ARQOS,
        m_axi_gmem_out_ARREGION,
        m_axi_gmem_out_ARUSER,
        m_axi_gmem_out_RVALID,
        m_axi_gmem_out_RREADY,
        m_axi_gmem_out_RDATA,
        m_axi_gmem_out_RLAST,
        m_axi_gmem_out_RID,
        m_axi_gmem_out_RFIFONUM,
        m_axi_gmem_out_RUSER,
        m_axi_gmem_out_RRESP,
        m_axi_gmem_out_BVALID,
        m_axi_gmem_out_BREADY,
        m_axi_gmem_out_BRESP,
        m_axi_gmem_out_BID,
        m_axi_gmem_out_BUSER,
        sum_6_out,
        sum_6_out_ap_vld,
        grp_fu_196_p_din0,
        grp_fu_196_p_din1,
        grp_fu_196_p_opcode,
        grp_fu_196_p_dout0,
        grp_fu_196_p_ce,
        grp_fu_685_p_din0,
        grp_fu_685_p_din1,
        grp_fu_685_p_dout0,
        grp_fu_685_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] select_ln84_3;
input  [4:0] zext_ln83;
input  [3:0] select_ln84;
input  [63:0] input_r;
output   m_axi_gmem_out_AWVALID;
input   m_axi_gmem_out_AWREADY;
output  [63:0] m_axi_gmem_out_AWADDR;
output  [0:0] m_axi_gmem_out_AWID;
output  [31:0] m_axi_gmem_out_AWLEN;
output  [2:0] m_axi_gmem_out_AWSIZE;
output  [1:0] m_axi_gmem_out_AWBURST;
output  [1:0] m_axi_gmem_out_AWLOCK;
output  [3:0] m_axi_gmem_out_AWCACHE;
output  [2:0] m_axi_gmem_out_AWPROT;
output  [3:0] m_axi_gmem_out_AWQOS;
output  [3:0] m_axi_gmem_out_AWREGION;
output  [0:0] m_axi_gmem_out_AWUSER;
output   m_axi_gmem_out_WVALID;
input   m_axi_gmem_out_WREADY;
output  [31:0] m_axi_gmem_out_WDATA;
output  [3:0] m_axi_gmem_out_WSTRB;
output   m_axi_gmem_out_WLAST;
output  [0:0] m_axi_gmem_out_WID;
output  [0:0] m_axi_gmem_out_WUSER;
output   m_axi_gmem_out_ARVALID;
input   m_axi_gmem_out_ARREADY;
output  [63:0] m_axi_gmem_out_ARADDR;
output  [0:0] m_axi_gmem_out_ARID;
output  [31:0] m_axi_gmem_out_ARLEN;
output  [2:0] m_axi_gmem_out_ARSIZE;
output  [1:0] m_axi_gmem_out_ARBURST;
output  [1:0] m_axi_gmem_out_ARLOCK;
output  [3:0] m_axi_gmem_out_ARCACHE;
output  [2:0] m_axi_gmem_out_ARPROT;
output  [3:0] m_axi_gmem_out_ARQOS;
output  [3:0] m_axi_gmem_out_ARREGION;
output  [0:0] m_axi_gmem_out_ARUSER;
input   m_axi_gmem_out_RVALID;
output   m_axi_gmem_out_RREADY;
input  [31:0] m_axi_gmem_out_RDATA;
input   m_axi_gmem_out_RLAST;
input  [0:0] m_axi_gmem_out_RID;
input  [8:0] m_axi_gmem_out_RFIFONUM;
input  [0:0] m_axi_gmem_out_RUSER;
input  [1:0] m_axi_gmem_out_RRESP;
input   m_axi_gmem_out_BVALID;
output   m_axi_gmem_out_BREADY;
input  [1:0] m_axi_gmem_out_BRESP;
input  [0:0] m_axi_gmem_out_BID;
input  [0:0] m_axi_gmem_out_BUSER;
output  [31:0] sum_6_out;
output   sum_6_out_ap_vld;
output  [31:0] grp_fu_196_p_din0;
output  [31:0] grp_fu_196_p_din1;
output  [1:0] grp_fu_196_p_opcode;
input  [31:0] grp_fu_196_p_dout0;
output   grp_fu_196_p_ce;
output  [31:0] grp_fu_685_p_din0;
output  [31:0] grp_fu_685_p_din1;
input  [31:0] grp_fu_685_p_dout0;
output   grp_fu_685_p_ce;

reg ap_idle;
reg m_axi_gmem_out_ARVALID;
reg m_axi_gmem_out_RREADY;
reg sum_6_out_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state8_pp0_stage3_iter1;
wire    ap_block_state12_pp0_stage3_iter2;
wire    ap_block_state16_pp0_stage3_iter3;
wire    ap_block_state20_pp0_stage3_iter4;
wire    ap_block_pp0_stage3_subdone;
reg   [0:0] icmp_ln89_reg_671;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [11:0] conv2_weights_address0;
reg    conv2_weights_ce0;
wire   [31:0] conv2_weights_q0;
reg    gmem_out_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    gmem_out_blk_n_R;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state9_pp0_stage0_iter2;
reg    ap_block_state13_pp0_stage0_iter3;
wire    ap_block_state17_pp0_stage0_iter4;
wire    ap_block_state21_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
wire   [11:0] zext_ln83_cast_fu_202_p1;
reg   [11:0] zext_ln83_cast_reg_666;
wire   [0:0] icmp_ln89_fu_252_p2;
reg   [0:0] icmp_ln89_reg_671_pp0_iter1_reg;
reg   [0:0] icmp_ln89_reg_671_pp0_iter2_reg;
reg   [0:0] icmp_ln89_reg_671_pp0_iter3_reg;
reg   [0:0] icmp_ln89_reg_671_pp0_iter4_reg;
reg   [2:0] kj_load_reg_675;
reg   [5:0] indvar_flatten_load_reg_680;
wire   [0:0] icmp_ln90_fu_270_p2;
reg   [0:0] icmp_ln90_reg_685;
wire   [2:0] select_ln89_fu_276_p3;
reg   [2:0] select_ln89_reg_692;
wire   [0:0] and_ln89_fu_304_p2;
reg   [0:0] and_ln89_reg_697;
wire   [2:0] add_ln90_fu_310_p2;
reg   [2:0] add_ln90_reg_703;
wire   [2:0] select_ln90_fu_347_p3;
reg   [2:0] select_ln90_reg_713;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_state11_pp0_stage2_iter2;
wire    ap_block_state15_pp0_stage2_iter3;
wire    ap_block_state19_pp0_stage2_iter4;
wire    ap_block_pp0_stage2_11001;
wire   [2:0] select_ln90_1_fu_354_p3;
reg   [2:0] select_ln90_1_reg_719;
wire   [11:0] add_ln93_3_fu_512_p2;
reg   [11:0] add_ln93_3_reg_730;
wire    ap_block_pp0_stage3_11001;
reg   [11:0] add_ln93_3_reg_730_pp0_iter1_reg;
reg   [63:0] gmem_out_addr_reg_735;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state10_pp0_stage1_iter2;
wire    ap_block_state14_pp0_stage1_iter3;
wire    ap_block_state18_pp0_stage1_iter4;
wire    ap_block_state22_pp0_stage1_iter5;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] weight_reg_746;
reg   [31:0] gmem_out_addr_read_reg_751;
wire   [31:0] pixel_fu_587_p1;
reg   [31:0] mul_reg_761;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage1_subdone;
wire   [63:0] zext_ln93_4_fu_583_p1;
wire    ap_block_pp0_stage1;
wire  signed [63:0] sext_ln92_fu_541_p1;
wire    ap_block_pp0_stage3;
reg   [31:0] sum_fu_114;
reg   [31:0] ap_sig_allocacmp_sum_load_1;
wire    ap_loop_init;
reg   [2:0] kj_fu_118;
wire   [2:0] add_ln91_fu_551_p2;
reg   [2:0] ap_sig_allocacmp_kj_load;
reg   [2:0] ki_fu_122;
reg   [2:0] ap_sig_allocacmp_ki_1;
reg   [5:0] indvar_flatten_fu_126;
wire   [5:0] select_ln90_3_fu_561_p3;
reg   [5:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [2:0] ic_fu_130;
wire   [2:0] select_ln89_1_fu_416_p3;
reg   [7:0] indvar_flatten25_fu_134;
wire   [7:0] add_ln89_1_fu_258_p2;
reg   [7:0] ap_sig_allocacmp_indvar_flatten25_load;
wire    ap_block_pp0_stage1_01001;
wire   [3:0] zext_ln90_fu_242_p1;
wire   [3:0] empty_fu_246_p2;
wire   [0:0] icmp_ln91_fu_298_p2;
wire   [0:0] xor_ln89_fu_292_p2;
wire   [3:0] zext_ln90_2_fu_316_p1;
wire   [3:0] p_mid1_fu_320_p2;
wire   [3:0] select_ln89_2_fu_284_p3;
wire   [3:0] select_ln90_2_fu_326_p3;
wire    ap_block_pp0_stage2;
wire   [0:0] or_ln90_fu_343_p2;
wire   [3:0] kj_cast_fu_359_p1;
wire   [3:0] add_ln92_fu_363_p2;
wire   [8:0] shl_ln92_1_fu_368_p3;
wire   [6:0] shl_ln92_2_fu_380_p3;
wire   [9:0] zext_ln92_fu_376_p1;
wire   [9:0] zext_ln92_2_fu_388_p1;
wire  signed [9:0] sub_ln92_fu_392_p2;
wire   [2:0] add_ln89_fu_410_p2;
wire   [4:0] zext_ln90_mid2_v_fu_427_p3;
wire   [4:0] p_shl1_fu_442_p3;
wire   [5:0] zext_ln93_2_fu_449_p1;
wire   [5:0] zext_ln93_1_fu_439_p1;
wire   [5:0] add_ln93_fu_453_p2;
wire   [6:0] zext_ln90_1_fu_459_p1;
wire   [6:0] zext_ln93_3_fu_463_p1;
wire   [6:0] add_ln93_1_fu_466_p2;
wire   [4:0] trunc_ln93_fu_472_p1;
wire   [7:0] p_shl_fu_476_p3;
wire   [7:0] tmp_fu_484_p3;
wire   [7:0] sub_ln93_fu_492_p2;
wire   [7:0] zext_ln93_fu_423_p1;
wire   [7:0] add_ln93_2_fu_498_p2;
wire   [11:0] tmp_s_fu_504_p3;
wire   [63:0] zext_ln89_fu_435_p1;
wire  signed [13:0] grp_fu_604_p3;
wire  signed [63:0] sext_ln92_2_fu_522_p1;
wire   [63:0] add_ln92_1_fu_517_p2;
wire   [63:0] add_ln92_3_fu_525_p2;
wire   [61:0] trunc_ln_fu_531_p4;
wire   [5:0] add_ln90_1_fu_556_p2;
wire   [3:0] grp_fu_604_p0;
wire   [8:0] grp_fu_604_p1;
reg    grp_fu_194_ce;
reg    grp_fu_198_ce;
reg    grp_fu_604_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter4_stage1;
reg    ap_idle_pp0_0to3;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [3:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to5;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage1_00001;
wire   [12:0] grp_fu_604_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

top_c2_Pipeline_VITIS_LOOP_89_4_VITIS_LOOP_90_5_VITIS_LOOP_91_6_conv2_weights_ROMBew #(
    .DataWidth( 32 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
conv2_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv2_weights_address0),
    .ce0(conv2_weights_ce0),
    .q0(conv2_weights_q0)
);

top_mac_muladd_4ns_9ns_10s_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 14 ))
mac_muladd_4ns_9ns_10s_14_4_1_U150(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_604_p0),
    .din1(grp_fu_604_p1),
    .din2(sub_ln92_fu_392_p2),
    .ce(grp_fu_604_ce),
    .dout(grp_fu_604_p3)
);

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage1))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage1))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ic_fu_130 <= 3'd0;
    end else if (((icmp_ln89_reg_671 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ic_fu_130 <= select_ln89_1_fu_416_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln89_fu_252_p2 == 1'd0))) begin
            indvar_flatten25_fu_134 <= add_ln89_1_fu_258_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten25_fu_134 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_fu_126 <= 6'd0;
    end else if (((icmp_ln89_reg_671 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        indvar_flatten_fu_126 <= select_ln90_3_fu_561_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ki_fu_122 <= 3'd0;
    end else if (((icmp_ln89_reg_671 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ki_fu_122 <= select_ln90_1_fu_354_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        kj_fu_118 <= 3'd0;
    end else if (((icmp_ln89_reg_671 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        kj_fu_118 <= add_ln91_fu_551_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_fu_114 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        sum_fu_114 <= grp_fu_196_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln89_fu_252_p2 == 1'd0))) begin
        add_ln90_reg_703 <= add_ln90_fu_310_p2;
        and_ln89_reg_697 <= and_ln89_fu_304_p2;
        icmp_ln90_reg_685 <= icmp_ln90_fu_270_p2;
        indvar_flatten_load_reg_680 <= ap_sig_allocacmp_indvar_flatten_load;
        kj_load_reg_675 <= ap_sig_allocacmp_kj_load;
        select_ln89_reg_692 <= select_ln89_fu_276_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln89_reg_671 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln93_3_reg_730 <= add_ln93_3_fu_512_p2;
        gmem_out_addr_reg_735 <= sext_ln92_fu_541_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln93_3_reg_730_pp0_iter1_reg <= add_ln93_3_reg_730;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_out_addr_read_reg_751 <= m_axi_gmem_out_RDATA;
        icmp_ln89_reg_671 <= icmp_ln89_fu_252_p2;
        icmp_ln89_reg_671_pp0_iter1_reg <= icmp_ln89_reg_671;
        icmp_ln89_reg_671_pp0_iter2_reg <= icmp_ln89_reg_671_pp0_iter1_reg;
        icmp_ln89_reg_671_pp0_iter3_reg <= icmp_ln89_reg_671_pp0_iter2_reg;
        icmp_ln89_reg_671_pp0_iter4_reg <= icmp_ln89_reg_671_pp0_iter3_reg;
        mul_reg_761 <= grp_fu_685_p_dout0;
        zext_ln83_cast_reg_666[4 : 0] <= zext_ln83_cast_fu_202_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln89_reg_671 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        select_ln90_1_reg_719 <= select_ln90_1_fu_354_p3;
        select_ln90_reg_713 <= select_ln90_fu_347_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        weight_reg_746 <= conv2_weights_q0;
    end
end

always @ (*) begin
    if (((icmp_ln89_reg_671 == 1'd1) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln89_reg_671_pp0_iter4_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter4_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter4_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to5 = 1'b1;
    end else begin
        ap_idle_pp0_1to5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten25_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten25_load = indvar_flatten25_fu_134;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_126;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_ki_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_ki_1 = ki_fu_122;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_kj_load = 3'd0;
    end else begin
        ap_sig_allocacmp_kj_load = kj_fu_118;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_sum_load_1 = grp_fu_196_p_dout0;
    end else begin
        ap_sig_allocacmp_sum_load_1 = sum_fu_114;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        conv2_weights_ce0 = 1'b1;
    end else begin
        conv2_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_out_blk_n_AR = m_axi_gmem_out_ARREADY;
    end else begin
        gmem_out_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_out_blk_n_R = m_axi_gmem_out_RVALID;
    end else begin
        gmem_out_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_194_ce = 1'b1;
    end else begin
        grp_fu_194_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_198_ce = 1'b1;
    end else begin
        grp_fu_198_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_604_ce = 1'b1;
    end else begin
        grp_fu_604_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_gmem_out_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_out_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_gmem_out_RREADY = 1'b1;
    end else begin
        m_axi_gmem_out_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln89_reg_671_pp0_iter4_reg == 1'd1))) begin
        sum_6_out_ap_vld = 1'b1;
    end else begin
        sum_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to5 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln89_1_fu_258_p2 = (ap_sig_allocacmp_indvar_flatten25_load + 8'd1);

assign add_ln89_fu_410_p2 = (ic_fu_130 + 3'd1);

assign add_ln90_1_fu_556_p2 = (indvar_flatten_load_reg_680 + 6'd1);

assign add_ln90_fu_310_p2 = (select_ln89_fu_276_p3 + 3'd1);

assign add_ln91_fu_551_p2 = (select_ln90_reg_713 + 3'd1);

assign add_ln92_1_fu_517_p2 = (zext_ln89_fu_435_p1 + input_r);

assign add_ln92_3_fu_525_p2 = ($signed(sext_ln92_2_fu_522_p1) + $signed(add_ln92_1_fu_517_p2));

assign add_ln92_fu_363_p2 = (kj_cast_fu_359_p1 + select_ln84);

assign add_ln93_1_fu_466_p2 = (zext_ln90_1_fu_459_p1 + zext_ln93_3_fu_463_p1);

assign add_ln93_2_fu_498_p2 = (sub_ln93_fu_492_p2 + zext_ln93_fu_423_p1);

assign add_ln93_3_fu_512_p2 = (tmp_s_fu_504_p3 + zext_ln83_cast_reg_666);

assign add_ln93_fu_453_p2 = (zext_ln93_2_fu_449_p1 + zext_ln93_1_fu_439_p1);

assign and_ln89_fu_304_p2 = (xor_ln89_fu_292_p2 & icmp_ln91_fu_298_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_gmem_out_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (m_axi_gmem_out_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_gmem_out_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (m_axi_gmem_out_RVALID == 1'b0)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp0_stage0_iter3 = (m_axi_gmem_out_RVALID == 1'b0);
end

assign ap_block_state14_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign conv2_weights_address0 = zext_ln93_4_fu_583_p1;

assign empty_fu_246_p2 = (zext_ln90_fu_242_p1 + select_ln84_3);

assign grp_fu_196_p_ce = grp_fu_194_ce;

assign grp_fu_196_p_din0 = ap_sig_allocacmp_sum_load_1;

assign grp_fu_196_p_din1 = mul_reg_761;

assign grp_fu_196_p_opcode = 2'd0;

assign grp_fu_604_p0 = grp_fu_604_p00;

assign grp_fu_604_p00 = select_ln90_2_fu_326_p3;

assign grp_fu_604_p1 = 13'd336;

assign grp_fu_685_p_ce = grp_fu_198_ce;

assign grp_fu_685_p_din0 = pixel_fu_587_p1;

assign grp_fu_685_p_din1 = weight_reg_746;

assign icmp_ln89_fu_252_p2 = ((ap_sig_allocacmp_indvar_flatten25_load == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_270_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 6'd25) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_298_p2 = ((ap_sig_allocacmp_kj_load == 3'd5) ? 1'b1 : 1'b0);

assign kj_cast_fu_359_p1 = select_ln90_fu_347_p3;

assign m_axi_gmem_out_ARADDR = gmem_out_addr_reg_735;

assign m_axi_gmem_out_ARBURST = 2'd0;

assign m_axi_gmem_out_ARCACHE = 4'd0;

assign m_axi_gmem_out_ARID = 1'd0;

assign m_axi_gmem_out_ARLEN = 32'd1;

assign m_axi_gmem_out_ARLOCK = 2'd0;

assign m_axi_gmem_out_ARPROT = 3'd0;

assign m_axi_gmem_out_ARQOS = 4'd0;

assign m_axi_gmem_out_ARREGION = 4'd0;

assign m_axi_gmem_out_ARSIZE = 3'd0;

assign m_axi_gmem_out_ARUSER = 1'd0;

assign m_axi_gmem_out_AWADDR = 64'd0;

assign m_axi_gmem_out_AWBURST = 2'd0;

assign m_axi_gmem_out_AWCACHE = 4'd0;

assign m_axi_gmem_out_AWID = 1'd0;

assign m_axi_gmem_out_AWLEN = 32'd0;

assign m_axi_gmem_out_AWLOCK = 2'd0;

assign m_axi_gmem_out_AWPROT = 3'd0;

assign m_axi_gmem_out_AWQOS = 4'd0;

assign m_axi_gmem_out_AWREGION = 4'd0;

assign m_axi_gmem_out_AWSIZE = 3'd0;

assign m_axi_gmem_out_AWUSER = 1'd0;

assign m_axi_gmem_out_AWVALID = 1'b0;

assign m_axi_gmem_out_BREADY = 1'b0;

assign m_axi_gmem_out_WDATA = 32'd0;

assign m_axi_gmem_out_WID = 1'd0;

assign m_axi_gmem_out_WLAST = 1'b0;

assign m_axi_gmem_out_WSTRB = 4'd0;

assign m_axi_gmem_out_WUSER = 1'd0;

assign m_axi_gmem_out_WVALID = 1'b0;

assign or_ln90_fu_343_p2 = (icmp_ln90_reg_685 | and_ln89_reg_697);

assign p_mid1_fu_320_p2 = (zext_ln90_2_fu_316_p1 + select_ln84_3);

assign p_shl1_fu_442_p3 = {{select_ln90_1_reg_719}, {2'd0}};

assign p_shl_fu_476_p3 = {{trunc_ln93_fu_472_p1}, {3'd0}};

assign pixel_fu_587_p1 = gmem_out_addr_read_reg_751;

assign select_ln89_1_fu_416_p3 = ((icmp_ln90_reg_685[0:0] == 1'b1) ? add_ln89_fu_410_p2 : ic_fu_130);

assign select_ln89_2_fu_284_p3 = ((icmp_ln90_fu_270_p2[0:0] == 1'b1) ? select_ln84_3 : empty_fu_246_p2);

assign select_ln89_fu_276_p3 = ((icmp_ln90_fu_270_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_ki_1);

assign select_ln90_1_fu_354_p3 = ((and_ln89_reg_697[0:0] == 1'b1) ? add_ln90_reg_703 : select_ln89_reg_692);

assign select_ln90_2_fu_326_p3 = ((and_ln89_fu_304_p2[0:0] == 1'b1) ? p_mid1_fu_320_p2 : select_ln89_2_fu_284_p3);

assign select_ln90_3_fu_561_p3 = ((icmp_ln90_reg_685[0:0] == 1'b1) ? 6'd1 : add_ln90_1_fu_556_p2);

assign select_ln90_fu_347_p3 = ((or_ln90_fu_343_p2[0:0] == 1'b1) ? 3'd0 : kj_load_reg_675);

assign sext_ln92_2_fu_522_p1 = grp_fu_604_p3;

assign sext_ln92_fu_541_p1 = $signed(trunc_ln_fu_531_p4);

assign shl_ln92_1_fu_368_p3 = {{add_ln92_fu_363_p2}, {5'd0}};

assign shl_ln92_2_fu_380_p3 = {{add_ln92_fu_363_p2}, {3'd0}};

assign sub_ln92_fu_392_p2 = (zext_ln92_fu_376_p1 - zext_ln92_2_fu_388_p1);

assign sub_ln93_fu_492_p2 = (p_shl_fu_476_p3 - tmp_fu_484_p3);

assign sum_6_out = sum_fu_114;

assign tmp_fu_484_p3 = {{add_ln93_1_fu_466_p2}, {1'd0}};

assign tmp_s_fu_504_p3 = {{add_ln93_2_fu_498_p2}, {4'd0}};

assign trunc_ln93_fu_472_p1 = add_ln93_1_fu_466_p2[4:0];

assign trunc_ln_fu_531_p4 = {{add_ln92_3_fu_525_p2[63:2]}};

assign xor_ln89_fu_292_p2 = (icmp_ln90_fu_270_p2 ^ 1'd1);

assign zext_ln83_cast_fu_202_p1 = zext_ln83;

assign zext_ln89_fu_435_p1 = zext_ln90_mid2_v_fu_427_p3;

assign zext_ln90_1_fu_459_p1 = add_ln93_fu_453_p2;

assign zext_ln90_2_fu_316_p1 = add_ln90_fu_310_p2;

assign zext_ln90_fu_242_p1 = ap_sig_allocacmp_ki_1;

assign zext_ln90_mid2_v_fu_427_p3 = {{select_ln89_1_fu_416_p3}, {2'd0}};

assign zext_ln92_2_fu_388_p1 = shl_ln92_2_fu_380_p3;

assign zext_ln92_fu_376_p1 = shl_ln92_1_fu_368_p3;

assign zext_ln93_1_fu_439_p1 = select_ln90_1_reg_719;

assign zext_ln93_2_fu_449_p1 = p_shl1_fu_442_p3;

assign zext_ln93_3_fu_463_p1 = select_ln90_reg_713;

assign zext_ln93_4_fu_583_p1 = add_ln93_3_reg_730_pp0_iter1_reg;

assign zext_ln93_fu_423_p1 = select_ln89_1_fu_416_p3;

always @ (posedge ap_clk) begin
    zext_ln83_cast_reg_666[11:5] <= 7'b0000000;
end

endmodule //top_c2_Pipeline_VITIS_LOOP_89_4_VITIS_LOOP_90_5_VITIS_LOOP_91_6
