// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_fc_120_84_Pipeline_VITIS_LOOP_91_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_out_AWVALID,
        m_axi_gmem_out_AWREADY,
        m_axi_gmem_out_AWADDR,
        m_axi_gmem_out_AWID,
        m_axi_gmem_out_AWLEN,
        m_axi_gmem_out_AWSIZE,
        m_axi_gmem_out_AWBURST,
        m_axi_gmem_out_AWLOCK,
        m_axi_gmem_out_AWCACHE,
        m_axi_gmem_out_AWPROT,
        m_axi_gmem_out_AWQOS,
        m_axi_gmem_out_AWREGION,
        m_axi_gmem_out_AWUSER,
        m_axi_gmem_out_WVALID,
        m_axi_gmem_out_WREADY,
        m_axi_gmem_out_WDATA,
        m_axi_gmem_out_WSTRB,
        m_axi_gmem_out_WLAST,
        m_axi_gmem_out_WID,
        m_axi_gmem_out_WUSER,
        m_axi_gmem_out_ARVALID,
        m_axi_gmem_out_ARREADY,
        m_axi_gmem_out_ARADDR,
        m_axi_gmem_out_ARID,
        m_axi_gmem_out_ARLEN,
        m_axi_gmem_out_ARSIZE,
        m_axi_gmem_out_ARBURST,
        m_axi_gmem_out_ARLOCK,
        m_axi_gmem_out_ARCACHE,
        m_axi_gmem_out_ARPROT,
        m_axi_gmem_out_ARQOS,
        m_axi_gmem_out_ARREGION,
        m_axi_gmem_out_ARUSER,
        m_axi_gmem_out_RVALID,
        m_axi_gmem_out_RREADY,
        m_axi_gmem_out_RDATA,
        m_axi_gmem_out_RLAST,
        m_axi_gmem_out_RID,
        m_axi_gmem_out_RFIFONUM,
        m_axi_gmem_out_RUSER,
        m_axi_gmem_out_RRESP,
        m_axi_gmem_out_BVALID,
        m_axi_gmem_out_BREADY,
        m_axi_gmem_out_BRESP,
        m_axi_gmem_out_BID,
        m_axi_gmem_out_BUSER,
        sext_ln88,
        sext_ln91,
        zext_ln88,
        fc2_biases_load,
        grp_fu_247_p_din0,
        grp_fu_247_p_din1,
        grp_fu_247_p_opcode,
        grp_fu_247_p_dout0,
        grp_fu_247_p_ce,
        grp_fu_251_p_din0,
        grp_fu_251_p_din1,
        grp_fu_251_p_dout0,
        grp_fu_251_p_ce,
        grp_fu_255_p_din0,
        grp_fu_255_p_din1,
        grp_fu_255_p_opcode,
        grp_fu_255_p_dout0,
        grp_fu_255_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_out_AWVALID;
input   m_axi_gmem_out_AWREADY;
output  [63:0] m_axi_gmem_out_AWADDR;
output  [0:0] m_axi_gmem_out_AWID;
output  [31:0] m_axi_gmem_out_AWLEN;
output  [2:0] m_axi_gmem_out_AWSIZE;
output  [1:0] m_axi_gmem_out_AWBURST;
output  [1:0] m_axi_gmem_out_AWLOCK;
output  [3:0] m_axi_gmem_out_AWCACHE;
output  [2:0] m_axi_gmem_out_AWPROT;
output  [3:0] m_axi_gmem_out_AWQOS;
output  [3:0] m_axi_gmem_out_AWREGION;
output  [0:0] m_axi_gmem_out_AWUSER;
output   m_axi_gmem_out_WVALID;
input   m_axi_gmem_out_WREADY;
output  [31:0] m_axi_gmem_out_WDATA;
output  [3:0] m_axi_gmem_out_WSTRB;
output   m_axi_gmem_out_WLAST;
output  [0:0] m_axi_gmem_out_WID;
output  [0:0] m_axi_gmem_out_WUSER;
output   m_axi_gmem_out_ARVALID;
input   m_axi_gmem_out_ARREADY;
output  [63:0] m_axi_gmem_out_ARADDR;
output  [0:0] m_axi_gmem_out_ARID;
output  [31:0] m_axi_gmem_out_ARLEN;
output  [2:0] m_axi_gmem_out_ARSIZE;
output  [1:0] m_axi_gmem_out_ARBURST;
output  [1:0] m_axi_gmem_out_ARLOCK;
output  [3:0] m_axi_gmem_out_ARCACHE;
output  [2:0] m_axi_gmem_out_ARPROT;
output  [3:0] m_axi_gmem_out_ARQOS;
output  [3:0] m_axi_gmem_out_ARREGION;
output  [0:0] m_axi_gmem_out_ARUSER;
input   m_axi_gmem_out_RVALID;
output   m_axi_gmem_out_RREADY;
input  [31:0] m_axi_gmem_out_RDATA;
input   m_axi_gmem_out_RLAST;
input  [0:0] m_axi_gmem_out_RID;
input  [8:0] m_axi_gmem_out_RFIFONUM;
input  [0:0] m_axi_gmem_out_RUSER;
input  [1:0] m_axi_gmem_out_RRESP;
input   m_axi_gmem_out_BVALID;
output   m_axi_gmem_out_BREADY;
input  [1:0] m_axi_gmem_out_BRESP;
input  [0:0] m_axi_gmem_out_BID;
input  [0:0] m_axi_gmem_out_BUSER;
input  [61:0] sext_ln88;
input  [61:0] sext_ln91;
input  [6:0] zext_ln88;
input  [31:0] fc2_biases_load;
output  [31:0] grp_fu_247_p_din0;
output  [31:0] grp_fu_247_p_din1;
output  [1:0] grp_fu_247_p_opcode;
input  [31:0] grp_fu_247_p_dout0;
output   grp_fu_247_p_ce;
output  [31:0] grp_fu_251_p_din0;
output  [31:0] grp_fu_251_p_din1;
input  [31:0] grp_fu_251_p_dout0;
output   grp_fu_251_p_ce;
output  [31:0] grp_fu_255_p_din0;
output  [31:0] grp_fu_255_p_din1;
output  [4:0] grp_fu_255_p_opcode;
input  [0:0] grp_fu_255_p_dout0;
output   grp_fu_255_p_ce;

reg ap_idle;
reg m_axi_gmem_out_WVALID;
reg m_axi_gmem_out_RREADY;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state8_pp0_stage3_iter1;
wire    ap_block_state12_pp0_stage3_iter2;
wire    ap_block_state16_pp0_stage3_iter3;
wire    ap_block_pp0_stage3_subdone;
reg   [0:0] icmp_ln91_reg_350;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [13:0] fc2_weights_address0;
reg    fc2_weights_ce0;
wire   [31:0] fc2_weights_q0;
reg    gmem_out_blk_n_W;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg   [0:0] icmp_ln91_reg_350_pp0_iter4_reg;
reg   [0:0] ifzero_reg_359;
reg   [0:0] ifzero_reg_359_pp0_iter4_reg;
reg    gmem_out_blk_n_R;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state9_pp0_stage0_iter2;
wire    ap_block_state13_pp0_stage0_iter3;
wire    ap_block_state17_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln91_fu_193_p2;
reg   [0:0] icmp_ln91_reg_350_pp0_iter1_reg;
reg   [0:0] icmp_ln91_reg_350_pp0_iter2_reg;
reg   [0:0] icmp_ln91_reg_350_pp0_iter3_reg;
wire   [0:0] ifzero_fu_225_p2;
reg   [0:0] ifzero_reg_359_pp0_iter1_reg;
reg   [0:0] ifzero_reg_359_pp0_iter2_reg;
reg   [0:0] ifzero_reg_359_pp0_iter3_reg;
reg   [31:0] gmem_out_addr_10_read_reg_363;
reg    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state10_pp0_stage1_iter2;
wire    ap_block_state14_pp0_stage1_iter3;
wire    ap_block_state18_pp0_stage1_iter4;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] fc2_weights_load_reg_368;
wire   [31:0] bitcast_ln92_fu_247_p1;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_state11_pp0_stage2_iter2;
wire    ap_block_state15_pp0_stage2_iter3;
wire    ap_block_state19_pp0_stage2_iter4;
reg    ap_predicate_op87_write_state19;
reg    ap_block_state19_io;
reg    ap_block_pp0_stage2_11001;
reg   [31:0] mul_reg_378;
reg   [31:0] sum_4_reg_388;
reg   [31:0] sum_reg_393;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] select_ln95_fu_306_p3;
reg   [31:0] select_ln95_reg_404;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_exit_pp0_iter4_stage1;
reg    ap_block_pp0_stage2_subdone;
wire   [63:0] zext_ln92_fu_220_p1;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage2_01001;
reg   [13:0] phi_mul_fu_88;
wire   [13:0] add_ln92_1_fu_208_p2;
wire    ap_loop_init;
reg   [13:0] ap_sig_allocacmp_phi_mul_load;
reg   [31:0] sum_3_fu_92;
reg   [31:0] ap_sig_allocacmp_sum_3_load;
reg   [6:0] j_fu_96;
wire   [6:0] add_ln91_fu_199_p2;
reg   [6:0] ap_sig_allocacmp_j_3;
reg   [31:0] grp_fu_150_p0;
reg   [31:0] grp_fu_150_p1;
wire    ap_block_pp0_stage3;
wire   [13:0] zext_ln88_cast_fu_171_p1;
wire   [13:0] add_ln92_fu_214_p2;
wire   [31:0] bitcast_ln95_fu_265_p1;
wire   [7:0] tmp_fu_268_p4;
wire   [22:0] trunc_ln95_fu_278_p1;
wire   [0:0] icmp_ln95_2_fu_288_p2;
wire   [0:0] icmp_ln95_fu_282_p2;
wire   [0:0] or_ln95_fu_294_p2;
wire   [0:0] and_ln95_fu_300_p2;
reg    grp_fu_150_ce;
reg    ap_predicate_op70_fadd_state12;
reg    grp_fu_154_ce;
reg    grp_fu_158_ce;
wire    ap_block_pp0_stage0_00001;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_idle_pp0_0to3;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg   [3:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to4;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage2_00001;
wire    ap_block_pp0_stage3_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

top_fc_120_84_Pipeline_VITIS_LOOP_91_2_fc2_weights_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 10080 ),
    .AddressWidth( 14 ))
fc2_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fc2_weights_address0),
    .ce0(fc2_weights_ce0),
    .q0(fc2_weights_q0)
);

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter4_stage1) | ((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage1))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage1)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln91_fu_193_p2 == 1'd0))) begin
            j_fu_96 <= add_ln91_fu_199_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_96 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln91_fu_193_p2 == 1'd0))) begin
            phi_mul_fu_88 <= add_ln92_1_fu_208_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            phi_mul_fu_88 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_3_fu_92 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln91_reg_350_pp0_iter2_reg == 1'd0))) begin
        sum_3_fu_92 <= grp_fu_247_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln91_reg_350 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        fc2_weights_load_reg_368 <= fc2_weights_q0;
        gmem_out_addr_10_read_reg_363 <= m_axi_gmem_out_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln91_reg_350 <= icmp_ln91_fu_193_p2;
        icmp_ln91_reg_350_pp0_iter1_reg <= icmp_ln91_reg_350;
        icmp_ln91_reg_350_pp0_iter2_reg <= icmp_ln91_reg_350_pp0_iter1_reg;
        icmp_ln91_reg_350_pp0_iter3_reg <= icmp_ln91_reg_350_pp0_iter2_reg;
        icmp_ln91_reg_350_pp0_iter4_reg <= icmp_ln91_reg_350_pp0_iter3_reg;
        ifzero_reg_359_pp0_iter1_reg <= ifzero_reg_359;
        ifzero_reg_359_pp0_iter2_reg <= ifzero_reg_359_pp0_iter1_reg;
        ifzero_reg_359_pp0_iter3_reg <= ifzero_reg_359_pp0_iter2_reg;
        ifzero_reg_359_pp0_iter4_reg <= ifzero_reg_359_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln91_fu_193_p2 == 1'd0))) begin
        ifzero_reg_359 <= ifzero_fu_225_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln91_reg_350_pp0_iter1_reg == 1'd0))) begin
        mul_reg_378 <= grp_fu_251_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ifzero_reg_359_pp0_iter4_reg == 1'd1) & (icmp_ln91_reg_350_pp0_iter4_reg == 1'd0))) begin
        select_ln95_reg_404 <= select_ln95_fu_306_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln91_reg_350_pp0_iter2_reg == 1'd0))) begin
        sum_4_reg_388 <= grp_fu_247_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (ifzero_reg_359_pp0_iter3_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln91_reg_350_pp0_iter3_reg == 1'd0))) begin
        sum_reg_393 <= grp_fu_247_p_dout0;
    end
end

always @ (*) begin
    if (((icmp_ln91_reg_350 == 1'd1) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln91_reg_350_pp0_iter4_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter4_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter4_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to4 = 1'b1;
    end else begin
        ap_idle_pp0_1to4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_3 = 7'd0;
    end else begin
        ap_sig_allocacmp_j_3 = j_fu_96;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_phi_mul_load = 14'd0;
    end else begin
        ap_sig_allocacmp_phi_mul_load = phi_mul_fu_88;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln91_reg_350_pp0_iter2_reg == 1'd0))) begin
        ap_sig_allocacmp_sum_3_load = grp_fu_247_p_dout0;
    end else begin
        ap_sig_allocacmp_sum_3_load = sum_3_fu_92;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fc2_weights_ce0 = 1'b1;
    end else begin
        fc2_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln91_reg_350 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        gmem_out_blk_n_R = m_axi_gmem_out_RVALID;
    end else begin
        gmem_out_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ifzero_reg_359_pp0_iter4_reg == 1'd1) & (icmp_ln91_reg_350_pp0_iter4_reg == 1'd0))) begin
        gmem_out_blk_n_W = m_axi_gmem_out_WREADY;
    end else begin
        gmem_out_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_150_ce = 1'b1;
    end else begin
        grp_fu_150_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_150_p0 = sum_4_reg_388;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_150_p0 = ap_sig_allocacmp_sum_3_load;
    end else begin
        grp_fu_150_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_150_p1 = fc2_biases_load;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_150_p1 = mul_reg_378;
    end else begin
        grp_fu_150_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_154_ce = 1'b1;
    end else begin
        grp_fu_154_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_158_ce = 1'b1;
    end else begin
        grp_fu_158_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln91_reg_350 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m_axi_gmem_out_RREADY = 1'b1;
    end else begin
        m_axi_gmem_out_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_predicate_op87_write_state19 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        m_axi_gmem_out_WVALID = 1'b1;
    end else begin
        m_axi_gmem_out_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to4 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_idle_pp0_0to3 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter4_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln91_fu_199_p2 = (ap_sig_allocacmp_j_3 + 7'd1);

assign add_ln92_1_fu_208_p2 = (ap_sig_allocacmp_phi_mul_load + 14'd84);

assign add_ln92_fu_214_p2 = (ap_sig_allocacmp_phi_mul_load + zext_ln88_cast_fu_171_p1);

assign and_ln95_fu_300_p2 = (or_ln95_fu_294_p2 & grp_fu_255_p_dout0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((icmp_ln91_reg_350 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (m_axi_gmem_out_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((icmp_ln91_reg_350 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (m_axi_gmem_out_RVALID == 1'b0));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state19_io));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state19_io));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_io = ((m_axi_gmem_out_WREADY == 1'b0) & (ap_predicate_op87_write_state19 == 1'b1));
end

assign ap_block_state19_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = ((icmp_ln91_reg_350 == 1'd0) & (m_axi_gmem_out_RVALID == 1'b0));
end

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

always @ (*) begin
    ap_predicate_op70_fadd_state12 = ((ifzero_reg_359_pp0_iter2_reg == 1'd1) & (icmp_ln91_reg_350_pp0_iter2_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op87_write_state19 = ((ifzero_reg_359_pp0_iter4_reg == 1'd1) & (icmp_ln91_reg_350_pp0_iter4_reg == 1'd0));
end

assign bitcast_ln92_fu_247_p1 = gmem_out_addr_10_read_reg_363;

assign bitcast_ln95_fu_265_p1 = sum_reg_393;

assign fc2_weights_address0 = zext_ln92_fu_220_p1;

assign grp_fu_247_p_ce = grp_fu_150_ce;

assign grp_fu_247_p_din0 = grp_fu_150_p0;

assign grp_fu_247_p_din1 = grp_fu_150_p1;

assign grp_fu_247_p_opcode = 2'd0;

assign grp_fu_251_p_ce = grp_fu_154_ce;

assign grp_fu_251_p_din0 = bitcast_ln92_fu_247_p1;

assign grp_fu_251_p_din1 = fc2_weights_load_reg_368;

assign grp_fu_255_p_ce = grp_fu_158_ce;

assign grp_fu_255_p_din0 = sum_reg_393;

assign grp_fu_255_p_din1 = 32'd0;

assign grp_fu_255_p_opcode = 5'd2;

assign icmp_ln91_fu_193_p2 = ((ap_sig_allocacmp_j_3 == 7'd120) ? 1'b1 : 1'b0);

assign icmp_ln95_2_fu_288_p2 = ((trunc_ln95_fu_278_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_282_p2 = ((tmp_fu_268_p4 != 8'd255) ? 1'b1 : 1'b0);

assign ifzero_fu_225_p2 = ((add_ln91_fu_199_p2 == 7'd120) ? 1'b1 : 1'b0);

assign m_axi_gmem_out_ARADDR = 64'd0;

assign m_axi_gmem_out_ARBURST = 2'd0;

assign m_axi_gmem_out_ARCACHE = 4'd0;

assign m_axi_gmem_out_ARID = 1'd0;

assign m_axi_gmem_out_ARLEN = 32'd0;

assign m_axi_gmem_out_ARLOCK = 2'd0;

assign m_axi_gmem_out_ARPROT = 3'd0;

assign m_axi_gmem_out_ARQOS = 4'd0;

assign m_axi_gmem_out_ARREGION = 4'd0;

assign m_axi_gmem_out_ARSIZE = 3'd0;

assign m_axi_gmem_out_ARUSER = 1'd0;

assign m_axi_gmem_out_ARVALID = 1'b0;

assign m_axi_gmem_out_AWADDR = 64'd0;

assign m_axi_gmem_out_AWBURST = 2'd0;

assign m_axi_gmem_out_AWCACHE = 4'd0;

assign m_axi_gmem_out_AWID = 1'd0;

assign m_axi_gmem_out_AWLEN = 32'd0;

assign m_axi_gmem_out_AWLOCK = 2'd0;

assign m_axi_gmem_out_AWPROT = 3'd0;

assign m_axi_gmem_out_AWQOS = 4'd0;

assign m_axi_gmem_out_AWREGION = 4'd0;

assign m_axi_gmem_out_AWSIZE = 3'd0;

assign m_axi_gmem_out_AWUSER = 1'd0;

assign m_axi_gmem_out_AWVALID = 1'b0;

assign m_axi_gmem_out_BREADY = 1'b0;

assign m_axi_gmem_out_WDATA = select_ln95_reg_404;

assign m_axi_gmem_out_WID = 1'd0;

assign m_axi_gmem_out_WLAST = 1'b0;

assign m_axi_gmem_out_WSTRB = 4'd15;

assign m_axi_gmem_out_WUSER = 1'd0;

assign or_ln95_fu_294_p2 = (icmp_ln95_fu_282_p2 | icmp_ln95_2_fu_288_p2);

assign select_ln95_fu_306_p3 = ((and_ln95_fu_300_p2[0:0] == 1'b1) ? bitcast_ln95_fu_265_p1 : 32'd0);

assign tmp_fu_268_p4 = {{bitcast_ln95_fu_265_p1[30:23]}};

assign trunc_ln95_fu_278_p1 = bitcast_ln95_fu_265_p1[22:0];

assign zext_ln88_cast_fu_171_p1 = zext_ln88;

assign zext_ln92_fu_220_p1 = add_ln92_fu_214_p2;

endmodule //top_fc_120_84_Pipeline_VITIS_LOOP_91_2
