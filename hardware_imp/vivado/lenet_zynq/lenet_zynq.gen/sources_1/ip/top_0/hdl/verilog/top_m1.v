// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_m1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_out_AWVALID,
        m_axi_gmem_out_AWREADY,
        m_axi_gmem_out_AWADDR,
        m_axi_gmem_out_AWID,
        m_axi_gmem_out_AWLEN,
        m_axi_gmem_out_AWSIZE,
        m_axi_gmem_out_AWBURST,
        m_axi_gmem_out_AWLOCK,
        m_axi_gmem_out_AWCACHE,
        m_axi_gmem_out_AWPROT,
        m_axi_gmem_out_AWQOS,
        m_axi_gmem_out_AWREGION,
        m_axi_gmem_out_AWUSER,
        m_axi_gmem_out_WVALID,
        m_axi_gmem_out_WREADY,
        m_axi_gmem_out_WDATA,
        m_axi_gmem_out_WSTRB,
        m_axi_gmem_out_WLAST,
        m_axi_gmem_out_WID,
        m_axi_gmem_out_WUSER,
        m_axi_gmem_out_ARVALID,
        m_axi_gmem_out_ARREADY,
        m_axi_gmem_out_ARADDR,
        m_axi_gmem_out_ARID,
        m_axi_gmem_out_ARLEN,
        m_axi_gmem_out_ARSIZE,
        m_axi_gmem_out_ARBURST,
        m_axi_gmem_out_ARLOCK,
        m_axi_gmem_out_ARCACHE,
        m_axi_gmem_out_ARPROT,
        m_axi_gmem_out_ARQOS,
        m_axi_gmem_out_ARREGION,
        m_axi_gmem_out_ARUSER,
        m_axi_gmem_out_RVALID,
        m_axi_gmem_out_RREADY,
        m_axi_gmem_out_RDATA,
        m_axi_gmem_out_RLAST,
        m_axi_gmem_out_RID,
        m_axi_gmem_out_RFIFONUM,
        m_axi_gmem_out_RUSER,
        m_axi_gmem_out_RRESP,
        m_axi_gmem_out_BVALID,
        m_axi_gmem_out_BREADY,
        m_axi_gmem_out_BRESP,
        m_axi_gmem_out_BID,
        m_axi_gmem_out_BUSER,
        input_r,
        output_r,
        grp_fu_838_p_din0,
        grp_fu_838_p_din1,
        grp_fu_838_p_opcode,
        grp_fu_838_p_dout0,
        grp_fu_838_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_out_AWVALID;
input   m_axi_gmem_out_AWREADY;
output  [63:0] m_axi_gmem_out_AWADDR;
output  [0:0] m_axi_gmem_out_AWID;
output  [31:0] m_axi_gmem_out_AWLEN;
output  [2:0] m_axi_gmem_out_AWSIZE;
output  [1:0] m_axi_gmem_out_AWBURST;
output  [1:0] m_axi_gmem_out_AWLOCK;
output  [3:0] m_axi_gmem_out_AWCACHE;
output  [2:0] m_axi_gmem_out_AWPROT;
output  [3:0] m_axi_gmem_out_AWQOS;
output  [3:0] m_axi_gmem_out_AWREGION;
output  [0:0] m_axi_gmem_out_AWUSER;
output   m_axi_gmem_out_WVALID;
input   m_axi_gmem_out_WREADY;
output  [31:0] m_axi_gmem_out_WDATA;
output  [3:0] m_axi_gmem_out_WSTRB;
output   m_axi_gmem_out_WLAST;
output  [0:0] m_axi_gmem_out_WID;
output  [0:0] m_axi_gmem_out_WUSER;
output   m_axi_gmem_out_ARVALID;
input   m_axi_gmem_out_ARREADY;
output  [63:0] m_axi_gmem_out_ARADDR;
output  [0:0] m_axi_gmem_out_ARID;
output  [31:0] m_axi_gmem_out_ARLEN;
output  [2:0] m_axi_gmem_out_ARSIZE;
output  [1:0] m_axi_gmem_out_ARBURST;
output  [1:0] m_axi_gmem_out_ARLOCK;
output  [3:0] m_axi_gmem_out_ARCACHE;
output  [2:0] m_axi_gmem_out_ARPROT;
output  [3:0] m_axi_gmem_out_ARQOS;
output  [3:0] m_axi_gmem_out_ARREGION;
output  [0:0] m_axi_gmem_out_ARUSER;
input   m_axi_gmem_out_RVALID;
output   m_axi_gmem_out_RREADY;
input  [31:0] m_axi_gmem_out_RDATA;
input   m_axi_gmem_out_RLAST;
input  [0:0] m_axi_gmem_out_RID;
input  [8:0] m_axi_gmem_out_RFIFONUM;
input  [0:0] m_axi_gmem_out_RUSER;
input  [1:0] m_axi_gmem_out_RRESP;
input   m_axi_gmem_out_BVALID;
output   m_axi_gmem_out_BREADY;
input  [1:0] m_axi_gmem_out_BRESP;
input  [0:0] m_axi_gmem_out_BID;
input  [0:0] m_axi_gmem_out_BUSER;
input  [63:0] input_r;
input  [63:0] output_r;
output  [31:0] grp_fu_838_p_din0;
output  [31:0] grp_fu_838_p_din1;
output  [4:0] grp_fu_838_p_opcode;
input  [0:0] grp_fu_838_p_dout0;
output   grp_fu_838_p_ce;

reg ap_idle;
reg m_axi_gmem_out_AWVALID;
reg m_axi_gmem_out_WVALID;
reg m_axi_gmem_out_ARVALID;
reg[63:0] m_axi_gmem_out_ARADDR;
reg m_axi_gmem_out_RREADY;
reg m_axi_gmem_out_BREADY;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
reg   [0:0] icmp_ln55_reg_998;
reg    ap_block_state4_io;
wire    ap_block_state8_pp0_stage3_iter1;
reg    ap_block_state12_pp0_stage3_iter2;
wire    ap_block_state16_pp0_stage3_iter3;
wire    ap_block_state20_pp0_stage3_iter4;
wire    ap_block_state24_pp0_stage3_iter5;
reg    ap_block_pp0_stage3_subdone;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    gmem_out_blk_n_AR;
wire    ap_block_pp0_stage3;
reg    gmem_out_blk_n_R;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg    gmem_out_blk_n_AW;
reg    gmem_out_blk_n_W;
reg    gmem_out_blk_n_B;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state9_pp0_stage0_iter2;
reg    ap_block_state13_pp0_stage0_iter3;
wire    ap_block_state17_pp0_stage0_iter4;
wire    ap_block_state21_pp0_stage0_iter5;
wire    ap_block_state25_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln55_fu_257_p2;
reg   [0:0] icmp_ln55_reg_998_pp0_iter1_reg;
reg   [0:0] icmp_ln55_reg_998_pp0_iter2_reg;
reg   [0:0] icmp_ln55_reg_998_pp0_iter3_reg;
reg   [0:0] icmp_ln55_reg_998_pp0_iter4_reg;
reg   [0:0] icmp_ln55_reg_998_pp0_iter5_reg;
wire   [0:0] icmp_ln56_fu_275_p2;
reg   [0:0] icmp_ln56_reg_1002;
wire   [4:0] select_ln56_fu_323_p3;
reg   [4:0] select_ln56_reg_1007;
wire   [4:0] select_ln56_1_fu_331_p3;
reg   [4:0] select_ln56_1_reg_1015;
wire   [2:0] select_ln55_2_fu_410_p3;
reg   [2:0] select_ln55_2_reg_1025;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state10_pp0_stage1_iter2;
reg    ap_block_state14_pp0_stage1_iter3;
wire    ap_block_state18_pp0_stage1_iter4;
wire    ap_block_state22_pp0_stage1_iter5;
reg    ap_block_state26_pp0_stage1_iter6;
reg    ap_block_pp0_stage1_11001;
wire   [14:0] mul_ln59_fu_420_p2;
reg   [14:0] mul_ln59_reg_1030;
wire   [14:0] add_ln61_1_fu_426_p2;
reg   [14:0] add_ln61_1_reg_1035;
wire   [63:0] zext_ln59_3_fu_479_p1;
reg   [63:0] zext_ln59_3_reg_1040;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_state11_pp0_stage2_iter2;
reg    ap_block_state15_pp0_stage2_iter3;
wire    ap_block_state19_pp0_stage2_iter4;
wire    ap_block_state23_pp0_stage2_iter5;
reg    ap_block_pp0_stage2_11001;
reg   [63:0] gmem_out_addr_reg_1045;
reg   [63:0] gmem_out_addr_5_reg_1051;
reg   [63:0] gmem_out_addr_6_reg_1057;
reg   [63:0] gmem_out_addr_7_reg_1063;
reg   [63:0] gmem_out_addr_8_reg_1074;
reg    ap_block_pp0_stage3_11001;
reg   [63:0] gmem_out_addr_8_reg_1074_pp0_iter1_reg;
reg   [63:0] gmem_out_addr_8_reg_1074_pp0_iter2_reg;
reg   [63:0] gmem_out_addr_8_reg_1074_pp0_iter3_reg;
reg   [31:0] gmem_out_addr_read_reg_1080;
reg   [7:0] tmp_reg_1085;
wire   [22:0] trunc_ln64_fu_697_p1;
reg   [22:0] trunc_ln64_reg_1090;
wire   [31:0] v1_fu_701_p1;
reg   [31:0] v1_reg_1095;
reg   [7:0] tmp_s_reg_1101;
wire   [22:0] trunc_ln64_1_fu_715_p1;
reg   [22:0] trunc_ln64_1_reg_1106;
wire   [0:0] icmp_ln64_fu_719_p2;
reg   [0:0] icmp_ln64_reg_1111;
wire   [0:0] icmp_ln64_1_fu_724_p2;
reg   [0:0] icmp_ln64_1_reg_1116;
wire   [31:0] v0_fu_729_p1;
reg   [31:0] v0_reg_1121;
reg   [31:0] gmem_out_addr_6_read_reg_1127;
wire   [0:0] icmp_ln64_2_fu_733_p2;
reg   [0:0] icmp_ln64_2_reg_1132;
wire   [0:0] icmp_ln64_3_fu_738_p2;
reg   [0:0] icmp_ln64_3_reg_1137;
reg   [7:0] tmp_3_reg_1142;
wire   [22:0] trunc_ln65_fu_753_p1;
reg   [22:0] trunc_ln65_reg_1147;
reg   [31:0] gmem_out_addr_7_read_reg_1152;
wire   [31:0] max1_fu_777_p3;
reg   [31:0] max1_reg_1157;
reg   [31:0] max1_reg_1157_pp0_iter4_reg;
reg   [7:0] tmp_4_reg_1164;
wire   [22:0] trunc_ln65_1_fu_793_p1;
reg   [22:0] trunc_ln65_1_reg_1169;
wire   [0:0] icmp_ln65_fu_797_p2;
reg   [0:0] icmp_ln65_reg_1174;
wire   [0:0] icmp_ln65_1_fu_802_p2;
reg   [0:0] icmp_ln65_1_reg_1179;
wire   [31:0] v2_fu_807_p1;
reg   [31:0] v2_reg_1184;
wire   [31:0] v3_fu_811_p1;
reg   [31:0] v3_reg_1190;
wire   [0:0] icmp_ln65_2_fu_815_p2;
reg   [0:0] icmp_ln65_2_reg_1196;
wire   [0:0] icmp_ln65_3_fu_820_p2;
reg   [0:0] icmp_ln65_3_reg_1201;
wire   [31:0] max2_fu_845_p3;
reg   [31:0] max2_reg_1206;
wire   [31:0] max_final_fu_933_p3;
reg   [31:0] max_final_reg_1213;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage1_subdone;
wire  signed [63:0] sext_ln59_fu_510_p1;
wire  signed [63:0] sext_ln60_fu_546_p1;
wire  signed [63:0] sext_ln61_fu_586_p1;
wire  signed [63:0] sext_ln62_fu_612_p1;
wire  signed [63:0] sext_ln68_fu_677_p1;
reg    ap_block_pp0_stage0_01001;
reg   [4:0] j_fu_116;
wire   [4:0] add_ln57_fu_361_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_j_load;
reg   [4:0] i_fu_120;
reg   [4:0] ap_sig_allocacmp_i_3;
reg   [7:0] indvar_flatten_fu_124;
wire   [7:0] select_ln56_3_fu_373_p3;
reg   [7:0] ap_sig_allocacmp_indvar_flatten_load;
reg   [2:0] c_fu_128;
reg   [10:0] indvar_flatten20_fu_132;
wire   [10:0] add_ln55_1_fu_263_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten20_load;
reg   [31:0] grp_fu_212_p0;
reg   [31:0] grp_fu_212_p1;
wire   [3:0] tmp_1_fu_247_p4;
wire   [0:0] icmp_ln57_fu_305_p2;
wire   [4:0] select_ln55_fu_281_p3;
wire   [0:0] or_ln55_fu_311_p2;
wire   [4:0] select_ln55_1_fu_289_p3;
wire   [4:0] add_ln56_fu_317_p2;
wire   [3:0] select_ln55_3_fu_297_p3;
wire   [3:0] p_mid1_fu_339_p4;
wire   [3:0] select_ln56_2_fu_349_p3;
wire   [7:0] add_ln56_1_fu_367_p2;
wire   [2:0] add_ln55_fu_404_p2;
wire   [4:0] mul_ln59_fu_420_p0;
wire   [10:0] mul_ln59_fu_420_p1;
wire   [9:0] shl_ln59_1_fu_440_p3;
wire   [7:0] shl_ln59_2_fu_451_p3;
wire   [10:0] zext_ln59_1_fu_447_p1;
wire   [10:0] zext_ln59_2_fu_458_p1;
wire  signed [10:0] sub_ln59_fu_462_p2;
wire   [4:0] shl_ln_fu_472_p3;
wire   [63:0] zext_ln59_fu_437_p1;
wire   [63:0] add_ln59_fu_483_p2;
wire  signed [63:0] sext_ln59_1_fu_468_p1;
wire   [63:0] add_ln59_1_fu_488_p2;
wire   [63:0] add_ln59_2_fu_494_p2;
wire   [61:0] trunc_ln_fu_500_p4;
wire   [10:0] add_ln60_fu_520_p2;
wire  signed [63:0] sext_ln60_1_fu_526_p1;
wire   [63:0] add_ln60_1_fu_530_p2;
wire   [61:0] trunc_ln2_fu_536_p4;
wire   [63:0] zext_ln61_fu_561_p1;
wire   [63:0] add_ln61_fu_556_p2;
wire   [63:0] add_ln61_2_fu_564_p2;
wire   [63:0] add_ln61_3_fu_570_p2;
wire   [61:0] trunc_ln3_fu_576_p4;
wire   [63:0] add_ln62_fu_596_p2;
wire   [61:0] trunc_ln4_fu_602_p4;
wire   [8:0] shl_ln2_fu_622_p3;
wire   [6:0] shl_ln68_1_fu_633_p3;
wire   [9:0] zext_ln68_1_fu_629_p1;
wire   [9:0] zext_ln68_2_fu_640_p1;
wire  signed [9:0] sub_ln68_fu_644_p2;
wire  signed [13:0] grp_fu_943_p3;
wire  signed [63:0] sext_ln68_2_fu_658_p1;
wire   [63:0] add_ln68_fu_654_p2;
wire   [63:0] add_ln68_2_fu_661_p2;
wire   [61:0] trunc_ln5_fu_667_p4;
wire   [0:0] or_ln64_fu_757_p2;
wire   [0:0] or_ln64_1_fu_761_p2;
wire   [0:0] and_ln64_fu_765_p2;
wire   [0:0] and_ln64_1_fu_771_p2;
wire   [0:0] or_ln65_fu_825_p2;
wire   [0:0] or_ln65_1_fu_829_p2;
wire   [0:0] and_ln65_fu_833_p2;
wire   [0:0] and_ln65_1_fu_839_p2;
wire   [31:0] bitcast_ln66_fu_851_p1;
wire   [31:0] bitcast_ln66_1_fu_868_p1;
wire   [7:0] tmp_6_fu_854_p4;
wire   [22:0] trunc_ln66_fu_864_p1;
wire   [0:0] icmp_ln66_1_fu_891_p2;
wire   [0:0] icmp_ln66_fu_885_p2;
wire   [7:0] tmp_7_fu_871_p4;
wire   [22:0] trunc_ln66_1_fu_881_p1;
wire   [0:0] icmp_ln66_3_fu_909_p2;
wire   [0:0] icmp_ln66_2_fu_903_p2;
wire   [0:0] or_ln66_fu_897_p2;
wire   [0:0] or_ln66_1_fu_915_p2;
wire   [0:0] and_ln66_fu_921_p2;
wire   [0:0] and_ln66_1_fu_927_p2;
wire   [3:0] grp_fu_943_p0;
wire   [8:0] grp_fu_943_p1;
reg    grp_fu_212_ce;
reg    ap_block_pp0_stage1_00001;
reg    ap_block_pp0_stage3_00001;
reg    ap_block_pp0_stage2_00001;
reg    grp_fu_943_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter5_stage1;
reg    ap_idle_pp0_0to4;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [3:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to6;
reg    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [12:0] grp_fu_943_p00;
wire   [14:0] mul_ln59_fu_420_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

top_mul_5ns_11ns_15_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 15 ))
mul_5ns_11ns_15_1_1_U141(
    .din0(mul_ln59_fu_420_p0),
    .din1(mul_ln59_fu_420_p1),
    .dout(mul_ln59_fu_420_p2)
);

top_mac_muladd_4ns_9ns_10s_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 14 ))
mac_muladd_4ns_9ns_10s_14_4_1_U142(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_943_p0),
    .din1(grp_fu_943_p1),
    .din2(sub_ln68_fu_644_p2),
    .ce(grp_fu_943_ce),
    .dout(grp_fu_943_p3)
);

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage1))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage1))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage1))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c_fu_128 <= 3'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln55_reg_998 == 1'd0))) begin
        c_fu_128 <= select_ln55_2_fu_410_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln55_fu_257_p2 == 1'd0))) begin
            i_fu_120 <= select_ln56_1_fu_331_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_120 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln55_fu_257_p2 == 1'd0))) begin
            indvar_flatten20_fu_132 <= add_ln55_1_fu_263_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten20_fu_132 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln55_fu_257_p2 == 1'd0))) begin
            indvar_flatten_fu_124 <= select_ln56_3_fu_373_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_124 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln55_fu_257_p2 == 1'd0))) begin
            j_fu_116 <= add_ln57_fu_361_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_116 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln55_reg_998 == 1'd0))) begin
        add_ln61_1_reg_1035 <= add_ln61_1_fu_426_p2;
        mul_ln59_reg_1030 <= mul_ln59_fu_420_p2;
        select_ln55_2_reg_1025 <= select_ln55_2_fu_410_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln55_reg_998 == 1'd0))) begin
        gmem_out_addr_5_reg_1051 <= sext_ln60_fu_546_p1;
        gmem_out_addr_6_reg_1057 <= sext_ln61_fu_586_p1;
        gmem_out_addr_7_reg_1063 <= sext_ln62_fu_612_p1;
        gmem_out_addr_reg_1045 <= sext_ln59_fu_510_p1;
        zext_ln59_3_reg_1040[4 : 2] <= zext_ln59_3_fu_479_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        gmem_out_addr_6_read_reg_1127 <= m_axi_gmem_out_RDATA;
        icmp_ln64_2_reg_1132 <= icmp_ln64_2_fu_733_p2;
        icmp_ln64_3_reg_1137 <= icmp_ln64_3_fu_738_p2;
        tmp_3_reg_1142 <= {{m_axi_gmem_out_RDATA[30:23]}};
        trunc_ln65_reg_1147 <= trunc_ln65_fu_753_p1;
        v0_reg_1121 <= v0_fu_729_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        gmem_out_addr_7_read_reg_1152 <= m_axi_gmem_out_RDATA;
        icmp_ln65_1_reg_1179 <= icmp_ln65_1_fu_802_p2;
        icmp_ln65_reg_1174 <= icmp_ln65_fu_797_p2;
        max1_reg_1157 <= max1_fu_777_p3;
        max1_reg_1157_pp0_iter4_reg <= max1_reg_1157;
        tmp_4_reg_1164 <= {{m_axi_gmem_out_RDATA[30:23]}};
        trunc_ln65_1_reg_1169 <= trunc_ln65_1_fu_793_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln55_reg_998 == 1'd0))) begin
        gmem_out_addr_8_reg_1074 <= sext_ln68_fu_677_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        gmem_out_addr_8_reg_1074_pp0_iter1_reg <= gmem_out_addr_8_reg_1074;
        gmem_out_addr_8_reg_1074_pp0_iter2_reg <= gmem_out_addr_8_reg_1074_pp0_iter1_reg;
        gmem_out_addr_8_reg_1074_pp0_iter3_reg <= gmem_out_addr_8_reg_1074_pp0_iter2_reg;
        gmem_out_addr_read_reg_1080 <= m_axi_gmem_out_RDATA;
        icmp_ln65_2_reg_1196 <= icmp_ln65_2_fu_815_p2;
        icmp_ln65_3_reg_1201 <= icmp_ln65_3_fu_820_p2;
        max_final_reg_1213 <= max_final_fu_933_p3;
        tmp_reg_1085 <= {{m_axi_gmem_out_RDATA[30:23]}};
        trunc_ln64_reg_1090 <= trunc_ln64_fu_697_p1;
        v2_reg_1184 <= v2_fu_807_p1;
        v3_reg_1190 <= v3_fu_811_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln55_reg_998 <= icmp_ln55_fu_257_p2;
        icmp_ln55_reg_998_pp0_iter1_reg <= icmp_ln55_reg_998;
        icmp_ln55_reg_998_pp0_iter2_reg <= icmp_ln55_reg_998_pp0_iter1_reg;
        icmp_ln55_reg_998_pp0_iter3_reg <= icmp_ln55_reg_998_pp0_iter2_reg;
        icmp_ln55_reg_998_pp0_iter4_reg <= icmp_ln55_reg_998_pp0_iter3_reg;
        icmp_ln55_reg_998_pp0_iter5_reg <= icmp_ln55_reg_998_pp0_iter4_reg;
        icmp_ln64_1_reg_1116 <= icmp_ln64_1_fu_724_p2;
        icmp_ln64_reg_1111 <= icmp_ln64_fu_719_p2;
        max2_reg_1206 <= max2_fu_845_p3;
        tmp_s_reg_1101 <= {{m_axi_gmem_out_RDATA[30:23]}};
        trunc_ln64_1_reg_1106 <= trunc_ln64_1_fu_715_p1;
        v1_reg_1095 <= v1_fu_701_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_fu_257_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln56_reg_1002 <= icmp_ln56_fu_275_p2;
        select_ln56_1_reg_1015 <= select_ln56_1_fu_331_p3;
        select_ln56_reg_1007 <= select_ln56_fu_323_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone) & (icmp_ln55_reg_998 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln55_reg_998_pp0_iter5_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_condition_exit_pp0_iter5_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter5_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to4 = 1'b1;
    end else begin
        ap_idle_pp0_0to4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to6 = 1'b1;
    end else begin
        ap_idle_pp0_1to6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_3 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_120;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten20_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten20_load = indvar_flatten20_fu_132;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 8'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_124;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 5'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_116;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3) & (icmp_ln55_reg_998 == 1'd0)))) begin
        gmem_out_blk_n_AR = m_axi_gmem_out_ARREADY;
    end else begin
        gmem_out_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        gmem_out_blk_n_AW = m_axi_gmem_out_AWREADY;
    end else begin
        gmem_out_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        gmem_out_blk_n_B = m_axi_gmem_out_BVALID;
    end else begin
        gmem_out_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3)))) begin
        gmem_out_blk_n_R = m_axi_gmem_out_RVALID;
    end else begin
        gmem_out_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem_out_blk_n_W = m_axi_gmem_out_WREADY;
    end else begin
        gmem_out_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        grp_fu_212_ce = 1'b1;
    end else begin
        grp_fu_212_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_212_p0 = max1_reg_1157;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        grp_fu_212_p0 = v2_fu_807_p1;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_212_p0 = v0_fu_729_p1;
    end else begin
        grp_fu_212_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        grp_fu_212_p1 = max2_reg_1206;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
        grp_fu_212_p1 = v3_fu_811_p1;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_212_p1 = v1_reg_1095;
    end else begin
        grp_fu_212_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        grp_fu_943_ce = 1'b1;
    end else begin
        grp_fu_943_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        m_axi_gmem_out_ARADDR = gmem_out_addr_7_reg_1063;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_gmem_out_ARADDR = gmem_out_addr_6_reg_1057;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_out_ARADDR = gmem_out_addr_5_reg_1051;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln55_reg_998 == 1'd0))) begin
        m_axi_gmem_out_ARADDR = gmem_out_addr_reg_1045;
    end else begin
        m_axi_gmem_out_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln55_reg_998 == 1'd0)))) begin
        m_axi_gmem_out_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_out_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        m_axi_gmem_out_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_out_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_gmem_out_BREADY = 1'b1;
    end else begin
        m_axi_gmem_out_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        m_axi_gmem_out_RREADY = 1'b1;
    end else begin
        m_axi_gmem_out_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem_out_WVALID = 1'b1;
    end else begin
        m_axi_gmem_out_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to6 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln55_1_fu_263_p2 = (ap_sig_allocacmp_indvar_flatten20_load + 11'd1);

assign add_ln55_fu_404_p2 = (c_fu_128 + 3'd1);

assign add_ln56_1_fu_367_p2 = (ap_sig_allocacmp_indvar_flatten_load + 8'd1);

assign add_ln56_fu_317_p2 = (select_ln55_fu_281_p3 + 5'd2);

assign add_ln57_fu_361_p2 = (select_ln56_fu_323_p3 + 5'd2);

assign add_ln59_1_fu_488_p2 = (add_ln59_fu_483_p2 + zext_ln59_3_fu_479_p1);

assign add_ln59_2_fu_494_p2 = ($signed(sext_ln59_1_fu_468_p1) + $signed(add_ln59_1_fu_488_p2));

assign add_ln59_fu_483_p2 = (zext_ln59_fu_437_p1 + input_r);

assign add_ln60_1_fu_530_p2 = ($signed(sext_ln60_1_fu_526_p1) + $signed(add_ln59_1_fu_488_p2));

assign add_ln60_fu_520_p2 = ($signed(sub_ln59_fu_462_p2) + $signed(11'd24));

assign add_ln61_1_fu_426_p2 = (mul_ln59_fu_420_p2 + 15'd672);

assign add_ln61_2_fu_564_p2 = (zext_ln61_fu_561_p1 + add_ln61_fu_556_p2);

assign add_ln61_3_fu_570_p2 = ($signed(sext_ln59_1_fu_468_p1) + $signed(add_ln61_2_fu_564_p2));

assign add_ln61_fu_556_p2 = (zext_ln59_3_fu_479_p1 + input_r);

assign add_ln62_fu_596_p2 = ($signed(sext_ln60_1_fu_526_p1) + $signed(add_ln61_2_fu_564_p2));

assign add_ln68_2_fu_661_p2 = ($signed(sext_ln68_2_fu_658_p1) + $signed(add_ln68_fu_654_p2));

assign add_ln68_fu_654_p2 = (zext_ln59_3_reg_1040 + output_r);

assign and_ln64_1_fu_771_p2 = (grp_fu_838_p_dout0 & and_ln64_fu_765_p2);

assign and_ln64_fu_765_p2 = (or_ln64_fu_757_p2 & or_ln64_1_fu_761_p2);

assign and_ln65_1_fu_839_p2 = (grp_fu_838_p_dout0 & and_ln65_fu_833_p2);

assign and_ln65_fu_833_p2 = (or_ln65_fu_825_p2 & or_ln65_1_fu_829_p2);

assign and_ln66_1_fu_927_p2 = (grp_fu_838_p_dout0 & and_ln66_fu_921_p2);

assign and_ln66_fu_921_p2 = (or_ln66_fu_897_p2 & or_ln66_1_fu_915_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((m_axi_gmem_out_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_gmem_out_WREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((m_axi_gmem_out_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((m_axi_gmem_out_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_gmem_out_WREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((m_axi_gmem_out_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((m_axi_gmem_out_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_00001 = (((m_axi_gmem_out_BVALID == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((m_axi_gmem_out_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((m_axi_gmem_out_BVALID == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((m_axi_gmem_out_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((m_axi_gmem_out_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((m_axi_gmem_out_BVALID == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((m_axi_gmem_out_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((m_axi_gmem_out_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_00001 = ((m_axi_gmem_out_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((m_axi_gmem_out_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((m_axi_gmem_out_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((m_axi_gmem_out_RVALID == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((m_axi_gmem_out_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_00001 = ((m_axi_gmem_out_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = (((m_axi_gmem_out_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((m_axi_gmem_out_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_io)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = (((m_axi_gmem_out_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((m_axi_gmem_out_RVALID == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_io)));
end

assign ap_block_state10_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage3_iter2 = (m_axi_gmem_out_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state13_pp0_stage0_iter3 = (m_axi_gmem_out_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state14_pp0_stage1_iter3 = (m_axi_gmem_out_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state15_pp0_stage2_iter3 = (m_axi_gmem_out_RVALID == 1'b0);
end

assign ap_block_state16_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage3_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state26_pp0_stage1_iter6 = (m_axi_gmem_out_BVALID == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((m_axi_gmem_out_ARREADY == 1'b0) & (icmp_ln55_reg_998 == 1'd0));
end

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign bitcast_ln66_1_fu_868_p1 = max2_reg_1206;

assign bitcast_ln66_fu_851_p1 = max1_reg_1157_pp0_iter4_reg;

assign grp_fu_838_p_ce = grp_fu_212_ce;

assign grp_fu_838_p_din0 = grp_fu_212_p0;

assign grp_fu_838_p_din1 = grp_fu_212_p1;

assign grp_fu_838_p_opcode = 5'd2;

assign grp_fu_943_p0 = grp_fu_943_p00;

assign grp_fu_943_p00 = select_ln56_2_fu_349_p3;

assign grp_fu_943_p1 = 13'd336;

assign icmp_ln55_fu_257_p2 = ((ap_sig_allocacmp_indvar_flatten20_load == 11'd1176) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_275_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_305_p2 = ((ap_sig_allocacmp_j_load < 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln64_1_fu_724_p2 = ((trunc_ln64_reg_1090 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln64_2_fu_733_p2 = ((tmp_s_reg_1101 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln64_3_fu_738_p2 = ((trunc_ln64_1_reg_1106 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_719_p2 = ((tmp_reg_1085 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln65_1_fu_802_p2 = ((trunc_ln65_reg_1147 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_2_fu_815_p2 = ((tmp_4_reg_1164 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln65_3_fu_820_p2 = ((trunc_ln65_1_reg_1169 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_797_p2 = ((tmp_3_reg_1142 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln66_1_fu_891_p2 = ((trunc_ln66_fu_864_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln66_2_fu_903_p2 = ((tmp_7_fu_871_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln66_3_fu_909_p2 = ((trunc_ln66_1_fu_881_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_885_p2 = ((tmp_6_fu_854_p4 != 8'd255) ? 1'b1 : 1'b0);

assign m_axi_gmem_out_ARBURST = 2'd0;

assign m_axi_gmem_out_ARCACHE = 4'd0;

assign m_axi_gmem_out_ARID = 1'd0;

assign m_axi_gmem_out_ARLEN = 32'd1;

assign m_axi_gmem_out_ARLOCK = 2'd0;

assign m_axi_gmem_out_ARPROT = 3'd0;

assign m_axi_gmem_out_ARQOS = 4'd0;

assign m_axi_gmem_out_ARREGION = 4'd0;

assign m_axi_gmem_out_ARSIZE = 3'd0;

assign m_axi_gmem_out_ARUSER = 1'd0;

assign m_axi_gmem_out_AWADDR = gmem_out_addr_8_reg_1074_pp0_iter3_reg;

assign m_axi_gmem_out_AWBURST = 2'd0;

assign m_axi_gmem_out_AWCACHE = 4'd0;

assign m_axi_gmem_out_AWID = 1'd0;

assign m_axi_gmem_out_AWLEN = 32'd1;

assign m_axi_gmem_out_AWLOCK = 2'd0;

assign m_axi_gmem_out_AWPROT = 3'd0;

assign m_axi_gmem_out_AWQOS = 4'd0;

assign m_axi_gmem_out_AWREGION = 4'd0;

assign m_axi_gmem_out_AWSIZE = 3'd0;

assign m_axi_gmem_out_AWUSER = 1'd0;

assign m_axi_gmem_out_WDATA = max_final_reg_1213;

assign m_axi_gmem_out_WID = 1'd0;

assign m_axi_gmem_out_WLAST = 1'b0;

assign m_axi_gmem_out_WSTRB = 4'd15;

assign m_axi_gmem_out_WUSER = 1'd0;

assign max1_fu_777_p3 = ((and_ln64_1_fu_771_p2[0:0] == 1'b1) ? v0_reg_1121 : v1_reg_1095);

assign max2_fu_845_p3 = ((and_ln65_1_fu_839_p2[0:0] == 1'b1) ? v2_reg_1184 : v3_reg_1190);

assign max_final_fu_933_p3 = ((and_ln66_1_fu_927_p2[0:0] == 1'b1) ? max1_reg_1157_pp0_iter4_reg : max2_reg_1206);

assign mul_ln59_fu_420_p0 = mul_ln59_fu_420_p00;

assign mul_ln59_fu_420_p00 = select_ln56_1_reg_1015;

assign mul_ln59_fu_420_p1 = 15'd672;

assign or_ln55_fu_311_p2 = (icmp_ln57_fu_305_p2 | icmp_ln56_fu_275_p2);

assign or_ln64_1_fu_761_p2 = (icmp_ln64_3_reg_1137 | icmp_ln64_2_reg_1132);

assign or_ln64_fu_757_p2 = (icmp_ln64_reg_1111 | icmp_ln64_1_reg_1116);

assign or_ln65_1_fu_829_p2 = (icmp_ln65_3_reg_1201 | icmp_ln65_2_reg_1196);

assign or_ln65_fu_825_p2 = (icmp_ln65_reg_1174 | icmp_ln65_1_reg_1179);

assign or_ln66_1_fu_915_p2 = (icmp_ln66_3_fu_909_p2 | icmp_ln66_2_fu_903_p2);

assign or_ln66_fu_897_p2 = (icmp_ln66_fu_885_p2 | icmp_ln66_1_fu_891_p2);

assign p_mid1_fu_339_p4 = {{add_ln56_fu_317_p2[4:1]}};

assign select_ln55_1_fu_289_p3 = ((icmp_ln56_fu_275_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_j_load);

assign select_ln55_2_fu_410_p3 = ((icmp_ln56_reg_1002[0:0] == 1'b1) ? add_ln55_fu_404_p2 : c_fu_128);

assign select_ln55_3_fu_297_p3 = ((icmp_ln56_fu_275_p2[0:0] == 1'b1) ? 4'd0 : tmp_1_fu_247_p4);

assign select_ln55_fu_281_p3 = ((icmp_ln56_fu_275_p2[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_i_3);

assign select_ln56_1_fu_331_p3 = ((or_ln55_fu_311_p2[0:0] == 1'b1) ? select_ln55_fu_281_p3 : add_ln56_fu_317_p2);

assign select_ln56_2_fu_349_p3 = ((or_ln55_fu_311_p2[0:0] == 1'b1) ? select_ln55_3_fu_297_p3 : p_mid1_fu_339_p4);

assign select_ln56_3_fu_373_p3 = ((icmp_ln56_fu_275_p2[0:0] == 1'b1) ? 8'd1 : add_ln56_1_fu_367_p2);

assign select_ln56_fu_323_p3 = ((or_ln55_fu_311_p2[0:0] == 1'b1) ? select_ln55_1_fu_289_p3 : 5'd0);

assign sext_ln59_1_fu_468_p1 = sub_ln59_fu_462_p2;

assign sext_ln59_fu_510_p1 = $signed(trunc_ln_fu_500_p4);

assign sext_ln60_1_fu_526_p1 = $signed(add_ln60_fu_520_p2);

assign sext_ln60_fu_546_p1 = $signed(trunc_ln2_fu_536_p4);

assign sext_ln61_fu_586_p1 = $signed(trunc_ln3_fu_576_p4);

assign sext_ln62_fu_612_p1 = $signed(trunc_ln4_fu_602_p4);

assign sext_ln68_2_fu_658_p1 = grp_fu_943_p3;

assign sext_ln68_fu_677_p1 = $signed(trunc_ln5_fu_667_p4);

assign shl_ln2_fu_622_p3 = {{select_ln56_reg_1007}, {4'd0}};

assign shl_ln59_1_fu_440_p3 = {{select_ln56_reg_1007}, {5'd0}};

assign shl_ln59_2_fu_451_p3 = {{select_ln56_reg_1007}, {3'd0}};

assign shl_ln68_1_fu_633_p3 = {{select_ln56_reg_1007}, {2'd0}};

assign shl_ln_fu_472_p3 = {{select_ln55_2_reg_1025}, {2'd0}};

assign sub_ln59_fu_462_p2 = (zext_ln59_1_fu_447_p1 - zext_ln59_2_fu_458_p1);

assign sub_ln68_fu_644_p2 = (zext_ln68_1_fu_629_p1 - zext_ln68_2_fu_640_p1);

assign tmp_1_fu_247_p4 = {{ap_sig_allocacmp_i_3[4:1]}};

assign tmp_6_fu_854_p4 = {{bitcast_ln66_fu_851_p1[30:23]}};

assign tmp_7_fu_871_p4 = {{bitcast_ln66_1_fu_868_p1[30:23]}};

assign trunc_ln2_fu_536_p4 = {{add_ln60_1_fu_530_p2[63:2]}};

assign trunc_ln3_fu_576_p4 = {{add_ln61_3_fu_570_p2[63:2]}};

assign trunc_ln4_fu_602_p4 = {{add_ln62_fu_596_p2[63:2]}};

assign trunc_ln5_fu_667_p4 = {{add_ln68_2_fu_661_p2[63:2]}};

assign trunc_ln64_1_fu_715_p1 = m_axi_gmem_out_RDATA[22:0];

assign trunc_ln64_fu_697_p1 = m_axi_gmem_out_RDATA[22:0];

assign trunc_ln65_1_fu_793_p1 = m_axi_gmem_out_RDATA[22:0];

assign trunc_ln65_fu_753_p1 = m_axi_gmem_out_RDATA[22:0];

assign trunc_ln66_1_fu_881_p1 = bitcast_ln66_1_fu_868_p1[22:0];

assign trunc_ln66_fu_864_p1 = bitcast_ln66_fu_851_p1[22:0];

assign trunc_ln_fu_500_p4 = {{add_ln59_2_fu_494_p2[63:2]}};

assign v0_fu_729_p1 = gmem_out_addr_read_reg_1080;

assign v1_fu_701_p1 = m_axi_gmem_out_RDATA;

assign v2_fu_807_p1 = gmem_out_addr_6_read_reg_1127;

assign v3_fu_811_p1 = gmem_out_addr_7_read_reg_1152;

assign zext_ln59_1_fu_447_p1 = shl_ln59_1_fu_440_p3;

assign zext_ln59_2_fu_458_p1 = shl_ln59_2_fu_451_p3;

assign zext_ln59_3_fu_479_p1 = shl_ln_fu_472_p3;

assign zext_ln59_fu_437_p1 = mul_ln59_reg_1030;

assign zext_ln61_fu_561_p1 = add_ln61_1_reg_1035;

assign zext_ln68_1_fu_629_p1 = shl_ln2_fu_622_p3;

assign zext_ln68_2_fu_640_p1 = shl_ln68_1_fu_633_p3;

always @ (posedge ap_clk) begin
    zext_ln59_3_reg_1040[1:0] <= 2'b00;
    zext_ln59_3_reg_1040[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //top_m1
