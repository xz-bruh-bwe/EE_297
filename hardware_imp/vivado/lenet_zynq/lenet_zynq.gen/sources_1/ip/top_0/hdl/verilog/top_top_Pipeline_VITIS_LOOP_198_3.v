// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module top_top_Pipeline_VITIS_LOOP_198_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_val,
        logits_address0,
        logits_ce0,
        logits_q0,
        argmax_out,
        argmax_out_ap_vld,
        grp_fu_838_p_din0,
        grp_fu_838_p_din1,
        grp_fu_838_p_opcode,
        grp_fu_838_p_dout0,
        grp_fu_838_p_ce
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] max_val;
output  [3:0] logits_address0;
output   logits_ce0;
input  [31:0] logits_q0;
output  [31:0] argmax_out;
output   argmax_out_ap_vld;
output  [31:0] grp_fu_838_p_din0;
output  [31:0] grp_fu_838_p_din1;
output  [4:0] grp_fu_838_p_opcode;
input  [0:0] grp_fu_838_p_dout0;
output   grp_fu_838_p_ce;

reg ap_idle;
reg logits_ce0;
reg argmax_out_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln198_fu_105_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
reg   [3:0] i_reg_269;
reg   [31:0] max_val_1_load_reg_282;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [31:0] max_val_2_reg_289;
wire   [63:0] zext_ln198_fu_111_p1;
reg   [31:0] argmax_fu_44;
wire   [31:0] argmax_4_fu_219_p3;
wire    ap_loop_init;
reg   [31:0] max_val_1_fu_48;
wire   [31:0] max_val_3_fu_227_p3;
reg   [3:0] argmax_1_fu_52;
wire   [3:0] add_ln198_fu_116_p2;
reg   [3:0] ap_sig_allocacmp_i;
wire   [31:0] bitcast_ln200_fu_134_p1;
wire   [31:0] bitcast_ln200_1_fu_151_p1;
wire   [7:0] tmp_1_fu_137_p4;
wire   [22:0] trunc_ln200_fu_147_p1;
wire   [0:0] icmp_ln200_1_fu_174_p2;
wire   [0:0] icmp_ln200_fu_168_p2;
wire   [7:0] tmp_2_fu_154_p4;
wire   [22:0] trunc_ln200_1_fu_164_p1;
wire   [0:0] icmp_ln200_3_fu_192_p2;
wire   [0:0] icmp_ln200_2_fu_186_p2;
wire   [0:0] or_ln200_fu_180_p2;
wire   [0:0] and_ln200_fu_204_p2;
wire   [0:0] or_ln200_1_fu_198_p2;
wire   [0:0] and_ln200_1_fu_210_p2;
wire   [31:0] zext_ln200_fu_216_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_done_reg = 1'b0;
end

top_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln198_fu_105_p2 == 1'd0)) begin
            argmax_1_fu_52 <= add_ln198_fu_116_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            argmax_1_fu_52 <= 4'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        argmax_fu_44 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        argmax_fu_44 <= argmax_4_fu_219_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        max_val_1_fu_48 <= max_val;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        max_val_1_fu_48 <= max_val_3_fu_227_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        i_reg_269 <= ap_sig_allocacmp_i;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        max_val_1_load_reg_282 <= max_val_1_fu_48;
        max_val_2_reg_289 <= logits_q0;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln198_fu_105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i = 4'd1;
    end else begin
        ap_sig_allocacmp_i = argmax_1_fu_52;
    end
end

always @ (*) begin
    if (((icmp_ln198_fu_105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        argmax_out_ap_vld = 1'b1;
    end else begin
        argmax_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        logits_ce0 = 1'b1;
    end else begin
        logits_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln198_fu_105_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln198_fu_116_p2 = (ap_sig_allocacmp_i + 4'd1);

assign and_ln200_1_fu_210_p2 = (or_ln200_1_fu_198_p2 & and_ln200_fu_204_p2);

assign and_ln200_fu_204_p2 = (or_ln200_fu_180_p2 & grp_fu_838_p_dout0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign argmax_4_fu_219_p3 = ((and_ln200_1_fu_210_p2[0:0] == 1'b1) ? zext_ln200_fu_216_p1 : argmax_fu_44);

assign argmax_out = argmax_fu_44;

assign bitcast_ln200_1_fu_151_p1 = max_val_1_load_reg_282;

assign bitcast_ln200_fu_134_p1 = max_val_2_reg_289;

assign grp_fu_838_p_ce = 1'b1;

assign grp_fu_838_p_din0 = logits_q0;

assign grp_fu_838_p_din1 = max_val_1_fu_48;

assign grp_fu_838_p_opcode = 5'd2;

assign icmp_ln198_fu_105_p2 = ((ap_sig_allocacmp_i == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln200_1_fu_174_p2 = ((trunc_ln200_fu_147_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln200_2_fu_186_p2 = ((tmp_2_fu_154_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln200_3_fu_192_p2 = ((trunc_ln200_1_fu_164_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln200_fu_168_p2 = ((tmp_1_fu_137_p4 != 8'd255) ? 1'b1 : 1'b0);

assign logits_address0 = zext_ln198_fu_111_p1;

assign max_val_3_fu_227_p3 = ((and_ln200_1_fu_210_p2[0:0] == 1'b1) ? max_val_2_reg_289 : max_val_1_load_reg_282);

assign or_ln200_1_fu_198_p2 = (icmp_ln200_3_fu_192_p2 | icmp_ln200_2_fu_186_p2);

assign or_ln200_fu_180_p2 = (icmp_ln200_fu_168_p2 | icmp_ln200_1_fu_174_p2);

assign tmp_1_fu_137_p4 = {{bitcast_ln200_fu_134_p1[30:23]}};

assign tmp_2_fu_154_p4 = {{bitcast_ln200_1_fu_151_p1[30:23]}};

assign trunc_ln200_1_fu_164_p1 = bitcast_ln200_1_fu_151_p1[22:0];

assign trunc_ln200_fu_147_p1 = bitcast_ln200_fu_134_p1[22:0];

assign zext_ln198_fu_111_p1 = ap_sig_allocacmp_i;

assign zext_ln200_fu_216_p1 = i_reg_269;

endmodule //top_top_Pipeline_VITIS_LOOP_198_3
