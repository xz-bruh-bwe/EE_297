# 1 "lenet_proj/lenet_top.cpp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 395 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "Z:/Vitis/2020.1/common/technology/autopilot\\etc/autopilot_ssdm_op.h" 1
# 158 "Z:/Vitis/2020.1/common/technology/autopilot\\etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_ReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Read(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_WriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Write(...) __attribute__ ((nothrow)) __attribute__((overloadable));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_Return(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecKeepValue(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow)) __attribute__((overloadable));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_Unroll(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_UnrollRegion(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_Inline(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecStable(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecStableContent(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecBindPort(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPipoDepth(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_DataPack(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void __xilinx_ip_top(...) __attribute__ ((nothrow)) __attribute__((overloadable));


}
# 2 "<built-in>" 2
# 1 "lenet_proj/lenet_top.cpp" 2
# 1 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed.h" 1
# 55 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed.h"
# 1 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_common.h" 1
# 57 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_common.h"
# 1 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_decl.h" 1
# 100 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_decl.h"
enum ap_q_mode {
  AP_RND,
  AP_RND_ZERO,
  AP_RND_MIN_INF,
  AP_RND_INF,
  AP_RND_CONV,
  AP_TRN,
  AP_TRN_ZERO,
};
# 122 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_decl.h"
enum ap_o_mode {
  AP_SAT,
  AP_SAT_ZERO,
  AP_SAT_SYM,
  AP_WRAP,
  AP_WRAP_SM,
};
# 179 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_decl.h"
template <int _AP_W, bool _AP_S>
struct ap_int_base;

template <int _AP_W>
struct ap_int;

template <int _AP_W>
struct ap_uint;

template <int _AP_W, bool _AP_S>
struct ap_range_ref;

template <int _AP_W, bool _AP_S>
struct ap_bit_ref;

template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref;

template <int _AP_W, int _AP_I, bool _AP_S = true, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed_base;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_ufixed;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref;


enum BaseMode { AP_BIN = 2, AP_OCT = 8, AP_DEC = 10, AP_HEX = 16 };
# 233 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_decl.h"
typedef signed long long ap_slong;
typedef unsigned long long ap_ulong;


enum {
  _AP_SIZE_char = 8,
  _AP_SIZE_short = sizeof(short) * 8,
  _AP_SIZE_int = sizeof(int) * 8,
  _AP_SIZE_long = sizeof(long) * 8,
  _AP_SIZE_ap_slong = sizeof(ap_slong) * 8
};
# 58 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_common.h" 2
# 162 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_common.h"
enum { CHAR_IS_SIGNED = (char)-1 < 0 };


namespace _ap_type {
template <typename _Tp>
struct is_signed {
  static const bool value = _Tp(-1) < _Tp(1);
};

template <typename _Tp>
struct is_integral {
  static const bool value = false;
};





template <> struct is_integral<bool> { static const bool value = true; };
template <> struct is_integral<char> { static const bool value = true; };
template <> struct is_integral<signed char> { static const bool value = true; };
template <> struct is_integral<unsigned char> { static const bool value = true; };
template <> struct is_integral<short> { static const bool value = true; };
template <> struct is_integral<unsigned short> { static const bool value = true; };
template <> struct is_integral<int> { static const bool value = true; };
template <> struct is_integral<unsigned int> { static const bool value = true; };
template <> struct is_integral<long> { static const bool value = true; };
template <> struct is_integral<unsigned long> { static const bool value = true; };
template <> struct is_integral<ap_slong> { static const bool value = true; };
template <> struct is_integral<ap_ulong> { static const bool value = true; };


template <bool, typename _Tp = void>
struct enable_if {};

template <typename _Tp>
struct enable_if<true, _Tp> {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const<_Tp const> {
  typedef _Tp type;
};
}
# 501 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_common.h"
template <int _AP_N, bool _AP_S>
struct ssdm_int;

template <int _AP_N>
struct ssdm_int<_AP_N, true> {
  int V __attribute__((bitwidth(_AP_N)));
  inline __attribute__((always_inline)) ssdm_int<_AP_N, true>(){};
};

template <int _AP_N>
struct ssdm_int<_AP_N, false> {
  unsigned V __attribute__((bitwidth(_AP_N)));
  inline __attribute__((always_inline)) ssdm_int<_AP_N, false>(){};
};
# 567 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_common.h"
# 1 "Z:/Vitis/2020.1/common/technology/autopilot/etc/autopilot_ssdm_bits.h" 1
# 568 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_common.h" 2

extern "C" void _ssdm_string2bits(...);
# 579 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_common.h"
static inline unsigned char guess_radix(const char* s) {
  unsigned char rd = 10;
  const char* p = s;

  if (p[0] == '-' || p[0] == '+') ++p;

  if (p[0] == '0') {
    if (p[1] == 'b' || p[1] == 'B') {
      rd = 2;
    } else if (p[1] == 'o' || p[1] == 'O') {
      rd = 8;
    } else if (p[1] == 'x' || p[1] == 'X') {
      rd = 16;
    } else if (p[1] == 'd' || p[1] == 'D') {
      rd = 10;
    }
  }
  return rd;
}







typedef __fp16 half;
# 696 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_common.h"
inline __attribute__((always_inline)) ap_ulong doubleToRawBits(double pf) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned int floatToRawBits(float pf) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned short halfToRawBits(half pf) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__D = pf;
  return LD.__L;



}


inline __attribute__((always_inline)) double rawBitsToDouble(ap_ulong pi) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) float rawBitsToFloat(unsigned long pi) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) half rawBitsToHalf(unsigned short pi) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__L = pi;
  return LD.__D;






}
# 56 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed.h" 2
# 1 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_base.h" 1
# 62 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_base.h"
# 1 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int.h" 1
# 56 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int.h"
# 1 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h" 1
# 80 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_N, bool _AP_S>
struct retval;


template <int _AP_N>
struct retval<_AP_N, true> {
  typedef ap_slong Type;
};

template <int _AP_N>
struct retval<_AP_N, false> {
  typedef ap_ulong Type;
};


template <>
struct retval<1, true> {
  typedef signed char Type;
};

template <>
struct retval<1, false> {
  typedef unsigned char Type;
};


template <>
struct retval<2, true> {
  typedef short Type;
};

template <>
struct retval<2, false> {
  typedef unsigned short Type;
};


template <>
struct retval<3, true> {
  typedef long Type;
};

template <>
struct retval<3, false> {
  typedef unsigned long Type;
};

template <>
struct retval<4, true> {
  typedef long Type;
};

template <>
struct retval<4, false> {
  typedef unsigned long Type;
};




template <int _AP_W2, bool _AP_S2>
struct _ap_int_factory;
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,true> { typedef ap_int<_AP_W2> type; };
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,false> { typedef ap_uint<_AP_W2> type; };

template <int _AP_W, bool _AP_S>
struct ap_int_base : public ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;







  typedef typename retval<(((_AP_W + 7) / 8) > (8) ? ((_AP_W + 7) / 8) : (8)), _AP_S>::Type RetType;

  static const int width = _AP_W;

  template <int _AP_W2, bool _AP_S2>
  struct RType {
    enum {
      mult_w = _AP_W + _AP_W2,
      mult_s = _AP_S || _AP_S2,
      plus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,
      div_w = _AP_W + _AP_S2,
      div_s = _AP_S || _AP_S2,
      mod_w = ((_AP_W) < (_AP_W2 + (!_AP_S2 && _AP_S)) ? (_AP_W) : (_AP_W2 + (!_AP_S2 && _AP_S))),
      mod_s = _AP_S,
      logic_w = ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };


    typedef ap_int_base<mult_w, mult_s> mult_base;
    typedef ap_int_base<plus_w, plus_s> plus_base;
    typedef ap_int_base<minus_w, minus_s> minus_base;
    typedef ap_int_base<logic_w, logic_s> logic_base;
    typedef ap_int_base<div_w, div_s> div_base;
    typedef ap_int_base<mod_w, mod_s> mod_base;
    typedef ap_int_base<_AP_W, _AP_S> arg1_base;

    typedef typename _ap_int_factory<mult_w, mult_s>::type mult;
    typedef typename _ap_int_factory<plus_w, plus_s>::type plus;
    typedef typename _ap_int_factory<minus_w, minus_s>::type minus;
    typedef typename _ap_int_factory<logic_w, logic_s>::type logic;
    typedef typename _ap_int_factory<div_w, div_s>::type div;
    typedef typename _ap_int_factory<mod_w, mod_s>::type mod;
    typedef typename _ap_int_factory<_AP_W, _AP_S>::type arg1;
    typedef bool reduce;
  };





  inline __attribute__((always_inline)) ap_int_base() {





  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }
# 237 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const bool op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const signed char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_slong op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_ulong op) { Base::V = op; }




  inline __attribute__((always_inline)) ap_int_base(half op) {
    ap_int_base<_AP_W, _AP_S> t((float)op);
    Base::V = t.V;
  }


  inline __attribute__((always_inline)) ap_int_base(float op) {
    const int BITS = 23 + 8 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = floatToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<8 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 23, BITS - 2); __Result__; });
    exp = exp - ((1L << (8 - 1L)) - 1L);

    ap_int_base<23 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 23 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23); __Result__; });


    if ((reg.V & 0x7ffffffful) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 23 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 23 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  inline __attribute__((always_inline)) ap_int_base(double op) {
    const int BITS = 52 + 11 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = doubleToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<11 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, BITS - 2); __Result__; });
    exp = exp - ((1L << (11 - 1L)) - 1L);

    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });


    if ((reg.V & 0x7fffffffffffffffull) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 52 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 52 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
           Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_range_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = (ref.get()).V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_bit_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = ref.operator bool();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref) {
    const ap_int_base<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>::_AP_WR,
                      false>
        tmp = ref.get();
    Base::V = tmp.V;
  }
# 385 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_int_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = (val.get()).V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = val.operator bool();
  }

  inline __attribute__((always_inline)) ap_int_base read() volatile {

    ap_int_base ret;
    ret.V = Base::V;
    return ret;
  }

  inline __attribute__((always_inline)) void write(const ap_int_base<_AP_W, _AP_S>& op2) volatile {

    Base::V = op2.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator=(const volatile ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }
# 476 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base& operator=(bool op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(signed char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_slong op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_ulong op) { Base::V = op; return *this; }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (bool)op2;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (ap_int_base<_AP_W2, false>(op2)).V;
    return *this;
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op2) {
    Base::V = op2.get().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = (bool)op;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = ((const ap_int_base<_AP_W2, false>)(op)).V;
    return *this;
  }





  inline __attribute__((always_inline)) operator RetType() const { return (RetType)(Base::V); }




  inline __attribute__((always_inline)) bool to_bool() const { return (bool)(Base::V); }
  inline __attribute__((always_inline)) char to_char() const { return (char)(Base::V); }
  inline __attribute__((always_inline)) signed char to_schar() const { return (signed char)(Base::V); }
  inline __attribute__((always_inline)) unsigned char to_uchar() const { return (unsigned char)(Base::V); }
  inline __attribute__((always_inline)) short to_short() const { return (short)(Base::V); }
  inline __attribute__((always_inline)) unsigned short to_ushort() const { return (unsigned short)(Base::V); }
  inline __attribute__((always_inline)) int to_int() const { return (int)(Base::V); }
  inline __attribute__((always_inline)) unsigned to_uint() const { return (unsigned)(Base::V); }
  inline __attribute__((always_inline)) long to_long() const { return (long)(Base::V); }
  inline __attribute__((always_inline)) unsigned long to_ulong() const { return (unsigned long)(Base::V); }
  inline __attribute__((always_inline)) ap_slong to_int64() const { return (ap_slong)(Base::V); }
  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return (ap_ulong)(Base::V); }
  inline __attribute__((always_inline)) half to_half() const { return (float)(Base::V); }
  inline __attribute__((always_inline)) float to_float() const { return (float)(Base::V); }
  inline __attribute__((always_inline)) double to_double() const { return (double)(Base::V); }
# 581 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) int length() const volatile { return _AP_W; }


  inline __attribute__((always_inline)) bool iszero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool sign() const {
    if (_AP_S &&
        ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }))
      return true;
    else
      return false;
  }


  inline __attribute__((always_inline)) void clear(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void invert(int i) {
                                                           ;
    bool val = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    if (val)
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
    else
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }

  inline __attribute__((always_inline)) bool test(int i) const {
                                                           ;
    return ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) ap_int_base& get() { return *this; }


  inline __attribute__((always_inline)) void set(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void set(int i, bool v) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }



  inline __attribute__((always_inline)) ap_int_base& lrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << n;
    typeof(Base::V) r_p = Base::V >> (_AP_W - n);
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& rrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << (_AP_W - n);
    typeof(Base::V) r_p = Base::V >> n;
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& reverse() {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
    return *this;
  }


  inline __attribute__((always_inline)) void set_bit(int i, bool v) {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) bool get_bit(int i) const {
    return (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) void b_not() { Base::V = ~Base::V; }
# 694 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator *=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V *= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator +=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V += op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator -=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V -= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator /=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V /= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator %=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V %= op2.V; return *this; }
# 712 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator &=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V &= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator |=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V |= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator ^=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V ^= op2.V; return *this; }





  inline __attribute__((always_inline)) ap_int_base& operator++() {
    operator+=((ap_int_base<1, false>)1);
    return *this;
  }
  inline __attribute__((always_inline)) ap_int_base& operator--() {
    operator-=((ap_int_base<1, false>)1);
    return *this;
  }




  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator++(int) {
    ap_int_base t = *this;
    operator+=((ap_int_base<1, false>)1);
    return t;
  }
  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator--(int) {
    ap_int_base t = *this;
    operator-=((ap_int_base<1, false>)1);
    return t;
  }




  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator+() const { return *this; }


  inline __attribute__((always_inline)) typename RType<1, false>::minus operator-() const {
    return ap_int_base<1, false>(0) - *this;
  }




  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }





  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator~() const {
    ap_int_base<_AP_W, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>(sh);
    } else
      return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V << op2.to_uint();
    return r;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<(sh);
    }
    return operator>>(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V >> op2.to_uint();
    return r;
  }
# 823 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>=(sh);
    } else
      return operator<<=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V <<= op2.to_uint();
    return *this;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<=(sh);
    }
    return operator>>=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V >>= op2.to_uint();
    return *this;
  }
# 872 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V == op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return !(Base::V == op2.V);
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V < op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V >= op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V > op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V <= op2.V;
  }




  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(const_cast<ap_int_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }
# 981 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool operator[](int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator[](const ap_int_base<_AP_W2, _AP_S2>& index) const {
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index.to_int());
    return br.to_bool();
  }

  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool bit(int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool bit(const ap_int_base<_AP_W2, _AP_S2>& index) const {
    return bit(index.to_int());
  }
# 1048 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {

    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1UL), x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      ap_int_base<64, false> x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctzll(t.V);
    } else {
      enum { __N = (_AP_W + 63) / 64 };
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      VITIS_LOOP_1066_1: for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - i * 64 - 64, _AP_W - i * 64 - 1); __Result__; });
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t.V != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        enum { REST = (_AP_W - 1) % 64 };
        ap_int_base<64, false> x;
        x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, REST); __Result__; });
        t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 63 - REST, 63); __Result__; });
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(const ap_int_base<_AP_W2, _AP_S2>& a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(ap_int_base<_AP_W2, _AP_S2>& a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this), a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator&(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this & a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator|(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this | a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator^(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this ^ a2.get();
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    Base::V = val.V;
  }





  inline __attribute__((always_inline)) bool and_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_and_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nand_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_nand_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool or_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nor_reduce() const { return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); })); }
  inline __attribute__((always_inline)) bool xor_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool xnor_reduce() const {
    return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }));
  }
# 1288 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2, bool sign = _AP_S) const {
    (void)(rd);
    (void)(sign);
    return 0;
  }

};
# 1349 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base ret; ret.V = lhs.V * rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base ret; ret.V = lhs.V + rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base ret; ret.V = lhs.V - rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret; ret.V = lhs.V & rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret; ret.V = lhs.V | rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret; ret.V = lhs.V ^ rhs.V; return ret; }
# 1368 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::div_base ret; ret.V = op.V / op2.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mod_base ret; ret.V = op.V % op2.V; return ret; }
# 1396 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op + op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 + i_op; }
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op - op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 - i_op; }
# 1425 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
# 1459 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op * ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op + ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op - ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op / ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op % ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op & ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op | ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op ^ ap_int_base<1, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op * ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op + ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op - ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op / ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op % ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op & ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op | ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op ^ ap_int_base<8, CHAR_IS_SIGNED>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op * ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op + ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op - ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op / ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op % ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op & ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op | ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op ^ ap_int_base<8, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op * ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op + ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op - ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op / ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op % ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op & ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op | ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op ^ ap_int_base<8, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op * ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op + ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op - ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op / ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op % ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op & ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op | ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op ^ ap_int_base<_AP_SIZE_short, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op * ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op + ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op - ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op / ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op % ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op & ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op | ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op ^ ap_int_base<_AP_SIZE_short, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op * ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op + ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op - ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op / ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op % ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op & ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op | ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op ^ ap_int_base<_AP_SIZE_int, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op * ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op + ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op - ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op / ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op % ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op & ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op | ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op ^ ap_int_base<_AP_SIZE_int, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op * ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op + ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op - ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op / ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op % ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op & ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op | ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op ^ ap_int_base<_AP_SIZE_long, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op * ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op + ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op - ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op / ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op % ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op & ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op | ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op ^ ap_int_base<_AP_SIZE_long, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, false>(i_op); }
# 1498 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
# 1522 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
# 1553 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op += ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op -= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op *= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op /= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op %= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op &= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op |= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op ^= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >>= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <<= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op += ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op -= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op *= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op /= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op %= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op &= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op |= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op ^= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >>= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <<= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op += ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op -= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op *= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op /= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op %= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op &= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op |= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op ^= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >>= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <<= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op += ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op -= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op *= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op /= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op %= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op &= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op |= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op ^= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >>= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <<= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op += ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op -= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op *= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op /= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op %= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op &= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op |= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op ^= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >>= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <<= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op += ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op -= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op *= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op /= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op %= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op &= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op |= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op ^= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >>= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <<= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op += ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op -= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op *= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op /= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op %= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op &= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op |= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op ^= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >>= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <<= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op += ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op -= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op *= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op /= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op %= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op &= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op |= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op ^= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >>= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <<= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op += ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op -= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op *= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op /= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op %= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op &= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op |= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op ^= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >>= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <<= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op += ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op -= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op *= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op /= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op %= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op &= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op |= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op ^= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >>= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <<= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1586 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half& operator +=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half& operator -=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half& operator *=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half& operator /=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 /= op_rt; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float& operator +=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float& operator -=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float& operator *=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float& operator /=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 /= op_rt; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double& operator +=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double& operator -=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double& operator *=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double& operator /=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 /= op_rt; }
# 1614 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1651 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; }
# 1681 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) + op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) - op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) * op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) / op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) % op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) & op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) | op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) ^ op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) >> op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) << op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<_AP_W2, false>(op2); }
# 1712 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator +=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator -=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator *=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator /=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator %=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator >>=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator <<=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1744 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator &=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator |=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator ^=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1763 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator ==(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator ==(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator !=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator !=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <=(op2.operator ap_int_base<_AP_W2, false>()); }
# 1790 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) + op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) - op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) * op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) / op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) % op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) & op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) | op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) ^ op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >> op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) << op2; }
# 1821 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator +=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator -=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator *=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator /=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator %=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator >>=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator <<=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1853 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator &=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator |=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator ^=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1872 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 == ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) == op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 != ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) != op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 > ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) > op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >= op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 < ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) < op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) <= op2; }
# 1980 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 == op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() == op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 != op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() != op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 > op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() > op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 >= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() >= op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 < op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() < op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 <= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() <= op2; }
# 57 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int.h" 2
# 1 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_ref.h" 1
# 73 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref {
  enum {
    _AP_WR = _AP_W1 + _AP_W2,
  };

  _AP_T1& mbv1;
  _AP_T2& mbv2;

  inline __attribute__((always_inline)) ap_concat_ref(const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& ref)
      : mbv1(ref.mbv1), mbv2(ref.mbv2) {}

  inline __attribute__((always_inline)) ap_concat_ref(_AP_T1& bv1, _AP_T2& bv2) : mbv1(bv1), mbv2(bv2) {}

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> Part1;
    Part1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(Part1);
    ap_int_base<_AP_W2, false> Part2;
    Part2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(Part2);
    return *this;
  }
# 116 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) ap_concat_ref& operator=(bool val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(signed char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_slong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_ulong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(half val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(float val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(double val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }





  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_bit_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }
  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_range_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((const ap_int_base<_AP_W3, false>)(val));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_fixed_base<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&
          val) {
    return operator=(val.to_ap_int_base());
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((ap_ulong)(bool)(val));
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_WR, false>() const { return get(); }

  inline __attribute__((always_inline)) operator ap_ulong() const { return get().to_uint64(); }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                       ap_range_ref<_AP_W3, _AP_S3> >
  operator,(const ap_range_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_range_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_range_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(*this, a2);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(volatile ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const volatile ap_int_base<_AP_W3, _AP_S3> &a2) {

    ap_int_base<_AP_W3, _AP_S3> op(a2);
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(op));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >
  operator,(const ap_bit_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_bit_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                       ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >
  operator,(const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                         ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >(
        *this, const_cast<ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_WR, ap_concat_ref, _AP_W3,
      af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
  operator,(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, _AP_W3,
        af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<
            af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, 1,
                    af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
      operator,(const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>
                    &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, 1,
        af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(
            a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator&(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() & a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator|(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() | a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator^(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() ^ a2;
  }
# 304 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) ap_int_base<_AP_WR, false> get() const {
    ap_int_base<_AP_WR, false> tmpVal(0);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W2, false> v2(mbv2);
    ap_int_base<_AP_W1, false> v1(mbv1);
    tmpVal.V = ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v2.V) __Repl2__ = v2.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, W_ref2 - 1); __Result__; });
    tmpVal.V =
        ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v1.V) __Repl2__ = v1.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    return tmpVal;
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> tmpVal1;
    tmpVal1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(tmpVal1);
    ap_int_base<_AP_W2, false> tmpVal2;
    tmpVal2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(tmpVal2);
  }

  inline __attribute__((always_inline)) int length() const { return mbv1.length() + mbv2.length(); }
};




template <int _AP_W, bool _AP_S>
struct ap_range_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:
  inline __attribute__((always_inline)) ap_range_ref(const ap_range_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}

  inline __attribute__((always_inline)) ap_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) ap_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }
# 385 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) ap_range_ref& operator=(bool val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(signed char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_slong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_ulong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(half val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(float val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(double val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref& val) {
    return operator=((const ap_int_base<_AP_W, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    return operator=(val.to_ap_int_base());
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)(val));
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_range_ref, _AP_W, ap_int_base<_AP_W, _AP_S> >
  operator,(ap_int_base<_AP_W, _AP_S>& a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W,
                         ap_int_base<_AP_W, _AP_S> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_range_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop == hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop < hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop <= hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<=(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= op2.V;
    return *this;
  };



  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator~() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (~ret);
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator!() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (!ret);
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator+() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator-() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (-ret);
  }


  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) bool and_reduce() const {
    bool ret = true;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    VITIS_LOOP_716_1: for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret &= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool or_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    VITIS_LOOP_730_1: for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret |= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool xor_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    VITIS_LOOP_744_1: for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret ^= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }
# 760 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char radix = 2) const {
    (void)(radix);
    return 0;
  }

};
# 800 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S>
struct ap_bit_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int d_index;

 public:

  inline __attribute__((always_inline)) ap_bit_ref(const ap_bit_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {}

  inline __attribute__((always_inline)) ap_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) ap_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}

  inline __attribute__((always_inline)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
  inline __attribute__((always_inline)) bool to_bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
# 838 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(bool val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(signed char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_slong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_ulong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
# 860 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(half val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(float val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(double val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(val.V != 0));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_int_base<_AP_W2, false>)val);
  }



  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, ap_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        1, ap_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() != op.get();
  }

  inline __attribute__((always_inline)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) bool get() { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    operator=(val);
  }

  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 1058 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }






template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1117 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::plus operator +(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::minus operator -(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mult operator *(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::div operator /(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mod operator %(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::plus operator +(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::minus operator -(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mult operator *(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::div operator /(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mod operator %(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::plus operator +(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::minus operator -(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mult operator *(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::div operator /(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mod operator %(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::plus operator +(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::minus operator -(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mult operator *(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::div operator /(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mod operator %(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::plus operator +(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::minus operator -(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mult operator *(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::div operator /(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mod operator %(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::plus operator +(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::minus operator -(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mult operator *(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::div operator /(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mod operator %(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::plus operator +(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::minus operator -(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mult operator *(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::div operator /(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mod operator %(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::plus operator +(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::minus operator -(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mult operator *(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::div operator /(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mod operator %(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::plus operator +(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::minus operator -(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mult operator *(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::div operator /(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mod operator %(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::plus operator +(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::minus operator -(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mult operator *(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::div operator /(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mod operator %(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::plus operator +(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::minus operator -(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mult operator *(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::div operator /(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mod operator %(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::plus operator +(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::minus operator -(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mult operator *(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::div operator /(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mod operator %(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
# 1140 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator &(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator |(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator ^(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator >>(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator <<(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator &(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator |(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator ^(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator >>(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator <<(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator &(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator |(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator ^(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator >>(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator <<(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator &(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator |(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator &(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator |(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator ^(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator >>(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator <<(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator &(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator |(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator &(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator |(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator ^(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator >>(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator <<(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator &(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator |(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator &(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator |(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator ^(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator >>(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator <<(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator &(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator |(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator &(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator |(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator ^(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator >>(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator <<(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator &(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator |(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator ^(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator >>(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator <<(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
# 1168 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())+( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())-( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())*( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::div operator /(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())/( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())%( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())&( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())|( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())^( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())>>( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())<<( rhs.operator ap_int_base<_AP_W2, false>()); }
# 1217 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::plus operator +( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() + rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::minus operator -( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() - rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mult operator *( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() * rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::div operator /( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() / rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mod operator %( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() % rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator &( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() & rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator |( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() | rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator ^( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() ^ rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator >>( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() >> rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator <<( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() << rhs.get(); }
# 1364 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 1; ret >>= 1; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, bool op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op2); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( bool op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op1); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, char op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op2); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op1); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( signed char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, signed char op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op2); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( signed char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op1); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + 1, true> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( signed char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( unsigned char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned char op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op2); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( unsigned char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op1); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( unsigned char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( unsigned short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( unsigned short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( unsigned int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( unsigned int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( unsigned long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( unsigned long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_slong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_ulong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
# 1388 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }

template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
# 58 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int.h" 2




template <int _AP_W>
struct ap_int : ap_int_base<_AP_W, true> {
  typedef ap_int_base<_AP_W, true> Base;

  inline __attribute__((always_inline)) ap_int() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }




  inline __attribute__((always_inline)) ap_int(unsigned V __attribute__((bitwidth(_AP_W))), bool raw) {
    Base::V = V;
    (void)(raw);
  }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_int(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_ulong val) { Base::V = val; }

  ap_int(double val) : Base(val) {}
  ap_int(float val) : Base(val) {}
  ap_int(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_int(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_int(const char* s, signed char rd) : Base(s, rd) {}




  inline __attribute__((always_inline)) ap_int& operator=(const ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) ap_int& operator=(const volatile ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_int<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_int<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};




template <int _AP_W>
struct ap_uint : ap_int_base<_AP_W, false> {
  typedef ap_int_base<_AP_W, false> Base;

  inline __attribute__((always_inline)) ap_uint() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }




  inline __attribute__((always_inline)) ap_uint(unsigned V __attribute__((bitwidth(_AP_W))), bool raw) {
    Base::V = V;
    (void)(raw);
  }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_uint(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_uint(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_ulong val) { Base::V = val; }

  ap_uint(double val) : Base(val) {}
  ap_uint(float val) : Base(val) {}
  ap_uint(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_uint(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_uint(const char* s, signed char rd) : Base(s, rd) {}




  inline __attribute__((always_inline)) ap_uint& operator=(const ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) ap_uint& operator=(const volatile ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_uint<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_uint<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};
# 362 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int.h"
# 1 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_special.h" 1
# 61 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 89 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_special.h"
template <int _AP_W>
class complex<ap_int<_AP_W> > {
 public:
  typedef ap_int<_AP_W> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 222 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int_special.h"
template <int _AP_W>
inline bool operator==(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W>
inline bool operator==(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W>
inline bool operator!=(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W>
inline bool operator!=(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 363 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_int.h" 2
# 63 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_base.h" 2
# 133 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_base.h"
template <int _AP_W2, int _AP_I2, bool _AP_S2>
struct _ap_fixed_factory;
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, true> {
  typedef ap_fixed<_AP_W2, _AP_I2> type;
};
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, false> {
  typedef ap_ufixed<_AP_W2, _AP_I2> type;
};
# 154 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct ap_fixed_base : ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;
  static const int width = _AP_W;
  static const int iwidth = _AP_I;
  static const ap_q_mode qmode = _AP_Q;
  static const ap_o_mode omode = _AP_O;


  template <int _AP_W2, int _AP_I2, bool _AP_S2>
  struct RType {
    enum {
      _AP_F = _AP_W - _AP_I,
      F2 = _AP_W2 - _AP_I2,
      mult_w = _AP_W + _AP_W2,
      mult_i = _AP_I + _AP_I2,
      mult_s = _AP_S || _AP_S2,
      plus_w = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
               1 + ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      plus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1 +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      minus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,

      div_w = _AP_S2 + _AP_W + ((F2) > (0) ? (F2) : (0)),



      div_i = _AP_S2 + _AP_I + F2,
      div_s = _AP_S || _AP_S2,
      logic_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      logic_i = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };

    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> lhs;
    typedef ap_fixed_base<_AP_W2, _AP_I2, _AP_S2> rhs;

    typedef ap_fixed_base<mult_w, mult_i, mult_s> mult_base;
    typedef ap_fixed_base<plus_w, plus_i, plus_s> plus_base;
    typedef ap_fixed_base<minus_w, minus_i, minus_s> minus_base;
    typedef ap_fixed_base<logic_w, logic_i, logic_s> logic_base;
    typedef ap_fixed_base<div_w, div_i, div_s> div_base;
    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> arg1_base;

    typedef typename _ap_fixed_factory<mult_w, mult_i, mult_s>::type mult;
    typedef typename _ap_fixed_factory<plus_w, plus_i, plus_s>::type plus;
    typedef typename _ap_fixed_factory<minus_w, minus_i, minus_s>::type minus;
    typedef typename _ap_fixed_factory<logic_w, logic_i, logic_s>::type logic;
    typedef typename _ap_fixed_factory<div_w, div_i, div_s>::type div;
    typedef typename _ap_fixed_factory<_AP_W, _AP_I, _AP_S>::type arg1;
  };

 private:
# 333 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_base.h"
  inline __attribute__((always_inline)) void report() {}




  inline __attribute__((always_inline)) void overflow_adjust(bool underflow, bool overflow, bool lD,
                              bool sign) {
    if (!underflow && !overflow) return;
    if (_AP_O == AP_WRAP) {
      if (_AP_N == 0) return;
      if (_AP_S) {


        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        if (_AP_N > 1) {

          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
      } else {

        ap_int_base<_AP_W, false> mask(-1);
        Base::V =
            ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 1); __Result__; });
      }
    } else if (_AP_O == AP_SAT_ZERO) {
      Base::V = 0;
    } else if (_AP_O == AP_WRAP_SM && _AP_S) {
      bool Ro = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      if (_AP_N == 0) {
        if (lD != Ro) {
          Base::V = ~Base::V;
          Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(lD) __Repl2__ = !!lD; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        }
      } else {
        if (_AP_N == 1 && sign != Ro) {
          Base::V = ~Base::V;
        } else if (_AP_N > 1) {
          bool lNo = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - _AP_N); __Result__; });
          if (lNo == sign) Base::V = ~Base::V;
          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
      }
    } else {
      if (_AP_S) {
        if (overflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          Base::V = ~Base::V;
        } else if (underflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          if (_AP_O == AP_SAT_SYM) Base::V |= 1;
        }
      } else {
        if (overflow)
          Base::V = ~(ap_int_base<_AP_W, false>(0).V);
        else if (underflow)
          Base::V = 0;
      }
    }
  }

  inline __attribute__((always_inline)) bool quantization_adjust(bool qb, bool r, bool s) {
    bool carry = (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    if (_AP_Q == AP_TRN) return false;
    if (_AP_Q == AP_RND_ZERO)
      qb &= s || r;
    else if (_AP_Q == AP_RND_MIN_INF)
      qb &= r;
    else if (_AP_Q == AP_RND_INF)
      qb &= !s || r;
    else if (_AP_Q == AP_RND_CONV)
      qb &= ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 0); __Result__; }) || r;
    else if (_AP_Q == AP_TRN_ZERO)
      qb = s && (qb || r);
    Base::V += qb;
    return carry && (!(bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }));
  }


 public:



  inline __attribute__((always_inline)) ap_fixed_base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }
# 477 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_fixed_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    *this = ((bool)op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_range_ref<_AP_W2, _AP_S2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op) {
    *this = (ap_int_base<_AP_W2 + _AP_W3, false>(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (bool(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }
# 535 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const bool x) { ap_fixed_base<(1), (1), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const char x) { ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const signed char x) { ap_fixed_base<(8), (8), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned char x) { ap_fixed_base<(8), (8), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_slong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_ulong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)> tmp; tmp.V = x; *this = tmp; }







          ap_fixed_base(double d) {
    ap_int_base<64, false> ireg;
    ireg.V = doubleToRawBits(d);
    bool isneg = ({ typeof(ireg.V) __Val2__ = ireg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 63); __Result__; });

    ap_int_base<11 + 1, true> exp;
    ap_int_base<11, false> exp_tmp;
    exp_tmp.V =
        ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, 52 + 11 - 1); __Result__; });
    exp = exp_tmp - ((1L << (11 - 1L)) - 1L);
    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));

    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });
    if (isneg) man = -man;
    if ((ireg.V & 0x7fffffffffffffffLL) == 0) {
      Base::V = 0;
    } else {
      int _AP_W2 = 52 + 2, _AP_I2 = exp.V + 2, _AP_F = _AP_W - _AP_I,
          F2 = _AP_W2 - _AP_I2;
      bool _AP_S2 = true,
           QUAN_INC = F2 > _AP_F &&
                      !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));
      bool carry = false;

      unsigned sh_amt = (F2 > _AP_F) ? F2 - _AP_F : _AP_F - F2;
      if (F2 == _AP_F)
        Base::V = man.V;
      else if (F2 > _AP_F) {
        if (sh_amt < 52 + 2)
          Base::V = man.V >> sh_amt;
        else {
          Base::V = isneg ? -1 : 0;
        }
        if ((_AP_Q != AP_TRN) && !((_AP_Q == AP_TRN_ZERO) && !_AP_S2)) {
          bool qb = (F2 - _AP_F > _AP_W2) ? isneg : (bool)({ typeof(man.V) __Val2__ = man.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

          bool r =
              (F2 > _AP_F + 1)
                  ? ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, (F2 - _AP_F - 2 < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1)); __Result__; }) != 0


                  : false;
          carry = quantization_adjust(qb, r, isneg);
        }
      } else {
        Base::V = man.V;
        if (sh_amt < _AP_W)
          Base::V = Base::V << sh_amt;
        else
          Base::V = 0;
      }

      if ((_AP_O != AP_WRAP || _AP_N != 0) &&
          ((!_AP_S && _AP_S2) ||
           _AP_I - _AP_S <
               _AP_I2 - _AP_S2 +
                   (QUAN_INC ||
                    (_AP_S2 && (_AP_O == AP_SAT_SYM))))) {
        bool deleted_zeros = _AP_S2 ? true : !carry, deleted_ones = true;
        bool neg_src = isneg;
        bool lD = false;
        int pos1 = F2 - _AP_F + _AP_W;
        int pos2 = F2 - _AP_F + _AP_W + 1;
        bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
        if (pos1 < _AP_W2 && pos1 >= 0)

          lD = (man.V >> pos1) & 1;
        if (pos1 < _AP_W2) {
          bool Range1_all_ones = true;
          bool Range1_all_zeros = true;
          bool Range2_all_ones = true;
          ap_int_base<52 + 2, false> Range2;
          ap_int_base<52 + 2, false> all_ones(-1);

          if (pos2 >= 0 && pos2 < _AP_W2) {


            Range2.V = man.V;
            Range2.V >>= pos2;
            Range2_all_ones = Range2 == (all_ones >> pos2);
          } else if (pos2 < 0)
            Range2_all_ones = false;
          if (pos1 >= 0 && pos2 < _AP_W2) {
            Range1_all_ones = Range2_all_ones && lD;
            Range1_all_zeros = !Range2.V && !lD;
          } else if (pos2 == _AP_W2) {
            Range1_all_ones = lD;
            Range1_all_zeros = !lD;
          } else if (pos1 < 0) {
            Range1_all_zeros = !man.V;
            Range1_all_ones = false;
          }

          deleted_zeros =
              deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
          deleted_ones =
              carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
          neg_src = isneg && !(carry && Range1_all_ones);
        } else
          neg_src = isneg && newsignbit;
        bool neg_trg = _AP_S && newsignbit;
        bool overflow = (neg_trg || !deleted_zeros) && !isneg;
        bool underflow = (!neg_trg || !deleted_ones) && neg_src;
        if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
          underflow |=
              neg_src &&
              (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                         : true);
        overflow_adjust(underflow, overflow, lD, neg_src);
      }
    }
    report();
  }


  inline __attribute__((always_inline)) ap_fixed_base(float d) { *this = ap_fixed_base(double(d)); }


  inline __attribute__((always_inline)) ap_fixed_base(half d) { *this = ap_fixed_base(double(d)); }
# 688 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {

    const int _AP_F = _AP_W - _AP_I;
    const int F2 = _AP_W2 - _AP_I2;
    const int QUAN_INC =
          F2 > _AP_F && !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));

    if (!op) Base::V = 0;
    bool carry = false;
    bool signbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    bool isneg = signbit && _AP_S2;
    if (F2 == _AP_F)
      Base::V = op.V;
    else if (F2 > _AP_F) {
      unsigned int sh_amt = F2 - _AP_F;

      if (sh_amt < _AP_W2) {
        Base::V = op.V >> sh_amt;
      } else {
        Base::V = isneg ? -1 : 0;
      }
      if (_AP_Q != AP_TRN && !(_AP_Q == AP_TRN_ZERO && !_AP_S2)) {
        bool qbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

        bool qb = (F2 - _AP_F > _AP_W2) ? _AP_S2 && signbit : qbit;
        enum { hi = ((F2 - _AP_F - 2) < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1) };

        bool r = (F2 > _AP_F + 1) ? (({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, hi); __Result__; }) != 0) : false;
        carry = quantization_adjust(qb, r, isneg);
      }
    } else {
      unsigned sh_amt = _AP_F - F2;

      if (sh_amt < _AP_W) {
        if (_AP_W > _AP_W2) {

          Base::V = op.V;
          Base::V <<= sh_amt;
        } else {

          Base::V = op.V << sh_amt;
        }
      } else {
        Base::V = 0;
      }
    }

    if ((_AP_O != AP_WRAP || _AP_N != 0) &&
        ((!_AP_S && _AP_S2) ||
         _AP_I - _AP_S <
             _AP_I2 - _AP_S2 +
                 (QUAN_INC || (_AP_S2 && _AP_O == AP_SAT_SYM)))) {
      bool deleted_zeros = _AP_S2 ? true : !carry;
      bool deleted_ones = true;
      bool neg_src = isneg;
      bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      enum { pos1 = F2 - _AP_F + _AP_W, pos2 = F2 - _AP_F + _AP_W + 1 };
      bool lD = (pos1 < _AP_W2 && pos1 >= 0) ? ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), pos1); __Result__; })
                                             : false;
      if (pos1 < _AP_W2) {
        bool Range1_all_ones = true;
        bool Range1_all_zeros = true;
        bool Range2_all_ones = true;
        ap_int_base<_AP_W2, false> all_ones(-1);

        if (pos2 < _AP_W2 && pos2 >= 0) {
          ap_int_base<_AP_W2, false> Range2;
          Range2.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos2, _AP_W2 - 1); __Result__; });
          Range2_all_ones = Range2 == (all_ones >> pos2);
        } else if (pos2 < 0) {
          Range2_all_ones = false;
        }

        if (pos1 >= 0 && pos2 < _AP_W2) {
          ap_int_base<_AP_W2, false> Range1;
          Range1.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos1, _AP_W2 - 1); __Result__; });
          Range1_all_ones = Range1 == (all_ones >> pos1);
          Range1_all_zeros = !Range1.V;
        } else if (pos2 == _AP_W2) {
          Range1_all_ones = lD;
          Range1_all_zeros = !lD;
        } else if (pos1 < 0) {
          Range1_all_zeros = !op.V;
          Range1_all_ones = false;
        }

        deleted_zeros =
            deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
        deleted_ones =
            carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
        neg_src = isneg && !(carry && Range1_all_ones);
      } else
        neg_src = isneg && newsignbit;
      bool neg_trg = _AP_S && newsignbit;
      bool overflow = (neg_trg || !deleted_zeros) && !isneg;
      bool underflow = (!neg_trg || !deleted_ones) && neg_src;
      if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
        underflow |=
            neg_src &&
            (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                       : true);

      overflow_adjust(underflow, overflow, lD, neg_src);
    }
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(const_cast<const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(op));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& setBits(ap_ulong bv) {

    Base::V = bv;
    return *this;
  }


  static inline __attribute__((always_inline)) ap_fixed_base bitsToFixed(ap_ulong bv) {

    ap_fixed_base t;

    t.V = bv;



    return t;
  }





  inline __attribute__((always_inline)) ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> to_ap_int_base(
      bool Cnative = true) const {
    ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> ret;
    if (_AP_I == 0) {
      ret.V = 0;
    } else if (_AP_I > 0 && _AP_I <= _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - _AP_I, _AP_W - 1); __Result__; });
    } else if (_AP_I > _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 1); __Result__; });
      ret.V <<= (_AP_I - _AP_W);
    }
# 848 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_base.h"
    if (Cnative && _AP_I < _AP_W) {

      if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }) && (_AP_I < _AP_W) &&
          (({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_I < 0 ? _AP_W - 1 : _AP_W - _AP_I - 1); __Result__; }) != 0))

        ++ret;
    } else {

    }
    return ret;
  };

 public:
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) operator ap_int_base<_AP_W2, _AP_S2>() const {
    return ap_int_base<_AP_W2, _AP_S2>(to_ap_int_base());
  }


  inline __attribute__((always_inline)) char to_char() const { return to_ap_int_base().to_char(); }

  inline __attribute__((always_inline)) int to_int() const { return to_ap_int_base().to_int(); }

  inline __attribute__((always_inline)) unsigned to_uint() const { return to_ap_int_base().to_uint(); }

  inline __attribute__((always_inline)) ap_slong to_int64() const { return to_ap_int_base().to_int64(); }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return to_ap_int_base().to_uint64(); }



  inline __attribute__((always_inline)) double to_double() const {




    enum { BITS = 52 + 11 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (11 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 52;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    ap_ulong m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (ap_ulong)(tmp.V >> (lsb_index - 1))
                           : (ap_ulong)(tmp.V << (1 - lsb_index));
    } else {
      m = (ap_ulong)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;


    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 52 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52 + 11 - 1); __Result__; });


    return rawBitsToDouble(m);
  }



  inline __attribute__((always_inline)) float to_float() const {




    enum { BITS = 23 + 8 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (8 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 23;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned long m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned long)(tmp.V >> (lsb_index - 1))
                           : (unsigned long)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned long)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 23 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23 + 8 - 1); __Result__; });

    return rawBitsToFloat(m);
  }



  inline __attribute__((always_inline)) half to_half() const {




    enum { BITS = 10 + 5 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (5 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 10;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned short m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned short)(tmp.V >> (lsb_index - 1))
                           : (unsigned short)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned short)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 10 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 10, 10 + 5 - 1); __Result__; });

    return rawBitsToHalf(m);
  }


  inline __attribute__((always_inline)) operator long double() const { return (long double)to_double(); }

  inline __attribute__((always_inline)) operator double() const { return to_double(); }

  inline __attribute__((always_inline)) operator float() const { return to_float(); }

  inline __attribute__((always_inline)) operator half() const { return to_half(); }

  inline __attribute__((always_inline)) operator bool() const { return (bool)Base::V != 0; }

  inline __attribute__((always_inline)) operator char() const { return (char)to_int(); }

  inline __attribute__((always_inline)) operator signed char() const { return (signed char)to_int(); }

  inline __attribute__((always_inline)) operator unsigned char() const { return (unsigned char)to_uint(); }

  inline __attribute__((always_inline)) operator short() const { return (short)to_int(); }

  inline __attribute__((always_inline)) operator unsigned short() const { return (unsigned short)to_uint(); }

  inline __attribute__((always_inline)) operator int() const { return to_int(); }

  inline __attribute__((always_inline)) operator unsigned int() const { return to_uint(); }



  inline __attribute__((always_inline)) operator long() const { return (long)to_int64(); }

  inline __attribute__((always_inline)) operator unsigned long() const { return (unsigned long)to_uint64(); }






  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }

  inline __attribute__((always_inline)) operator ap_slong() const { return to_int64(); }

  inline __attribute__((always_inline)) int length() const { return _AP_W; };
# 1074 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {


    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctzll(t.V);
    } else {
      enum {__N = (_AP_W + 63) / 64};
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      VITIS_LOOP_1090_1: for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.range(0, 63) = this->range(_AP_W - i * 64 - 64, _AP_W - i * 64 - 1);
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        t.range(63 - (_AP_W - 1) % 64, 63) = this->range(0, (_AP_W - 1) % 64);
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::mult operator*(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::mult_base r, t;
    r.V = Base::V;
    t.V = op2.V;
    r.V *= op2.V;
    return r;
  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::div operator/(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::div_base r;
# 1144 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_base.h"
        ap_fixed_base<_AP_W + ((_AP_W2 - _AP_I2) > (0) ? (_AP_W2 - _AP_I2) : (0)),_AP_I, _AP_S> t(*this);



        r.V = t.V / op2.V;
# 1177 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_base.h"
    return r;
  }
# 1192 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::plus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V + rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::minus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V - rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V & rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V | rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V ^ rhs.V; return ret; }
# 1210 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator *=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator *(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator /=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator /(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator +=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator +(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator -=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator -(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator &=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator &(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator |=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator |(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator ^=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator ^(op2); return *this; }





  inline __attribute__((always_inline)) ap_fixed_base& operator++() {
    operator+=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator--() {
    operator-=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator++(int) {
    ap_fixed_base r(*this);
    operator++();
    return r;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator--(int) {
    ap_fixed_base r(*this);
    operator--();
    return r;
  }



  inline __attribute__((always_inline)) ap_fixed_base operator+() { return *this; }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W + 1, _AP_I + 1, true> operator-() const {
    ap_fixed_base<_AP_W + 1, _AP_I + 1, true> r(*this);
    r.V = -r.V;
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> getNeg() {
    ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> r(*this);
    r.V = -r.V;
    return r;
  }



  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }




  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S> operator~() const {
    ap_fixed_base<_AP_W, _AP_I, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> lshift() const {
    ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }

  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> rshift() const {
    ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }





  inline __attribute__((always_inline)) ap_fixed_base operator<<(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V << sh;
# 1328 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_base.h"
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V >> sh;
# 1350 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_base.h"
    return r;
  }


  inline __attribute__((always_inline)) ap_fixed_base operator<<(int sh) const {
    ap_fixed_base r;
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator>>(ush);
    } else {
      return operator<<(ush);
    }
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(int sh) const {
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator<<(ush);
    } else {
      return operator>>(ush);
    }
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, true>& op2) const {


    int sh = op2.to_int();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    int sh = op2.to_int();
    return operator>>(sh);
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator>>(sh);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator<<(op2.to_ap_int_base());
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator>>(op2.to_ap_int_base());
  }





  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const int sh) {
    *this = operator<<(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const unsigned int sh) {
    *this = operator<<(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const int sh) {
    *this = operator>>(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const unsigned int sh) {
    *this = operator>>(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }
# 1494 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V > op2.V; else if (_AP_F > F2) return Base::V > ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V > op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V < op2.V; else if (_AP_F > F2) return Base::V < ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V < op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V >= op2.V; else if (_AP_F > F2) return Base::V >= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V >= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V <= op2.V; else if (_AP_F > F2) return Base::V <= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V <= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator ==(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V == op2.V; else if (_AP_F > F2) return Base::V == ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V == op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator !=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V != op2.V; else if (_AP_F > F2) return Base::V != ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V != op2.V; return false; }





  inline __attribute__((always_inline)) bool operator >(double d) const { return to_double() > d; }
  inline __attribute__((always_inline)) bool operator <(double d) const { return to_double() < d; }
  inline __attribute__((always_inline)) bool operator >=(double d) const { return to_double() >= d; }
  inline __attribute__((always_inline)) bool operator <=(double d) const { return to_double() <= d; }
  inline __attribute__((always_inline)) bool operator ==(double d) const { return to_double() == d; }
  inline __attribute__((always_inline)) bool operator !=(double d) const { return to_double() != d; }


  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool operator[](unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool bit(unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> get_bit(
      const ap_int_base<_AP_W2, true>& index) {
    (static_cast<void>(0));

    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        this, index.to_int() + _AP_W - _AP_I);
  }

  inline __attribute__((always_inline)) bool get_bit(int index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index + _AP_W - _AP_I); __Result__; });

  }
# 1580 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) bool get_bit(const ap_int_base<_AP_W2, true>& index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index.to_int() + _AP_W - _AP_I); __Result__; });

  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(int Hi,
                                                                      int Lo) {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      int Hi, int Lo) const {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        const_cast<ap_fixed_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }

  inline __attribute__((always_inline)) bool is_neg() const {
    if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; })) return true;
    return false;
  }

  inline __attribute__((always_inline)) int wl() const { return _AP_W; }

  inline __attribute__((always_inline)) int iwl() const { return _AP_I; }

  inline __attribute__((always_inline)) ap_q_mode q_mode() const { return _AP_Q; }

  inline __attribute__((always_inline)) ap_o_mode o_mode() const { return _AP_O; }

  inline __attribute__((always_inline)) int n_bits() const { return _AP_N; }
# 1763 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_base.h"
  inline __attribute__((always_inline)) char* to_string(unsigned char radix = 2, bool sign = _AP_S) const {
    (void)(radix);
    (void)(sign);
    return 0;
  }

};

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_not(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) {
  ret.V = ~op.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_and(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V & op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_or(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V | op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_xor(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V ^ op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void neg(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
  ap_fixed_base<_AP_W2 + !_AP_S2, _AP_I2 + !_AP_S2, true, _AP_Q2, _AP_O2,
                _AP_N2>
      t;
  t.V = -op.V;
  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void lshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F2 = _AP_W2 - _AP_I2,
    _AP_I3 = ((_AP_I) > (_AP_I2) ? (_AP_I) : (_AP_I2)),
    _AP_W3 = _AP_I3 + F2,
  };

  ap_fixed_base<_AP_W3, _AP_I3, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  t.V <<= i;

  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void rshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F = _AP_W - _AP_I,
    F2 = _AP_W2 - _AP_I2,
    F3 = ((F) > (F2) ? (F) : (F2)),
    _AP_W3 = _AP_I2 + F3,
    sh = F - F2,
  };

  ap_fixed_base<_AP_W3, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  if (sh >= 0)
    t.V <<= (int) sh;
  t.V >>= i;

  ret = t;
}
# 2215 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ==(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator !=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator !=(op); }
# 2303 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::plus operator +( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::minus operator -( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::mult operator *( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::div operator /( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator &( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator |( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator ^( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator +=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator +=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator -=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator -=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator *=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator *=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator /=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator /=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator &=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator &=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator |=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator |=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator ^=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator ^=(op.to_ap_int_base()); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ==(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ==(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator !=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <=(op); }




template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator==(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator==(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator!=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator!=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>=(op1);
}
# 57 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed.h" 2
# 1 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_ref.h" 1
# 71 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int d_index;

 public:
  inline __attribute__((always_inline)) af_bit_ref(
      const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {






  }

  inline __attribute__((always_inline)) af_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) af_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}


  inline __attribute__((always_inline)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }



  inline __attribute__((always_inline)) af_bit_ref& operator=(bool val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; });
    return *this;
  }



  inline __attribute__((always_inline)) af_bit_ref& operator=(const af_bit_ref& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=(val != 0);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=(ap_int_base<_AP_W2 + _AP_W3, false>(val));
  }




  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(*this,
                                                                        op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, af_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        1, af_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() != op.get();
  }


  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 258 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:

  inline __attribute__((always_inline)) af_range_ref(
      const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}




  inline __attribute__((always_inline)) af_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {
# 288 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_ref.h"
  }

  inline __attribute__((always_inline)) af_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {
# 300 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_ref.h"
  }
# 312 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_ref.h"
  inline __attribute__((always_inline)) af_range_ref& operator=(const bool val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const signed char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_slong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_ulong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const half val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const float val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const double val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }



  inline __attribute__((always_inline)) af_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }



  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) af_range_ref& operator=(const af_range_ref& val) {
    ap_int_base<_AP_W, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    const ap_int_base<_AP_W2 + _AP_W3, false> tmp(val);
    return operator=(tmp);
  }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator<(op2));
  }





  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, op);
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                    af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  inline __attribute__((always_inline)) operator ap_ulong() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret.to_uint64();
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> to_ap_int_base() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }


  inline __attribute__((always_inline)) char to_char() const {
    return (char)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }



  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator~() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (~ret);
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator!() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (!ret);
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator+() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> operator-() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (-ret);
  }


  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }
# 661 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2) const {
     (void)(rd);
    return 0;
  }

};
# 725 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
# 771 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<1, false>(op); }
# 58 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed.h" 2





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_fixed : ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_fixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                      _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                               _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 112 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}




  inline __attribute__((always_inline)) ap_fixed(unsigned V __attribute__((bitwidth(_AP_W))), bool raw) {
    Base::V = V;
    (void)(raw);
  }
# 147 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}





  inline __attribute__((always_inline)) ap_fixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_fixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_fixed(const char* s, signed char rd) : Base(s, rd) {}






  inline __attribute__((always_inline)) ap_fixed& operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_fixed& operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }
};





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_ufixed : ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_ufixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                       _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                                _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 278 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}




  inline __attribute__((always_inline)) ap_ufixed(unsigned V __attribute__((bitwidth(_AP_W))), bool raw) {
    Base::V = V;
    (void)(raw);
  }
# 310 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_ufixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}




  inline __attribute__((always_inline)) ap_ufixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_ufixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_ufixed(const char* s, signed char rd) : Base(s, rd) {}


  inline __attribute__((always_inline)) ap_ufixed& operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_ufixed& operator=(
      const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O,
                                                 _AP_N>& op) volatile {
    Base::V = op.V;
  }
};
# 401 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed.h"
# 1 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_special.h" 1
# 61 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 89 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
class complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
 public:
  typedef ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 221 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 402 "Z:/Vitis/2020.1/common/technology/autopilot\\ap_fixed.h" 2
# 2 "lenet_proj/lenet_top.cpp" 2
# 1 "Z:/Vitis/2020.1/common/technology/autopilot\\hls_stream.h" 1
# 61 "Z:/Vitis/2020.1/common/technology/autopilot\\hls_stream.h"
# 1 "Z:/Vitis/2020.1/common/technology/autopilot/hls_stream_39.h" 1
# 67 "Z:/Vitis/2020.1/common/technology/autopilot/hls_stream_39.h"
# 1 "Z:/Vitis/2020.1/common/technology/autopilot/etc/autopilot_enum.h" 1
# 59 "Z:/Vitis/2020.1/common/technology/autopilot/etc/autopilot_enum.h"
enum SsdmDataTypes {
    _ssdm_sc_int = 0,
    _ssdm_c_int = _ssdm_sc_int,
    _ssdm_sc_uint = 1,
    _ssdm_c_uint = _ssdm_sc_uint,
    _ssdm_sc_bigint = 2,
    _ssdm_sc_biguint = 3,
};



enum SsdmPortTypes {
    _ssdm_sc_in = 0,
    _ssdm_sc_out = 1,
    _ssdm_sc_inout = 2,
    _ssdm_sc_in_clk,

    _ssdm_fifo_in,
    _ssdm_sc_fifo_in = _ssdm_fifo_in,
    _ssdm_tlm_fifo_in = _ssdm_fifo_in,
    _ssdm_fifo_out,
    _ssdm_sc_fifo_out = _ssdm_fifo_out,
    _ssdm_tlm_fifo_out = _ssdm_fifo_out,
    _ssdm_fifo_inout,
    _ssdm_sc_fifo_inout = _ssdm_fifo_inout,
    _ssdm_tlm_fifo_inout = _ssdm_fifo_inout,
    _ssdm_sc_bus,
    _ssdm_hls_bus_port = _ssdm_sc_bus,
    _ssdm_AXI4M_bus_port = _ssdm_sc_bus,
    _ssdm_port_end,
};



enum SsdmProcessTypes {
    _ssdm_method = 0,
    _ssdm_sc_method = _ssdm_method,
    _ssdm_thread = 1,
    _ssdm_sc_thread = _ssdm_thread,
    _ssdm_cthread = 2,
    _ssdm_sc_cthread = _ssdm_cthread,
    _ssdm_process_end,
};



enum SsdmSensitiveTypes {
    _ssdm_sensitive = 0,
    _ssdm_sensitive_pos,
    _ssdm_sensitive_neg,
    _ssdm_sensitive_reset0,
    _ssdm_sensitive_reset1,
    _ssdm_sensitive_end,
};



enum SsdmChannelTypes {
    _ssdm_sc_sig,
    _ssdm_fifo,
    _ssdm_sc_fifo = _ssdm_fifo,
    _ssdm_mem_fifo,
    _ssdm_sc_mem_fifo = _ssdm_mem_fifo,
};


enum SsdmRegionTypes {
    _ssdm_region_reset,
    _ssdm_region_protocol,
    _ssdm_region_pipeline,
    _ssdm_region_parallel,
};
# 68 "Z:/Vitis/2020.1/common/technology/autopilot/hls_stream_39.h" 2





namespace hls {
# 95 "Z:/Vitis/2020.1/common/technology/autopilot/hls_stream_39.h"
template<typename __STREAM_T__, int DEPTH=0>
class stream;

template<typename __STREAM_T__>
class stream<__STREAM_T__, 0>
{
  public:

    inline __attribute__((always_inline)) stream() {
      __fpga_set_stream_depth(&this->V, 0);
    }

    inline __attribute__((always_inline)) stream(const char* name) {
      (void)(name);
      __fpga_set_stream_depth(&this->V, 0);
    }


  private:
    inline __attribute__((always_inline)) stream(const stream< __STREAM_T__ >& chn):V(chn.V) {
    }

    inline __attribute__((always_inline)) stream& operator= (const stream< __STREAM_T__ >& chn) {
        V = chn.V;
        return *this;
    }

  public:

    inline __attribute__((always_inline)) void operator >> (__STREAM_T__& rdata) {
        read(rdata);
    }

    inline __attribute__((always_inline)) void operator << (const __STREAM_T__& wdata) {
        write(wdata);
    }


  public:

    inline __attribute__((always_inline)) bool empty() const {
        return !__fpga_fifo_not_empty(&V);
    }

    inline __attribute__((always_inline)) bool full() const {
        return !__fpga_fifo_not_full(&V);
    }


    inline __attribute__((always_inline)) void read(__STREAM_T__& dout) {
        __fpga_fifo_pop(&V, &dout);
    }


    inline __attribute__((noinline)) bool read_dep(__STREAM_T__& dout, volatile bool flag) {
        __fpga_fifo_pop(&V, &dout);
        return flag;
    }

    inline __attribute__((always_inline)) __STREAM_T__ read() {
        __STREAM_T__ tmp;
        read(tmp);
        return tmp;
    }


    inline __attribute__((always_inline)) bool read_nb(__STREAM_T__& dout) {
        return __fpga_fifo_nb_pop(&V, &dout);
    }


    inline __attribute__((always_inline)) void write(const __STREAM_T__& din) {
        __fpga_fifo_push(&V, &din);
    }


    inline __attribute__((noinline)) bool write_dep(const __STREAM_T__& din, volatile bool flag) {
        __fpga_fifo_push(&V, &din);
        return flag;
    }


    inline __attribute__((always_inline)) bool write_nb(const __STREAM_T__& din) {
        return __fpga_fifo_nb_push(&V, &din);
    }

  public:
    __STREAM_T__ V __attribute__((no_ctor));
};

template<typename __STREAM_T__, int DEPTH>
class stream : public stream<__STREAM_T__, 0> {
  public:
    inline __attribute__((always_inline)) stream() {
      __fpga_set_stream_depth(&this->V, DEPTH);
    }
};
}
# 62 "Z:/Vitis/2020.1/common/technology/autopilot\\hls_stream.h" 2
# 3 "lenet_proj/lenet_top.cpp" 2
# 1 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\math.h" 1 3
# 36 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\math.h" 3
# 1 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\cmath" 1 3
# 40 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\cmath" 3

# 1 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\x86_64-w64-mingw32\\bits/c++config.h" 1 3
# 196 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\x86_64-w64-mingw32\\bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 218 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\x86_64-w64-mingw32\\bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 495 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\x86_64-w64-mingw32\\bits/c++config.h" 3
# 1 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\x86_64-w64-mingw32\\bits/os_defines.h" 1 3
# 496 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\x86_64-w64-mingw32\\bits/c++config.h" 2 3


# 1 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\x86_64-w64-mingw32\\bits/cpu_defines.h" 1 3
# 499 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\x86_64-w64-mingw32\\bits/c++config.h" 2 3
# 42 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\cmath" 2 3
# 1 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\bits/cpp_type_traits.h" 1 3
# 36 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\bits/cpp_type_traits.h" 3
# 67 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\bits/cpp_type_traits.h" 3
extern "C++" {

namespace std
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 261 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\bits/cpp_type_traits.h" 3
template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };
# 278 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
    { return __it; }


}
}
# 43 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\cmath" 2 3
# 1 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\ext/type_traits.h" 1 3
# 33 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\ext/type_traits.h" 3




extern "C++" {

namespace __gnu_cxx
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
}
# 44 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\cmath" 2 3

# 1 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 1 3
# 11 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3


# 1 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 1 3
# 10 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
# 1 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 1 3
# 12 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 3
# 1 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include/_mingw_mac.h" 1 3
# 13 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 2 3
# 1 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include/_mingw_secapi.h" 1 3
# 44 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include/_mingw_secapi.h" 3
extern "C++" {
template <bool __test, typename __dsttype>
  struct __if_array;
template <typename __dsttype>
  struct __if_array <true, __dsttype> {
    typedef __dsttype __type;
};
}
# 14 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 2 3
# 275 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 3
# 1 "Z:\\Vitis\\2020.1\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include\\vadefs.h" 1 3
# 26 "Z:\\Vitis\\2020.1\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include\\vadefs.h" 3
# 1 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\vadefs.h" 1 3








# 1 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 1 3
# 565 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 3
# 1 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include/sdks/_mingw_directx.h" 1 3
# 566 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 2 3
# 1 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include/sdks/_mingw_ddk.h" 1 3
# 567 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 2 3
# 10 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\vadefs.h" 2 3




#pragma pack(push,_CRT_PACKING)



extern "C" {





  typedef __builtin_va_list __gnuc_va_list;






  typedef __gnuc_va_list va_list;
# 99 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\vadefs.h" 3
}



#pragma pack(pop)
# 27 "Z:\\Vitis\\2020.1\\win64\\tools\\clang-3.9-csynth\\lib\\clang\\7.0.0\\include\\vadefs.h" 2 3
# 276 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 2 3
# 534 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 3
extern "C" {
# 548 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\_mingw.h" 3
const char *__mingw_get_crt_info (void);


}
# 11 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 2 3




#pragma pack(push,_CRT_PACKING)
# 35 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
__extension__ typedef unsigned long size_t;
# 45 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
__extension__ typedef long ssize_t;






typedef size_t rsize_t;
# 62 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
__extension__ typedef long intptr_t;
# 75 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
__extension__ typedef unsigned long uintptr_t;
# 88 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
__extension__ typedef long ptrdiff_t;
# 106 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
typedef unsigned short wint_t;
typedef unsigned short wctype_t;





typedef int errno_t;




typedef long __time32_t;




__extension__ typedef long __time64_t;
# 138 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
typedef __time64_t time_t;
# 422 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\crtdefs.h" 3
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct *pthreadlocinfo;
typedef struct threadmbcinfostruct *pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct {
  pthreadlocinfo locinfo;
  pthreadmbcinfo mbcinfo;
} _locale_tstruct,*_locale_t;



typedef struct tagLC_ID {
  unsigned short wLanguage;
  unsigned short wCountry;
  unsigned short wCodePage;
} LC_ID,*LPLC_ID;




typedef struct threadlocaleinfostruct {
  int refcount;
  unsigned int lc_codepage;
  unsigned int lc_collate_cp;
  unsigned long lc_handle[6];
  LC_ID lc_id[6];
  struct {
    char *locale;
    wchar_t *wlocale;
    int *refcount;
    int *wrefcount;
  } lc_category[6];
  int lc_clike;
  int mb_cur_max;
  int *lconv_intl_refcount;
  int *lconv_num_refcount;
  int *lconv_mon_refcount;
  struct lconv *lconv;
  int *ctype1_refcount;
  unsigned short *ctype1;
  const unsigned short *pctype;
  const unsigned char *pclmap;
  const unsigned char *pcumap;
  struct __lc_time_data *lc_time_curr;
} threadlocinfo;







#pragma pack(pop)
# 14 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 2 3

struct _exception;

#pragma pack(push,_CRT_PACKING)
# 77 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
extern "C++" {
template <typename type1, typename type2> struct __mingw_types_compatible_p {
  static const bool result = false;
};

template <typename type1> struct __mingw_types_compatible_p<type1, type1> {
 static const bool result = true;
};

template <typename type1> struct __mingw_types_compatible_p<const type1, type1> {
  static const bool result = true;
};

template <typename type1> struct __mingw_types_compatible_p<type1, const type1> {
  static const bool result = true;
};
}
# 111 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
extern "C" {







  typedef union __mingw_dbl_type_t {
    double x;
    unsigned long long val;
    __extension__ struct {
      unsigned int low, high;
    } lh;
  } __mingw_dbl_type_t;

  typedef union __mingw_flt_type_t {
    float x;
    unsigned int val;
  } __mingw_flt_type_t;

  typedef union __mingw_ldbl_type_t
  {
    long double x;
    __extension__ struct {
      unsigned int low, high;
      int sign_exponent : 16;
      int res1 : 16;
      int res0 : 32;
    } lh;
  } __mingw_ldbl_type_t;

  typedef union __mingw_fp_types_t
  {
    long double *ld;
    double *d;
    float *f;
    __mingw_ldbl_type_t *ldt;
    __mingw_dbl_type_t *dt;
    __mingw_flt_type_t *ft;
  } __mingw_fp_types_t;




  extern double * __imp__HUGE;
# 168 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  struct _exception {
    int type;
    const char *name;
    double arg1;
    double arg2;
    double retval;
  };

  void __mingw_raise_matherr (int typ, const char *name, double a1, double a2,
         double rslt);
  void __mingw_setusermatherr (int (__attribute__((__cdecl__)) *)(struct _exception *));
  __attribute__ ((__dllimport__)) void __setusermatherr(int (__attribute__((__cdecl__)) *)(struct _exception *));



  double __attribute__((__cdecl__)) sin(double _X);
  double __attribute__((__cdecl__)) cos(double _X);
  double __attribute__((__cdecl__)) tan(double _X);
  double __attribute__((__cdecl__)) sinh(double _X);
  double __attribute__((__cdecl__)) cosh(double _X);
  double __attribute__((__cdecl__)) tanh(double _X);
  double __attribute__((__cdecl__)) asin(double _X);
  double __attribute__((__cdecl__)) acos(double _X);
  double __attribute__((__cdecl__)) atan(double _X);
  double __attribute__((__cdecl__)) atan2(double _Y,double _X);
  double __attribute__((__cdecl__)) exp(double _X);
  double __attribute__((__cdecl__)) log(double _X);
  double __attribute__((__cdecl__)) log10(double _X);
  double __attribute__((__cdecl__)) pow(double _X,double _Y);
  double __attribute__((__cdecl__)) sqrt(double _X);
  double __attribute__((__cdecl__)) ceil(double _X);
  double __attribute__((__cdecl__)) floor(double _X);


  extern float __attribute__((__cdecl__)) fabsf (float x);
  extern long double __attribute__((__cdecl__)) fabsl (long double);
  extern double __attribute__((__cdecl__)) fabs (double _X);
# 243 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  double __attribute__((__cdecl__)) ldexp(double _X,int _Y);
  double __attribute__((__cdecl__)) frexp(double _X,int *_Y);
  double __attribute__((__cdecl__)) modf(double _X,double *_Y);
  double __attribute__((__cdecl__)) fmod(double _X,double _Y);

  void __attribute__((__cdecl__)) sincos (double __x, double *p_sin, double *p_cos);
  void __attribute__((__cdecl__)) sincosl (long double __x, long double *p_sin, long double *p_cos);
  void __attribute__((__cdecl__)) sincosf (float __x, float *p_sin, float *p_cos);



  int __attribute__((__cdecl__)) abs(int _X);
  long __attribute__((__cdecl__)) labs(long _X);



  double __attribute__((__cdecl__)) atof(const char *_String);
  double __attribute__((__cdecl__)) _atof_l(const char *_String,_locale_t _Locale);
# 270 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  struct _complex {
    double x;
    double y;
  };


  double __attribute__((__cdecl__)) _cabs(struct _complex _ComplexA);
  double __attribute__((__cdecl__)) _hypot(double _X,double _Y);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _j0(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _j1(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _jn(int _X,double _Y);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _y0(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _y1(double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _yn(int _X,double _Y);


  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _matherr (struct _exception *);
# 297 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _chgsign (double _X);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _copysign (double _Number,double _Sign);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _logb (double);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _nextafter (double, double);
  __attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) _scalb (double, long);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _finite (double);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fpclass (double);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isnan (double);






__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) j0 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) j1 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) jn (int, double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) y0 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) y1 (double) ;
__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) yn (int, double) ;

__attribute__ ((__dllimport__)) double __attribute__((__cdecl__)) chgsign (double);
# 327 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) finite (double);
  __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) fpclass (double);
# 372 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
typedef float float_t;
typedef double double_t;
# 407 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  extern int __attribute__((__cdecl__)) __fpclassifyl (long double);
  extern int __attribute__((__cdecl__)) __fpclassifyf (float);
  extern int __attribute__((__cdecl__)) __fpclassify (double);
# 520 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  extern int __attribute__((__cdecl__)) __isnan (double);
  extern int __attribute__((__cdecl__)) __isnanf (float);
  extern int __attribute__((__cdecl__)) __isnanl (long double);
# 607 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  extern int __attribute__((__cdecl__)) __signbit (double);
  extern int __attribute__((__cdecl__)) __signbitf (float);
  extern int __attribute__((__cdecl__)) __signbitl (long double);
# 664 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  extern float __attribute__((__cdecl__)) sinf(float _X);
  extern long double __attribute__((__cdecl__)) sinl(long double);

  extern float __attribute__((__cdecl__)) cosf(float _X);
  extern long double __attribute__((__cdecl__)) cosl(long double);

  extern float __attribute__((__cdecl__)) tanf(float _X);
  extern long double __attribute__((__cdecl__)) tanl(long double);
  extern float __attribute__((__cdecl__)) asinf(float _X);
  extern long double __attribute__((__cdecl__)) asinl(long double);

  extern float __attribute__((__cdecl__)) acosf (float);
  extern long double __attribute__((__cdecl__)) acosl (long double);

  extern float __attribute__((__cdecl__)) atanf (float);
  extern long double __attribute__((__cdecl__)) atanl (long double);

  extern float __attribute__((__cdecl__)) atan2f (float, float);
  extern long double __attribute__((__cdecl__)) atan2l (long double, long double);


  extern float __attribute__((__cdecl__)) sinhf(float _X);



  extern long double __attribute__((__cdecl__)) sinhl(long double);

  extern float __attribute__((__cdecl__)) coshf(float _X);



  extern long double __attribute__((__cdecl__)) coshl(long double);

  extern float __attribute__((__cdecl__)) tanhf(float _X);



  extern long double __attribute__((__cdecl__)) tanhl(long double);



  extern double __attribute__((__cdecl__)) acosh (double);
  extern float __attribute__((__cdecl__)) acoshf (float);
  extern long double __attribute__((__cdecl__)) acoshl (long double);


  extern double __attribute__((__cdecl__)) asinh (double);
  extern float __attribute__((__cdecl__)) asinhf (float);
  extern long double __attribute__((__cdecl__)) asinhl (long double);


  extern double __attribute__((__cdecl__)) atanh (double);
  extern float __attribute__((__cdecl__)) atanhf (float);
  extern long double __attribute__((__cdecl__)) atanhl (long double);



  extern float __attribute__((__cdecl__)) expf(float _X);



  extern long double __attribute__((__cdecl__)) expl(long double);


  extern double __attribute__((__cdecl__)) exp2(double);
  extern float __attribute__((__cdecl__)) exp2f(float);
  extern long double __attribute__((__cdecl__)) exp2l(long double);



  extern double __attribute__((__cdecl__)) expm1(double);
  extern float __attribute__((__cdecl__)) expm1f(float);
  extern long double __attribute__((__cdecl__)) expm1l(long double);


  extern float frexpf(float _X,int *_Y);



  extern long double __attribute__((__cdecl__)) frexpl(long double,int *);




  extern int __attribute__((__cdecl__)) ilogb (double);
  extern int __attribute__((__cdecl__)) ilogbf (float);
  extern int __attribute__((__cdecl__)) ilogbl (long double);


  extern float __attribute__((__cdecl__)) ldexpf(float _X,int _Y);



  extern long double __attribute__((__cdecl__)) ldexpl (long double, int);


  extern float __attribute__((__cdecl__)) logf (float);
  extern long double __attribute__((__cdecl__)) logl(long double);


  extern float __attribute__((__cdecl__)) log10f (float);
  extern long double __attribute__((__cdecl__)) log10l(long double);


  extern double __attribute__((__cdecl__)) log1p(double);
  extern float __attribute__((__cdecl__)) log1pf(float);
  extern long double __attribute__((__cdecl__)) log1pl(long double);


  extern double __attribute__((__cdecl__)) log2 (double);
  extern float __attribute__((__cdecl__)) log2f (float);
  extern long double __attribute__((__cdecl__)) log2l (long double);


  extern double __attribute__((__cdecl__)) logb (double);
  extern float __attribute__((__cdecl__)) logbf (float);
  extern long double __attribute__((__cdecl__)) logbl (long double);
# 863 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  extern float __attribute__((__cdecl__)) modff (float, float*);
  extern long double __attribute__((__cdecl__)) modfl (long double, long double*);


  extern double __attribute__((__cdecl__)) scalbn (double, int);
  extern float __attribute__((__cdecl__)) scalbnf (float, int);
  extern long double __attribute__((__cdecl__)) scalbnl (long double, int);

  extern double __attribute__((__cdecl__)) scalbln (double, long);
  extern float __attribute__((__cdecl__)) scalblnf (float, long);
  extern long double __attribute__((__cdecl__)) scalblnl (long double, long);



  extern double __attribute__((__cdecl__)) cbrt (double);
  extern float __attribute__((__cdecl__)) cbrtf (float);
  extern long double __attribute__((__cdecl__)) cbrtl (long double);


  extern double __attribute__((__cdecl__)) hypot (double, double) ;
  extern float __attribute__((__cdecl__)) hypotf (float x, float y);



  extern long double __attribute__((__cdecl__)) hypotl (long double, long double);


  extern float __attribute__((__cdecl__)) powf(float _X,float _Y);



  extern long double __attribute__((__cdecl__)) powl (long double, long double);


  extern float __attribute__((__cdecl__)) sqrtf (float);
  extern long double sqrtl(long double);


  extern double __attribute__((__cdecl__)) erf (double);
  extern float __attribute__((__cdecl__)) erff (float);
  extern long double __attribute__((__cdecl__)) erfl (long double);


  extern double __attribute__((__cdecl__)) erfc (double);
  extern float __attribute__((__cdecl__)) erfcf (float);
  extern long double __attribute__((__cdecl__)) erfcl (long double);


  extern double __attribute__((__cdecl__)) lgamma (double);
  extern float __attribute__((__cdecl__)) lgammaf (float);
  extern long double __attribute__((__cdecl__)) lgammal (long double);

  extern int signgam;


  extern double __attribute__((__cdecl__)) tgamma (double);
  extern float __attribute__((__cdecl__)) tgammaf (float);
  extern long double __attribute__((__cdecl__)) tgammal (long double);


  extern float __attribute__((__cdecl__)) ceilf (float);
  extern long double __attribute__((__cdecl__)) ceill (long double);


  extern float __attribute__((__cdecl__)) floorf (float);
  extern long double __attribute__((__cdecl__)) floorl (long double);


  extern double __attribute__((__cdecl__)) nearbyint ( double);
  extern float __attribute__((__cdecl__)) nearbyintf (float);
  extern long double __attribute__((__cdecl__)) nearbyintl (long double);



extern double __attribute__((__cdecl__)) rint (double);
extern float __attribute__((__cdecl__)) rintf (float);
extern long double __attribute__((__cdecl__)) rintl (long double);


extern long __attribute__((__cdecl__)) lrint (double);
extern long __attribute__((__cdecl__)) lrintf (float);
extern long __attribute__((__cdecl__)) lrintl (long double);

__extension__ long long __attribute__((__cdecl__)) llrint (double);
__extension__ long long __attribute__((__cdecl__)) llrintf (float);
__extension__ long long __attribute__((__cdecl__)) llrintl (long double);
# 1030 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  extern double __attribute__((__cdecl__)) round (double);
  extern float __attribute__((__cdecl__)) roundf (float);
  extern long double __attribute__((__cdecl__)) roundl (long double);


  extern long __attribute__((__cdecl__)) lround (double);
  extern long __attribute__((__cdecl__)) lroundf (float);
  extern long __attribute__((__cdecl__)) lroundl (long double);
  __extension__ long long __attribute__((__cdecl__)) llround (double);
  __extension__ long long __attribute__((__cdecl__)) llroundf (float);
  __extension__ long long __attribute__((__cdecl__)) llroundl (long double);



  extern double __attribute__((__cdecl__)) trunc (double);
  extern float __attribute__((__cdecl__)) truncf (float);
  extern long double __attribute__((__cdecl__)) truncl (long double);


  extern float __attribute__((__cdecl__)) fmodf (float, float);
  extern long double __attribute__((__cdecl__)) fmodl (long double, long double);


  extern double __attribute__((__cdecl__)) remainder (double, double);
  extern float __attribute__((__cdecl__)) remainderf (float, float);
  extern long double __attribute__((__cdecl__)) remainderl (long double, long double);


  extern double __attribute__((__cdecl__)) remquo(double, double, int *);
  extern float __attribute__((__cdecl__)) remquof(float, float, int *);
  extern long double __attribute__((__cdecl__)) remquol(long double, long double, int *);


  extern double __attribute__((__cdecl__)) copysign (double, double);
  extern float __attribute__((__cdecl__)) copysignf (float, float);
  extern long double __attribute__((__cdecl__)) copysignl (long double, long double);
# 1087 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  extern double __attribute__((__cdecl__)) nan(const char *tagp);
  extern float __attribute__((__cdecl__)) nanf(const char *tagp);
  extern long double __attribute__((__cdecl__)) nanl(const char *tagp);
# 1098 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
  extern double __attribute__((__cdecl__)) nextafter (double, double);
  extern float __attribute__((__cdecl__)) nextafterf (float, float);
  extern long double __attribute__((__cdecl__)) nextafterl (long double, long double);


  extern double __attribute__((__cdecl__)) nexttoward (double, long double);
  extern float __attribute__((__cdecl__)) nexttowardf (float, long double);
  extern long double __attribute__((__cdecl__)) nexttowardl (long double, long double);



  extern double __attribute__((__cdecl__)) fdim (double x, double y);
  extern float __attribute__((__cdecl__)) fdimf (float x, float y);
  extern long double __attribute__((__cdecl__)) fdiml (long double x, long double y);







  extern double __attribute__((__cdecl__)) fmax (double, double);
  extern float __attribute__((__cdecl__)) fmaxf (float, float);
  extern long double __attribute__((__cdecl__)) fmaxl (long double, long double);


  extern double __attribute__((__cdecl__)) fmin (double, double);
  extern float __attribute__((__cdecl__)) fminf (float, float);
  extern long double __attribute__((__cdecl__)) fminl (long double, long double);



  extern double __attribute__((__cdecl__)) fma (double, double, double);
  extern float __attribute__((__cdecl__)) fmaf (float, float, float);
  extern long double __attribute__((__cdecl__)) fmal (long double, long double, long double);
# 1181 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _copysignf (float _Number,float _Sign);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _chgsignf (float _X);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _logbf(float _X);
   __attribute__ ((__dllimport__)) float __attribute__((__cdecl__)) _nextafterf(float _X,float _Y);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _finitef(float _X);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _isnanf(float _X);
   __attribute__ ((__dllimport__)) int __attribute__((__cdecl__)) _fpclassf(float _X);



   extern long double __attribute__((__cdecl__)) _chgsignl (long double);
# 1576 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\x86_64-w64-mingw32\\include\\math.h" 3
}




#pragma pack(pop)
# 46 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\cmath" 2 3
# 77 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\cmath" 3
extern "C++"
{
namespace std
{



  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }



  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    abs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::acos;


  inline constexpr float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline constexpr long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline constexpr float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline constexpr long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline constexpr float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline constexpr long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline constexpr float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline constexpr long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline constexpr float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline constexpr long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline constexpr float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline constexpr long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline constexpr float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline constexpr long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline constexpr float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline constexpr long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline constexpr float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline constexpr float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline constexpr long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline constexpr float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline constexpr long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline constexpr float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline constexpr long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline constexpr float
  log(float __x)
  { return __builtin_logf(__x); }

  inline constexpr long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline constexpr float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline constexpr long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline constexpr float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline constexpr long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 435 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\cmath" 3
  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline constexpr float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline constexpr long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline constexpr float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline constexpr long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline constexpr float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline constexpr long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline constexpr float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline constexpr long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline constexpr float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline constexpr long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }


}
# 559 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\cmath" 3
namespace std
{





  constexpr int
  fpclassify(float __x)
  { return __builtin_fpclassify(0x0100, (0x0100 | 0x0400), 0x0400,
    (0x0400 | 0x4000), 0x4000, __x); }

  constexpr int
  fpclassify(double __x)
  { return __builtin_fpclassify(0x0100, (0x0100 | 0x0400), 0x0400,
    (0x0400 | 0x4000), 0x4000, __x); }

  constexpr int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0x0100, (0x0100 | 0x0400), 0x0400,
    (0x0400 | 0x4000), 0x4000, __x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 0x0400 : 0x4000; }


  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isfinite(_Tp __x)
    { return true; }


  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }





  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }


  constexpr bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isinf(_Tp __x)
    { return false; }


  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }





  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }


  constexpr bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnan(_Tp __x)
    { return false; }


  constexpr bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }



  constexpr bool
  signbit(float __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(long double __x)
  { return __builtin_signbit(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }


  constexpr bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }


  constexpr bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }


  constexpr bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }


  constexpr bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }


  constexpr bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }


  constexpr bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 957 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\cmath" 3
}
# 1072 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\cmath" 3
namespace std
{



  using ::double_t;
  using ::float_t;


  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;

  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;

  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;



  constexpr float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  constexpr long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    acosh(_Tp __x)
    { return __builtin_acosh(__x); }


  constexpr float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  constexpr long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    asinh(_Tp __x)
    { return __builtin_asinh(__x); }


  constexpr float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  constexpr long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    atanh(_Tp __x)
    { return __builtin_atanh(__x); }


  constexpr float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  constexpr long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    cbrt(_Tp __x)
    { return __builtin_cbrt(__x); }


  constexpr float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  constexpr long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }


  constexpr float
  erf(float __x)
  { return __builtin_erff(__x); }

  constexpr long double
  erf(long double __x)
  { return __builtin_erfl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erf(_Tp __x)
    { return __builtin_erf(__x); }


  constexpr float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  constexpr long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erfc(_Tp __x)
    { return __builtin_erfc(__x); }


  constexpr float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  constexpr long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    exp2(_Tp __x)
    { return __builtin_exp2(__x); }


  constexpr float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  constexpr long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    expm1(_Tp __x)
    { return __builtin_expm1(__x); }


  constexpr float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  constexpr long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }


  constexpr float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  constexpr long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }


  template<typename _Tp, typename _Up, typename _Vp>
    constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }


  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  constexpr long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }


  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  constexpr long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }


  constexpr float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  constexpr long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }


  constexpr int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  constexpr int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }


  template<typename _Tp>
    constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    int>::__type
    ilogb(_Tp __x)
    { return __builtin_ilogb(__x); }


  constexpr float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  constexpr long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    lgamma(_Tp __x)
    { return __builtin_lgamma(__x); }


  constexpr long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  constexpr long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llrint(_Tp __x)
    { return __builtin_llrint(__x); }


  constexpr long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  constexpr long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llround(_Tp __x)
    { return __builtin_llround(__x); }


  constexpr float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  constexpr long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log1p(_Tp __x)
    { return __builtin_log1p(__x); }



  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }

  constexpr long double
  log2(long double __x)
  { return __builtin_log2l(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log2(_Tp __x)
    { return __builtin_log2(__x); }


  constexpr float
  logb(float __x)
  { return __builtin_logbf(__x); }

  constexpr long double
  logb(long double __x)
  { return __builtin_logbl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    logb(_Tp __x)
    { return __builtin_logb(__x); }


  constexpr long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  constexpr long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lrint(_Tp __x)
    { return __builtin_lrint(__x); }


  constexpr long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  constexpr long
  lround(long double __x)
  { return __builtin_lroundl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lround(_Tp __x)
    { return __builtin_lround(__x); }


  constexpr float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  constexpr long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nearbyint(_Tp __x)
    { return __builtin_nearbyint(__x); }


  constexpr float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  constexpr long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }


  constexpr float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  constexpr long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nexttoward(_Tp __x, long double __y)
    { return __builtin_nexttoward(__x, __y); }


  constexpr float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  constexpr long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }


  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }


  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }


  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }


  constexpr float
  rint(float __x)
  { return __builtin_rintf(__x); }

  constexpr long double
  rint(long double __x)
  { return __builtin_rintl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    rint(_Tp __x)
    { return __builtin_rint(__x); }


  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }

  constexpr long double
  round(long double __x)
  { return __builtin_roundl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    round(_Tp __x)
    { return __builtin_round(__x); }


  constexpr float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  constexpr long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbln(_Tp __x, long __ex)
    { return __builtin_scalbln(__x, __ex); }


  constexpr float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  constexpr long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbn(_Tp __x, int __ex)
    { return __builtin_scalbn(__x, __ex); }


  constexpr float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  constexpr long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    tgamma(_Tp __x)
    { return __builtin_tgamma(__x); }


  constexpr float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  constexpr long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }


  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    trunc(_Tp __x)
    { return __builtin_trunc(__x); }


}
# 1797 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\cmath" 3
}
# 37 "Z:/Vitis/2020.1/tps/mingw/6.2.0/win64.o/nt\\lib\\gcc\\x86_64-w64-mingw32\\6.2.0\\include\\c++\\math.h" 2 3

using std::abs;
using std::acos;
using std::asin;
using std::atan;
using std::atan2;
using std::cos;
using std::sin;
using std::tan;
using std::cosh;
using std::sinh;
using std::tanh;
using std::exp;
using std::frexp;
using std::ldexp;
using std::log;
using std::log10;
using std::modf;
using std::pow;
using std::sqrt;
using std::ceil;
using std::fabs;
using std::floor;
using std::fmod;


using std::fpclassify;
using std::isfinite;
using std::isinf;
using std::isnan;
using std::isnormal;
using std::signbit;
using std::isgreater;
using std::isgreaterequal;
using std::isless;
using std::islessequal;
using std::islessgreater;
using std::isunordered;



using std::acosh;
using std::asinh;
using std::atanh;
using std::cbrt;
using std::copysign;
using std::erf;
using std::erfc;
using std::exp2;
using std::expm1;
using std::fdim;
using std::fma;
using std::fmax;
using std::fmin;
using std::hypot;
using std::ilogb;
using std::lgamma;
using std::llrint;
using std::llround;
using std::log1p;
using std::log2;
using std::logb;
using std::lrint;
using std::lround;
using std::nearbyint;
using std::nextafter;
using std::nexttoward;
using std::remainder;
using std::remquo;
using std::rint;
using std::round;
using std::scalbln;
using std::scalbn;
using std::tgamma;
using std::trunc;
# 4 "lenet_proj/lenet_top.cpp" 2

# 1 "C:\\Users\\Baron\\Desktop\\EE_297_Repo\\EE_297\\ML_PATH_EE297\\EE297_env\\projects\\weights\\conv1_weights.h" 1
# 1 "C:\\Users\\Baron\\Desktop\\EE_297_Repo\\EE_297\\vivado\\lenet_proj\\lenet_top.h" 1






typedef float data_t;
# 24 "C:\\Users\\Baron\\Desktop\\EE_297_Repo\\EE_297\\vivado\\lenet_proj\\lenet_top.h"
void lenet_top(
    data_t image[28][28],
    data_t conv1_out[28][28][6],
    data_t pool1_out[28 / 2][28 / 2][6],
    data_t conv2_out[10][10][16],
    data_t pool2_out[5][5][16],
    data_t flat_out[400]);

void conv2d_layer(data_t input[28][28],
    data_t output[28][28][6],
    data_t weights[5][5][1][6],
    data_t biases[6]);


void maxpool_layer(
    data_t input[28][28][6],
    data_t output[28 / 2][28 / 2][6]);


void conv2d_6to16_layer(
    data_t input[14][14][6],
    data_t output[10][10][16],
    data_t weights[5][5][6][16],
    data_t biases[16]);

void maxpool2_layer(
    data_t input[10][10][16],
    data_t output[5][5][16]);


void flatten_layer(
    data_t input[5][5][16],
    data_t output[400]);

    template<int IN_SIZE, int OUT_SIZE>
    void fc_layer(
        data_t input[IN_SIZE],
        data_t output[OUT_SIZE],
        data_t weights[IN_SIZE][OUT_SIZE],
        data_t biases[OUT_SIZE])
    {
#pragma HLS INLINE off

 VITIS_LOOP_67_1: for (int i = 0; i < OUT_SIZE; i++) {
#pragma HLS PIPELINE II
 data_t sum = 0.0f;
            VITIS_LOOP_70_2: for (int j = 0; j < IN_SIZE; j++) {
                sum += input[j] * weights[j][i];
            }
            sum += biases[i];
            output[i] = (sum > 0.0f) ? sum : 0.0f;
        }
    }
# 2 "C:\\Users\\Baron\\Desktop\\EE_297_Repo\\EE_297\\ML_PATH_EE297\\EE297_env\\projects\\weights\\conv1_weights.h" 2

float conv1_weights[5][5][1][6] = {
  {
    {0.12200646, -0.12962191, 0.00446374, -0.05272564, 0.02541041, -0.11957397},
    {0.12538709, -0.05198326, 0.17534146, -0.11322948, -0.06552928, -0.21040943},
    {0.06022794, -0.30437219, 0.02504834, -0.21327373, -0.09350522, -0.20174439},
    {0.22349612, -0.07532052, -0.12331862, -0.21128267, -0.27094373, 0.17115575},
    {-0.10121885, -0.09208677, 0.11034375, -0.12969805, -0.01886135, 0.22712488},
  },
  {
    {0.20312299, 0.00944286, -0.12521012, 0.22326846, -0.08388168, -0.03828992},
    {0.11558073, -0.23649143, -0.10335547, 0.30390316, 0.15323384, -0.14793807},
    {0.23758826, -0.37154609, -0.18570727, 0.01810176, -0.17070118, -0.12950550},
    {0.19498660, -0.30128145, -0.17844857, 0.06607332, -0.09377374, 0.15459146},
    {-0.10261221, -0.15234934, 0.23814319, -0.04173400, 0.15174174, 0.23890360},
  },
  {
    {0.30719471, 0.00298995, -0.01327125, -0.00674208, -0.20314866, -0.05484628},
    {0.18512043, 0.05589492, 0.04097585, 0.30606109, 0.09911004, -0.28033540},
    {-0.07907174, -0.00577387, 0.25597686, 0.26068911, 0.22652771, -0.10409370},
    {-0.15157497, -0.00097088, -0.08089782, 0.11440235, 0.26325935, -0.00563194},
    {-0.02321465, -0.11712021, -0.03368996, -0.00592728, 0.19319652, 0.25847721},
  },
  {
    {0.06768461, 0.12742479, 0.26171747, -0.19615364, 0.27022576, -0.25594699},
    {0.18295492, 0.08336022, 0.01772774, 0.09157787, 0.11800817, -0.07570107},
    {-0.01649237, 0.24688892, 0.16191253, 0.24335855, -0.00008962, 0.03003176},
    {-0.25371405, 0.15927659, 0.07149471, 0.04949687, 0.17532845, 0.09930151},
    {-0.32149202, 0.26161712, 0.03669089, 0.02774863, 0.13638505, 0.26507068},
  },
  {
    {-0.03517547, 0.24687260, -0.29447052, -0.31123206, 0.21756355, -0.25287277},
    {0.02067065, 0.00229427, -0.01402233, -0.27909011, -0.10971610, -0.05978798},
    {-0.07925104, 0.19801685, -0.13260397, -0.16955079, 0.09824246, 0.10124384},
    {0.02897901, 0.20778713, 0.14090206, 0.08506897, -0.09695294, 0.20983364},
    {-0.18998986, 0.15214144, -0.11521839, 0.00033197, 0.03291373, 0.05296062},
  },
};
# 6 "lenet_proj/lenet_top.cpp" 2
# 1 "C:\\Users\\Baron\\Desktop\\EE_297_Repo\\EE_297\\ML_PATH_EE297\\EE297_env\\projects\\weights\\conv1_biases.h" 1


float conv1_biases[6] = {0.00032225, 0.07539661, -0.00812753, -0.04304697, -0.00291208, 0.02110537};
# 7 "lenet_proj/lenet_top.cpp" 2

# 1 "C:\\Users\\Baron\\Desktop\\EE_297_Repo\\EE_297\\ML_PATH_EE297\\EE297_env\\projects\\weights\\conv2_weights.h" 1


float conv2_weights[5][5][6][16] = {
  {
    {
      {-0.04512054, 0.01390678, -0.04866536, -0.16138354, -0.06776991, -0.05884950, -0.28432700, -0.03118055, -0.06359035, -0.05526923, -0.08453511, -0.05965567, 0.06505512, -0.16650330, 0.00114259, -0.00213760},
      {-0.05069956, 0.02342439, 0.08257704, 0.10185416, -0.16521646, 0.02465042, 0.11622307, -0.05808738, 0.04338986, 0.01530122, -0.09548016, 0.03702683, 0.05238902, -0.01806393, 0.00047256, 0.06985576},
      {-0.05269688, -0.01116972, -0.11921570, -0.01199849, -0.14362963, -0.07435215, -0.13310410, -0.07066014, 0.01008101, 0.05886976, -0.22005689, -0.00317509, 0.02373881, 0.06153075, -0.00173526, 0.04132660},
      {-0.12378276, 0.02909679, 0.09667223, 0.02194356, -0.20083834, -0.17670466, -0.08094849, 0.06205998, 0.23889819, 0.11588740, 0.00042807, 0.09615888, 0.03983331, -0.19862328, -0.01846073, -0.12093721},
      {-0.13793123, 0.02425192, 0.03903540, 0.12880257, -0.07403754, -0.09759030, -0.10715770, 0.00821169, 0.04063306, 0.09789202, -0.08787413, 0.07966641, -0.07727201, 0.08523513, 0.03375731, 0.07715292},
      {0.16871797, 0.01955989, -0.12082650, 0.02373744, -0.04933874, 0.05251673, 0.15018339, -0.19378567, -0.21471636, 0.09328434, -0.18881784, 0.07666481, 0.07885330, 0.09635700, 0.01767507, -0.06731496},
    },
    {
      {0.07298034, -0.07759443, -0.16544579, -0.02245275, 0.11565432, 0.04478409, -0.05890560, -0.05999137, -0.17228451, 0.14090031, -0.07084796, -0.12974742, -0.06574173, 0.04792650, -0.00695777, -0.19832851},
      {-0.07276835, -0.05605398, -0.07809473, 0.04781951, 0.01057845, -0.00440077, -0.02357810, 0.10024466, 0.00177538, 0.06859421, 0.13398568, -0.06452474, -0.04368243, 0.06129336, 0.06846668, 0.01719790},
      {0.10543948, 0.13888159, -0.10913350, 0.10270767, 0.02594438, -0.09938002, 0.08695354, 0.07592370, -0.08444271, 0.04837245, 0.00419474, 0.11312813, -0.07126298, -0.08139785, -0.01947560, -0.04126819},
      {0.12482812, -0.24496782, 0.01585380, 0.00611414, -0.22829747, -0.15702957, 0.11295801, 0.14824039, 0.08100654, 0.12838022, 0.16621390, -0.00878043, 0.03876320, -0.08800834, 0.13884534, -0.04771743},
      {0.00129236, 0.10660489, -0.04030618, 0.11193907, -0.09264482, -0.10855720, 0.00009559, 0.08825019, 0.02714089, -0.01740741, 0.01159318, 0.06228897, 0.02160565, -0.00506635, 0.06766995, -0.05481206},
      {0.16274622, 0.14927839, -0.02300235, -0.09600396, -0.07697030, 0.06356603, 0.09531773, 0.01371329, 0.00063787, 0.00013890, 0.03139801, 0.12769973, -0.19656686, 0.01455686, 0.03833272, -0.05356897},
    },
    {
      {-0.06588734, 0.01180764, 0.07878735, 0.09708012, -0.11882639, 0.01000543, -0.01209100, -0.14516219, -0.06283437, 0.17471133, -0.16601734, 0.07105308, 0.08752311, -0.05198773, 0.05781116, 0.03199891},
      {-0.09018459, -0.09299175, -0.06417510, 0.11628512, 0.02487439, -0.02670939, 0.20461266, -0.04521113, -0.07994324, -0.02692287, 0.08668122, -0.11383806, -0.09544126, 0.08077411, 0.07693611, -0.05980473},
      {-0.09487870, -0.10333849, 0.11113402, -0.00787344, -0.09133165, -0.08656611, -0.13488929, 0.02196029, 0.07694109, 0.03602691, 0.06522436, -0.00462401, 0.00283560, -0.11446690, 0.03342981, 0.08188019},
      {0.00252581, -0.14421321, -0.07839323, 0.19688772, -0.28584895, -0.26457641, 0.02403331, -0.02960262, -0.11576253, -0.01250502, 0.01519540, -0.08804774, 0.22821893, -0.30142930, -0.02273095, 0.01995752},
      {-0.15415289, 0.13753897, 0.10437746, 0.12420113, -0.02866230, -0.00786666, -0.08018783, 0.06332993, -0.06750298, 0.10937589, -0.03581437, 0.04522835, -0.17051138, -0.02012757, -0.00490817, 0.00723780},
      {0.04266598, -0.01014938, 0.05662605, -0.11051781, 0.12734619, 0.07485227, -0.12919149, -0.01466582, 0.17116505, 0.17254426, 0.16047774, 0.07965332, -0.03099689, -0.09772085, 0.06785483, -0.09946704},
    },
    {
      {-0.10057879, 0.10594388, 0.01572383, 0.06124239, -0.16160679, -0.02904064, -0.07833438, 0.02081277, -0.01577082, 0.16343252, -0.04072309, 0.06369985, -0.14329252, -0.05037142, -0.02997102, 0.08748660},
      {-0.03480446, -0.07336241, -0.08995061, 0.17141871, 0.13546591, -0.19533606, 0.18810882, 0.01609372, -0.19419704, -0.01024849, -0.08844440, -0.00526259, 0.15104643, 0.07586554, 0.13498004, 0.04772475},
      {0.04217190, 0.09866403, -0.07102471, 0.03516224, -0.04255312, 0.07180308, -0.06222350, 0.13201508, -0.04188756, 0.07263878, -0.02309376, -0.11632022, -0.05145923, -0.06606802, 0.05707360, -0.07236514},
      {-0.00537125, -0.16151799, -0.27701953, 0.32665581, -0.38485840, -0.13919660, 0.04777887, 0.08277132, -0.05568803, -0.05547152, -0.06928798, -0.26029712, 0.09887700, -0.03821487, -0.18521549, -0.26498315},
      {-0.06671797, 0.10461128, 0.04170032, 0.13157935, -0.03794010, -0.06601878, -0.16696751, 0.09949019, -0.06684592, 0.05675784, -0.01979380, 0.17483763, -0.02427720, -0.14565521, -0.02672887, 0.00786769},
      {0.06642577, -0.19122916, 0.14975365, -0.23242517, -0.09105241, 0.25364023, -0.19467124, -0.06960732, 0.03389878, 0.13125019, 0.13825251, -0.14356545, -0.04132504, 0.11219375, 0.12770796, 0.00412244},
    },
    {
      {0.05361994, 0.02958115, 0.16400142, 0.16331725, -0.12856877, -0.00253487, -0.02917912, 0.01398456, 0.08658572, 0.17394666, 0.04016482, 0.00075319, -0.14996666, 0.01814587, 0.09619347, -0.14318153},
      {-0.19864331, 0.05330953, -0.17326115, 0.07535962, 0.14523005, 0.07651749, 0.04522040, -0.00301526, 0.04511041, 0.05392352, -0.01955581, 0.13231476, 0.05841159, -0.01239961, 0.20190641, 0.13581079},
      {0.06458829, 0.09411576, 0.03211577, 0.00524372, -0.03256286, -0.00679217, 0.01048785, 0.04422905, -0.19201705, 0.07598358, -0.10738000, 0.11576390, 0.09724814, -0.02451602, 0.00717963, -0.08145253},
      {0.09451081, 0.05292496, -0.22707291, 0.21458851, -0.06012719, 0.22660303, 0.03487734, 0.05087326, -0.19452485, -0.01128522, -0.01429050, 0.00469302, 0.07184616, -0.00020913, -0.16157278, 0.00481415},
      {-0.02808795, 0.01943013, -0.06527577, -0.08528347, -0.07041426, -0.06921978, -0.09036903, 0.07438651, -0.02545142, 0.02126953, -0.02045329, 0.18864328, 0.07758102, -0.12359680, 0.12038938, 0.07695086},
      {-0.00136346, -0.03451683, -0.05385302, -0.21040557, 0.05402968, 0.01715489, -0.12154333, 0.06000061, -0.02422454, 0.09688014, 0.02542852, 0.05127198, 0.02977603, -0.03917244, 0.05032273, 0.07615522},
    },
  },
  {
    {
      {-0.15837713, -0.09989240, 0.12849735, -0.01505828, 0.03417109, 0.01126243, -0.14962578, 0.10255962, -0.03102934, 0.13392173, -0.16613278, -0.02354374, -0.01249383, -0.13659275, -0.00879310, -0.11511206},
      {0.07286763, 0.12401690, -0.02831346, -0.15885758, 0.06993312, 0.04209544, 0.13414232, -0.05929563, 0.06451923, -0.08577363, 0.03954502, -0.11425392, -0.09571876, -0.14238612, -0.07331750, -0.11737340},
      {-0.02704770, -0.04276151, -0.21117930, -0.03973336, -0.11979102, -0.03743066, 0.07201659, -0.09244030, 0.13387120, 0.02566193, -0.04928914, -0.00093646, -0.07702568, -0.00151650, -0.04105195, 0.12546444},
      {-0.09572417, 0.13149312, 0.04631349, 0.04770225, -0.20365252, -0.08283846, 0.27340215, -0.16016544, 0.14938398, -0.10230369, 0.02383703, 0.01031487, 0.09873883, -0.10553892, 0.19024353, 0.18989411},
      {0.01940107, -0.03767921, -0.06032513, 0.05053175, 0.08713955, 0.06333686, -0.04159569, -0.03858491, -0.06407582, -0.00995577, 0.00228986, -0.03480392, -0.08974386, -0.04043157, 0.10282861, -0.00700926},
      {0.10413654, -0.10004570, -0.01535306, -0.14010808, 0.04558235, -0.06155683, 0.09482247, 0.02375219, 0.04767268, 0.17072885, -0.02543162, 0.01523578, -0.20885696, 0.20647651, -0.10456105, -0.10482685},
    },
    {
      {0.00837689, -0.10965740, -0.16466016, 0.07461406, 0.00474801, 0.04827827, 0.05171911, 0.05037471, -0.05406396, 0.13230367, -0.04683332, -0.14221202, -0.08253738, -0.01549642, 0.07731562, -0.10617999},
      {0.11002367, -0.09402000, -0.10358127, -0.29995215, 0.18174665, 0.06573507, 0.00298218, -0.05610659, 0.10320491, 0.01126249, 0.20711121, -0.19542737, 0.08129704, 0.02682863, -0.03557346, -0.05385536},
      {0.07881979, 0.14908627, 0.00678872, 0.03439374, 0.03847565, -0.08978383, 0.08274061, -0.06920799, -0.06258126, -0.06945659, 0.15336108, 0.03232438, -0.04479523, 0.10397167, 0.13116449, 0.09482946},
      {0.31009766, -0.06446924, -0.08297176, 0.18876511, -0.10762548, -0.28832778, 0.08867320, 0.04225269, 0.03557371, -0.22398356, 0.05410902, 0.06508095, -0.06751207, 0.12421158, 0.15372500, -0.06035591},
      {0.00239021, 0.04196440, -0.13837108, 0.09257803, 0.14196955, 0.02571948, 0.05003607, 0.00703495, 0.01612194, 0.06377298, 0.07700349, 0.04057890, -0.01446713, 0.06513031, 0.14884442, -0.01213006},
      {-0.05238301, 0.04699274, 0.18889552, -0.18398935, 0.07103406, 0.02153130, 0.09472714, -0.12183152, 0.01419075, 0.19089216, 0.04802924, 0.10940892, -0.01052494, -0.13548255, -0.00788340, 0.10359430},
    },
    {
      {-0.02945822, 0.11494001, 0.10630656, 0.11593216, -0.15096150, 0.03293765, -0.06145899, -0.00425372, -0.13216913, 0.05514995, 0.08338030, -0.02265231, -0.12242490, -0.05133057, 0.09989705, 0.16768831},
      {0.02289476, -0.13512361, -0.09095467, -0.20032154, 0.10553302, 0.01466248, 0.01196920, 0.01086622, -0.08553264, -0.24437381, 0.03105954, -0.20665982, 0.12765098, 0.07356021, 0.08362459, -0.03150943},
      {-0.01750645, 0.01950788, 0.01173055, 0.11175261, 0.11954278, 0.06722317, -0.09392443, 0.03803926, 0.09179384, -0.00493275, 0.03100298, 0.04766008, -0.00972149, 0.01431429, 0.17255886, 0.05599113},
      {0.20124643, 0.01447335, -0.19366451, 0.18926348, 0.10547110, 0.09256737, -0.11788364, 0.16819578, -0.30056074, -0.00062712, -0.01444258, 0.05849849, -0.20232973, -0.11699951, 0.12361904, -0.18845385},
      {-0.06135856, 0.03038837, 0.08811767, -0.07612327, 0.16616458, 0.02419912, 0.09542924, 0.11376200, 0.13169186, -0.17865151, 0.09205797, 0.06474783, 0.14941439, -0.02883682, 0.12930907, 0.05445025},
      {-0.01155826, 0.01477142, 0.22692958, -0.02110628, 0.06537591, 0.03284290, 0.00379158, -0.09537652, 0.12150311, 0.03764685, 0.16195148, 0.00558138, 0.14242296, -0.18795557, 0.07135183, 0.13198057},
    },
    {
      {-0.18283926, 0.07274111, 0.12174331, -0.05531452, -0.10711772, -0.15283935, 0.05096174, 0.00030406, 0.03793200, 0.14753743, -0.01874839, 0.09326451, -0.02823840, -0.13984837, 0.03677524, 0.15551609},
      {-0.05488459, 0.09977759, -0.25716648, -0.01128984, 0.11837138, -0.11064470, 0.02197256, -0.00060674, -0.13474523, -0.34097955, 0.04951881, -0.05725645, 0.09074523, 0.20081973, 0.15147701, 0.04063227},
      {0.03489608, 0.09291881, -0.08617153, -0.06637552, 0.21503577, 0.03351043, 0.08639882, 0.18013731, -0.04907152, -0.10751051, 0.05470546, 0.16361889, 0.07256871, -0.04572191, 0.11790706, -0.12260171},
      {-0.15372467, 0.05331407, -0.38037118, 0.05552575, 0.17881794, -0.04082434, 0.18486717, 0.30507916, -0.07682361, -0.05064062, -0.07304858, -0.04974597, -0.10088535, -0.00746362, 0.12433081, -0.24098156},
      {0.00004636, 0.12485761, -0.12460211, 0.00687707, 0.12796837, -0.15839237, 0.02518521, -0.01913720, -0.07495861, -0.22767776, 0.08905027, 0.16273686, 0.04983425, 0.07135894, 0.19031955, 0.07255348},
      {0.15273428, -0.25305045, 0.09773042, -0.04185019, -0.11392748, 0.03758421, -0.28895831, -0.06724652, -0.02609923, -0.06604418, -0.07951831, -0.22337264, 0.04137805, -0.02130137, 0.12528417, 0.00911002},
    },
    {
      {-0.08795594, 0.04688738, 0.13615017, -0.05873275, -0.08471015, -0.01563020, -0.11606918, -0.06658266, 0.02943895, 0.06778623, 0.10405955, -0.06667235, 0.05964246, -0.10839210, 0.17440325, 0.11868154},
      {-0.22151347, -0.01777335, 0.05560353, -0.05220652, 0.03999842, -0.16655035, 0.07537020, -0.08513007, -0.03465451, -0.10165370, -0.03773289, -0.09645514, -0.02265414, 0.10753496, 0.00758823, -0.12598351},
      {-0.06936712, 0.07198501, -0.04030534, -0.08014402, 0.09820221, -0.08143847, 0.02099757, 0.00163503, -0.01969075, -0.10112138, -0.09538595, 0.00293836, 0.06740631, 0.04203251, 0.17359482, -0.18231943},
      {0.15963045, 0.10538708, -0.11248347, -0.01354207, 0.20626332, 0.29448768, 0.27182046, 0.20347363, -0.17824119, -0.10806088, -0.07415064, 0.04472101, -0.01731292, 0.01117099, 0.14166650, 0.07283694},
      {-0.16771734, 0.01186199, 0.01376496, 0.01556783, -0.06826223, -0.05250175, 0.05445956, -0.01966470, -0.06585369, -0.07951858, -0.06992452, 0.01037441, 0.19009650, 0.10513834, 0.08096983, -0.11741078},
      {0.18169148, -0.12684087, -0.08059611, -0.12323841, -0.13309373, -0.00963830, -0.11937202, -0.08245269, 0.04084466, -0.06912465, 0.00248300, 0.06687215, -0.11675610, -0.17924395, -0.03304780, -0.16918100},
    },
  },
  {
    {
      {-0.06961440, -0.02955869, 0.03349559, -0.12313495, 0.06056650, -0.01387839, -0.09226383, -0.02207187, -0.11556920, 0.03825516, -0.05417351, 0.02850313, -0.15257460, 0.08435699, -0.01770274, -0.03698368},
      {0.01646646, 0.01156076, 0.08044017, 0.05925808, -0.05432272, -0.06424793, -0.10024247, -0.03582628, -0.00274540, 0.06409377, 0.17075557, -0.09265500, -0.01057061, -0.21006943, -0.12936468, 0.00917260},
      {0.08765537, 0.15784521, 0.01386174, -0.14019665, -0.04012275, 0.02343282, -0.00390517, 0.05936676, -0.00864696, 0.10524508, 0.19452444, 0.08562874, -0.05920956, -0.07912835, -0.02939563, -0.02853259},
      {-0.10486994, 0.04046914, -0.00683454, -0.28882629, 0.03546277, 0.13098203, 0.10253127, -0.19743454, 0.01619731, -0.15070331, 0.03133802, 0.02909714, -0.17386200, 0.07835957, 0.16440839, 0.17073867},
      {0.07834745, 0.00851723, -0.07062592, -0.17428486, -0.03467967, 0.11725905, -0.04838901, 0.12288053, 0.07760417, 0.08348652, -0.00635466, -0.03645786, -0.03375510, -0.03024755, -0.13534661, -0.05751314},
      {-0.17195815, -0.06696168, 0.00521897, 0.05818146, 0.03569286, 0.05849132, 0.09145899, -0.01575747, 0.13591796, 0.16152601, 0.09077401, -0.16783114, 0.12586245, 0.16498014, -0.15046677, 0.02589934},
    },
    {
      {-0.04554130, 0.10254307, -0.24681307, -0.12317777, 0.12250558, -0.09309073, -0.06913872, 0.05013864, 0.04306773, -0.01663796, -0.05388799, -0.15610836, -0.16676372, 0.02147212, 0.07504705, 0.00742612},
      {-0.03835301, 0.06776350, -0.11579078, 0.05805051, -0.02843017, 0.00701508, -0.21813522, -0.04671691, 0.02028483, -0.05314587, -0.12736247, -0.26775122, 0.18263189, -0.23892678, -0.13180003, -0.03178573},
      {-0.07558656, 0.07075842, 0.01445001, -0.00356351, 0.05024482, 0.15024798, 0.09064399, 0.10497271, -0.07840443, 0.00910729, 0.09282711, -0.01188816, -0.05776842, 0.08033458, 0.01606201, 0.06685588},
      {0.03347199, 0.22529785, -0.12779231, -0.06607419, 0.16148300, 0.18140338, -0.15164334, -0.04716783, -0.15913929, -0.18323202, -0.26053751, 0.03106893, -0.18249916, 0.11050182, 0.22805819, -0.06347042},
      {-0.07298582, 0.05904542, 0.10714417, -0.02094636, 0.00346398, 0.07521968, 0.07872996, -0.04272439, 0.07158431, 0.02400156, 0.12810935, 0.09487626, 0.14694519, 0.14030750, -0.07911327, 0.10749330},
      {-0.04437824, -0.03776236, 0.14906205, 0.01586100, -0.12275841, -0.01609859, 0.08312027, -0.10369401, 0.00872221, -0.06439436, -0.02103958, 0.20003903, 0.13103834, -0.09797562, -0.20459151, 0.15123799},
    },
    {
      {-0.08784879, 0.00322363, 0.05644256, -0.10498575, 0.08043358, -0.11735289, 0.13906109, 0.02529192, 0.07564588, -0.03685999, 0.16111058, -0.11866939, -0.03431603, 0.03988938, -0.05375338, 0.20691295},
      {-0.03713694, 0.03169452, -0.19156085, -0.07554036, -0.19698547, 0.18081914, -0.05490085, -0.08428892, -0.15971634, -0.20874803, -0.07589563, -0.14612558, 0.04513903, -0.05322467, -0.10490046, -0.16473623},
      {0.03985419, 0.05948898, -0.01627216, 0.00565242, 0.07549348, 0.04353653, -0.08634888, 0.12176202, 0.12385489, -0.19680141, -0.13729136, 0.16210066, 0.06603707, 0.13610129, 0.00037728, 0.09376172},
      {0.07011981, 0.16266571, -0.35298431, 0.00557554, 0.30721298, 0.19330524, -0.25160486, 0.05120452, -0.05244818, -0.26999444, -0.00531049, 0.23059645, -0.13549775, 0.29650399, 0.33888382, -0.14419861},
      {0.00304127, -0.02585696, 0.05336533, 0.10526446, 0.01812035, 0.07823562, 0.02941834, 0.05649352, 0.08394708, -0.41252434, 0.00425285, -0.01382954, 0.09522371, 0.19377036, -0.10706557, 0.07041293},
      {-0.04618796, -0.08190136, 0.23458385, 0.03145698, -0.10351954, -0.14243199, -0.04202554, -0.19582433, 0.13241546, -0.19019805, -0.07931916, -0.03347769, -0.11555564, -0.10905996, -0.08549695, 0.16692968},
    },
    {
      {-0.00622884, -0.01247274, 0.07725096, 0.00923752, 0.03308189, -0.21359630, 0.05912405, 0.05115855, 0.04159376, -0.19762494, 0.07246073, 0.06636898, 0.11800105, 0.14532034, 0.05204392, 0.12556291},
      {0.03265856, -0.00610494, -0.18866736, -0.11534003, -0.11503604, 0.19025722, -0.08229800, -0.11308080, -0.19028161, 0.10920985, -0.12187058, 0.08844503, -0.09730115, 0.11274821, -0.36112803, -0.31485745},
      {-0.05938061, 0.21902603, 0.01310264, -0.10298049, 0.13277981, 0.06519143, 0.07470091, 0.12121671, -0.05019243, -0.13813818, -0.06554487, 0.16428742, 0.13272423, 0.08795964, -0.00979944, -0.03964145},
      {-0.02689128, 0.17372318, -0.14007531, -0.11294500, 0.24564897, 0.27622455, 0.08192166, 0.23337340, -0.12612474, -0.47485200, 0.16766796, 0.29137030, 0.05374222, 0.14282937, 0.21912622, -0.21293642},
      {0.08090178, 0.17375822, -0.10374301, -0.04439496, 0.04578618, -0.04859728, 0.07540272, 0.05054823, 0.08766679, -0.17504171, -0.17698976, 0.09240705, 0.15528876, 0.06918550, -0.21956764, -0.12466609},
      {0.04171364, -0.21724543, 0.03955786, -0.07269933, -0.16144291, -0.04462705, -0.24190970, -0.11375172, 0.10832950, 0.01532103, 0.10400591, -0.25709891, -0.07828365, -0.09604878, -0.14854348, -0.10709222},
    },
    {
      {-0.09506951, 0.11587732, 0.12024574, -0.05566846, -0.08951038, -0.15724152, -0.09544411, -0.02191044, 0.06864532, -0.21863282, -0.03089692, 0.12998547, 0.08675563, -0.07689048, 0.18331690, 0.07240026},
      {-0.02329790, 0.12409836, -0.02386464, -0.17379393, -0.06075152, 0.11397026, -0.00409083, -0.04028009, 0.07175866, 0.05942607, -0.12891245, 0.09276818, -0.12197658, 0.11279247, -0.43103650, 0.01588012},
      {-0.00721769, 0.10903341, 0.02013209, 0.06096926, 0.11292715, -0.02156091, 0.05919931, 0.01643518, 0.06459111, -0.12525783, 0.08704767, 0.13648832, 0.11145683, -0.08071604, -0.04612668, -0.12770894},
      {-0.22357509, 0.17797722, 0.09850967, -0.15959002, 0.11651433, -0.04966585, 0.24714170, 0.22551036, -0.05336140, -0.27765670, -0.02507172, 0.09750653, 0.02411897, -0.02672255, -0.02834294, 0.04459437},
      {-0.06099353, -0.09003045, 0.03423884, 0.04401036, -0.08748183, 0.04491159, 0.01091572, 0.06847195, 0.12145439, -0.04636875, -0.15662536, 0.09458781, 0.01977711, 0.16267563, -0.22940797, -0.24321711},
      {0.22986977, -0.14488581, -0.14156212, 0.05957039, -0.14368112, -0.04056928, 0.08923775, -0.22582394, -0.00823790, -0.08168912, 0.11211849, -0.22001135, -0.21909966, -0.11964593, -0.07634028, 0.14282368},
    },
  },
  {
    {
      {-0.08076364, -0.00468291, 0.02355753, -0.24327332, -0.09007689, 0.08591031, -0.23766962, 0.04147079, 0.04708523, 0.14945273, -0.08550093, 0.04067249, -0.13676581, -0.10304920, -0.06990982, 0.13489577},
      {0.10436226, -0.07618882, -0.05439772, 0.07179572, -0.06204921, -0.04961034, -0.37496191, 0.01277935, 0.04482502, -0.15694325, -0.08045946, 0.12089607, 0.03244424, -0.22108230, 0.18975399, 0.10590956},
      {0.03175668, 0.06725235, -0.00547753, -0.03634794, 0.09625168, -0.08927847, 0.12092461, 0.01724259, 0.01248426, -0.11120258, 0.01240875, -0.02440582, -0.00803952, 0.02315524, -0.12751248, 0.05392409},
      {0.14054367, 0.08040651, -0.06172356, -0.06128310, 0.14014140, -0.17283565, -0.21564136, -0.08951764, -0.13849165, -0.08942646, -0.10150594, 0.08548941, -0.03910955, -0.37398425, 0.19004481, -0.07642231},
      {0.05309959, -0.08985566, -0.09460583, 0.03368970, -0.18083374, 0.12000862, 0.00534546, -0.12984435, 0.07901481, -0.07543996, 0.19196981, -0.06788387, 0.07164471, -0.25112200, -0.24261108, 0.11238967},
      {-0.14568934, -0.10467307, 0.11270387, 0.06369786, 0.02922629, -0.03837201, 0.11245578, 0.07594954, -0.02454826, -0.00482950, 0.16771469, -0.11124330, 0.12859789, 0.20542011, -0.23702472, -0.06834125},
    },
    {
      {-0.05192498, 0.01634259, -0.03993461, -0.04570546, -0.12376625, 0.04234454, -0.03171157, 0.07791927, 0.01489501, 0.05881222, 0.17893411, -0.08305721, 0.13203663, -0.02988184, -0.08015665, 0.10557471},
      {0.16258913, -0.07779616, -0.02278088, 0.02425717, 0.13364986, -0.03610120, -0.41415671, -0.11964036, -0.16149415, -0.13271670, -0.20554417, -0.14413738, -0.17393444, -0.25191888, 0.11678600, -0.15499265},
      {0.16230941, -0.08602189, -0.00361762, -0.06678858, 0.11177777, 0.10417555, 0.15404399, 0.02758191, -0.09431190, -0.19296832, -0.16802208, 0.10063010, 0.08454968, 0.02073082, -0.17626815, 0.13362689},
      {-0.11936355, 0.17293274, -0.11804541, 0.05252213, 0.13006981, 0.16752610, -0.13261205, 0.07641289, -0.04614937, -0.17016751, -0.08516839, 0.04454562, -0.01673371, -0.07522567, 0.02592267, -0.22438739},
      {0.00107002, -0.13844346, -0.00619784, 0.16447411, -0.09194477, 0.13324812, 0.00295744, -0.13458338, -0.02853858, -0.27246451, 0.07986208, -0.15393752, -0.03869947, -0.16775493, -0.19974542, 0.09154201},
      {-0.05609716, -0.22978885, 0.20179330, -0.09018138, -0.18367714, -0.04724125, 0.01824819, -0.00010852, -0.02796862, -0.23606084, -0.01342121, 0.13083667, -0.07096573, -0.01525000, -0.29483929, 0.15745361},
    },
    {
      {0.11094792, 0.02591079, -0.00841820, 0.09565400, -0.11487684, 0.10132481, 0.05082998, -0.08955699, -0.00421123, -0.14230755, -0.05058515, -0.06645310, 0.10566720, 0.03034025, -0.06938852, 0.22752003},
      {0.03997951, -0.02588035, -0.06352560, -0.00952057, 0.00940561, -0.08046572, -0.23828967, 0.05156804, -0.22543299, -0.03687411, -0.20030406, -0.17274274, -0.29412267, -0.25206199, 0.11807159, -0.31219971},
      {-0.05919776, 0.06094074, -0.06058476, 0.01176185, 0.04520607, 0.05313990, 0.13545446, 0.00160351, 0.07124732, -0.22280398, -0.07890621, -0.04450618, -0.02547487, 0.07352788, 0.00082312, -0.00356314},
      {-0.14021729, 0.07741844, -0.11813328, 0.08177625, 0.13074671, 0.39986345, -0.05988529, 0.14107369, -0.01048788, -0.44543219, -0.08602793, 0.10175589, 0.04945873, 0.02749061, -0.32095268, 0.00596337},
      {0.09810632, -0.10805977, 0.01786980, 0.08423024, 0.05946930, 0.11639795, 0.08921425, 0.00507476, 0.09915554, -0.15932831, -0.29416567, -0.08611549, -0.03215528, -0.10108481, -0.25387213, -0.20565274},
      {0.04375314, -0.17133410, 0.28006709, -0.05445148, -0.16894567, -0.22147168, 0.01509799, 0.01858972, 0.12568690, 0.07637890, -0.22505334, 0.06085630, -0.20442176, -0.08095023, -0.22770368, 0.10347302},
    },
    {
      {0.05298531, 0.06931911, 0.17585249, 0.11914587, -0.13193476, -0.02057672, 0.00321819, -0.03522015, -0.04190159, -0.33689061, -0.18924226, 0.00891935, 0.08503629, 0.05065631, -0.12350883, 0.10965067},
      {-0.00731442, -0.11402032, -0.03781401, 0.03416696, 0.06030810, 0.07004023, -0.12075756, 0.02278518, -0.12937060, 0.14711060, 0.06525601, 0.04270532, -0.09823472, -0.23693284, 0.18617897, -0.02715218},
      {0.01804084, 0.10886295, -0.06396481, -0.11003111, 0.10953407, 0.17291674, -0.06174345, 0.00104599, 0.12707512, -0.02585251, -0.04074651, 0.05537758, 0.01490621, 0.13349070, -0.11755501, 0.00949849},
      {-0.03908745, 0.25783426, 0.02184078, -0.03475969, 0.14104557, 0.47867730, -0.01194593, 0.05723258, -0.06519541, -0.28920984, 0.01126052, 0.41650757, 0.03942320, 0.20296989, -0.34482941, 0.11270854},
      {0.09116504, 0.06276710, -0.06909573, -0.05397330, -0.03229344, 0.09969093, 0.06525292, 0.03856995, 0.05605110, -0.00900823, -0.11273847, 0.03211968, -0.03918477, 0.05756915, -0.15206933, -0.02251237},
      {0.06883167, -0.12877794, -0.04858770, 0.06633478, 0.03066137, -0.28253406, -0.16170523, -0.01865578, 0.10997345, 0.04664312, 0.12509784, -0.18657883, -0.24783787, 0.06594243, -0.14464219, -0.26666993},
    },
    {
      {0.00783269, -0.04052506, 0.04334679, -0.07032233, 0.06983241, 0.05834208, -0.04767000, 0.10540894, 0.03795348, -0.09548483, 0.01758632, 0.17076467, -0.04910579, 0.02298441, -0.33008409, -0.22491221},
      {-0.03363873, -0.03590951, 0.08405241, 0.00515958, 0.05557181, 0.15120873, -0.06816529, -0.09773614, -0.16455421, 0.19708861, 0.03046894, 0.13872133, 0.04246710, 0.06383637, 0.24518044, 0.10286576},
      {0.03930251, -0.02456850, -0.03929914, 0.07675863, 0.06724606, 0.00956310, -0.06782117, -0.12511702, 0.05274053, 0.13225648, 0.09735753, -0.03701713, 0.08528224, 0.04061606, -0.05918594, -0.10984617},
      {-0.04591954, 0.37220418, 0.04317733, -0.16587794, 0.00838821, 0.22567640, -0.03275808, 0.08927635, 0.02573528, 0.19994786, 0.08131029, 0.22206381, 0.02690601, 0.12115726, -0.41367590, 0.18947515},
      {0.10485250, 0.04994010, 0.06070667, 0.10791790, 0.14150037, 0.02218757, -0.00968321, 0.06452265, 0.01181132, -0.00200683, 0.00176441, 0.13869379, -0.08319677, 0.03118298, -0.04523977, -0.19619271},
      {0.06694628, -0.05828521, -0.02264020, -0.13383886, 0.02056476, -0.16152278, -0.05156267, -0.21352142, 0.12869863, -0.07535008, -0.03424207, -0.30257428, 0.01104905, 0.08457351, 0.03882624, -0.00361208},
    },
  },
  {
    {
      {0.09317207, -0.15703590, -0.13305958, -0.11111300, -0.03596042, -0.13057314, -0.09631000, 0.02807202, -0.01034532, 0.09276395, 0.02664589, 0.07930162, 0.08361344, 0.02547911, -0.10434197, 0.00815004},
      {-0.03280066, 0.10353904, 0.00904341, 0.08793986, -0.09227692, -0.03204009, -0.24622595, -0.04390678, -0.20791185, -0.01659186, -0.24026130, 0.13162422, -0.06380159, -0.06664455, 0.15662931, -0.27050093},
      {0.13950367, 0.01515217, 0.05108567, 0.08562692, -0.13608217, 0.02573290, 0.14510763, 0.03042915, -0.01775214, 0.01159843, -0.03580425, -0.06509262, 0.07660116, -0.16261488, -0.08759383, -0.02776612},
      {0.14852075, 0.18134512, -0.16364010, 0.17780131, 0.09339712, -0.18397233, -0.17873636, 0.03844129, -0.12485883, -0.01350924, -0.09660977, 0.02150194, -0.03120446, -0.32248586, 0.03844437, -0.10392506},
      {0.09581658, -0.05490680, 0.06769434, -0.01273165, 0.00889020, -0.09039532, -0.09216295, -0.00127391, 0.05725048, -0.04602012, 0.02498074, -0.11765563, -0.08592961, -0.13981688, -0.01908464, -0.12211790},
      {-0.15879315, -0.10035735, 0.15150782, 0.05164126, -0.11422765, -0.05462651, 0.21683162, -0.01424567, 0.01609389, -0.01812101, 0.01110655, -0.08385116, -0.06279721, 0.03535303, -0.06949358, 0.02079778},
    },
    {
      {0.16053633, -0.12563953, 0.05710092, -0.05949537, -0.13365896, -0.07831354, 0.05867736, -0.09035394, 0.07389041, -0.10328057, 0.06872568, -0.19006218, 0.06203888, 0.00496050, -0.15166631, 0.00933137},
      {0.06115031, 0.11195112, -0.02856504, -0.07283839, 0.07958607, -0.04887968, -0.31098792, -0.08074765, -0.21489786, -0.00595095, -0.10526301, -0.01818011, 0.08657047, 0.07995339, 0.23387447, -0.09264548},
      {0.01255197, -0.00929391, -0.08649163, 0.08989448, 0.10265110, 0.03570151, 0.05033708, -0.02430121, -0.00857594, -0.19943444, 0.09423156, -0.14867085, 0.01913809, 0.01139081, -0.00509938, -0.01733939},
      {0.20437039, 0.31759208, -0.26757604, -0.03388675, 0.12157241, -0.14314860, -0.03467891, 0.10869162, 0.00285494, -0.23690803, 0.23307548, -0.13290624, 0.01290034, -0.25100869, 0.16517740, 0.09702953},
      {0.13893580, -0.02628110, 0.03162844, -0.03182459, 0.04398701, -0.07810009, 0.06886642, 0.06450106, 0.00888102, -0.10827451, -0.16088389, -0.21351171, -0.08881057, -0.06099797, -0.07240266, -0.17004862},
      {0.04627006, -0.17090070, 0.05732429, 0.05772922, -0.12172595, 0.00505708, 0.13437851, 0.02975951, -0.07447077, -0.16432360, -0.16973846, -0.00482529, -0.16627426, 0.08196104, -0.23336253, 0.20589590},
    },
    {
      {0.13666978, -0.12642750, 0.13676649, 0.00921896, -0.08121370, -0.04800784, 0.16780341, -0.05727829, -0.05695336, -0.18249497, 0.05662446, -0.05614363, -0.04664861, -0.05399068, -0.13865432, -0.10526081},
      {-0.08541126, 0.08617453, 0.01282947, -0.08332098, 0.05848032, -0.13761194, 0.00799547, -0.08338372, -0.23988314, -0.02292344, 0.11476040, -0.00174168, 0.18464804, -0.12242228, 0.19022191, 0.03914946},
      {0.08761089, -0.22184645, 0.01068232, 0.03307849, 0.05667765, 0.07349701, -0.02241939, 0.08548220, 0.03642667, 0.00655908, -0.03885373, -0.07113470, 0.03034539, 0.03384067, -0.10514113, 0.01238542},
      {0.06976475, 0.10618985, -0.18150048, -0.21335754, 0.02625935, 0.11387990, 0.19789794, 0.05850332, 0.08926794, -0.37008995, 0.19151400, -0.05869102, 0.18166091, -0.14873122, -0.03780390, 0.09512939},
      {0.00563907, -0.14724527, -0.01898372, -0.00440494, 0.05104706, 0.04484199, -0.03437945, 0.08614995, 0.03938986, 0.12559985, -0.00540533, -0.18212715, 0.09866121, -0.13823073, 0.06106040, -0.00689006},
      {-0.11018723, -0.21166505, 0.12220909, -0.00648855, -0.19327429, 0.01639142, 0.12509148, 0.02079977, 0.00917378, 0.11962223, -0.09195163, 0.03193495, -0.09811119, 0.07166734, -0.09260731, -0.06998247},
    },
    {
      {0.11671164, -0.09972677, 0.12361616, 0.07402834, 0.00617622, 0.10346562, 0.08416322, 0.05785941, 0.05432936, -0.04795698, 0.01959080, 0.01289773, -0.09705836, 0.05783984, -0.20291238, 0.01280477},
      {-0.22560708, 0.05168997, 0.10490378, -0.06115068, -0.17613749, -0.06570494, 0.08221976, -0.02098918, -0.27189016, 0.01940839, -0.05054805, -0.21070081, -0.04523287, -0.04638534, 0.15214333, 0.18034969},
      {-0.16456400, -0.04687152, 0.14626026, 0.14284502, 0.00527783, 0.11851085, 0.10072009, 0.01685026, 0.03021732, -0.01624249, -0.11852369, 0.10170984, -0.02426858, 0.08740959, -0.03922759, 0.01801485},
      {-0.06258205, -0.07305170, 0.04025476, 0.02915017, -0.04767079, 0.14205557, -0.00242655, -0.02536969, 0.10618970, 0.05416960, -0.09895679, -0.01096806, 0.07034884, -0.14171597, -0.14572330, 0.13941687},
      {-0.03420298, -0.16934131, -0.04776048, -0.04001313, 0.08501665, 0.03409858, -0.03788587, 0.07802148, 0.07082090, 0.06862534, -0.06518946, -0.09137151, 0.02837030, -0.09665496, 0.11103386, -0.08787487},
      {0.05470947, 0.05150326, -0.11129737, -0.08207270, 0.09537026, -0.06805705, -0.09566638, 0.10769130, -0.07503628, 0.05736274, 0.14777572, 0.08777920, -0.03838474, 0.02646164, 0.04857007, -0.18364073},
    },
    {
      {0.07049763, -0.10051201, 0.00629349, 0.08137985, -0.02402200, 0.06197846, -0.09177050, -0.10441165, 0.10017564, 0.00410542, -0.10623749, 0.10858623, 0.07847054, 0.15197715, 0.00189546, -0.06960054},
      {-0.05117281, 0.01414695, 0.09720709, 0.06802782, -0.23152465, 0.08465306, -0.00421580, -0.04633671, -0.22516686, 0.17262791, -0.18890575, -0.11935231, 0.03846417, 0.00887901, 0.18819150, 0.12237298},
      {-0.06047368, -0.04060914, 0.01894772, 0.02319974, -0.02014420, -0.04792715, 0.02307699, 0.01554548, 0.13507791, -0.00085393, -0.04030877, 0.00875379, -0.01212637, -0.02492660, -0.10054855, -0.06628023},
      {-0.13779981, -0.14924824, 0.06517705, 0.19559765, 0.00517208, 0.16172892, -0.04838538, -0.03550677, -0.08996499, 0.20506875, 0.16781324, 0.14460644, -0.00909533, -0.10622271, 0.09461478, 0.08264856},
      {-0.09916971, -0.12874678, 0.01651588, 0.04145515, 0.06073011, -0.03931331, -0.05351911, -0.01928951, 0.08238153, 0.02566137, -0.03175877, -0.08756734, 0.03150297, -0.02643861, 0.07626432, 0.02247413},
      {-0.19953074, 0.01440371, -0.17541288, -0.08206360, 0.01395984, 0.04230389, 0.07367764, -0.02454140, 0.12783000, -0.03574692, 0.07730784, -0.18286185, -0.07780714, -0.01245609, -0.04934222, -0.01056140},
    },
  },
};
# 9 "lenet_proj/lenet_top.cpp" 2
# 1 "C:\\Users\\Baron\\Desktop\\EE_297_Repo\\EE_297\\ML_PATH_EE297\\EE297_env\\projects\\weights\\conv2_biases.h" 1


float conv2_biases[16] = {0.00356904, 0.02233280, 0.01118505, -0.02337303, 0.00365929, 0.00066095, -0.00337619, -0.03471262, 0.01262066, 0.02541261, -0.04684022, 0.00067230, -0.02745587, 0.03270094, 0.04517247, -0.01751054};
# 10 "lenet_proj/lenet_top.cpp" 2

# 1 "C:\\Users\\Baron\\Desktop\\EE_297_Repo\\EE_297\\ML_PATH_EE297\\EE297_env\\projects\\weights\\fc1_weights.h" 1


float fc1_weights[400][120] = {
  {-0.02392532, 0.03066136, 0.08624361, -0.08584072, 0.02589505, -0.10403787, -0.05038025, 0.08067910, 0.11979067, -0.05088158, -0.09091675, 0.10752778, -0.08512554, 0.04868671, 0.06107652, -0.02212546, -0.06916687, 0.05016677, -0.03588798, -0.01187331, 0.13204850, -0.03153145, -0.11582822, 0.07892585, 0.01992052, 0.03685927, 0.06806735, -0.08805298, -0.02646573, -0.04371440, -0.05760952, 0.07586438, -0.14442042, -0.04098600, -0.10049370, -0.02895629, 0.16332908, 0.06749955, -0.08533624, 0.00357800, -0.12694380, 0.11365163, 0.03148504, 0.13652463, -0.06361141, 0.08281188, 0.07092213, 0.00722612, 0.05528026, 0.00269933, -0.18349735, 0.14237536, -0.06535953, -0.05039319, -0.02706448, -0.09303244, 0.05097028, 0.06548861, 0.07618572, -0.07624865, 0.08294790, 0.10139856, -0.05098519, 0.01737444, 0.01233832, 0.05992832, -0.10149590, -0.13709857, -0.03848513, -0.02874098, -0.00115060, 0.09664607, 0.07326135, 0.10409744, -0.09161031, -0.01614583, -0.02188293, -0.08417409, 0.08006344, -0.01800857, -0.00716041, 0.03995624, 0.02255388, 0.10528816, -0.12969594, 0.14199029, 0.03295008, -0.00935544, -0.09930443, -0.06381916, -0.02359471, -0.01432082, -0.06287239, -0.05531491, 0.05136143, 0.16170248, -0.14457960, -0.01262199, -0.06205131, -0.11383888, -0.02181988, -0.04818999, -0.05209344, -0.09835149, -0.06782287, -0.02389142, -0.01733382, 0.10887349, -0.02778175, 0.07138111, -0.10169996, 0.08610716, -0.12167317, -0.03945404, 0.13082771, 0.09596398, 0.03061594, 0.06638937, 0.04934275, -0.08165284},
  {-0.05516546, -0.00137129, -0.00329418, 0.06304305, 0.11954185, 0.16714320, -0.15686898, -0.11227277, -0.12581286, -0.01533072, 0.00709225, 0.06100326, 0.05024757, -0.01793626, 0.02404148, 0.09464357, -0.07538478, -0.03010575, -0.05653170, -0.01385802, -0.02101425, -0.10207954, -0.19437088, 0.01033509, -0.05990529, 0.08290654, 0.04324547, -0.02337117, -0.11664435, 0.07399216, 0.10026941, 0.02471679, -0.09354770, 0.00370421, 0.10587727, -0.02840230, 0.03326482, 0.00439568, 0.11758477, 0.01005105, -0.11061714, -0.04548186, -0.00225955, -0.02300587, 0.00913141, -0.06244795, 0.11740133, -0.01641378, 0.11707249, -0.01385439, -0.02816390, -0.12412161, -0.05178513, 0.02327918, -0.05582064, 0.12222938, -0.08910204, 0.00446007, -0.08212798, -0.22710378, 0.05917391, 0.03590996, 0.20629507, 0.02415250, -0.20285702, -0.13442022, 0.10284837, 0.11966704, 0.09588113, 0.07037601, 0.11423676, 0.10022205, -0.10887023, -0.03549202, -0.04064422, -0.06862394, -0.08805660, -0.06282783, -0.03584205, -0.08598202, 0.04618198, 0.02465637, 0.10109970, 0.02278507, -0.05744297, 0.02327781, 0.05130615, 0.07537823, -0.16729626, 0.11484092, -0.09116222, 0.08217566, -0.05030853, 0.03881326, -0.01651658, -0.05508496, 0.03498623, 0.08693902, 0.06140208, -0.04062672, -0.14202510, 0.05856770, 0.06760193, -0.00474918, 0.00471547, 0.05590821, 0.06389037, -0.01598144, -0.17645895, -0.10602925, -0.06938341, -0.00520135, -0.00140819, -0.04984679, 0.12379257, -0.01705176, 0.05968211, -0.03888612, 0.00996095, -0.13706008},
  {0.09210964, 0.03141450, -0.03588580, -0.09399656, 0.05033292, 0.09344101, -0.00311526, -0.08076699, 0.15784116, 0.05524034, -0.25349784, -0.05521819, 0.02766940, 0.08596887, -0.10448254, -0.06098361, -0.11042301, 0.02657139, 0.06875226, 0.01815821, 0.06087474, 0.08724576, -0.14714806, 0.01211875, 0.05356515, -0.10501106, -0.02932111, -0.06197114, -0.00898145, -0.01878841, 0.06818014, -0.10622593, -0.02344985, -0.12992972, -0.12036612, -0.21293516, -0.03327748, -0.14010638, 0.05169990, -0.11266484, 0.01488782, 0.17975649, 0.15756840, -0.01124256, 0.00318558, 0.14508475, -0.04447605, -0.03521516, 0.00192824, 0.03571327, 0.05808617, 0.07867825, 0.08705474, 0.13575126, -0.11297571, -0.02945192, -0.00702036, -0.04387127, -0.18220262, -0.11901264, -0.00726557, 0.23643254, -0.05114631, 0.03610732, -0.14846665, 0.11577471, 0.10967075, -0.05004846, 0.02521838, 0.09299511, -0.21084017, -0.06580550, 0.26930001, -0.10532431, -0.10606945, -0.05638996, 0.05879539, -0.06233796, 0.02798429, 0.22368209, 0.04378966, -0.03869884, -0.07430621, -0.13844006, -0.09407314, 0.02463469, 0.04823348, -0.11767554, -0.08758618, -0.02761686, 0.06121154, 0.09964839, 0.06573805, -0.00347496, -0.04618160, -0.01739387, -0.21042605, -0.00481607, 0.07421474, -0.10846328, -0.10913029, 0.05696781, 0.01224595, 0.06610654, 0.18386252, 0.04497885, 0.00807442, 0.07757016, 0.13293228, -0.09784167, 0.13506843, 0.06335057, -0.06885953, 0.08602172, -0.08264522, -0.02946335, -0.15035132, 0.00082573, 0.00339538, 0.00371646},
  {0.00719851, 0.05168856, -0.09536664, 0.01277856, -0.06319638, 0.08267527, -0.02986674, 0.02743496, -0.06130188, -0.02986704, -0.05270583, -0.14633971, -0.06639963, -0.12983929, 0.07290161, -0.03069249, -0.03304781, 0.08141702, -0.10158292, 0.14297968, -0.02388784, -0.13902852, -0.07237595, -0.05432167, -0.02816503, 0.07620202, 0.09377648, -0.03113268, -0.01382388, 0.05420395, -0.01298871, -0.08222366, -0.03564835, 0.04412331, 0.02434629, -0.07743274, 0.07295368, -0.09529257, 0.13914289, 0.03477135, 0.03639125, 0.05019455, -0.11387835, -0.05795455, 0.05952949, -0.00492470, -0.04539977, -0.08764444, 0.05089420, -0.13711317, -0.05588402, 0.03338549, 0.08640943, 0.06604940, 0.03463065, 0.00668118, 0.05548931, 0.04901659, 0.04613531, 0.00786045, 0.06740613, -0.00356659, 0.02820122, -0.04649079, -0.12486044, -0.08224546, 0.03824304, 0.12368693, -0.06346891, 0.01043464, 0.04072058, 0.06008347, 0.10292646, -0.04086277, -0.10484002, -0.15325348, 0.09260798, -0.00200277, -0.03407255, 0.13963231, 0.11984611, 0.00544175, -0.03232195, -0.03629065, -0.02218442, -0.03287299, -0.04193097, -0.02699730, -0.02734094, 0.05910276, -0.16153722, 0.03319435, -0.01946935, -0.09164120, -0.03057086, -0.00094122, 0.00409588, -0.00562636, 0.04132570, -0.06616421, 0.05259517, -0.08772857, 0.11154190, 0.15906014, -0.06732008, 0.07886891, 0.06254849, 0.06332723, -0.06647476, -0.06907249, -0.09357820, 0.07501732, -0.01060460, -0.00339057, 0.06531940, -0.08039176, 0.06224418, 0.11772032, -0.09806133, 0.17621636},
  {0.12802735, 0.00662996, 0.07385564, -0.02341141, -0.06629235, -0.08689414, -0.03120603, 0.08628589, -0.09675213, 0.09493116, 0.17113544, 0.05398072, 0.00737218, -0.02812793, 0.06737865, 0.04305134, 0.02996598, -0.04135405, -0.10345014, 0.02078176, 0.14985175, -0.03692552, -0.20681803, -0.06116401, -0.03917360, 0.08150165, 0.08757820, 0.03519377, 0.00451251, 0.04527795, 0.07945674, -0.03731376, -0.07406413, 0.12342869, -0.02877863, 0.06056697, -0.11246536, -0.12403283, 0.07096836, 0.11024727, 0.00813737, -0.03840736, -0.01590510, -0.04384356, 0.00804122, -0.05702987, -0.03129249, 0.06174822, 0.06620996, -0.10653958, -0.02535518, -0.04603039, 0.08363418, -0.00579660, -0.07030270, 0.08258422, 0.04000117, -0.08129988, 0.16520654, 0.00985831, 0.10546508, 0.02582837, -0.03778902, -0.00874480, -0.11347381, -0.05464131, -0.02485489, -0.03108870, 0.11121663, 0.06592169, 0.17273611, 0.07252093, 0.01740916, 0.00569428, -0.01304748, -0.09965358, 0.15493906, 0.08859026, 0.01496367, -0.03153288, 0.09820656, 0.11527763, -0.01413013, -0.06924267, 0.00390000, 0.07359973, -0.07871240, -0.00260170, -0.00698936, -0.08713740, -0.01014441, -0.06701525, -0.00618036, 0.01757942, -0.00622149, 0.02262557, 0.09393037, -0.00092226, 0.03196292, 0.09890873, 0.02602012, 0.07539254, 0.08735415, -0.00146428, 0.04352891, -0.09197188, 0.11057515, 0.02586193, 0.00494071, 0.02528260, -0.07617503, 0.04189003, 0.06954025, -0.10059039, -0.01200517, 0.09638213, 0.03217740, -0.12076306, 0.04785253, -0.05315914},
  {0.09884652, 0.02391393, -0.07257375, -0.06311987, -0.01770017, -0.12295929, -0.00822865, -0.00251151, 0.11933904, 0.09449460, 0.03253781, 0.02708993, 0.08282100, -0.01690458, 0.08777238, -0.08306786, 0.12694621, 0.03942726, 0.02874919, -0.06077611, 0.04500690, 0.06667781, -0.14869341, -0.13106161, -0.05026671, -0.04376264, -0.03517425, 0.08434423, 0.00692344, 0.02038054, 0.01575617, -0.01062042, -0.27630424, -0.00745516, 0.06932195, 0.04184189, -0.07046517, -0.13743891, -0.02350386, -0.12481624, -0.00920334, 0.00782761, 0.09479439, 0.04347690, -0.03930094, -0.05400984, 0.05237696, -0.04019090, -0.06838930, -0.10130402, -0.02754531, 0.01803885, 0.11414698, -0.04826095, 0.01611812, -0.02999200, -0.03034266, -0.02745345, 0.09260587, -0.06587849, 0.11543658, 0.09562712, 0.04578344, -0.08396211, -0.02889145, -0.08922155, 0.09753078, 0.12686615, -0.02225955, 0.05634204, 0.02614388, 0.10870464, -0.08674862, 0.08958289, 0.13132453, -0.06058662, -0.05228152, -0.05325450, -0.05508294, -0.20550016, 0.11729744, 0.16315398, -0.04359350, -0.12579660, -0.01264221, 0.02966549, -0.01776684, 0.01210655, -0.09948612, 0.03973689, -0.23022267, -0.14125361, 0.03992883, -0.04688440, -0.01844871, -0.01988272, -0.00135280, -0.09745303, -0.03449712, 0.00686192, 0.01084373, 0.02831754, -0.11968856, -0.04603999, -0.00829201, 0.01420614, -0.08399716, 0.13935189, 0.06817228, -0.11393799, -0.08947857, 0.09784770, 0.08699984, -0.10220668, 0.03968261, 0.05324082, 0.02643385, 0.03301867, -0.02439938, 0.13551065},
  {0.01541158, 0.01440835, -0.00638274, -0.03265379, 0.11930467, 0.01171438, -0.14726454, 0.00703356, 0.15660021, -0.05596887, -0.07926065, -0.08198099, -0.10336500, 0.03036934, 0.08156002, 0.08203559, -0.09267014, -0.08501295, 0.00258565, 0.01162514, 0.11602582, -0.00159456, 0.07469619, 0.00303172, -0.00182582, 0.03205885, -0.07839952, -0.04289594, -0.07178356, -0.02555779, -0.09631673, -0.07089736, -0.08977436, -0.02184715, 0.14460200, 0.00770048, 0.10877100, 0.00924056, -0.06466629, 0.09732836, -0.05004806, -0.07434259, 0.02386387, -0.02057063, -0.08059740, 0.02018567, 0.03446280, 0.08501717, -0.01761869, -0.05112804, -0.14092247, 0.02233730, 0.04354240, 0.06721858, -0.03600763, 0.10193918, 0.06171324, 0.11900420, 0.03373294, -0.13149020, -0.13226420, 0.29696828, -0.05054409, 0.00028864, -0.08191802, -0.06910919, -0.01148908, 0.04951956, 0.12014116, -0.11213922, 0.09804761, 0.08414529, 0.18211968, 0.03297757, -0.04161269, -0.10943421, 0.13058950, -0.10547691, -0.20186220, -0.08027951, 0.05223447, 0.01413941, -0.05552039, 0.02976157, -0.04513028, 0.08461738, 0.00169124, 0.07603670, 0.03281488, -0.26248023, 0.00374830, -0.09068191, -0.21070671, -0.05198823, 0.06258788, 0.15255989, -0.17581010, -0.04443264, -0.01460752, -0.01952419, -0.07100473, 0.07969157, -0.06998406, 0.08844477, 0.04650588, 0.09494465, -0.06127609, -0.03029960, -0.12441142, 0.04222395, -0.10738187, 0.05314238, 0.00416382, -0.03825910, -0.02576550, -0.08417335, -0.09382717, 0.06073418, -0.02094956, -0.00776734},
  {0.18094228, 0.03370804, -0.04714854, -0.02235752, -0.01773239, 0.04314457, -0.01353602, -0.08503471, -0.00534745, -0.02807582, 0.03095878, -0.00635307, 0.04086053, -0.11855920, 0.10687585, -0.11279384, 0.07888721, -0.00809297, -0.00740616, 0.05803217, -0.03411689, -0.06864996, -0.08505312, -0.01968557, 0.09248971, -0.05138007, 0.12156796, 0.05234971, -0.05133688, -0.08971500, -0.09388420, -0.07557166, 0.06990720, 0.05213255, 0.14351298, 0.07352769, -0.14173424, -0.01504432, -0.01687472, 0.05168334, -0.08964106, 0.05986714, 0.04907499, 0.08755631, 0.03496528, 0.00061294, 0.11680464, 0.03874439, -0.11189371, -0.03755752, 0.09051994, -0.05248884, 0.12357237, 0.08403561, 0.02602380, -0.00888321, -0.10228021, -0.01231380, 0.03025323, -0.07828201, 0.00668276, 0.07204201, -0.05882949, -0.06859358, 0.04880314, 0.04471937, 0.04132674, -0.05184283, 0.01278147, 0.00331967, 0.08369919, 0.02658366, 0.15090548, 0.04210953, 0.05985483, -0.15921098, -0.05280876, -0.04062898, -0.11771651, -0.08490883, 0.05725811, 0.04377484, -0.09054809, -0.02185057, -0.05630516, 0.03541458, -0.01934121, 0.06913020, -0.03091004, -0.08656423, -0.04114749, -0.11616611, 0.00357739, 0.07327282, -0.06597833, -0.10371397, -0.03411111, -0.04051946, -0.05314712, -0.07129980, -0.05402728, -0.07627558, -0.03791649, 0.03789219, 0.02556241, 0.00078335, 0.03379996, 0.09782198, -0.06900588, -0.08453908, 0.10174450, -0.01144322, 0.05464688, -0.03670764, 0.09269971, -0.05982363, 0.02852385, 0.09214357, 0.01314655, -0.00495624},
  {0.04845076, 0.01975697, 0.05645293, -0.08385886, 0.09350855, 0.09368908, -0.22046478, 0.00584608, 0.04079993, 0.08827106, 0.11911537, 0.11750749, 0.02975216, 0.03482584, -0.08292425, 0.05532628, -0.07829357, -0.08311227, 0.08630036, -0.07708924, -0.06550946, -0.03852719, -0.05133417, 0.02746617, 0.04792743, 0.04758352, -0.04920711, 0.03702640, 0.06009309, -0.04395992, -0.00697523, -0.07074460, -0.09563021, 0.05853507, 0.06928838, -0.03935205, -0.00504587, -0.13025592, -0.04647969, 0.05214268, -0.10042600, 0.08210457, 0.04744381, 0.00711626, 0.10868562, -0.01319347, 0.09373471, 0.04817334, -0.00506251, -0.10275789, -0.07225642, 0.10905837, -0.10325506, 0.01673296, -0.10244935, 0.08218074, -0.15927939, 0.04350756, 0.03948705, -0.04945301, 0.09307013, -0.08937120, 0.00698706, 0.08332722, -0.08503269, 0.09965003, 0.00569913, 0.02571235, -0.05735242, -0.11008974, 0.05691793, 0.09500458, -0.01586479, -0.04118395, 0.06656501, 0.04062268, -0.05113523, 0.03138195, -0.01488643, -0.06766728, -0.00940473, -0.02035145, 0.03615946, 0.02147764, -0.03314325, -0.01592627, -0.15339644, 0.07860806, -0.04625245, 0.09266017, -0.00480937, -0.03492519, 0.09620517, 0.03925814, -0.11574849, 0.00744635, -0.16550185, 0.05534956, 0.09044874, -0.08440118, -0.10203582, -0.00051238, 0.07087383, -0.14684443, 0.17044722, 0.01321764, -0.01332348, 0.12733872, -0.04092877, 0.02324146, -0.04005745, 0.05530507, -0.09233307, 0.05419125, -0.06663233, -0.04149766, 0.04507434, 0.08661189, 0.04026193, 0.06983178},
  {0.02881944, -0.12103463, 0.01513499, -0.00195572, -0.01152430, 0.03569077, 0.10882825, 0.03725174, -0.12079740, -0.07767604, -0.18061337, 0.04168361, 0.17949183, 0.12887512, 0.03460203, 0.09906576, -0.09033907, 0.12318005, 0.05245717, -0.09948682, -0.10050055, -0.07172793, 0.13209470, 0.00165491, -0.03962752, 0.06434263, -0.12051330, 0.05027013, 0.00325183, -0.02537352, -0.02051087, -0.05576352, -0.04848375, 0.02020329, 0.04727233, 0.18208620, 0.04923882, 0.14934222, 0.04601544, -0.10979669, 0.00098643, -0.08763849, -0.14981562, 0.15690255, 0.12355883, -0.15013246, -0.10309833, 0.00057037, -0.02274898, -0.00666507, -0.05159865, 0.12227058, -0.06948361, 0.14716357, 0.00942373, -0.05713636, 0.05520494, 0.14435123, 0.02457217, -0.00645182, 0.03999476, -0.14528579, -0.01916222, 0.02497436, -0.03043052, 0.00488430, -0.03376013, -0.02144834, -0.10409657, 0.09752616, 0.00309249, 0.02213204, -0.15463327, 0.08982292, 0.07200453, -0.04888482, -0.04660403, -0.02589833, 0.05775591, -0.06382890, 0.04275833, -0.14670929, 0.11073782, 0.17470913, 0.09202220, 0.07154346, 0.21674150, 0.07664965, -0.07155078, 0.04133203, -0.13687518, 0.08327527, 0.06292932, -0.05696090, 0.05538685, 0.10530116, 0.19719571, -0.06280696, 0.07598973, -0.11720613, -0.07416777, 0.06671321, -0.10681322, -0.15214776, 0.04860008, -0.00275159, -0.07028131, -0.01525442, -0.03199931, 0.04184255, 0.01981232, -0.05840135, 0.07245875, -0.07178979, 0.00285705, 0.01811268, 0.03591502, 0.02135974, -0.11211064, 0.18763083},
  {0.02072315, 0.03423433, -0.13835360, 0.01118449, -0.11554582, 0.10134221, -0.13571711, -0.02737977, -0.12448689, 0.08157752, 0.03624519, -0.02562257, -0.08678148, 0.08761048, 0.12662986, 0.15742446, -0.13048154, -0.01710677, 0.03042397, 0.04322088, -0.10425223, 0.01496227, -0.01540386, -0.14762758, -0.14592722, 0.01562665, -0.00942776, 0.01028084, -0.00244841, -0.10313619, -0.01297846, -0.02788108, -0.02550196, -0.01658791, 0.03218230, 0.12708844, 0.17924593, -0.16490468, 0.06798864, 0.08908087, 0.05717485, -0.03456669, 0.03328023, -0.25587440, -0.12302032, -0.21978353, -0.12085866, 0.04151155, -0.09764642, 0.00879073, -0.00859626, -0.00029061, 0.07146396, 0.09143611, -0.14682139, 0.01228231, 0.01235811, 0.14353168, -0.07192912, -0.15615967, -0.14035293, 0.13715743, 0.08958513, -0.02689592, -0.12571751, 0.05145306, -0.16923264, 0.09136955, -0.06032526, -0.06683198, 0.14795409, 0.26372990, 0.03518905, -0.12205771, 0.09108427, -0.14795467, -0.17442846, 0.08824572, -0.13250144, -0.05349053, 0.21421722, 0.07844325, 0.14525865, 0.11172128, 0.12660959, -0.01829332, 0.03152660, -0.08461763, 0.16368493, -0.12030198, -0.02310511, 0.10473671, -0.22845872, -0.08341242, 0.01748650, 0.03585546, -0.07860878, 0.10005884, -0.00399919, -0.00413231, -0.01353170, 0.07175642, 0.10533444, 0.08528258, -0.07724154, -0.02538947, 0.18523362, 0.09053350, -0.03591454, -0.07432152, -0.06866511, 0.04248819, -0.07408421, -0.08362409, 0.09489059, 0.05014507, -0.05644184, -0.31917116, -0.03822459, 0.19001000},
  {0.12840544, -0.00144564, -0.01080913, 0.00817861, 0.04228902, 0.10503054, -0.02954745, -0.10545175, 0.05021793, -0.07283936, 0.08931477, -0.05961343, -0.08714275, -0.15774190, 0.06985166, -0.05209713, 0.09419402, 0.07379022, -0.03286180, -0.03694785, 0.02624962, 0.02462415, -0.10483977, 0.01574113, 0.05407273, -0.02040545, 0.19238010, -0.00326589, 0.02859449, -0.04558956, -0.04984475, -0.19049375, -0.13518943, -0.03983556, 0.06978821, -0.12998497, -0.13297360, -0.00834342, 0.13727328, -0.03837741, 0.04472337, 0.04764618, 0.08115937, -0.16358876, 0.03687249, -0.00079553, 0.12796322, 0.04957272, -0.11329079, -0.21288118, -0.07089446, 0.08458319, 0.12042786, -0.07998736, -0.08332261, 0.02450478, -0.04418231, 0.00243537, 0.12179619, -0.03084272, 0.01248147, 0.09549776, 0.03601694, -0.00536848, -0.07541189, -0.14146879, -0.06889635, 0.11860177, 0.02509486, 0.00970325, 0.10359739, -0.00966487, -0.05359431, -0.17891847, 0.09300549, 0.01391451, -0.02079761, 0.09579296, -0.02556937, 0.03470020, 0.05452373, 0.05078224, 0.10497186, -0.01046106, -0.13324755, -0.12249108, 0.01965567, -0.01176754, -0.16210486, -0.00466242, -0.03162394, -0.06574177, -0.08657283, -0.13022473, 0.06379279, 0.05798000, -0.05540510, 0.04937388, 0.01139681, -0.10626009, -0.00700206, -0.01115202, 0.12232539, -0.09506506, 0.11480741, -0.07753822, -0.05535417, -0.01296713, -0.01459274, 0.05960519, 0.02182645, -0.02782044, 0.09027303, 0.03538476, 0.08161660, -0.07041088, -0.03323825, 0.02059679, 0.01435090, 0.02973533},
  {-0.04921284, -0.02889373, -0.11478452, 0.09389343, 0.19564635, 0.11269042, 0.05510166, -0.01838581, 0.06744871, 0.08297496, -0.10252683, -0.05651405, -0.05614138, 0.03800545, -0.00643573, 0.07328011, -0.09685830, -0.10724819, -0.00222084, -0.01331276, -0.02678812, 0.03557337, -0.06902710, -0.04644503, -0.05552882, -0.10396808, -0.07182266, 0.04165086, 0.03780830, 0.03267881, 0.04052111, 0.12958142, 0.00968997, -0.03143790, -0.03892258, -0.04373894, 0.12584983, 0.01014236, 0.03519738, -0.03486618, -0.03945515, 0.00332295, 0.01061655, 0.16739286, -0.07812622, -0.05014852, -0.02287625, -0.02958104, -0.07127354, -0.03356945, -0.24995640, -0.03740417, 0.08336397, 0.00614962, -0.00295202, -0.01221811, -0.00313489, 0.10288077, 0.02966832, -0.14362106, 0.10618114, 0.22883478, -0.00775779, 0.02609982, -0.13197690, -0.08647837, -0.17516024, -0.06309479, 0.05961988, 0.09025782, -0.02563438, -0.06291047, -0.09120312, -0.10368141, 0.03939855, -0.22826287, -0.03862178, -0.08588339, -0.06255091, -0.10667569, 0.00211155, -0.04802078, -0.04055576, -0.03459864, 0.02317013, 0.12811972, -0.14703120, -0.09675992, -0.12889221, -0.06761579, -0.12609205, -0.02467729, 0.02888053, -0.00565420, 0.03286275, 0.04154528, 0.01588216, -0.02243601, 0.00779989, -0.11215654, -0.10532104, -0.02736584, -0.04731615, 0.01627806, 0.00545935, 0.00251778, -0.10263432, 0.04188960, -0.09275306, -0.10840216, -0.08833614, -0.05582292, 0.01297475, 0.01722196, 0.08986949, -0.03169280, -0.08922268, 0.00424474, 0.12319636, 0.01229443},
  {-0.01661116, -0.00396770, -0.07303700, -0.02372257, 0.02834754, 0.11422615, -0.01324225, 0.01698520, 0.04532082, -0.09677251, 0.05137323, 0.02286859, 0.09085006, 0.04474613, -0.06185695, 0.02802584, -0.05219165, 0.00379676, -0.04860028, -0.02747457, -0.03674641, -0.01126187, -0.08885196, -0.08036299, -0.07890055, -0.12019207, 0.02891965, -0.04060075, -0.06944828, 0.02947588, 0.06994482, -0.06935535, -0.11822908, -0.09688698, 0.05606567, -0.07773190, 0.02288803, -0.07939371, 0.04900569, -0.06272458, -0.05534129, -0.00910963, -0.04810668, -0.10223798, -0.05801700, -0.09674552, 0.08256499, 0.07992867, -0.14142708, -0.14160612, 0.13621780, -0.01463552, 0.10974933, -0.01496998, 0.09594479, 0.00208569, -0.05912270, -0.11233720, 0.17490387, -0.03820556, 0.08813317, 0.12415455, 0.00487801, -0.11256371, -0.14151254, -0.14947902, -0.10112917, 0.07736010, 0.08856297, 0.08317830, 0.01503786, 0.09446494, 0.05271171, -0.11700264, 0.05417867, 0.01222922, -0.04475647, -0.09052568, -0.11108559, -0.01251670, -0.00331222, -0.02855806, -0.01883367, 0.02055420, -0.08599689, -0.03377470, -0.02852117, 0.03583161, -0.12342462, 0.02295764, -0.05584770, -0.11024207, 0.02091856, -0.11937900, -0.07609186, -0.01858031, 0.04472069, -0.05391390, -0.06069825, -0.09776876, -0.00421253, -0.08062908, 0.09637427, 0.01348436, 0.08688996, -0.08601415, -0.06781395, 0.01637197, -0.10055009, -0.05408363, 0.00041952, 0.04445985, -0.00830354, 0.08383937, 0.11767194, -0.05055349, -0.02181951, 0.11568794, 0.03496292, -0.05911889},
  {-0.08094402, -0.11078984, 0.02919355, 0.08882388, -0.07267489, -0.21332328, -0.08359053, 0.04396134, -0.22421013, 0.00929441, -0.09347574, -0.00792377, -0.08566634, -0.05746876, 0.07212562, 0.20268783, -0.04655548, -0.03574571, -0.03964872, -0.08427161, -0.12209430, -0.17449988, 0.06378286, 0.00197970, -0.11340088, -0.12029740, -0.16385616, -0.10368539, -0.01079260, 0.05253100, -0.04014284, 0.21985203, 0.02896703, -0.07705148, -0.08807518, 0.29555482, 0.28303835, 0.15745962, 0.02654707, 0.02585768, 0.01311104, -0.26827455, -0.10720485, 0.00852677, 0.10252251, 0.00387006, -0.08296447, 0.02486098, -0.10753621, -0.09927028, 0.04423285, -0.05449808, -0.09847352, -0.01910284, -0.09305475, -0.23811427, 0.10844343, 0.01107887, -0.09744578, 0.06183167, -0.14771140, -0.04965256, 0.01111115, 0.09928855, 0.13024300, -0.11966595, -0.17077968, -0.06164871, -0.05795028, -0.07583809, 0.21027580, 0.11234567, -0.16721199, 0.04534348, -0.04222241, -0.09463037, -0.09339340, 0.07806678, 0.02013349, 0.07260778, 0.29441729, -0.11570941, 0.12824768, 0.08633701, -0.02682032, 0.05707936, 0.02748596, 0.06294566, -0.19990313, 0.09893686, -0.13726188, 0.21576390, -0.18627712, -0.15263224, 0.00655496, 0.15833531, 0.03786627, 0.05278120, -0.03897863, -0.01250646, 0.02780428, 0.08674013, -0.01691581, 0.04134047, 0.03849056, 0.08305161, -0.11687832, -0.05753620, 0.00829891, -0.07283203, -0.03403175, -0.01958866, -0.07454334, -0.08049522, -0.02302703, -0.04132028, -0.07009503, 0.06665993, -0.00097362, 0.00687133},
  {-0.22410420, -0.21962622, -0.10640524, -0.10979721, 0.02520533, -0.02772729, -0.01349672, 0.05909183, 0.04848309, -0.01912837, -0.05238716, -0.18873401, -0.12552254, 0.00150168, 0.07534752, -0.05600581, -0.13379307, -0.02770935, -0.08064634, -0.06049909, -0.01241810, -0.09784467, 0.07337946, -0.03350580, -0.12746640, 0.06184590, 0.00011182, 0.03575929, -0.02790334, 0.03727074, 0.09186769, -0.01804276, 0.00721255, -0.23812073, 0.03035802, -0.05385182, 0.07862234, -0.09484035, -0.17214262, 0.00397612, -0.04575021, 0.05141062, 0.10659944, -0.03252383, 0.05200776, -0.02070153, -0.00961956, -0.02960727, -0.07940148, 0.21631041, -0.05153393, -0.08662495, 0.15218195, 0.16658360, -0.20639245, -0.12425311, -0.03966334, 0.00360566, -0.10212593, -0.13929299, -0.11221363, 0.15347861, 0.00944498, 0.10780550, 0.01219269, 0.02290769, -0.01049500, -0.10240843, -0.07586519, -0.08447490, 0.01008196, -0.19354083, 0.21915039, -0.12629417, -0.03381155, -0.07661351, -0.12176060, -0.02512858, 0.07184074, -0.00837156, 0.03720725, 0.04248318, -0.16836375, 0.13870080, 0.14219888, 0.03398416, 0.02987825, -0.02953757, -0.04941133, 0.02229633, 0.06678155, 0.07489581, -0.11695019, 0.01636759, -0.08631384, 0.03678296, 0.03322018, 0.06488539, -0.07232247, -0.03069313, 0.00351176, -0.07944179, 0.09426040, 0.22652073, -0.00248772, -0.04466937, 0.14741230, -0.01272704, 0.05164839, -0.04605807, 0.09090009, -0.18097113, -0.12828079, 0.09175279, -0.15821353, -0.00264404, -0.14682300, -0.14468670, -0.18273550, 0.02092210},
  {-0.02552849, -0.04492664, -0.05614179, 0.02724842, 0.03460430, 0.05220801, -0.01986429, 0.05113632, -0.09708051, -0.08492953, -0.02929718, 0.07021578, -0.04463281, -0.00663646, 0.05767227, -0.14037085, -0.09305293, -0.08729709, -0.01332405, -0.13060759, -0.03949620, -0.09564270, -0.04600029, 0.09084976, 0.12336520, 0.04234816, -0.02469743, 0.09392326, 0.03786737, -0.01620059, -0.11297275, -0.04454364, 0.08997967, -0.09897294, 0.01419181, -0.11613348, 0.01042462, 0.03451480, 0.04172211, -0.01392495, 0.00623168, -0.04332909, 0.11026662, 0.14371558, 0.06372122, 0.11172169, 0.06559001, -0.06655655, 0.11671297, -0.01597794, -0.05978248, 0.10433739, 0.01778561, -0.02145620, 0.05582055, -0.11993211, 0.06934881, 0.12801260, -0.08897138, -0.04303124, 0.08710907, 0.07482887, 0.01254666, 0.00304762, 0.06100021, -0.00407289, 0.05197474, 0.06613387, -0.08192494, 0.00960628, 0.04732132, -0.06409020, -0.01823136, 0.06577462, 0.05804012, 0.01507966, 0.03709755, -0.09496776, 0.03128066, -0.07356448, 0.09305528, -0.07881652, 0.02560088, 0.09321037, 0.04550834, -0.04705166, 0.00437392, -0.10277369, -0.04340051, 0.07565277, 0.06901531, 0.05970006, 0.10497416, -0.03460908, 0.00169948, 0.03144151, 0.10407844, -0.02046169, -0.07452711, -0.09105027, -0.04436625, -0.10537624, -0.15975681, 0.03580364, -0.10958825, -0.03547305, -0.05137616, 0.00177497, 0.07406165, 0.08456677, -0.05911363, -0.10850973, 0.05633605, 0.02993985, 0.02907087, -0.10316413, -0.08865748, 0.09929902, 0.01679355, -0.13112076},
  {-0.05472911, 0.10280552, 0.06419914, -0.07073601, 0.06988993, 0.13571386, 0.09581637, -0.08014725, -0.09605143, -0.01785459, -0.12729704, -0.04148186, 0.03907606, -0.23000203, -0.01402909, 0.10052401, -0.07361502, -0.05190897, 0.00924848, -0.07084325, -0.00508569, -0.04164249, 0.08785056, 0.06151156, 0.01553033, -0.03214883, -0.07548659, 0.02347245, -0.06208855, -0.01815321, -0.02672577, -0.04531017, -0.17641796, 0.02683847, 0.08728386, 0.06755408, 0.01419161, -0.01763540, -0.02789143, 0.17287786, -0.07302100, -0.05055320, -0.11665072, -0.13256596, -0.07944109, 0.17470950, 0.15877564, 0.03255546, -0.06771716, -0.11910617, -0.08583167, -0.12321075, 0.07854128, 0.07456663, 0.00673696, 0.22035806, -0.05666313, -0.00289523, 0.03490512, -0.11094803, -0.00646526, 0.02312100, 0.00891274, 0.13904072, -0.02426322, 0.13580622, 0.11933257, -0.17742014, -0.15195662, 0.01512881, -0.04471727, -0.17102216, 0.02123072, -0.13294382, 0.08542444, 0.06183620, -0.12468591, 0.04600061, -0.14807659, 0.14092664, 0.14057098, 0.12286588, -0.08852877, -0.08176773, -0.10309786, 0.17660205, 0.10746516, 0.00293404, -0.01179597, -0.04822721, 0.06445188, -0.11826719, -0.06282986, 0.08856310, -0.00533809, 0.03698724, 0.03902480, 0.06287784, -0.02016552, -0.12625071, -0.08293849, -0.03681524, -0.01377687, 0.16448905, -0.08329771, -0.04580019, 0.08808658, -0.05328948, -0.01242101, -0.01779537, -0.07929647, 0.04541674, -0.01533253, -0.03322608, -0.03885655, 0.00948544, 0.06784634, 0.15024793, -0.14755367, 0.01231412},
  {0.06295446, 0.05164743, -0.09777106, -0.11026680, -0.04178962, 0.04071236, -0.29781076, 0.06533192, 0.10783554, 0.05060125, 0.06742235, 0.10964142, 0.18836708, 0.05621599, -0.19469999, 0.00351349, 0.01173912, 0.15033393, 0.07464976, 0.06587150, -0.02161687, 0.06559142, 0.04694610, -0.02706589, 0.09560101, -0.01291841, 0.08552944, 0.03162943, -0.06441812, -0.07110623, -0.09817085, -0.01104045, -0.12338743, 0.05795621, 0.01725642, -0.04528584, -0.10469986, -0.10463625, -0.09471253, -0.07208113, 0.04956894, 0.11421403, -0.00616380, -0.03480804, 0.08607648, -0.01375695, -0.10831515, -0.10657749, 0.07494286, 0.15984768, 0.05780318, -0.02574829, 0.11803491, 0.06605305, 0.02335524, 0.03155306, -0.14199863, -0.00108364, -0.07187040, -0.01106967, 0.10525908, 0.01275437, -0.07531482, 0.01875512, 0.02059821, 0.05626211, 0.02863893, -0.01817401, 0.02557666, -0.07587878, 0.03591967, -0.00406711, 0.14693832, -0.02988859, 0.11490942, 0.16511127, -0.02405674, 0.02698886, 0.05149631, 0.00773163, -0.05794062, 0.01351769, -0.07457208, -0.04606646, 0.03814182, 0.05529661, -0.08910923, -0.02393148, 0.04446269, 0.06492463, 0.02603507, 0.08649977, 0.06522322, 0.14217225, -0.13816176, -0.00030283, -0.09954621, -0.10447405, -0.02625652, -0.12834528, -0.05429177, 0.04514018, -0.02190612, -0.05270213, 0.03122565, 0.03922493, 0.12311763, -0.08330870, -0.00381138, -0.03387544, 0.12199861, 0.00425726, -0.09592164, -0.05278312, -0.04652138, -0.02499745, 0.05618306, -0.03982980, -0.01327067, -0.09735166},
  {0.06371933, -0.00576048, -0.05252970, -0.05802549, 0.03902040, 0.14090459, -0.00750610, -0.12439695, 0.08766957, -0.03033853, -0.11133789, 0.00794804, 0.10207846, 0.05223000, 0.09460919, 0.12474655, -0.02712247, 0.07506435, -0.06387198, 0.09149944, -0.07154954, 0.01368940, 0.11227991, -0.07555654, 0.05922090, -0.06273062, 0.14344278, 0.08755790, 0.12789072, 0.07798892, 0.08139300, 0.06242477, -0.16517268, -0.02342864, -0.00056363, 0.12311815, 0.07236049, 0.01565694, -0.00810278, 0.06785242, 0.03312217, -0.13261852, -0.12341277, -0.10446434, -0.02215450, -0.05835876, 0.06922243, -0.10734669, 0.04504962, 0.04418413, 0.06758082, -0.14957716, 0.05191239, -0.01489828, 0.04260326, -0.08007666, -0.08577251, -0.05141933, -0.05287838, -0.07540094, -0.01560671, -0.12669426, -0.06167195, 0.01919508, 0.07089822, -0.00856053, 0.10841759, 0.08339955, -0.10087816, -0.08513577, -0.06577470, -0.11347248, 0.04422805, -0.01014975, 0.06624416, -0.09159284, -0.06789993, -0.00031411, -0.05738548, -0.06469178, 0.06151662, -0.14103043, 0.17397635, 0.12515897, 0.00735189, -0.03773529, 0.11522772, -0.12323491, 0.00234596, 0.07242122, -0.12053727, 0.08387640, 0.11521626, -0.06519696, -0.02907071, -0.01875234, -0.12708984, 0.03678354, -0.00884885, 0.01332089, -0.11662705, -0.00200609, -0.07776601, -0.03882270, -0.02042541, 0.01297718, -0.07589455, 0.01690153, 0.04203936, -0.05526225, -0.07173664, 0.02508142, 0.09217279, -0.02466593, 0.07034297, -0.05199467, 0.00199339, -0.06188456, 0.00667954, -0.00191454},
  {-0.02024765, -0.00674572, 0.07852761, -0.10686164, 0.02431913, -0.03702983, 0.09692561, -0.10755815, -0.02161304, -0.07609405, 0.14450610, 0.11773892, 0.00997851, 0.06104876, -0.01399819, 0.07784420, -0.06684511, -0.14296089, 0.04596206, -0.08525132, 0.04950014, 0.10099571, 0.00562022, 0.09961125, 0.06226959, 0.04830524, -0.06343391, -0.07295997, -0.13082953, -0.05373415, -0.00599453, 0.10410226, -0.02034478, 0.06279109, 0.06591441, 0.02049951, 0.02925440, 0.11639833, 0.14440064, 0.08561305, 0.05032964, 0.02184979, 0.04669415, 0.10276309, -0.16651975, 0.07056343, 0.16453104, 0.01486822, -0.12167919, -0.18395376, -0.10474102, -0.01413807, -0.11932991, 0.04464182, -0.10098592, 0.02127951, -0.07330188, -0.05628025, 0.10822812, 0.01099155, -0.01777046, 0.08725179, -0.14808230, -0.07198140, -0.00401640, 0.10567451, 0.01922014, 0.12088705, -0.02906284, -0.01853918, 0.01480206, 0.10987299, -0.08814193, -0.07593081, -0.05532667, -0.05094806, -0.12982681, 0.00421071, -0.14491525, -0.07355099, 0.05307720, 0.09366472, 0.15839456, -0.04492156, -0.08842967, 0.08922984, -0.00442746, 0.05411690, 0.08751252, -0.12614457, -0.01245213, 0.06875838, -0.08273939, -0.11272332, -0.00486440, -0.03602710, -0.09743305, -0.00580332, 0.05942489, -0.15334328, -0.12613073, -0.11638236, 0.05547155, 0.01443775, 0.07479639, -0.08041070, -0.05953962, 0.11979625, -0.06398209, -0.04519796, 0.01616709, -0.01778974, 0.06843710, -0.09712810, 0.07055985, 0.00159581, -0.16985188, -0.00940348, 0.17282772, -0.05606653},
  {-0.00546245, 0.09560255, -0.06759755, -0.03487707, -0.03531649, 0.12134632, 0.07680897, -0.01434664, 0.08142733, -0.10967784, 0.07467362, 0.01643877, 0.14893942, -0.09027586, -0.06000147, -0.02223717, -0.07529600, -0.09106921, -0.04423209, -0.04363366, 0.06571440, 0.12784939, -0.01291221, -0.10672133, 0.03478979, 0.05289840, 0.12379113, 0.06301093, 0.09360089, -0.07118052, 0.08049942, -0.09477173, -0.19858868, -0.03547166, -0.06553319, -0.06708712, -0.04892098, -0.04425989, 0.05612469, 0.05564687, -0.09106452, -0.00294166, -0.06262093, 0.09863635, -0.08997371, 0.09853093, 0.07017487, 0.05701731, -0.00302050, -0.18818203, -0.03984332, -0.05262759, -0.18199398, -0.02725814, 0.15968074, 0.01080741, -0.14230144, -0.05512178, 0.12624305, -0.00999173, 0.07043140, -0.12974721, -0.06964353, -0.07740740, 0.03336429, -0.08824715, -0.04321964, 0.07080050, -0.15455818, -0.00763327, 0.02368144, -0.14487070, -0.09855898, -0.07233940, -0.02396957, 0.08522739, -0.06531208, -0.08620231, -0.01451500, -0.19377287, 0.07287900, 0.00906319, 0.02516438, 0.05989882, -0.01706006, 0.01046203, 0.02489190, -0.10986512, -0.11408467, 0.12289403, -0.12020190, -0.07753935, -0.02829612, 0.04777134, 0.07242668, -0.00130023, 0.06636535, -0.14242011, 0.04227002, -0.10490390, -0.01556007, 0.03729237, -0.02017237, -0.10361429, 0.02302377, 0.03179929, -0.00590303, 0.07798261, 0.02042203, 0.03825827, -0.12742177, 0.04013438, 0.01276669, 0.08177460, 0.01230103, 0.01931604, 0.04162757, 0.11379406, 0.12994234, -0.05557067},
  {0.09794828, 0.09340062, 0.03712856, -0.08696439, 0.12607852, 0.04689718, -0.27663898, -0.07217598, 0.03728630, -0.11163779, 0.06315273, -0.02415595, -0.01447073, 0.06152356, -0.02255533, -0.02539717, -0.02319901, 0.02512682, -0.02421231, -0.01413399, -0.05157636, -0.04646654, 0.12938850, -0.02383989, 0.16230297, -0.04829891, 0.08828119, -0.08582181, -0.06424617, -0.06060495, -0.01991158, 0.07613000, -0.00723157, 0.03365285, 0.02415834, 0.09979568, 0.07842550, -0.03311219, -0.01173498, -0.01671218, -0.10817943, 0.12171447, 0.12515549, -0.15705861, -0.17156358, -0.05337096, 0.05989902, -0.02509645, 0.08034280, -0.11024404, 0.01205683, -0.17099433, 0.00019745, 0.05642820, -0.03922898, 0.12751703, -0.15254106, 0.03153511, -0.00157643, -0.07871414, -0.01719165, 0.01911620, -0.03982905, -0.02821986, -0.13443197, -0.05281301, -0.02815802, 0.12326794, 0.07753360, -0.01719119, 0.07108357, 0.04443651, -0.02869111, -0.13411184, 0.03529925, -0.17089291, -0.02230377, 0.08304930, -0.17634839, -0.00764204, 0.08241671, 0.11804400, 0.05344498, -0.08116600, 0.06544559, 0.19840553, -0.06702648, -0.03674630, -0.20602892, -0.07492094, 0.09403623, 0.02617005, -0.07843304, 0.03021416, 0.15096487, 0.19143118, -0.22864687, -0.13242796, 0.04691342, -0.12229063, 0.03265925, -0.08557034, -0.08469231, -0.03136582, -0.01908230, -0.01911089, -0.07402685, 0.08393915, 0.05049263, 0.08080186, -0.09549205, 0.09819679, -0.03459995, -0.02603895, -0.00976585, -0.02141583, -0.05978550, 0.07756257, 0.10687585, -0.04841779},
  {-0.03493999, -0.05528326, 0.08260290, -0.06705294, -0.01781335, 0.11967462, -0.04514549, 0.00293545, 0.11696338, 0.07391235, 0.03220227, -0.07896982, 0.04744320, 0.05509181, -0.07201300, -0.01767646, -0.08640579, -0.02559567, -0.04555905, 0.02880134, 0.05402387, 0.06037721, -0.11964685, 0.09475529, 0.03304131, 0.01267217, -0.07750005, 0.02521428, -0.08428603, -0.09928627, -0.05232935, -0.02942395, 0.04779956, 0.06458212, 0.08789577, 0.04587812, 0.13167289, -0.09390737, -0.00158856, 0.03316825, -0.03850802, 0.00841387, -0.00519523, 0.02714073, -0.06635956, 0.02875439, 0.04821635, -0.12640372, 0.00735658, -0.05826356, -0.04622182, -0.02099553, 0.05190093, -0.09114309, -0.03019414, -0.02920847, 0.04256880, 0.11359764, 0.07120749, -0.07474074, 0.00908127, 0.10262205, 0.03968805, -0.01428377, 0.04598309, -0.06642108, -0.11952449, 0.04901853, 0.05647017, 0.04107358, 0.08300211, 0.06549201, 0.08860922, -0.01491459, 0.05139255, 0.04095478, -0.08033234, 0.02778708, -0.14850473, 0.09672689, 0.10355448, 0.01808660, -0.07350658, -0.00552073, -0.11535188, -0.05879923, -0.13225545, 0.04815006, 0.03383882, -0.02701861, -0.02212867, 0.09938730, -0.02777646, 0.01982909, 0.04002481, -0.00122511, -0.06752996, 0.07159052, 0.04703703, -0.04246392, -0.01670727, -0.04959277, -0.02176678, 0.12546971, 0.07940769, -0.08135407, -0.02943312, -0.02148812, -0.04799838, -0.07921693, 0.11488800, -0.09740917, -0.03201944, 0.01970588, 0.09334698, -0.08214284, 0.03483896, 0.04952382, 0.04710408, -0.16160181},
  {0.13387726, -0.06389602, -0.10543636, 0.00915470, 0.06255269, -0.11179353, -0.05376347, -0.07239195, -0.03563234, -0.10329628, -0.00923142, -0.01707203, 0.04718328, 0.03619337, 0.02597524, 0.07249275, 0.07189304, 0.03859051, -0.02648157, 0.00298650, -0.03021141, -0.02345274, -0.02201315, 0.03694072, -0.06711302, -0.08386004, -0.00721283, -0.05728358, -0.13435844, 0.06698820, -0.05476246, 0.14906232, -0.12488265, 0.06180397, -0.03070266, 0.05512167, 0.06015718, -0.00385467, 0.04180238, -0.07184712, -0.06572976, 0.05175414, 0.05007472, -0.01205257, 0.10269186, -0.09414265, 0.08678721, -0.04099810, 0.06723820, 0.10310727, -0.02820087, -0.01047626, -0.05625059, 0.06109973, -0.10521007, -0.09969601, -0.02589280, -0.05369452, 0.09470995, -0.07029838, -0.00343919, -0.11108737, 0.07300622, -0.05273343, -0.05422261, 0.01900602, 0.03144031, -0.05402478, -0.04904677, -0.09504085, 0.04920083, 0.04454197, -0.05880415, -0.05354940, 0.08597497, 0.03275645, -0.04374773, -0.08873574, -0.03031808, 0.03643685, 0.07408889, 0.12643856, 0.14357422, 0.05526971, 0.09322549, 0.09939634, -0.02983290, -0.00699351, -0.10957151, 0.14466985, 0.10674918, -0.01359253, 0.14756669, -0.07092839, -0.04397889, 0.12627919, 0.01243028, 0.04964012, 0.03081032, -0.09124136, -0.08272094, 0.07003200, 0.06804162, -0.07593547, -0.02400070, 0.05768598, 0.04650955, 0.08859539, 0.07130665, 0.00286891, -0.07705984, 0.04264999, -0.09710804, 0.03560597, 0.04180547, -0.03104114, 0.04119605, -0.04702308, -0.02743605, 0.01323168},
  {0.07000595, -0.05551405, -0.05354254, 0.08288422, 0.07747968, 0.06893945, 0.09621281, -0.09319501, -0.04396903, -0.05294883, 0.01575544, 0.11133994, 0.02126784, 0.13204528, 0.06824267, 0.12528530, -0.08950413, -0.04364765, 0.05403836, -0.16278419, 0.11678110, -0.01464190, 0.23200680, 0.20048098, -0.06891109, -0.08639812, -0.10796081, 0.05669602, 0.01858456, 0.00411108, 0.00715893, 0.23256135, -0.04565575, -0.13368037, -0.12724666, 0.05674114, 0.10751244, 0.23075807, -0.05950455, 0.08346000, -0.09627841, -0.07834938, -0.11143530, 0.04353586, -0.00978632, 0.00493292, 0.02549472, 0.05866469, 0.03901867, 0.07142626, 0.08104609, -0.17734772, -0.06611714, 0.05763315, -0.11688785, -0.28649905, 0.02897513, -0.05926846, -0.19237307, 0.19515598, -0.15785156, -0.12708789, -0.16369285, 0.30871102, 0.12661430, 0.20635431, -0.01233139, 0.00029604, -0.15793768, -0.07400084, 0.00318748, -0.22524603, 0.05093115, 0.13242202, -0.10007598, 0.08427282, -0.25475702, 0.01472805, 0.08362940, -0.11425124, 0.02738307, -0.22348836, -0.02645276, 0.21088025, 0.21548072, 0.09822714, -0.00615522, -0.02979255, -0.09674431, 0.18354392, 0.14666860, 0.07878483, -0.10305579, 0.06554138, -0.05775006, 0.08038339, -0.06670956, 0.08813903, 0.04236618, -0.05786353, 0.01062186, -0.09640807, -0.01622112, -0.05582882, -0.05856275, 0.08144132, -0.05282752, -0.08696716, 0.08243785, -0.12248468, -0.05530684, -0.09138624, -0.22217658, 0.00357109, -0.00592807, 0.02929515, -0.09402995, -0.23679459, -0.02227239, -0.05909735},
  {-0.13344201, 0.10027681, -0.15766388, -0.04452630, 0.20606673, 0.05120343, -0.20179187, -0.09094083, 0.18321298, 0.09474444, -0.33474949, -0.02806425, 0.02608837, 0.03745743, -0.06503277, -0.08952422, -0.02472604, -0.00480313, 0.02430519, 0.07782072, 0.07941689, 0.07033543, 0.05871990, 0.01038616, 0.12391099, 0.07236101, -0.05953424, -0.06072779, -0.02022805, 0.04969288, -0.00884467, 0.05774501, -0.12001414, -0.08249396, 0.01158528, -0.27578658, 0.00355966, 0.04927497, -0.15054166, -0.07719285, 0.08756655, 0.09724126, -0.08894578, 0.08729773, 0.03753982, 0.11866856, 0.07933757, 0.02277346, -0.00119728, -0.05874339, 0.00848956, 0.09406562, -0.08506038, 0.18062212, -0.05668188, 0.02244529, 0.00396841, 0.04779671, -0.03620559, -0.18582532, 0.11884193, -0.03506787, -0.18780129, 0.16769029, -0.02597691, 0.09029294, -0.00503431, -0.14419226, 0.02743754, -0.10776306, -0.20378105, -0.12121131, 0.14830165, -0.05199649, -0.09315189, -0.09222735, -0.12893716, 0.03466653, 0.01454659, 0.09348818, -0.19402599, 0.14471899, -0.18297654, 0.03490949, -0.02421897, 0.17332268, -0.09530537, -0.04008146, -0.11598553, -0.01167510, 0.05040171, -0.06127729, -0.04141390, 0.23848073, -0.07809531, 0.08636838, -0.06649373, 0.05996156, -0.05087238, -0.08090405, -0.04880987, 0.07844402, -0.18252677, 0.13068293, 0.01680219, 0.01589062, -0.05844018, -0.12986697, 0.12442601, -0.02734280, 0.03121939, -0.06639286, -0.06211668, -0.03095616, -0.07406422, 0.02867014, -0.04746983, -0.02943901, 0.01615177, 0.06298790},
  {0.08879952, -0.10321462, -0.00545175, -0.00789268, -0.14101775, -0.03530256, -0.04543707, -0.04488990, 0.05042119, 0.03768437, 0.18076038, -0.16982044, 0.20664240, -0.03480661, -0.08359490, 0.13415739, 0.01274821, 0.16075385, -0.01175397, 0.08626711, -0.12764151, 0.11457377, -0.00065145, -0.09526451, -0.04269687, 0.02019766, -0.05312967, 0.05921620, 0.00646065, -0.03807481, 0.03310053, -0.09508180, -0.05114328, 0.06834406, -0.06502635, -0.01492717, -0.13377856, -0.13611722, 0.06095713, 0.03802305, -0.05922339, 0.07695662, -0.06345547, -0.25607550, 0.04990104, 0.13069943, 0.07422685, 0.01777395, -0.06864896, -0.09877869, 0.23931189, -0.02883136, -0.01771865, 0.02446463, 0.09014942, 0.05103896, -0.07046963, -0.07080474, 0.03660445, -0.14618255, -0.01609432, -0.24870989, 0.03727780, 0.07623462, 0.01888402, 0.11179217, 0.14273521, 0.14789437, -0.10107151, -0.10694296, 0.01720049, -0.04949895, 0.06318476, -0.18160379, -0.00816614, 0.01669120, 0.03460637, -0.04194334, -0.01167715, 0.08649572, 0.20900708, 0.00756175, 0.18929577, 0.14795735, -0.04744310, -0.19088566, 0.10018703, -0.05811775, 0.01258746, 0.19318110, -0.00203078, -0.07807013, 0.00136609, -0.09443513, 0.16465437, -0.14805181, -0.07425335, 0.03341702, -0.01406724, -0.11221309, -0.03592084, -0.01576670, 0.26227480, 0.03039594, 0.08491556, -0.02469682, 0.07927275, -0.05646272, 0.04460863, -0.08111748, -0.01685116, 0.17083825, 0.04325439, 0.05239441, -0.12466818, 0.09673252, 0.17491421, -0.00760360, -0.03719547, 0.09447530},
  {-0.04092012, -0.04103870, 0.04036090, 0.04361615, -0.05663770, 0.00447366, 0.00019061, -0.06286769, -0.07411020, 0.08175132, -0.02982483, -0.01173498, 0.00478466, -0.04305439, 0.03025868, -0.02283309, -0.00153484, -0.15921959, -0.06742331, -0.08768537, -0.02499554, 0.11281250, 0.11675947, 0.18900210, 0.12726550, -0.03288675, 0.04437669, -0.04493363, 0.08032019, 0.04128801, 0.05094796, 0.16614212, 0.06524024, 0.08362436, 0.08879871, -0.06658805, -0.04080975, 0.13225935, -0.06280044, 0.12701356, -0.03457211, -0.04101333, -0.00018854, 0.06647882, -0.13470177, 0.11521594, -0.00521610, 0.05565332, -0.01692954, -0.06463338, -0.02704648, -0.03821575, -0.15497783, 0.12141383, -0.06178200, 0.03289182, -0.10201080, 0.12842594, -0.10630885, 0.07101822, 0.06642918, -0.04612475, -0.09091870, -0.04993033, 0.01674293, 0.11594743, -0.03213003, -0.00786747, -0.29924279, -0.01946581, 0.00772689, 0.00726246, 0.02936136, -0.03253241, -0.03957222, 0.16972286, -0.04889173, -0.03473379, -0.11643936, -0.06673058, 0.00067730, -0.06416251, 0.16640061, 0.08220538, 0.06122979, 0.25843757, -0.13790928, -0.05416700, -0.01050116, 0.04988776, -0.03150953, -0.02286315, -0.07319859, -0.06261209, -0.04404394, 0.11700681, 0.04769549, -0.05852297, -0.03383528, -0.03012867, 0.06164851, 0.08279116, -0.18010414, -0.19429186, 0.03880552, -0.11845922, -0.09327644, 0.12343647, 0.14496799, 0.00968892, 0.00473917, 0.01337491, -0.14987667, -0.10520895, 0.08164890, 0.06924151, -0.09381415, -0.06984366, 0.08212452, 0.03062432},
  {-0.01204018, 0.05926835, 0.07999169, 0.09110502, 0.11370149, 0.04324124, 0.10797327, 0.08453321, 0.03604064, 0.02061578, -0.03638762, -0.10215844, 0.00941527, 0.03429024, -0.01252730, 0.07311779, 0.09771141, 0.02177724, -0.01484637, 0.06112325, -0.15585774, 0.05293170, -0.10719755, 0.03369242, 0.06281707, -0.03488359, -0.01679591, 0.02382541, -0.04398230, -0.04631772, -0.04032389, 0.06600650, -0.15033150, 0.06328140, -0.01971135, 0.04751018, 0.02728132, -0.13944301, 0.15947326, 0.04608077, 0.07864781, -0.01351972, 0.02637479, -0.15425068, -0.03295716, -0.01329874, 0.01920793, 0.00551666, -0.07996889, -0.15750723, 0.09530631, -0.16412254, -0.07296121, -0.02849479, 0.00460574, 0.01852916, 0.00784143, -0.06204978, 0.08767816, -0.00522588, 0.18488258, -0.07010342, -0.01182811, -0.01403335, 0.04829120, -0.09123331, -0.07239746, 0.14074422, -0.26115707, 0.06025384, -0.01108858, -0.03494391, -0.06223613, 0.03512911, 0.06333579, -0.00401884, 0.01332840, 0.07959971, -0.12161045, -0.11834498, 0.22331645, -0.02282770, 0.00992068, 0.08823643, 0.03464023, 0.04972149, -0.07591181, 0.07579344, 0.00158001, 0.15307297, -0.06543110, 0.08229057, 0.10291339, -0.08378109, 0.08665413, -0.00550510, -0.10719907, -0.12420610, 0.09386926, 0.01865830, -0.10922113, -0.01840444, -0.03226288, 0.06115769, 0.12871705, -0.11488914, -0.00633257, -0.11232276, 0.06574984, -0.01342373, -0.08866106, 0.17951213, -0.02355324, -0.07502479, 0.15121843, 0.03621890, 0.01654967, 0.00732164, 0.07834173, 0.00695886},
  {-0.17027067, 0.01116199, -0.03018856, -0.10102282, 0.02528703, -0.07546842, 0.26267713, 0.00378639, -0.20756559, 0.00516813, 0.00843619, -0.10508443, -0.08432937, -0.11000112, 0.06554437, 0.22379848, -0.00715179, -0.05047637, 0.09094069, -0.02277580, 0.05342345, 0.03310632, -0.05199651, 0.08455120, 0.10570192, 0.05066736, 0.06420752, 0.00643912, 0.07411219, 0.04599965, 0.01481580, 0.06336506, 0.03904678, 0.01752021, 0.13640435, 0.18317492, -0.00149229, 0.26302400, 0.10265017, 0.02089357, -0.00059620, -0.00431002, -0.10803010, 0.04488541, 0.07844135, 0.06773482, 0.30204096, -0.02719946, 0.05817971, -0.09960283, -0.10058530, -0.06658164, -0.13234383, -0.07343999, -0.05073652, -0.01592976, 0.14175411, -0.00194123, -0.13398951, 0.05283000, 0.21943364, -0.02514200, -0.22190964, 0.09230347, 0.04984031, -0.05272293, -0.25068638, 0.08224501, -0.16268435, -0.04194977, 0.06938918, -0.21968703, -0.16924074, 0.07877716, -0.02560762, -0.00034436, -0.10269295, -0.06445863, -0.02378232, -0.02737102, 0.11775343, 0.11163618, 0.17202887, 0.08705907, 0.00203074, 0.13689411, 0.07538898, -0.10602982, -0.20009686, 0.11887195, -0.00581304, -0.05129326, -0.28827929, 0.00538733, 0.08094411, 0.18279591, 0.03499719, 0.06463408, -0.02041223, 0.00881852, 0.07735862, -0.09854539, -0.07469295, -0.01282876, 0.07006104, 0.00006117, -0.29915839, -0.08434059, -0.07375885, -0.03619821, -0.06112186, -0.10119044, 0.07825066, 0.02018512, 0.09786984, -0.01637134, -0.11676389, 0.06916541, 0.04041703, -0.04295761},
  {-0.05634393, -0.07014433, -0.04254644, -0.00317682, 0.03234564, 0.09634267, -0.14898948, -0.05935717, -0.01157343, 0.01664593, 0.18870150, -0.02513064, -0.11525726, 0.09897166, -0.07598031, 0.00642365, -0.10516734, 0.13493849, -0.11343857, 0.09189833, 0.04648133, -0.13096488, -0.01872248, 0.11830428, -0.14931577, 0.09169715, 0.01574100, 0.06189244, 0.04780088, -0.03065406, -0.00695730, -0.02019683, -0.13885471, -0.08538828, -0.16638704, -0.14002253, -0.11522260, -0.13257766, -0.23376007, -0.12634911, -0.10729136, -0.00570588, 0.05153207, -0.22153112, 0.06465459, 0.09229766, 0.02739538, 0.02182799, -0.10136200, 0.11114918, 0.11210946, 0.17938240, 0.14455742, 0.03771066, -0.10520408, 0.01717434, -0.09558645, -0.02838206, -0.04521153, -0.06486366, -0.03853465, 0.06400165, 0.01908685, 0.05358714, -0.16493550, 0.04374850, -0.03457648, -0.08855718, -0.09133220, -0.00789379, -0.16434699, -0.15545367, 0.22700018, -0.17158009, -0.14578129, 0.03922171, 0.02891872, 0.01952909, -0.03750639, 0.24259204, 0.06718745, 0.15431550, -0.06694555, -0.08671422, -0.08062176, -0.05093252, -0.24025458, -0.06388978, 0.04715161, 0.06595217, 0.11216949, -0.05082595, 0.07272942, 0.18268563, -0.12143154, -0.10959266, -0.11820257, 0.02871753, 0.07139605, 0.04277534, -0.05825129, 0.06738982, 0.02132346, 0.19118072, 0.13055262, 0.01345998, -0.00658888, 0.04449115, 0.01639513, 0.09142564, 0.15565361, -0.07155053, -0.01312351, -0.09918081, -0.05750686, -0.10176898, 0.16196024, 0.00128628, -0.09007511, 0.02729446},
  {0.06592777, 0.13690004, 0.10646170, -0.00735411, 0.10590557, 0.12336773, -0.01952760, 0.01799771, -0.08864302, -0.03066637, 0.03104951, 0.08863495, -0.03307217, -0.08537311, 0.04495284, -0.02658746, 0.04870860, 0.05951040, -0.03645173, 0.10721843, 0.06110156, -0.00454106, 0.06410501, -0.03212398, -0.06235311, -0.03747448, -0.05213160, 0.03559159, 0.01293742, -0.04546779, 0.01512914, -0.06570698, 0.02588058, -0.06616246, 0.10073652, 0.00254821, 0.10852338, -0.06619014, 0.05489823, -0.11002322, -0.13418800, 0.06124708, -0.10220627, -0.02945052, 0.04258983, -0.04143064, -0.02184020, 0.01571329, -0.00224857, -0.01608955, -0.12483680, 0.04819081, -0.04920762, 0.01219950, -0.00008248, -0.09349604, -0.10521743, -0.00788582, 0.09150738, 0.03572757, 0.11876418, 0.04593758, 0.08425657, 0.05752849, 0.12391847, 0.01417045, 0.06685406, 0.03975251, 0.04046582, -0.05037175, -0.05981910, -0.02513575, 0.08879656, 0.03762900, -0.01072795, 0.09983588, -0.03134738, 0.08731037, -0.04549780, -0.06144746, 0.00494694, -0.06825408, 0.00070545, 0.00657158, -0.06303377, 0.04867723, 0.10978678, 0.07412559, 0.10659371, 0.04222199, -0.01245988, -0.08843403, -0.00140735, 0.06637577, -0.07483760, 0.07752474, 0.03286314, -0.01422944, -0.00803851, -0.09977531, -0.05666873, 0.00012101, -0.02200169, -0.08029093, -0.07315817, -0.12201899, -0.04602017, -0.01382711, 0.12948544, 0.03502394, 0.03056831, 0.13530260, 0.03296216, -0.00736982, -0.04172713, 0.09648572, -0.00070772, 0.05666782, -0.07005333, -0.08424399},
  {-0.17313963, 0.02263499, -0.09906983, 0.02450433, 0.26673177, 0.11178440, 0.02471317, 0.04160200, 0.04031184, 0.05795640, -0.07083271, 0.08616500, 0.07462548, -0.08307633, -0.08525508, 0.02106067, 0.01060538, -0.00960230, -0.02362908, -0.06188425, 0.09627642, -0.02042622, 0.12013408, -0.04411459, -0.05872657, 0.02856748, -0.12069118, 0.03024761, -0.00557324, -0.12061471, -0.01708235, 0.08078960, 0.00653944, 0.07700625, 0.04840457, -0.03269565, -0.00463477, 0.00349785, -0.12696393, 0.02826528, 0.00627980, 0.13822465, -0.06224221, -0.08654612, -0.05272109, 0.17455873, 0.10624704, -0.01574676, -0.09230459, 0.03618369, -0.08242738, -0.09297917, 0.07154754, 0.11561643, -0.00780406, 0.00059267, -0.08377367, -0.00116881, -0.04950312, -0.09637291, 0.11835803, -0.13344249, -0.19355668, -0.00313066, 0.00683513, -0.01897271, 0.07147425, 0.04695550, -0.30103904, 0.04787082, -0.16577658, -0.16975094, -0.09618412, -0.14736024, -0.11313421, 0.07955655, 0.04341421, 0.02726366, -0.25060475, 0.02552954, 0.11729259, 0.14376405, -0.04822145, 0.14683813, -0.03587943, 0.01672779, -0.05530898, -0.08473139, -0.22834919, 0.08003305, -0.09138890, -0.06334691, 0.12085341, -0.05317655, 0.09483810, 0.13266523, 0.13826217, -0.08461805, 0.06092864, 0.03985099, -0.09012522, -0.00519307, 0.01525920, -0.08593836, 0.03730127, -0.00547560, -0.01167451, -0.11407600, 0.01466121, -0.06483480, -0.10542732, -0.01633477, -0.16947861, -0.07289407, 0.09568532, -0.03002680, -0.00588606, 0.04159240, -0.01174752, -0.09423324},
  {-0.04865921, -0.05013686, -0.00506260, -0.02258132, 0.04550811, 0.12520172, -0.15882051, -0.12266926, -0.06318877, -0.02180545, -0.09171705, -0.08792926, 0.00623000, 0.11540239, -0.08398419, -0.08929229, -0.03612372, 0.05425972, 0.05984949, -0.07318622, -0.08620942, 0.13828821, 0.11544839, 0.10599363, -0.00791691, 0.06708711, -0.05071589, 0.07592962, 0.03276068, 0.03835871, 0.00440730, 0.10812116, 0.15012076, 0.00462751, -0.14292364, 0.02783116, -0.07546303, -0.12696110, -0.17073971, -0.07344446, -0.05837856, 0.05876250, -0.01605071, 0.02198271, 0.05492704, 0.00468262, 0.01013996, 0.06537849, 0.08218268, 0.12197240, 0.06240232, 0.07587574, -0.05632559, 0.07134927, 0.00370370, 0.04879211, -0.02090644, 0.11880443, 0.01640191, -0.04077015, -0.13137060, 0.02137116, 0.09223364, -0.00058491, 0.05438664, 0.06261511, 0.09754592, -0.18260069, -0.00612732, 0.07679391, -0.08834785, 0.01907978, 0.01805165, 0.05549992, 0.03584095, -0.11349394, 0.07896148, 0.09256329, 0.06377798, 0.05667678, 0.05060858, 0.10067556, -0.03744749, 0.02083855, 0.05951206, -0.06070486, -0.00813756, -0.12737095, 0.01605121, -0.07009999, 0.15846956, 0.01051438, -0.00002620, 0.21806243, -0.04599021, -0.08244823, -0.09878962, 0.00096992, -0.08890951, 0.05461027, -0.13753279, -0.04137477, -0.09882979, 0.04079305, 0.04455090, 0.03914448, 0.14591399, -0.01734036, -0.04558021, 0.07445391, 0.11667392, 0.07811537, -0.07821996, -0.10307522, -0.02065205, -0.07026114, -0.02702990, 0.07960252, -0.01603162, -0.09476874},
  {0.09144559, -0.14986850, 0.16521850, 0.06212929, -0.01483042, 0.12912439, 0.03271856, 0.03145175, -0.11531763, 0.09177288, -0.06500924, -0.04211646, 0.03008126, 0.15724340, -0.04477796, -0.08808909, -0.08863603, -0.05658057, -0.00105343, 0.03944810, -0.05255259, -0.03938933, 0.17139687, -0.07562949, -0.10147870, 0.05789790, -0.13202254, 0.05906834, -0.10610756, -0.06931118, 0.01688262, 0.05399063, -0.11226672, 0.01278016, -0.05162831, 0.13307028, 0.17889103, 0.05268855, 0.00849078, -0.10073104, 0.03078602, -0.08277743, 0.07372090, 0.07225864, 0.08437681, -0.05642753, -0.10239498, -0.06313481, 0.08520331, -0.12405877, 0.06043946, -0.13477233, -0.05296015, 0.01041337, 0.05260843, -0.00192426, 0.02736195, -0.01268755, -0.00980526, 0.07421633, 0.03991368, -0.09356785, 0.09731482, 0.11534401, 0.01217985, -0.03655046, 0.03024529, -0.07569198, -0.14462885, 0.06728058, -0.08624152, 0.06983935, 0.04208164, 0.10625832, 0.02290973, 0.06917841, 0.06127911, -0.08045941, 0.12679432, -0.07750279, 0.05502487, -0.04874953, 0.09956063, 0.02144860, -0.03272662, 0.14407951, -0.06555945, 0.08661202, -0.03278462, 0.10439252, -0.00458122, 0.06575341, 0.06498948, -0.02127430, 0.03767889, 0.09825193, -0.07431286, -0.06759368, -0.11001003, -0.07549123, 0.09615732, -0.04529168, 0.04479066, 0.07455571, -0.14137517, 0.05264525, 0.05727709, -0.02964580, 0.09116033, -0.10140071, -0.02356445, 0.03600111, -0.07208855, 0.02673249, 0.04841231, -0.07260185, 0.08514579, -0.05813898, -0.03269108, 0.04791819},
  {-0.09474452, 0.05969666, 0.05590256, -0.01948071, 0.16637531, -0.13117301, -0.06310640, -0.06638579, 0.02530170, -0.01400508, -0.04899028, 0.07800499, 0.01808334, -0.04476158, 0.03034106, 0.03109784, -0.11823821, -0.23838350, 0.01250896, -0.03438145, -0.03778829, 0.04766675, 0.03419762, 0.11389306, 0.08963870, -0.00914863, -0.03367971, -0.07434057, -0.05400574, 0.00183748, 0.00286360, 0.06013024, -0.10700715, 0.10375137, -0.04117149, -0.08868987, 0.01333511, 0.19981124, 0.07815150, 0.05634116, -0.13365363, 0.05170387, 0.13712893, -0.09932745, -0.04509365, -0.08847819, 0.11731188, -0.06805655, 0.07397141, -0.04411950, -0.08648410, -0.08132703, -0.08585662, 0.09823561, -0.01379928, 0.02162539, 0.01626766, 0.04035354, -0.12872064, 0.14334990, 0.07628015, -0.13329239, -0.11274554, 0.01095655, -0.02892551, -0.10893609, -0.15589020, -0.05549837, -0.12532108, -0.08283475, -0.06466018, -0.03640852, 0.01847187, -0.05486875, 0.02610173, 0.10320089, -0.15816809, 0.08017791, -0.19863188, -0.00845397, 0.04661983, 0.01252794, 0.06198724, 0.14024928, -0.00313054, 0.06007438, -0.19838712, -0.05151203, 0.08216789, -0.12072884, 0.06433831, 0.02683696, 0.03260102, -0.10666852, 0.11991015, 0.12016954, 0.07557695, -0.00901829, -0.09384666, -0.10877410, -0.03648390, -0.10523728, -0.17320426, 0.02329005, -0.18930867, 0.02224862, -0.06614689, -0.00943762, -0.13387527, -0.03472188, -0.10338859, 0.01518131, -0.03938974, 0.06653055, 0.02625697, -0.05457754, -0.11217748, 0.03343494, 0.08037294, -0.06562171},
  {-0.05689273, 0.03073718, 0.10872116, 0.00478522, 0.03406145, 0.01574409, 0.04762646, -0.02793175, 0.06941798, -0.00061130, -0.01885040, 0.09825203, 0.15772818, 0.05405362, 0.06855485, 0.00346018, -0.01705557, -0.09225360, -0.10131589, -0.12404385, -0.06805859, -0.10966183, -0.11181005, -0.09548280, 0.11645044, -0.04136331, -0.05036008, -0.01232087, -0.07258940, -0.06981213, 0.11248807, 0.14544462, -0.00093445, 0.04315010, 0.07284534, 0.11853031, 0.08370072, -0.00633441, 0.03985693, 0.07890838, 0.06301356, 0.08008027, -0.12307421, -0.02093442, -0.05090009, 0.10420847, 0.01526633, 0.05736031, 0.05383907, -0.13879816, -0.01520416, -0.16417754, -0.11072575, 0.08335412, -0.04202894, 0.03641054, -0.14017315, 0.05476287, -0.07387850, 0.11274462, -0.01972461, -0.12804903, -0.14165254, 0.06672034, 0.08164414, -0.06566842, 0.00964094, -0.07266066, -0.04791688, -0.03243059, 0.01908109, 0.04321594, -0.15341634, 0.04280036, -0.01980454, -0.02696290, -0.14884059, -0.10209327, -0.09254961, -0.11335890, -0.04141377, 0.10635480, 0.12758675, 0.03475516, -0.10435273, 0.06216853, 0.05849028, -0.07455441, 0.12645018, -0.03196887, 0.07588021, -0.06668497, 0.05964460, -0.05641864, -0.07549533, 0.17294434, -0.03218782, 0.06326265, -0.03588828, 0.02711462, 0.03309425, -0.03627223, -0.09245545, -0.06982662, -0.08905128, 0.00493766, -0.11123412, 0.01000345, -0.05835887, -0.06576700, -0.12829857, 0.06842727, 0.05755736, -0.06938096, 0.01109542, -0.09173433, 0.01393906, -0.02268007, 0.07889899, 0.08738511},
  {0.07532226, -0.10863948, -0.10729013, -0.03790700, 0.02623174, -0.05703946, -0.23196171, -0.03517640, 0.03291792, 0.01636645, 0.15112242, 0.06667743, -0.00226200, 0.15317233, -0.14280333, 0.05998914, 0.02076366, 0.04501568, 0.07011940, 0.08726063, -0.03652219, 0.13458475, -0.08869171, -0.01236628, 0.02916498, -0.11507116, -0.14359264, 0.02026411, -0.02451264, -0.07096647, -0.01719858, 0.03487487, -0.00923408, -0.09014457, 0.07383177, -0.09054782, -0.02486412, -0.12056266, -0.00677019, 0.10859049, -0.06892040, 0.03281454, 0.00397843, -0.03509423, -0.03219371, -0.16582201, -0.07593776, 0.01031592, 0.00550299, -0.05941506, -0.09784368, 0.10617688, -0.21879376, 0.01956198, 0.01694570, 0.02345857, -0.07690235, -0.01215544, 0.02072808, -0.00575364, 0.10077299, -0.08021528, -0.01643331, 0.03917774, 0.14782564, 0.13688447, 0.01215841, -0.01310957, -0.05614726, -0.01326867, -0.05616653, 0.07371974, 0.00153749, -0.04555184, 0.06896530, 0.10164089, 0.00543461, -0.07783310, -0.13971920, 0.01680116, 0.01310688, 0.17216523, 0.09682871, -0.10077162, 0.08844030, 0.06032998, -0.17469367, -0.07092074, 0.08615593, 0.02464079, 0.19738016, 0.02458215, -0.05737667, 0.03938989, 0.09781289, -0.08186445, -0.11221343, 0.04892995, -0.06808493, -0.11485400, -0.03311543, -0.00440970, 0.08165792, 0.04311778, -0.06617977, 0.02381593, -0.04860474, 0.08624703, 0.08792007, -0.06358700, 0.00949725, 0.13527298, 0.06319647, -0.01432250, 0.04255509, -0.00593068, 0.09933579, 0.02496909, 0.16518441, -0.09101366},
  {-0.20776410, -0.03005814, 0.13516761, -0.11553288, 0.08868997, -0.03112070, 0.13883670, -0.00418063, 0.00099502, -0.05795008, 0.01695786, 0.13760170, 0.04984049, -0.01503880, 0.10514763, -0.06970908, 0.01762464, -0.04518433, -0.10139177, 0.09705436, 0.12527838, 0.02020356, 0.07290538, -0.01790278, -0.03231779, 0.08326671, -0.08552841, 0.01530178, -0.04930564, -0.11828116, -0.04608805, 0.09886330, 0.00732115, -0.03838148, -0.07183746, 0.08254994, 0.05042651, 0.11293682, -0.05584909, 0.06741481, 0.08374525, 0.02031519, -0.00837608, -0.03430596, 0.05529087, 0.10589607, 0.07096192, 0.05797445, -0.00231898, 0.07111135, 0.02732641, -0.08202235, -0.08121689, 0.08755735, 0.08693396, -0.06111524, -0.04006263, -0.02601488, 0.00029769, 0.10519771, 0.00785796, -0.05169834, -0.08778059, -0.06985501, -0.04766113, 0.00373300, 0.03274861, 0.02862596, 0.00542483, 0.04061764, 0.02218210, -0.11575522, -0.01690226, -0.10781936, -0.07165296, 0.15246867, 0.03007416, 0.04753327, -0.10201786, -0.14328460, 0.00094593, 0.03296786, 0.08005240, 0.09632416, 0.08384836, 0.08713099, -0.08736312, -0.11173136, -0.05605630, -0.02930832, -0.01341093, -0.06010736, 0.03497845, -0.08051808, 0.13579443, 0.01784143, 0.03056719, -0.03777206, -0.10577172, 0.02488696, -0.09808882, -0.05413950, -0.03618569, 0.00203835, 0.04397876, 0.07361750, 0.05773206, 0.00433203, -0.00324773, 0.08095415, 0.08139795, 0.04451977, -0.10729417, -0.08790077, 0.09913687, -0.10162707, -0.03765382, -0.00633813, 0.04836075, -0.14271446},
  {-0.00422484, 0.10221925, -0.06977769, 0.01608307, -0.01430298, -0.09492072, 0.04009409, 0.06486145, 0.02333599, 0.08578822, 0.00600793, 0.03230178, 0.01034740, -0.06827492, -0.06142673, -0.08869001, -0.07781675, -0.07354845, 0.05112385, -0.11303146, -0.04980503, -0.06691368, -0.04400635, 0.09721673, 0.09004826, -0.00362957, 0.04658365, -0.10456461, -0.01794994, -0.05783860, -0.07179976, 0.04073220, -0.12847163, 0.01824715, -0.03917829, -0.03433363, -0.01596869, 0.10035662, 0.09421142, -0.06311186, -0.09883079, -0.04210327, 0.06673120, 0.18823148, -0.07485064, -0.05797037, 0.04287932, 0.02061573, 0.00326962, 0.04459921, -0.05631803, 0.00842801, -0.18398474, -0.06338200, 0.08208731, -0.05831903, -0.05785329, -0.06647909, -0.00073433, -0.03034730, 0.01170216, -0.00964824, -0.09658697, -0.06759349, 0.07090161, 0.02662551, -0.10555770, 0.09091951, 0.06952380, -0.00623546, -0.02566253, 0.10617588, -0.14321186, 0.11824287, -0.04608820, 0.03846128, 0.06626274, 0.00371446, -0.09981865, -0.17109309, -0.05480335, 0.06684714, 0.16372058, 0.03973617, 0.00251294, 0.05435275, -0.04303426, -0.07284138, -0.06206577, -0.05357319, -0.07759126, 0.09136111, 0.10714872, 0.03783020, -0.02963297, 0.01509872, 0.10327428, -0.11288590, -0.07335711, -0.05732540, -0.01529741, -0.00962628, 0.10801655, -0.17406885, -0.07605161, 0.02138237, -0.02732230, -0.00997573, 0.02688342, -0.12185491, -0.07372577, 0.08576514, 0.04140976, 0.01396011, 0.01986963, 0.08092238, -0.13389058, -0.05419428, 0.10739420, -0.18708812},
  {0.24435730, -0.08316567, -0.01114429, 0.00772011, 0.04735732, 0.10825677, 0.03299389, -0.00904046, 0.08793759, -0.02021023, 0.09340221, -0.11540423, 0.04509979, 0.16489227, 0.01380081, 0.10223819, 0.20232357, 0.28634405, -0.02757881, 0.22652191, -0.18668045, 0.07538992, 0.29660410, 0.04999883, -0.08133215, -0.03011821, -0.05944776, -0.09249476, -0.13226603, 0.03818091, -0.10692838, 0.00356672, 0.10356361, -0.06084822, 0.08068434, -0.06822686, -0.06843189, -0.17328779, -0.08244639, -0.23784822, -0.01372597, 0.10771764, -0.17244002, -0.09136754, 0.17863728, 0.23897140, -0.07385255, -0.04314626, 0.14388072, 0.16048746, 0.06579538, 0.32766852, 0.14915237, 0.14261578, -0.19606036, -0.13119864, 0.14471775, 0.13954724, -0.26989853, -0.02622198, -0.04624822, 0.18338153, -0.19029398, 0.00180947, 0.15795262, 0.30510625, 0.06350414, -0.28750569, -0.11814226, 0.06063742, -0.20072524, -0.02936222, 0.20813344, -0.19390886, -0.10452569, 0.01860254, 0.00146872, -0.07193455, -0.01772547, 0.14623332, -0.06892627, -0.02647237, -0.24524719, -0.19124472, -0.01625065, -0.17917870, 0.02416973, 0.02594719, -0.06892744, -0.03902264, 0.19300778, 0.00955097, 0.07270331, 0.36804539, 0.01339982, -0.11706364, -0.05353591, -0.07707353, 0.03298432, 0.09526151, -0.09596753, -0.09879877, 0.10095974, 0.25631711, 0.01514628, 0.07750200, 0.00358315, -0.25793931, 0.11658093, 0.10985312, -0.00557895, 0.11133444, -0.00998354, -0.05610489, -0.15454318, 0.03073514, 0.05423245, -0.09576204, -0.05320054, 0.26984116},
  {0.01523921, -0.13692485, -0.15420327, 0.05163813, -0.11651188, -0.09482911, -0.19422336, -0.08174566, -0.03021562, -0.08587230, 0.20955281, 0.01221450, 0.02183283, -0.04812980, -0.09312195, 0.09069712, 0.02152316, 0.00658143, -0.08374224, -0.03537796, -0.02915824, -0.14402664, 0.18297604, 0.06451470, 0.03579249, -0.05224798, -0.09166138, 0.08836164, -0.01465387, -0.00278752, -0.06358945, 0.12216397, -0.03505681, -0.12833638, -0.15277624, 0.07443488, -0.03962813, -0.01171746, -0.15387912, -0.05676430, 0.08817359, 0.05559187, -0.21439514, 0.04579377, 0.09375963, -0.04862274, -0.18594405, -0.09218889, -0.03538524, 0.13623419, 0.05948907, 0.10559784, -0.19162852, -0.06816611, -0.10848603, -0.00502941, -0.00853521, 0.07449780, 0.04596236, 0.05207967, -0.06381916, -0.07830656, -0.10347604, 0.06009316, 0.08408960, 0.12701985, -0.05085857, -0.11738212, -0.16723192, 0.06397983, 0.07219084, 0.09089358, -0.06984399, -0.04878904, 0.03030113, -0.01642803, -0.08069716, -0.09192337, 0.00179063, -0.02194026, 0.08696777, 0.03565234, 0.11755870, 0.11061014, 0.01333889, 0.21565700, -0.10245052, 0.07180589, -0.10255325, -0.03119787, 0.03638905, -0.00945581, 0.16958228, 0.15028003, -0.10923947, 0.00793442, 0.19224259, -0.05316404, 0.00660157, -0.08615877, -0.04382058, -0.07608590, 0.01775290, -0.05319866, 0.15783827, 0.07574006, -0.04443329, -0.03783726, 0.14843193, -0.07055143, -0.02614426, 0.04284687, -0.01103671, 0.03740419, -0.21461339, -0.07983638, 0.12182356, 0.08842670, -0.05027195, -0.04042813},
  {0.03060682, -0.11236321, -0.12596042, -0.03878710, 0.03870627, 0.02582108, 0.07848773, -0.00462241, -0.07745145, -0.02262818, -0.03800019, -0.00596702, -0.09814793, -0.04377230, 0.00620482, 0.07792106, 0.05218025, 0.11508007, 0.08781195, 0.07846060, -0.07236420, 0.08265045, 0.00329211, -0.08470348, -0.13730748, 0.07661562, -0.03756068, -0.08486305, -0.03683499, -0.03931053, -0.00704306, -0.15554050, 0.05142058, -0.11263187, -0.04660137, 0.02240939, -0.13446568, -0.05043110, 0.00107796, 0.12105516, -0.09469068, -0.01711148, 0.05190385, 0.05812134, -0.00112237, 0.11049467, -0.04585417, 0.00145126, -0.05068786, -0.14885972, -0.03946265, -0.01212284, 0.10419039, -0.02572061, -0.02260322, 0.23924495, 0.00292933, 0.10150927, -0.02191462, -0.12164259, 0.07175431, -0.03713503, 0.11403614, -0.06281965, 0.07369830, 0.07858166, 0.04403657, 0.15255921, 0.06323201, -0.11233399, 0.04717109, 0.08769419, -0.01322411, 0.05261908, -0.00314227, 0.17290215, -0.09697024, -0.03603661, -0.00908073, 0.03407307, 0.17522173, -0.00114135, 0.11093929, -0.08563381, 0.08676320, -0.04856076, -0.05837636, -0.10137712, -0.07453349, 0.00781997, -0.05630431, 0.07497004, 0.15966652, -0.01234246, 0.04421332, -0.09750329, -0.07698943, -0.03890069, 0.07359132, 0.04030281, -0.12401754, -0.05478795, 0.02255481, 0.10463382, -0.08016656, -0.02643734, 0.01932400, -0.03851880, -0.03257814, -0.05700157, 0.10086847, 0.07633010, -0.05728032, 0.04119911, 0.04355527, -0.11602622, 0.13631852, 0.03027807, 0.02628194, 0.00473697},
  {-0.15877376, 0.01756024, 0.03276375, -0.10949831, -0.08550092, -0.02672407, 0.07203078, -0.01907008, 0.02905777, -0.03099423, -0.01087408, 0.15224193, 0.12448620, 0.03703628, 0.00772683, 0.05466213, 0.03629029, -0.11409120, 0.05470289, -0.06722905, 0.06176076, 0.10086919, 0.02971042, 0.04903777, 0.09363040, 0.06277476, 0.03399401, -0.06546730, 0.00055595, 0.04390888, 0.03291703, 0.07509413, -0.02649853, -0.16413724, 0.05685323, -0.08457481, -0.08255514, -0.03151026, 0.03855782, -0.03059680, 0.05967276, 0.00977958, 0.08053148, 0.02090073, -0.08272415, -0.07519774, 0.03882077, 0.03469376, 0.08307740, 0.01746658, 0.00157192, 0.11627560, -0.08557180, 0.10103986, -0.04559989, -0.19770873, -0.00087904, -0.06931060, -0.01106750, 0.10981911, 0.09303619, 0.03666069, -0.13731603, 0.20241576, 0.20256850, -0.01797979, -0.07796055, -0.12408211, -0.07937497, 0.06026029, -0.06873389, -0.14836237, 0.03946633, 0.10429142, -0.02814402, 0.06605535, 0.01290228, -0.01910992, -0.02131805, -0.20181246, 0.06501599, 0.12885456, -0.03367774, -0.04113035, -0.05185484, 0.17923658, -0.15896587, 0.06521913, -0.00748885, 0.04177035, 0.12548435, 0.04956742, 0.02715592, 0.06920597, -0.09614968, 0.09838318, 0.02025544, -0.12410284, -0.08892210, -0.08553725, 0.01592994, -0.02133003, -0.07063975, -0.14845650, -0.01603979, -0.03835206, 0.00368438, -0.06894893, -0.03888940, 0.01979267, 0.07059150, -0.00136736, -0.05875525, -0.06061941, 0.04074591, 0.05525502, -0.04856833, -0.02939464, -0.02615295, -0.11506968},
  {-0.02007396, -0.05713462, 0.04950438, -0.04068319, 0.18076479, 0.11008283, 0.03670637, 0.03735952, 0.00692213, -0.10194274, 0.01595545, -0.03557416, -0.07565966, 0.06909449, 0.10555099, 0.07773128, 0.00387454, -0.05377699, -0.10211538, -0.06420638, -0.04288258, 0.05309398, 0.03221370, -0.08585938, 0.02248626, 0.03383507, 0.03851253, -0.01885521, -0.05121246, -0.02951394, 0.00210024, 0.14852266, 0.02443255, 0.06220606, 0.02761347, 0.06305087, 0.06151349, 0.05915131, 0.01531191, -0.01678978, -0.02769354, 0.04309693, -0.10768528, -0.14963952, -0.03157414, 0.07478970, -0.00094112, 0.00481194, -0.04141807, 0.05184157, -0.04935992, -0.09497847, -0.10653596, -0.08688191, 0.01823222, 0.00179137, -0.04951718, 0.01087802, -0.06641618, 0.12724978, 0.02963899, -0.09867752, -0.12349285, 0.09322529, 0.08378027, -0.00013324, -0.01931199, 0.03782317, -0.24047779, 0.07546578, 0.13686663, -0.02047210, -0.10529087, 0.04792266, 0.02480891, 0.02795609, -0.13964207, -0.10444891, -0.09537105, -0.01147384, 0.18641397, 0.04005326, 0.19400015, 0.03436021, 0.04617623, 0.19411029, -0.13595378, -0.02940230, -0.04250618, 0.01554488, -0.02431962, -0.04227803, -0.05675315, -0.09872620, 0.10342927, 0.00921728, 0.05231663, -0.11395761, 0.04934113, -0.06370135, -0.06925908, -0.06201562, 0.12725189, 0.05229029, -0.08032100, 0.01398335, 0.01606445, -0.04927574, -0.00408034, -0.05771089, -0.08631755, -0.00635243, -0.00407456, 0.04912410, 0.01203157, -0.07971117, 0.11896915, -0.00570231, -0.02986011, -0.12776391},
  {0.00401066, 0.01425836, 0.04462372, 0.00554588, -0.01281608, 0.02163156, 0.23064379, 0.08077712, 0.00264082, 0.02786346, 0.07310298, -0.14589801, 0.08279917, 0.02333729, 0.05588210, 0.14798595, 0.09071069, -0.03922327, -0.04323998, -0.06937690, -0.00263858, 0.05344424, -0.02038692, 0.02181405, 0.15887870, -0.09810952, -0.05532937, -0.00729588, 0.07690573, -0.08460531, -0.02529719, 0.05247359, 0.01415851, 0.16715282, 0.13738404, 0.11859737, 0.02065638, 0.03430619, 0.04836885, -0.09412286, 0.03756819, 0.01316055, -0.11978117, -0.23921375, 0.05420542, 0.01632945, 0.30772194, -0.07642817, -0.06005125, -0.12263276, -0.06968749, 0.09538932, -0.13712011, -0.00472979, 0.02643063, -0.25748947, 0.18443324, -0.06396808, -0.19681826, 0.03719441, 0.10321081, -0.19518517, -0.19777383, 0.17700256, 0.11223619, -0.09040700, -0.13280286, 0.04628110, -0.30171090, 0.00520336, -0.06381446, -0.41070157, 0.12436864, -0.06741015, -0.04167499, 0.09102522, -0.28998166, -0.05843193, 0.02154366, 0.13895924, -0.00979169, 0.27246317, 0.01071807, 0.18829121, 0.01919778, -0.08362896, 0.10832141, -0.04813757, -0.16990653, 0.18641134, 0.08492196, -0.03243927, 0.04911428, 0.03540393, -0.03543362, 0.03135190, 0.03712068, 0.02885809, 0.08345396, 0.05363922, -0.09875119, 0.05502468, 0.02886473, 0.10207170, 0.05767839, -0.08317254, -0.09638687, -0.15994303, 0.10659188, -0.03296289, -0.03298139, -0.12196389, 0.07899720, 0.06675229, 0.06329399, 0.05431188, -0.05065799, 0.07243037, 0.09271175, 0.17536075},
  {0.06003891, -0.11073869, -0.14861088, 0.07571746, -0.11487670, -0.09927524, -0.21041140, -0.08577058, -0.03756862, 0.01091696, 0.10296626, 0.03376542, -0.08518464, 0.08117784, -0.04292590, -0.12358124, 0.06212062, 0.08520137, 0.03042099, -0.04906056, -0.09575135, -0.14082572, -0.06585107, 0.03085076, -0.11473668, -0.02926381, -0.04314870, -0.08403301, -0.03838586, -0.00453427, -0.14362143, -0.00610672, 0.08997524, -0.08214200, -0.06352757, 0.09945498, 0.03109824, -0.07809119, -0.07327760, -0.10987581, -0.05440336, -0.00561766, 0.09374845, -0.04681594, 0.15673961, -0.24533333, -0.00898406, -0.02198086, -0.10648327, -0.04475188, 0.03108057, 0.07704958, 0.06497552, -0.19935383, 0.04939214, -0.11933222, -0.08424562, -0.00086289, -0.06067401, -0.03688028, 0.09084687, 0.10221495, 0.07072467, 0.02036834, 0.06835140, 0.03970350, 0.15058757, 0.04832364, 0.07001171, -0.08186960, 0.15439028, 0.08216579, 0.04925591, -0.16643882, 0.19903812, 0.04868782, 0.06263521, 0.03785206, -0.06606917, 0.09852187, 0.14298953, 0.03780788, -0.03501790, -0.08566659, 0.02007458, -0.01097753, -0.16821921, -0.09165781, 0.14435494, -0.10502328, 0.13311094, 0.19373508, 0.11568857, 0.14863886, -0.11541618, -0.13616331, 0.00124910, -0.07167371, 0.04468743, -0.08948539, -0.08803876, -0.08143183, 0.14998548, -0.02321077, 0.05090642, 0.06889410, 0.19679096, 0.05468741, -0.03037142, 0.09427077, 0.12890534, 0.21679083, 0.17138311, 0.03059332, -0.03555947, -0.02566517, 0.06074970, 0.08712056, 0.03280210, -0.05977739},
  {-0.06721014, 0.12827945, -0.05607192, 0.08225127, -0.03922692, 0.05643431, 0.01830998, -0.10328516, 0.11820823, -0.08937338, -0.01021832, 0.02266015, -0.02677814, -0.07448439, -0.08039515, -0.01322215, 0.03444057, -0.13056940, -0.06460372, 0.01034359, 0.05565701, 0.14806984, -0.01734076, -0.05106022, 0.02527358, 0.04147890, -0.04202599, 0.00704508, -0.07713991, -0.05568362, -0.08389967, 0.00954776, 0.01158192, -0.01396063, -0.04700097, -0.06805041, -0.06175864, -0.08275146, -0.00237586, 0.10251616, -0.01809930, 0.08479517, -0.02270245, -0.05544921, -0.02802505, 0.11417320, -0.04836665, -0.00780768, 0.09297758, 0.00260607, -0.05751838, -0.04127247, -0.04163408, -0.02521221, 0.12742968, -0.04391332, 0.03729790, 0.04310934, -0.00278094, 0.10305338, 0.08777912, -0.00136052, 0.00183638, -0.07958342, 0.01048951, 0.01067337, 0.08316935, 0.05018478, -0.04335751, 0.00141814, 0.07547109, 0.03623421, -0.08481521, 0.11150285, 0.07163709, -0.06686334, -0.06750984, -0.08476153, -0.08056498, -0.14872167, 0.12624671, 0.04451681, 0.03317625, 0.03682712, 0.04437128, -0.10707386, 0.01713093, 0.06867746, 0.08691114, 0.15460338, -0.06183312, -0.08893178, -0.02681078, 0.06483720, -0.02523873, -0.05559969, -0.08171643, 0.04154851, -0.04176568, -0.01295848, 0.01919886, -0.11168531, 0.02185413, -0.02023098, -0.08851258, 0.02526280, 0.07467292, -0.03602310, 0.03777463, 0.04252097, 0.11740319, 0.09359816, -0.04663101, 0.05632449, -0.04586864, -0.08458864, 0.10908672, -0.00794079, 0.05493375, 0.03599250},
  {-0.07098386, 0.00364035, 0.05833845, -0.05671331, 0.02168353, 0.00248305, 0.11204235, 0.03758049, -0.05879397, 0.06340714, -0.09510934, -0.03528505, 0.08337596, 0.02759246, -0.03016273, -0.08035637, 0.12630832, -0.09521500, -0.09569682, -0.04622437, -0.00161762, 0.12397394, -0.08587264, 0.06155150, -0.12307307, -0.02587133, 0.08832542, -0.07116964, 0.06085656, -0.04051973, -0.12537135, 0.07178053, 0.17091271, 0.04962858, -0.00912753, -0.20341806, -0.24195658, -0.09144932, -0.00867881, -0.05985111, 0.01316904, 0.13333566, 0.04417481, -0.22365740, 0.00800200, 0.11633127, 0.08345021, 0.01987780, 0.13796812, -0.05716972, -0.05405224, 0.06130778, -0.00625028, 0.04703788, -0.07947868, -0.12861912, -0.01275434, 0.13812958, -0.20370275, -0.01440056, -0.02656107, -0.00544642, -0.12358028, 0.13305269, 0.09233987, 0.06752124, 0.04765757, -0.02198470, -0.34379429, -0.08058585, -0.15962388, -0.27095717, 0.16864060, -0.09704614, -0.04081247, 0.04766821, -0.07465938, 0.00642392, -0.00390950, 0.03037395, -0.07523511, 0.07779401, -0.09092647, -0.10637309, 0.06488734, -0.04110460, -0.06839261, -0.04233352, -0.02247501, 0.15618387, 0.12951630, -0.06459118, 0.02286498, 0.10456707, -0.05418369, 0.00217810, -0.01323779, 0.03828028, 0.08925179, -0.02169590, 0.09845220, -0.03471109, -0.16201651, 0.01288770, 0.08063833, 0.02778913, -0.02932161, -0.19368005, 0.03088430, -0.07953224, -0.08173712, 0.08162243, 0.04335131, -0.02179735, 0.04788619, -0.09734879, 0.11208060, 0.14361955, 0.01517647, -0.01481685},
  {0.17627008, 0.01246882, -0.16542353, -0.06615416, 0.09354126, 0.07314511, -0.08010928, -0.06653798, 0.09579039, -0.04938746, 0.01260711, -0.01640682, -0.16759108, 0.16093442, -0.04460258, 0.05862494, 0.10960281, 0.00220163, 0.07634502, 0.16192481, -0.08313544, 0.03274767, -0.00068849, -0.08657818, -0.07357777, -0.06197782, 0.01465297, 0.08567333, 0.02326054, -0.09162508, -0.09124412, -0.12194455, 0.13075757, -0.11328977, 0.03680271, 0.00048533, -0.14553915, -0.05178625, -0.04851031, 0.01442898, -0.02313178, 0.05131439, -0.01759181, -0.08021263, -0.01921547, 0.02951918, -0.06829983, 0.07406418, 0.05204435, 0.04481128, 0.14118786, 0.08770917, 0.15145662, -0.01834832, -0.06436606, -0.00408816, 0.06367952, 0.03204906, 0.01998411, 0.02514493, -0.03498279, 0.12961441, -0.02560540, -0.01580263, -0.07366440, 0.14697887, 0.02713120, -0.03023725, 0.01198522, -0.00674728, 0.02348309, 0.00133910, 0.28452131, -0.14762601, 0.05666298, -0.04397154, 0.10295576, -0.07203477, -0.06427559, 0.25008431, 0.04823590, 0.06973904, -0.00739574, 0.07495207, 0.09995904, -0.14961916, 0.06915441, -0.05979729, 0.10188475, -0.03069596, 0.00030874, 0.14440842, -0.05742090, 0.18048128, -0.07122579, -0.22886771, -0.09209422, -0.08055089, -0.09021015, 0.10148048, -0.07355023, -0.07043096, 0.01350422, 0.19356225, 0.11619690, -0.00925989, 0.07205729, -0.05570467, -0.03317652, 0.09159358, 0.05458569, 0.13070646, 0.04830443, -0.02014393, 0.01187241, -0.07405422, 0.08226863, -0.15947723, 0.01149612, 0.19304357},
  {-0.05179987, 0.06622265, 0.04803580, 0.02536871, -0.07754068, -0.15581152, 0.11125235, 0.04151927, 0.03570870, -0.10032578, 0.06341255, 0.05465486, -0.01758322, 0.13356689, 0.10832698, 0.04297335, -0.10356079, -0.12737457, 0.03994381, -0.09804031, 0.03098842, -0.06394748, 0.08332267, 0.02956579, 0.06254940, 0.04522311, -0.10131446, -0.08383577, -0.11658269, -0.08456922, -0.19585103, 0.05941382, 0.05191845, -0.03612820, -0.00498527, 0.10815475, 0.18832612, 0.14470644, 0.07192624, -0.07784109, -0.10287256, 0.06099847, 0.16038546, 0.06082388, 0.03681147, -0.14969096, 0.08225352, 0.06413336, 0.01424060, -0.03251173, 0.01559552, -0.11613730, -0.13195871, -0.09901205, 0.12595455, -0.03827793, 0.02630886, -0.06052206, 0.06191820, 0.16341639, -0.08608396, -0.10016487, 0.00726122, 0.07177833, 0.14840530, -0.14763780, -0.13123071, -0.01097789, -0.05775339, -0.04883078, 0.08709343, 0.04748008, -0.08844356, -0.02184921, 0.10516266, 0.03408905, -0.07428682, -0.05439842, -0.00986924, -0.16099682, -0.04411954, 0.02700069, -0.01154266, 0.04132001, -0.12521169, 0.04353719, -0.11675723, 0.06704399, 0.16856875, 0.10992903, 0.07201726, 0.05519332, 0.00760715, 0.00429745, -0.02131259, 0.02614383, 0.02056182, -0.03644773, -0.11191473, -0.05004437, -0.03173822, -0.02075715, -0.08826752, -0.14755525, 0.02425658, -0.00045578, -0.17165782, 0.13621227, 0.13441803, -0.04564460, 0.08527409, -0.14143693, 0.16392376, 0.04667844, 0.06766882, -0.11697562, -0.00342343, 0.03519088, 0.04675373, -0.09764557},
  {0.02845817, 0.02959844, -0.05095938, -0.00665197, 0.13568725, -0.00250820, 0.16495439, 0.01489270, -0.07269113, 0.03651021, 0.00996757, -0.05486721, -0.04523822, 0.09114718, 0.08408378, -0.00330788, 0.03811762, -0.24537729, 0.07952599, -0.13589774, -0.07268173, 0.03504036, -0.04101905, 0.07921214, 0.14458793, 0.02877550, 0.05293662, 0.09636743, -0.08824096, -0.10056463, -0.07773282, 0.16432451, -0.01589948, -0.04997925, 0.01150577, -0.07025923, -0.14603223, -0.00837824, -0.02811729, -0.05130938, 0.02940263, -0.01136521, 0.04334148, -0.08022995, 0.03236870, -0.02791990, 0.08716513, -0.10861441, 0.07795234, 0.05906496, 0.05930639, -0.00584040, -0.18599932, -0.01773974, -0.04533279, -0.00678582, -0.02675344, 0.13236982, -0.05703116, 0.11113676, 0.07545824, -0.01953853, -0.11869213, 0.05538376, 0.04229972, 0.00765222, -0.09307989, -0.08381245, -0.06060722, 0.04506281, -0.09557859, -0.10011844, 0.04107442, -0.08472766, -0.01857082, 0.17636688, -0.15592495, -0.01825302, -0.12306594, -0.14807330, -0.08462856, -0.05349470, -0.03286241, 0.07705655, 0.11570002, -0.05140119, -0.11933628, -0.08517715, -0.00734629, 0.01189881, -0.07598789, 0.13951272, -0.05771489, -0.10916197, -0.03437097, -0.06246161, 0.06611512, -0.01628154, -0.12047423, -0.15278958, -0.05504884, 0.00889689, -0.14159605, -0.17203471, -0.10341047, 0.04379426, -0.03010759, -0.03720620, -0.14970019, 0.04548449, -0.10269968, -0.00819265, 0.07824963, 0.06860057, -0.05394889, -0.08008686, 0.06939066, -0.05819703, 0.06662022, -0.01559509},
  {-0.08068625, 0.05494640, 0.01220831, -0.10745164, 0.06191072, 0.06190873, 0.12656210, 0.01867440, -0.08326937, -0.06977857, -0.16566424, -0.07299778, -0.00959746, 0.02818890, 0.00554653, 0.09106127, -0.08485629, -0.05656456, -0.04940422, 0.05699417, -0.03515647, -0.05076699, -0.05915898, 0.09659407, 0.05608640, -0.11493593, -0.05495460, 0.02296578, -0.11346889, -0.08980533, -0.00552466, 0.15888561, 0.07523060, 0.10864731, -0.07106562, 0.02665564, -0.06858849, 0.14374883, -0.01259080, 0.11864350, 0.00664596, -0.03172250, -0.03249784, 0.03367196, -0.01032730, 0.04670789, -0.07966280, -0.04493527, -0.03749918, -0.06808277, -0.15273045, -0.08658660, 0.03145191, 0.07501402, 0.01123514, 0.05297692, -0.12622443, -0.08767414, 0.04199334, 0.02650267, 0.06294867, 0.01505099, -0.08701653, 0.09634384, -0.00727571, 0.06660113, 0.05067865, -0.01245491, 0.03071300, 0.00575831, -0.07268317, 0.04504983, -0.04629277, -0.01319211, -0.01431923, -0.03001519, -0.06454633, 0.00913821, -0.05805088, -0.09290778, 0.01974519, -0.05630369, 0.10710041, 0.02544246, 0.07847267, 0.14667261, -0.21717097, 0.08156230, 0.07989948, -0.01574345, -0.01265130, -0.04842817, -0.01644078, -0.10684942, 0.07895986, 0.09113696, 0.07625233, -0.11734601, 0.09395251, -0.09523609, -0.08569559, -0.02742106, -0.06823958, -0.07713476, -0.18262434, -0.00332776, 0.04296510, 0.07748979, 0.10269056, 0.08351133, -0.06521843, 0.08854991, -0.04062097, 0.07518727, -0.02169262, -0.03669610, 0.12351871, -0.04301401, 0.11375283, 0.02465307},
  {-0.02367327, -0.07956854, -0.04982011, 0.06642177, 0.02735766, 0.05546262, -0.00368914, -0.01634997, -0.08685874, -0.05274004, -0.17829140, 0.07495278, -0.12317632, -0.10621349, 0.01299210, -0.12909977, 0.08900996, -0.06157148, 0.00403451, -0.01210195, -0.11755437, 0.03887702, 0.00157184, 0.02707061, -0.03143596, -0.02607066, -0.05054009, 0.06261399, 0.03154205, -0.10656337, -0.07797355, -0.08083097, 0.04186780, 0.10485985, 0.01233502, -0.02062687, 0.00991474, 0.06009489, 0.10256940, -0.00514891, -0.07750920, 0.08617047, 0.08788333, 0.11564694, 0.03846661, -0.10612524, -0.10497552, -0.04850854, -0.04572659, 0.03407501, -0.04364449, 0.07773734, -0.03932778, -0.08070323, 0.00281715, 0.17407547, -0.05529324, 0.07829753, -0.01549563, -0.00062181, -0.07544839, 0.08968984, 0.00827844, -0.14123407, -0.01199519, 0.00438478, -0.01515380, -0.04271104, 0.04219583, -0.10494866, 0.01956214, 0.10855614, -0.03522163, 0.07220457, 0.07074224, 0.08041906, -0.04207812, 0.04008466, -0.18674912, 0.04275029, 0.13235876, -0.05026711, 0.08181916, -0.07542519, 0.11810579, 0.00678391, 0.03268570, 0.06752834, 0.08839151, 0.03672302, -0.08924393, 0.00818137, 0.14088070, 0.01696130, -0.10521857, -0.10372619, -0.06542157, 0.01881765, -0.03903577, -0.03182461, -0.05177869, 0.00241283, 0.07990009, -0.02936031, -0.09060720, -0.08591669, 0.07192758, 0.11388061, 0.01583659, -0.07563391, 0.10267807, 0.05593849, -0.01725355, -0.08660032, -0.03038615, 0.01922944, 0.00535245, 0.13232374, 0.09041417, -0.13085179},
  {-0.09653170, 0.03256578, 0.05949580, -0.08800049, 0.13227047, 0.03678204, 0.03454242, -0.01194647, -0.05622799, 0.08221976, -0.13837978, 0.09502760, 0.07771017, 0.04869092, 0.00803726, 0.09865278, -0.08030780, -0.07107268, 0.04594848, -0.09709417, -0.04791018, -0.03401946, 0.04902164, 0.08013405, -0.06128473, 0.04030705, -0.06333345, 0.09110518, -0.01495534, -0.09531151, -0.13030407, 0.16893503, 0.04206968, 0.02621764, -0.07051238, -0.05597182, 0.08389641, 0.15221266, 0.10098693, 0.02222078, -0.04028255, -0.02651602, 0.08195124, -0.03140579, 0.04400665, -0.04498289, 0.09182364, 0.05238950, -0.05130753, 0.09055823, -0.10860711, 0.07760543, -0.11748406, 0.07839819, 0.02634414, -0.03505911, -0.06283134, 0.10524725, -0.10971338, 0.15245619, 0.00543246, -0.04101701, -0.12534049, -0.01246237, -0.00938548, -0.02629712, -0.08844030, 0.03537564, -0.11244041, -0.02830326, -0.05943990, -0.16178767, 0.04850234, -0.08545026, -0.12245274, -0.07273861, -0.06310033, 0.09747638, -0.05975891, 0.02118867, -0.04431470, 0.01922935, -0.04366859, 0.09707125, 0.12854709, 0.00040185, -0.11919461, -0.00882155, -0.05561620, 0.09535503, 0.11207297, 0.13268028, 0.11825744, -0.04015938, 0.00686985, 0.10300133, 0.10377941, -0.09602829, 0.06939676, 0.02215827, -0.02719526, -0.10422439, -0.13986835, 0.02685352, -0.10318466, -0.01735188, 0.00249822, -0.11548182, 0.00581340, -0.00165816, 0.02932737, -0.06272203, -0.11275459, 0.07900904, 0.06599947, 0.05349086, 0.03909455, 0.13025735, 0.00513273, -0.05280479},
  {-0.08268248, -0.01127869, 0.00058264, -0.07056777, -0.00179828, -0.08272579, 0.06190272, 0.04357915, -0.05531502, -0.04390693, -0.23597783, -0.06869582, -0.03938483, 0.12819487, 0.00604748, 0.03839343, 0.06896247, -0.07969801, -0.06634612, 0.02806220, -0.07281909, 0.07637676, 0.07951101, 0.06436179, -0.02259605, 0.03391867, 0.09742016, 0.06113328, 0.04619706, 0.02878578, -0.06567876, 0.01708298, -0.04109013, -0.06779584, 0.02649265, 0.02177092, -0.13692790, 0.02004342, 0.01079395, 0.12219828, 0.03681591, -0.05485208, 0.12048652, 0.01561718, 0.08173472, 0.00539738, -0.00903278, -0.10976535, 0.13096048, 0.08784916, -0.12021668, -0.06205242, -0.04402769, -0.06818996, 0.09825855, -0.01110388, -0.07708993, -0.00802448, 0.03562469, 0.09630229, 0.15414725, -0.06067029, 0.02560447, -0.02312181, 0.08011924, -0.01616716, 0.06535409, 0.04450660, 0.02770760, 0.00002887, 0.12074515, 0.04071523, 0.08628568, -0.07787997, 0.02929126, 0.12708576, -0.08524210, 0.08724991, 0.08506659, -0.08398677, -0.00265771, 0.12184178, -0.00247099, 0.08093458, 0.11371896, 0.10915127, -0.16710889, 0.03428615, -0.13062562, 0.13093863, 0.05531023, 0.07066628, 0.10297319, 0.03750459, -0.06460632, 0.00343378, 0.14561376, 0.06221095, -0.01235982, -0.04909812, -0.00835573, 0.03429447, 0.04343445, -0.05230898, -0.07142535, 0.02843896, 0.01315949, -0.03320092, -0.09631386, -0.09034999, -0.02637813, 0.10734529, 0.08989361, -0.06544743, -0.04104141, -0.02119784, -0.09058027, -0.00308243, 0.04337113, -0.09193920},
  {0.27144283, -0.16641338, -0.14914370, -0.03116950, -0.25064105, 0.08958121, -0.30918533, 0.06219796, 0.03955594, -0.04435325, -0.05458892, -0.13037454, 0.02523716, 0.20051171, 0.11805129, 0.04199675, 0.14205156, 0.23186797, 0.00403731, 0.27347437, -0.14298765, 0.17329724, 0.10731518, -0.11503378, -0.28975636, 0.00657223, 0.01576636, -0.03970908, 0.02924977, -0.11050811, -0.08878564, -0.20519499, -0.03697066, -0.06141981, -0.24361603, -0.16803433, -0.05893149, -0.27582824, -0.01783738, -0.08852638, -0.02246454, 0.21649712, -0.01363760, -0.12307847, -0.01194982, -0.13393418, -0.03509948, 0.04491841, -0.08986980, -0.10103233, 0.35417661, 0.23624703, 0.08754786, -0.00466484, 0.08656237, -0.03896653, 0.02276648, 0.00202921, -0.19742848, -0.21056411, 0.12497041, 0.05617992, 0.09989128, -0.11000817, -0.06998006, 0.18101504, 0.30609149, 0.10928682, -0.06730278, 0.00394294, -0.04472186, -0.06999688, 0.29551706, -0.15584742, 0.22112106, -0.05777327, -0.02788830, 0.06548150, -0.02806970, 0.07275230, 0.03579053, -0.05268895, 0.11471246, -0.13739198, -0.13180257, -0.24533942, 0.14644611, -0.06788230, 0.06546626, 0.07740988, -0.25279218, 0.12427422, -0.09092844, 0.10110962, 0.00187023, -0.12597024, -0.06881339, 0.01081656, 0.08912192, -0.03119795, -0.08813155, -0.03566258, 0.18283151, 0.23799945, 0.24324462, -0.06446242, 0.10872115, 0.01918273, 0.04553955, 0.06792650, 0.01399934, 0.17009577, 0.31178635, 0.08586320, 0.01290218, 0.04217634, 0.01008314, -0.27873597, 0.16389686, 0.22400203},
  {0.13417754, 0.04219034, -0.04490172, 0.07701742, -0.10398792, -0.06646422, 0.03978590, -0.05550063, 0.11026648, -0.09805507, -0.18013948, -0.02771730, -0.14727993, 0.09017026, 0.09802964, -0.02818238, -0.03021140, 0.06016021, 0.03628325, 0.06185019, -0.05885901, -0.03824234, -0.11146719, 0.09504424, -0.03033938, -0.08509215, 0.02842339, 0.04401264, -0.09749967, 0.03120420, -0.12705097, -0.02676483, -0.02935201, -0.12341149, 0.05990483, -0.09694916, 0.00301996, -0.02386926, 0.11012653, -0.12374263, -0.09101484, 0.04732436, 0.04010300, 0.00135714, 0.03672985, -0.08041205, 0.01902516, 0.09275030, -0.00924699, 0.01927449, 0.09979095, 0.09221925, 0.03218529, -0.13582933, -0.05161890, 0.10981311, 0.01820676, 0.12323753, 0.12031486, 0.01055800, -0.08028131, 0.08006985, 0.06433870, -0.08111218, 0.15097369, -0.02078685, 0.01478306, -0.04935632, 0.05709755, 0.03825247, 0.09099867, 0.06311151, 0.01447839, 0.08336580, 0.19450888, 0.06668481, -0.02502656, 0.09777811, 0.04343080, 0.14137205, -0.10386866, -0.07828120, 0.02091691, -0.09142900, -0.04222175, 0.07900111, -0.07469489, -0.03316604, 0.01008372, -0.08829352, -0.00984441, 0.01965183, -0.08940978, 0.13331786, -0.06629772, -0.01773897, 0.04850381, -0.05411515, -0.06770825, -0.13572007, 0.06553013, 0.00567759, -0.01216026, -0.05526424, 0.00905940, -0.07879410, -0.06327049, 0.08357523, 0.00788359, -0.10872698, -0.01403927, -0.01845294, 0.14303342, 0.07549854, 0.03439948, 0.04676137, 0.06065068, -0.00945248, 0.06027798, -0.04458319},
  {0.12121886, 0.14623253, 0.13085474, 0.02915920, 0.14582078, -0.06561410, 0.05417634, 0.05726214, -0.01101621, -0.08670847, 0.07532813, 0.14155336, 0.03434902, -0.12276884, -0.03104007, -0.04811798, -0.00977671, -0.01935824, -0.07408342, 0.04234276, 0.13681912, -0.12789416, 0.06723385, -0.00081874, 0.08917131, -0.04226926, -0.02674185, -0.05253310, -0.04822162, 0.07986181, -0.04849339, 0.10175999, -0.01185544, 0.05965878, 0.05770924, 0.00941858, -0.06605400, 0.02965536, 0.09351322, 0.03568908, 0.08631185, -0.06603096, -0.00613568, 0.08586381, -0.01797098, 0.03679530, -0.02936194, -0.00580581, 0.00892898, -0.01073613, -0.14536977, 0.13523190, 0.06243873, 0.13543072, -0.07212333, 0.22636390, -0.02968554, 0.01669936, 0.08163413, -0.04787403, 0.10118809, -0.10355087, 0.10102508, 0.00942777, -0.15505435, 0.08356711, 0.08491036, 0.03726084, 0.06765077, 0.08448552, -0.06707525, -0.07950427, -0.12096462, -0.02237612, -0.02904702, -0.05923556, -0.03342255, -0.00881393, 0.04167770, -0.12538601, -0.02613942, 0.02835306, -0.01940613, 0.10784236, 0.10901911, -0.00996389, 0.03156862, 0.08013877, -0.13995390, 0.01210400, 0.02750330, -0.08754851, 0.17411759, 0.06057272, 0.05845357, 0.08370022, 0.19220090, -0.10380656, 0.05532147, -0.14697549, 0.04497019, -0.09227104, -0.10255542, -0.10174495, 0.06574041, -0.00716542, -0.03172852, -0.06010283, 0.12459336, -0.10689190, -0.06345791, 0.12774867, -0.04472345, 0.02853244, 0.06105092, -0.01804090, -0.06274275, 0.06807303, 0.04828838, -0.10252959},
  {-0.00805997, 0.11178542, -0.05715612, 0.05554796, -0.03171719, -0.11349475, 0.05645997, -0.07287028, -0.08035456, 0.08873539, -0.09169755, -0.09465849, -0.07226013, 0.06094945, -0.18066584, -0.01331458, -0.10503365, 0.04020734, 0.00659180, -0.04650616, -0.01449654, 0.06539959, 0.10025206, -0.02493089, 0.04874933, 0.00758054, -0.03174734, 0.05270689, -0.11880711, -0.06707154, -0.12376069, -0.00428582, 0.11069140, -0.18478571, 0.03104140, -0.10880242, -0.05588858, 0.04295128, -0.04280806, -0.05489958, -0.02157576, 0.19070192, 0.07801557, 0.12736000, -0.01581770, 0.08995541, 0.00936707, -0.06447479, 0.13166162, 0.12623252, -0.02929409, 0.00961298, 0.02951078, 0.06141424, -0.09632607, -0.08314186, 0.03079151, 0.01096905, -0.15459929, 0.13735437, 0.10370141, -0.02647991, -0.09257311, 0.08045027, 0.08337890, 0.10748610, -0.06863094, 0.02956759, 0.06875689, -0.08081092, -0.05625929, -0.07063901, -0.00945401, 0.11722080, -0.04141728, 0.06736406, -0.03551510, -0.02827325, -0.07111514, 0.07015938, 0.02044283, -0.01639126, -0.09829976, 0.05978308, 0.09128922, -0.13283883, -0.18221006, -0.12779267, 0.08281737, 0.09407849, 0.11435468, -0.01397606, 0.08696489, 0.02134781, -0.08734695, -0.01151668, 0.00924693, -0.12574896, -0.06942529, 0.05806014, -0.00565165, 0.03240486, -0.11207548, 0.07874389, 0.03972245, 0.07759850, 0.07577691, -0.04921652, 0.02530975, -0.03368892, 0.00357454, 0.01668549, 0.10639448, -0.03363284, -0.02635538, -0.00270000, -0.06196207, -0.07135443, 0.06846988, -0.11231573},
  {0.06254410, -0.12735415, 0.11080223, -0.07421396, 0.10082793, 0.05188737, 0.06287554, 0.05301185, -0.13730341, -0.11041585, -0.14466752, 0.01413919, -0.08553160, 0.03092588, 0.06489991, 0.09147467, 0.00295127, -0.11123332, 0.01607434, 0.00391708, 0.08648007, -0.08504662, 0.04084400, -0.10956489, 0.17221513, -0.04273631, -0.05495699, -0.11421334, -0.00998319, -0.05171853, -0.13127905, -0.03780418, 0.13814737, -0.01436363, 0.17143360, 0.00790061, -0.02669681, 0.22155730, -0.01212339, -0.05636707, -0.04267827, -0.04436942, -0.12641819, -0.06476685, 0.01113994, 0.07641424, 0.15236717, 0.03505146, -0.07599729, 0.00500835, 0.02633445, 0.12986001, -0.20329338, -0.01487454, 0.03870410, -0.06363811, -0.06141692, 0.03048872, -0.02082134, 0.19411618, 0.09726498, -0.07202481, -0.00948063, -0.09496462, 0.03396821, -0.06477765, -0.15155941, 0.04431656, -0.30881917, 0.00135524, -0.06612743, -0.20359431, 0.00883310, -0.11527134, -0.13786381, 0.03314079, -0.05558510, -0.11327446, 0.00832461, 0.11625507, 0.05724388, 0.00303600, -0.01667794, 0.05676384, 0.01979394, 0.11226609, -0.11094391, -0.03735946, 0.01594254, 0.05558711, -0.09116107, -0.11892543, 0.16046742, -0.14300954, 0.01679453, 0.09716923, 0.00399356, -0.05800904, -0.05878780, -0.02494277, -0.00327495, 0.04257711, -0.05695625, 0.08743302, -0.11065653, -0.11343213, -0.09382942, -0.03171393, 0.06329136, -0.04448117, -0.02579041, 0.02404482, 0.02555952, -0.07868695, 0.11004039, -0.10688505, 0.13074848, 0.02922606, 0.07341486, -0.19826739},
  {0.23671186, -0.01083675, -0.05181329, -0.00894809, -0.04041512, 0.08741526, -0.11084240, -0.06569295, 0.08660898, -0.03628182, -0.08401279, -0.00864289, 0.06893907, 0.06830778, 0.04286161, 0.07313193, 0.13269185, -0.06332562, -0.05287224, 0.08929245, -0.17398840, 0.09265847, -0.15065330, -0.14921778, 0.02770555, -0.06867961, 0.06044228, -0.02786258, -0.08323130, -0.05053784, 0.06042449, -0.06861945, 0.02995975, 0.17807452, -0.13428196, -0.12696043, -0.21344200, -0.19596861, -0.07519321, 0.05764134, -0.06069268, 0.18568340, -0.16024606, -0.20428398, 0.10356736, 0.10001615, 0.23436098, -0.16004117, 0.02625682, 0.07630337, 0.26358885, 0.11201371, -0.02591111, -0.09473269, 0.02193201, -0.17980084, 0.01423605, -0.07673841, -0.23352236, -0.23406027, 0.02264914, -0.15303880, -0.16065833, 0.07176729, 0.05399602, 0.00932091, 0.09506917, 0.10616715, -0.24428225, -0.00022588, -0.09530758, -0.38045749, 0.07888810, -0.12634444, -0.07615218, 0.04063826, -0.08098029, 0.04549114, -0.18258505, 0.16939567, -0.09412456, 0.21426575, -0.17412655, 0.11363412, 0.00510349, -0.11452030, 0.08228368, -0.10545471, 0.02768089, 0.15024778, 0.12263666, -0.00396593, -0.02774061, 0.11030242, -0.10161632, -0.03575813, -0.03014471, -0.09244872, -0.03707055, -0.13476989, 0.06733442, 0.04751329, -0.02154182, 0.11122715, 0.06175137, 0.09437799, 0.01070507, -0.16386692, -0.03080537, -0.00012296, -0.04718299, -0.03137264, 0.05008849, 0.07428864, -0.01548231, -0.09442841, 0.03913867, 0.07054814, 0.06478533, 0.29068509},
  {0.04281626, 0.17237508, -0.00424876, -0.10949914, 0.03283673, -0.03973986, -0.15897056, -0.09918755, 0.10453922, -0.00542260, -0.20277062, 0.04387086, -0.08958080, 0.08597451, 0.01340136, -0.03167142, 0.03431043, 0.06252363, -0.11340382, -0.13086227, -0.01923936, 0.06831573, 0.09733606, 0.04090655, -0.16209471, -0.01249539, 0.16667707, 0.03470711, -0.06092482, -0.06403740, 0.01484293, 0.07052419, -0.12914509, -0.01191724, 0.07078990, -0.05778947, -0.08572775, -0.03089065, 0.07939891, 0.05068833, 0.00552614, 0.06000920, 0.19811280, -0.04584072, -0.13779262, -0.03971030, 0.05985541, 0.08131137, -0.05497213, -0.02819859, -0.02269634, 0.01104825, 0.08627191, -0.00928175, 0.01896658, 0.00196666, -0.06083315, 0.05419374, -0.00516941, -0.16626668, -0.02485727, -0.01207453, 0.21793666, 0.05235525, 0.00925144, 0.06318694, 0.17735176, 0.24123138, 0.22367331, 0.08601617, 0.08500364, 0.10789132, -0.03269610, -0.07392434, -0.08798159, 0.08410645, 0.00555790, -0.00137666, -0.09238663, 0.03450121, -0.12364785, 0.07107437, 0.02660038, 0.07880776, 0.10985594, -0.00991964, -0.16704153, 0.03972754, -0.16578768, -0.04156841, -0.15982372, 0.02386518, -0.08411790, 0.10149352, -0.13083223, 0.03810630, -0.09186029, -0.09341320, -0.05927810, -0.06770875, 0.09414970, -0.08451944, 0.20171428, 0.04025038, 0.18933803, 0.03144497, 0.03189312, 0.00437105, 0.00548531, -0.01007487, 0.02168375, -0.00368304, 0.01184925, -0.01087118, 0.03797682, 0.09625736, -0.08351319, 0.03320180, 0.08243401, -0.18079948},
  {0.09352702, -0.00431666, 0.05263549, 0.05946639, 0.08854280, 0.07100105, 0.11805848, -0.00826192, -0.04495902, -0.06353083, -0.03968224, 0.08457078, 0.06578592, -0.03455667, -0.04751066, 0.01755834, 0.03375342, -0.00500813, -0.06599001, -0.07176695, -0.04736844, -0.02902030, 0.00703186, 0.04139498, -0.06097814, -0.08402118, 0.00503298, -0.03365037, -0.00912138, 0.03228910, -0.06069602, 0.05092708, -0.00098788, 0.06415605, -0.03891584, 0.01557070, 0.06717588, 0.11103132, -0.06541510, 0.09323104, -0.12332155, 0.08797564, 0.08278084, 0.09355632, -0.08778749, 0.02026728, -0.05722398, -0.07069071, 0.12733305, -0.01276635, -0.02757506, -0.12561700, -0.04180339, 0.06418435, 0.01929258, -0.03559291, -0.07259462, 0.03687890, 0.07972548, 0.02759570, 0.10223582, 0.08077712, -0.11914463, 0.03372946, -0.07804270, 0.03221945, -0.06733507, 0.01450528, 0.02616747, 0.05346599, 0.09123632, -0.01043749, 0.09549788, 0.11123920, -0.07130072, -0.11232527, 0.14167266, -0.03726907, 0.02059741, 0.09111243, -0.04989539, 0.03666776, -0.04048786, -0.10672525, -0.03734006, -0.11437514, -0.07091290, -0.00113597, 0.03128821, -0.01146781, -0.09352467, -0.08237260, -0.02783470, -0.09196199, 0.08807927, -0.05240873, 0.04028887, -0.01016147, -0.02821619, -0.04687414, -0.08906841, -0.07780765, -0.08840337, -0.13035664, -0.13705386, -0.11829621, 0.04719104, 0.15357439, -0.09880167, 0.07891013, 0.04162281, 0.14214069, -0.00209091, 0.09538030, -0.04006506, -0.00180605, 0.05307341, -0.11848220, 0.11474229, 0.05209753},
  {0.02098403, 0.22927417, 0.02334659, 0.02524156, 0.13876896, 0.04587958, -0.14440446, 0.08383407, 0.18920614, -0.01418762, -0.12574749, -0.00614032, 0.06135911, 0.00483318, -0.10042822, -0.13757074, 0.05091086, -0.00663556, 0.05608284, 0.11578321, -0.08878492, 0.04940298, 0.02087327, 0.00559175, -0.16642091, -0.03358614, 0.21180882, 0.01768918, -0.09479722, -0.01414062, 0.00669253, -0.13117318, 0.11662342, 0.00152301, -0.07048766, -0.22033823, -0.20974702, -0.32374722, -0.19918729, -0.20846221, -0.11275385, 0.25369480, 0.00510917, -0.32406101, 0.10735746, 0.10233179, 0.12246211, -0.00071793, 0.22832960, -0.11227203, 0.21512137, 0.10421580, 0.08320090, -0.06353495, 0.06307083, -0.22457650, -0.03773420, -0.16906966, -0.17255782, -0.07618948, 0.17185120, -0.05753386, -0.13753460, -0.00384454, 0.11832199, 0.20541199, 0.13855144, 0.06918614, -0.15010068, -0.02005194, -0.18505694, -0.14391546, 0.18056403, -0.07817159, -0.06113340, 0.00025329, 0.12601522, -0.06431500, 0.02112014, 0.17249785, -0.14264037, 0.13080676, -0.26250806, -0.23305048, -0.18677440, -0.09884628, -0.17426495, -0.00295550, -0.01067537, 0.23384482, 0.05871858, -0.09451826, 0.22928181, 0.19405998, -0.19022503, -0.18095912, -0.00710227, 0.04300275, -0.02796344, -0.16735423, -0.06125119, 0.05936211, -0.02841179, 0.11762343, 0.17781089, -0.02522115, 0.11288729, -0.22284055, 0.04109151, -0.09163508, 0.19596055, 0.03620387, 0.18547465, 0.01436201, -0.17862225, -0.10764120, 0.03147631, 0.02772439, -0.12221674, 0.15124662},
  {0.20063341, 0.04218652, -0.25706190, 0.07338770, -0.13070850, 0.04736038, -0.23984702, -0.03626988, 0.05322336, -0.02163983, -0.04400177, 0.02948976, -0.07506622, -0.08247817, -0.08618289, -0.28104520, 0.03195363, 0.26879027, -0.00467323, 0.40543756, 0.07247755, 0.06954949, -0.03253919, 0.01437555, -0.28043050, -0.05348316, 0.12482408, 0.01511693, 0.02501653, -0.02594035, -0.00853935, -0.32490551, -0.12415326, -0.06847192, -0.15910906, -0.19041133, 0.01760141, -0.12088758, -0.13218473, -0.03117751, -0.01295989, 0.03508826, 0.12602918, 0.07992257, -0.13979650, 0.00737580, -0.02951628, 0.04367710, 0.08133023, 0.04660288, -0.04637765, 0.23629616, 0.21249507, -0.07119466, -0.16123332, 0.03949326, 0.00722965, -0.07436826, 0.05189196, -0.22378437, -0.13459750, 0.18100251, 0.13280042, -0.25438467, -0.09821901, 0.01421242, 0.27140078, -0.03610507, 0.20617113, -0.08232153, 0.23556271, 0.15698807, 0.28688723, -0.15585636, 0.13883355, -0.02913325, 0.21000476, -0.07105241, 0.06818012, 0.19462042, 0.02009692, 0.09681126, -0.17420959, -0.21745270, -0.14097759, -0.21184342, 0.02881434, -0.00724883, 0.15531747, -0.07482047, -0.04157875, -0.06213044, -0.12789290, 0.23812494, -0.01608719, -0.42499137, 0.07315670, -0.03305587, -0.06245682, -0.02725726, 0.06668801, -0.07192907, 0.15629274, 0.11976129, -0.04521166, -0.04549920, 0.27169827, 0.07736010, -0.08175806, 0.04555166, 0.04048061, 0.16586997, 0.16572458, -0.09099695, 0.01188959, 0.02367749, -0.04875132, -0.33034357, 0.15572220, 0.18427213},
  {0.19976507, 0.18695414, -0.06909173, 0.00222051, 0.08286422, 0.11287481, 0.10965544, 0.04540196, -0.06410913, 0.05516084, -0.04862989, -0.09182044, -0.10825679, -0.20269229, 0.05346315, 0.08315703, 0.12935886, 0.00759980, 0.00296776, 0.00314161, -0.10728624, 0.10810605, 0.08397186, -0.08467423, -0.17086276, 0.05721985, 0.10252468, -0.02481288, 0.01183152, 0.10445909, -0.04652043, -0.30009884, -0.20861395, 0.08231482, 0.12113059, -0.12375278, -0.02501320, -0.17135257, 0.07783905, 0.04955417, -0.07170455, -0.07838440, 0.09873644, -0.32203525, -0.07029457, 0.01308386, 0.04257321, -0.11500911, 0.03390901, -0.17275175, 0.06371694, 0.11628602, 0.01925129, -0.08441381, 0.18286906, -0.10667662, 0.04045772, -0.17929706, 0.08707611, -0.00837776, -0.04092090, 0.07075194, 0.06888600, -0.22010884, 0.06105290, 0.05057534, 0.26800892, 0.14827025, 0.10588654, 0.08149721, 0.12376264, -0.06859224, -0.00089546, -0.04785794, 0.04076625, -0.11002891, 0.20872033, 0.04564410, 0.12127130, -0.04973654, -0.01223620, 0.09102491, 0.06071794, -0.00664570, -0.12613223, -0.11059575, -0.20261188, 0.08188029, 0.14345427, 0.10439224, -0.07053927, -0.20702225, -0.00212543, -0.09291307, -0.09490756, -0.21732484, -0.04894998, 0.04180295, 0.02816611, -0.00904404, -0.00801544, -0.06648225, 0.13599758, 0.03945208, -0.06985631, 0.00831190, 0.09071928, 0.01460118, -0.05331688, 0.00595177, -0.02851235, 0.07535543, 0.16083084, 0.07894228, 0.04293660, 0.08349282, 0.04899566, -0.20656331, 0.13305552, 0.24931104},
  {0.11111175, -0.03106843, -0.09073336, -0.04496559, -0.03777857, 0.17997155, 0.09547904, 0.03852046, 0.11744485, 0.09221853, -0.08131257, 0.08767906, -0.04282377, 0.01332095, 0.02744333, 0.02024391, 0.08593028, -0.01700468, 0.01455928, -0.03066232, -0.08870948, -0.02575912, 0.01462942, 0.12764055, -0.01615597, -0.11190275, 0.08196319, 0.06585762, -0.01970718, -0.05573352, 0.03567521, 0.01587893, 0.10867901, 0.03078885, -0.00512240, -0.14933926, 0.00721649, -0.05702764, 0.03093759, -0.06419513, 0.02754562, 0.00945568, -0.03633505, 0.03429574, -0.11816426, 0.06896033, 0.01756674, 0.04822538, 0.05701108, -0.00361642, 0.11127069, -0.07664525, -0.03242422, -0.01447635, -0.04874140, 0.00891689, -0.00322752, 0.11194354, -0.03651541, 0.05060439, 0.01519498, 0.03774098, -0.03111026, 0.08307691, 0.04463012, 0.04936400, 0.13312292, 0.08345943, -0.01755718, -0.02603302, -0.08782694, -0.11559550, 0.02095446, 0.05286887, -0.04083680, 0.09458460, 0.08057771, -0.07375453, 0.05819212, -0.06584944, -0.08440121, 0.03609936, -0.18821889, 0.06035455, 0.12488519, -0.03737036, -0.08960564, -0.05894450, -0.05072669, 0.15712440, 0.09970459, 0.04580759, 0.07145552, 0.16535641, -0.09332697, -0.13213895, 0.07606312, 0.04589548, -0.01190893, -0.12145231, -0.06948695, -0.02128331, -0.04844290, -0.01921159, -0.06203799, -0.00658029, -0.06999607, -0.08921576, -0.01920624, 0.02516415, 0.07538629, 0.08341951, 0.09929968, -0.05671552, -0.13063507, -0.01025470, 0.02504557, 0.00850246, 0.06368982, -0.05010338},
  {0.00176789, 0.04375218, 0.01976413, -0.03224578, 0.10152920, -0.03112829, 0.11237490, -0.04337657, 0.07254598, -0.07014883, -0.10077184, 0.08063462, -0.00425014, -0.06795997, -0.02180783, 0.04550771, 0.04230120, -0.04328552, 0.04827438, 0.03401725, 0.09544409, 0.09019177, 0.01472911, 0.13630882, 0.10430766, -0.00394043, -0.07539200, -0.05901446, -0.13779609, -0.12072253, -0.01635928, -0.00447762, 0.09609752, 0.03299090, -0.05831477, -0.11678205, -0.15433446, 0.08236786, -0.03161404, 0.02537977, -0.03334135, 0.09580289, 0.06391790, -0.02634686, 0.08947274, 0.07821320, 0.04605934, -0.06186272, 0.12867740, 0.05946167, -0.12756093, 0.05559720, -0.08801515, 0.08794779, 0.04398203, 0.04371334, 0.03554909, 0.08004633, -0.10227504, 0.12836480, -0.05717367, 0.13129389, -0.13341500, 0.01559202, -0.09997336, 0.07648201, -0.04262998, -0.04496647, -0.07412891, 0.02592623, 0.01119451, -0.11637168, -0.03342433, 0.01547512, 0.05929692, -0.06192724, 0.01361810, 0.03315428, 0.09043904, -0.07921872, 0.09685913, -0.08111129, -0.14323348, -0.07529356, -0.07905705, -0.06225100, -0.29181725, -0.07619262, 0.03851385, -0.02010783, 0.07320964, -0.00469008, -0.00911606, 0.05923510, 0.04598559, -0.08561963, 0.15186302, -0.11536459, -0.01864337, -0.01534688, -0.14104663, 0.05246276, -0.19560675, -0.01656995, -0.11486191, 0.00101944, 0.12325566, 0.06561451, -0.09836645, -0.02245053, -0.05717153, 0.13996249, -0.11376816, -0.10965943, -0.04619858, 0.03999875, -0.05477913, 0.00992142, -0.03809965, 0.06138741},
  {-0.14615038, -0.05396459, -0.12117407, -0.04856900, -0.09861233, 0.01058074, 0.04559765, -0.11704156, -0.10022638, 0.06508759, -0.09117113, -0.02342822, -0.08269404, 0.06218085, 0.06900749, 0.03210817, -0.03063365, 0.05815368, 0.01464596, -0.03270619, 0.04053037, -0.01704323, -0.05992295, 0.00492232, -0.08901338, 0.03945083, -0.00689386, -0.06078368, 0.06247266, -0.08515858, -0.04118245, 0.00295737, 0.11434614, -0.02621380, 0.08388078, 0.03963044, 0.06373456, 0.19062538, 0.09646036, 0.17283611, -0.08427928, -0.18362050, 0.09521557, 0.03994079, 0.04334929, 0.05568837, 0.05539064, -0.04873372, -0.02516438, 0.06150122, -0.01014005, 0.20664850, 0.10330614, -0.02225266, -0.02320146, 0.04127761, 0.07420003, 0.14699452, 0.13320485, 0.01181411, -0.02955212, 0.10383983, 0.11085689, -0.01019881, -0.02188033, 0.10912326, -0.10586019, -0.04202911, 0.14043655, 0.05527245, 0.14460731, 0.10207096, -0.08003995, -0.09285931, -0.06199444, 0.02477481, -0.04811545, 0.08598115, -0.01307479, -0.06279116, 0.05375174, -0.08018619, 0.06765561, 0.03604673, 0.02965442, -0.00529941, -0.01099834, 0.08739415, -0.14793798, -0.16037756, -0.04723561, 0.09857506, 0.09722458, -0.01529961, -0.05087921, 0.04700408, 0.17782718, -0.09742431, -0.07480614, -0.04870830, 0.04261972, 0.02288236, 0.12893890, -0.07101483, 0.06786566, -0.05369509, 0.06412033, 0.06058660, 0.11948464, -0.06639772, 0.04707723, 0.07993770, -0.08564510, 0.09884176, 0.10119954, 0.00709686, -0.03959319, 0.01160807, -0.03159701, -0.05337337},
  {0.05353390, -0.15311041, -0.01505609, -0.08316154, -0.01715579, 0.10065655, 0.18004033, 0.02444201, -0.06408484, 0.08505424, 0.06599412, -0.01277841, -0.01479753, -0.10778224, 0.08722020, 0.05209491, 0.02733475, 0.00503214, 0.01310505, 0.09861778, -0.02544856, 0.05355386, 0.00006465, 0.09679097, 0.01885561, 0.01265335, 0.06818328, 0.09665016, -0.04301945, -0.08388481, -0.14579308, -0.00336412, -0.03729055, -0.10295153, -0.03686979, -0.04419847, 0.04651151, -0.08339159, 0.17511149, -0.05226916, -0.00855753, -0.03557085, -0.08374018, 0.08189984, 0.08141788, 0.08538765, 0.00348872, -0.03242736, 0.10778118, 0.04710768, -0.11037911, 0.00873353, 0.04845250, 0.04925479, -0.07093879, -0.03839693, 0.03421796, 0.15066949, -0.11559873, -0.02984584, -0.06494673, 0.11601438, -0.06931850, 0.02870213, 0.00372932, 0.05042616, 0.13120596, -0.12890463, 0.01870744, 0.03520669, -0.03251767, -0.12544690, 0.11826887, -0.09610023, -0.03551741, 0.04875326, 0.09090444, 0.09006273, 0.14098574, -0.05116703, 0.04741113, -0.01872671, -0.12407753, -0.03355994, 0.10756015, 0.04954715, 0.03325900, -0.00901897, -0.14111221, -0.05669649, 0.00541813, 0.02205555, 0.06741004, 0.10165466, -0.10993540, 0.02246611, 0.08072986, 0.08243235, 0.02203930, -0.13925618, -0.05928211, -0.07211307, 0.01145626, 0.09194908, -0.05832651, -0.08354685, 0.09426446, -0.12517793, 0.07566745, -0.04412755, 0.04324214, 0.00788032, -0.07523546, 0.00376719, 0.02727669, -0.06155435, -0.10516086, 0.00692008, 0.10091543, -0.04763158},
  {-0.02972771, 0.13625659, -0.01612770, 0.07044218, 0.02636125, -0.02796723, 0.05908397, -0.07918099, -0.07405332, 0.03678540, 0.02278775, -0.04250202, -0.13576326, -0.03588683, -0.03449947, -0.04216539, 0.07167166, -0.02046573, 0.05536231, 0.15407601, 0.00635990, 0.00176698, 0.05597376, -0.01750476, 0.03936991, -0.05451663, 0.08580591, -0.11398266, -0.04459066, -0.00503802, -0.16723460, -0.13441889, 0.09812851, 0.06495474, 0.11121808, -0.13725123, -0.04834767, -0.06851449, 0.02283807, 0.05384251, 0.00818014, -0.03731860, 0.05995467, -0.00900206, -0.11389215, 0.00149494, 0.12538423, -0.04988651, 0.10749266, 0.11705905, 0.07024670, 0.03382573, -0.04580391, -0.12065566, 0.05626262, -0.07468835, -0.12208559, -0.09453613, -0.06774881, -0.07608777, 0.05695296, 0.03095208, -0.05737123, -0.03291597, 0.00099743, -0.02805072, 0.09864469, 0.13839337, 0.07130256, -0.02060273, 0.03233363, -0.06263817, -0.03300110, 0.00155091, 0.03109975, 0.00779149, 0.01286680, 0.06986899, 0.13876891, 0.12367694, -0.02542467, -0.07019698, -0.14584827, 0.04877955, 0.03310737, -0.01029221, -0.07010479, 0.09172298, -0.09384505, -0.11959829, 0.02369777, -0.12451138, -0.08215917, -0.02117632, 0.03491895, -0.13245425, 0.05512510, -0.07193777, -0.05140306, 0.08266953, -0.12325619, -0.01468480, -0.01393707, -0.02431952, -0.09816644, -0.01170566, 0.11022702, -0.01561790, 0.04875524, 0.06594904, 0.13525508, 0.12395567, 0.09702903, -0.01073820, -0.04035650, 0.09505262, -0.02696094, 0.01871811, 0.09960496, 0.01960038},
  {0.09551277, -0.00128715, 0.07262404, -0.01241327, -0.04281957, -0.17573230, -0.04039159, 0.11044753, 0.22281899, -0.01850703, -0.22128388, -0.12783782, -0.07269512, 0.07819886, 0.18412076, 0.00165501, -0.02402260, 0.07291149, -0.07490673, 0.05774339, -0.14735633, 0.13291055, 0.05594331, 0.06561030, -0.09819405, 0.05901853, 0.07378422, -0.07374521, 0.12585467, -0.12739559, 0.05752872, -0.05872557, -0.06260280, 0.02320435, 0.05855745, -0.03262049, -0.04948092, -0.08213378, -0.01005458, -0.14896658, -0.04715062, 0.10483405, 0.02955111, 0.06024415, 0.12645534, -0.04171993, 0.03906663, 0.02474385, -0.05407523, 0.00479261, 0.14879304, 0.13414992, 0.08030121, -0.13353142, 0.05306764, 0.04860918, -0.13944659, -0.11530204, 0.04856193, -0.23636897, 0.06147077, 0.20614295, 0.06333973, 0.04664363, -0.10792355, -0.00759351, 0.02866354, 0.11173108, 0.05194559, -0.10516191, 0.21697073, 0.12803264, 0.05683646, -0.08139676, 0.09128565, 0.07203735, 0.05107127, 0.02096873, -0.08806267, -0.01268310, -0.06243079, 0.07908046, 0.09606969, -0.05008163, -0.04343253, -0.08886416, -0.06172852, -0.02168108, -0.00337099, -0.12496877, -0.03965299, 0.08914153, -0.22727132, 0.07368572, -0.05464506, -0.03678610, -0.13601673, -0.00609234, 0.04867703, -0.04337091, 0.03508021, 0.07062445, 0.12351339, 0.03827530, 0.26328567, 0.01825700, 0.12723482, 0.20601739, 0.03936089, 0.04019700, 0.05250532, -0.16247229, 0.24379522, 0.09548233, 0.06000163, 0.03579016, -0.02536653, 0.01388689, 0.13340557, 0.04471033},
  {0.03218400, 0.06370751, 0.09206766, 0.05549481, 0.01372848, -0.00425855, -0.00732574, -0.11634158, 0.02508794, -0.08467139, -0.22758286, -0.00561768, -0.15659440, 0.08713344, 0.12179087, -0.08594621, 0.01236016, 0.03575749, 0.00788138, 0.01867086, 0.05135339, 0.08661065, -0.10323969, -0.12837163, -0.04524451, -0.11620201, 0.17847715, -0.04194174, 0.01542510, 0.07876983, -0.09130280, -0.14624214, 0.06563201, -0.11341458, 0.10835653, -0.10373152, 0.03190342, 0.05486815, 0.12011603, -0.06212933, -0.03150108, 0.07064807, 0.13881294, -0.01132797, 0.00251940, -0.04681575, 0.09026622, -0.01448089, 0.04472870, 0.02100224, 0.14903440, 0.01575520, 0.13021103, -0.11804016, -0.02012517, -0.02441432, 0.05158388, -0.10557943, 0.15567861, -0.10116906, 0.06166733, 0.10730802, 0.06274238, -0.09638087, 0.13394177, 0.00236003, -0.10998103, -0.03804168, 0.08802256, -0.07902080, 0.02866036, 0.10304281, 0.00036333, -0.04376148, -0.12001913, 0.06343199, 0.08624607, -0.07430703, -0.05359026, 0.11974745, -0.08767307, -0.03717546, 0.03190031, -0.05827485, -0.09084938, -0.10745723, -0.07346811, 0.01188698, -0.06472990, -0.01090348, 0.01637425, -0.01799562, -0.12626632, 0.07148704, 0.10385972, 0.03747335, -0.00626682, -0.07641929, -0.01302043, -0.07392358, -0.05128642, -0.12031794, 0.08687509, 0.03879389, 0.00712687, -0.05002259, -0.04788480, 0.17375222, -0.02003268, -0.09237370, 0.13197471, -0.03129473, 0.20953511, 0.01305492, 0.10464878, -0.00885488, -0.03340963, -0.05626765, 0.08446416, -0.12573126},
  {0.14773807, 0.08941788, -0.07969097, 0.03601098, 0.03555134, 0.11686207, 0.02634754, 0.08955027, -0.08449316, -0.03827630, -0.08160337, 0.07929978, 0.06812470, -0.09495581, -0.01417503, -0.03136735, -0.00615092, -0.12746021, -0.04108466, 0.00618213, 0.05924923, 0.02826087, 0.17558941, 0.15038007, -0.08247205, -0.06387968, -0.04186755, 0.05824624, 0.02301369, -0.06658050, 0.05452765, -0.10407288, -0.03607911, -0.00635657, 0.02343207, -0.14480114, -0.11960003, -0.03810759, -0.04575606, -0.01422979, 0.07493808, 0.00854218, -0.03761534, -0.13124047, 0.00127241, 0.12094790, 0.04569302, -0.02730142, 0.08173871, -0.04828281, 0.07024357, -0.08192953, -0.00814224, -0.02747833, 0.10974614, -0.01846744, -0.12642279, 0.04639066, -0.09922376, 0.08433254, -0.00702914, -0.04289970, -0.03600157, 0.04527551, -0.03540161, 0.05665508, 0.13016692, -0.03955977, 0.02679582, 0.04555637, -0.03032671, -0.00453760, -0.04466764, 0.01427781, -0.09195302, 0.06552973, 0.05257418, -0.06977995, 0.09666744, 0.07969879, 0.02794060, -0.02322306, -0.00951639, 0.04520198, 0.12262189, 0.00418630, -0.01388704, -0.00484225, 0.00805375, -0.06252119, 0.05719640, 0.09974425, 0.17320314, -0.07790246, 0.11239269, -0.09573072, -0.05531603, -0.03445287, 0.05568596, -0.07646307, -0.04982939, 0.07645198, 0.03999613, -0.16666253, 0.04572375, 0.00171382, 0.05727825, -0.08540003, -0.09960918, -0.04279488, -0.11341983, 0.07184462, -0.01614656, -0.09255344, -0.04228179, -0.03115449, -0.09827200, -0.07928396, 0.06269976, 0.14284851},
  {-0.02804968, 0.21497378, -0.01019264, -0.09962999, -0.04698397, -0.01630269, -0.16857512, 0.01940939, 0.03033136, -0.00452190, 0.01428021, -0.04807448, -0.07011265, -0.09984415, -0.12368196, -0.30036670, 0.01388229, 0.17442897, -0.03829054, 0.01234181, 0.10738917, 0.19552970, -0.01864836, 0.04583027, 0.00632305, -0.01684828, 0.06941456, 0.01685755, 0.05827826, -0.08786552, -0.05645729, -0.30129287, 0.08557124, -0.07369771, 0.07552130, -0.17563078, -0.13464597, -0.08782041, -0.11723471, -0.13553770, -0.11083153, 0.14011861, 0.04936534, 0.03194579, 0.14820540, 0.03861802, -0.01919899, 0.01328126, 0.16307488, 0.10249817, 0.10335967, -0.07769720, 0.10869379, -0.07745726, 0.13021114, 0.16420308, 0.03629535, -0.08616865, 0.11110057, -0.04738560, -0.01016227, -0.04010110, 0.15626781, -0.21704537, 0.04474098, 0.00877964, 0.10614500, -0.02791996, 0.13214397, 0.01050786, 0.03985249, -0.05211976, 0.13681060, 0.11682287, -0.10337106, 0.00578161, 0.28120670, 0.06963202, -0.05334571, 0.04370965, -0.09220697, 0.00160359, -0.20577937, -0.20734921, -0.13406745, -0.19290702, -0.26370820, -0.02565944, 0.08024389, -0.05821234, -0.07022010, -0.11214130, 0.01887040, 0.10512236, -0.06490374, -0.10643889, 0.02950974, -0.00435775, -0.08517037, 0.06547415, -0.02280730, -0.10054529, -0.00510759, -0.00167783, 0.11501551, -0.07336079, 0.12361030, -0.00041658, -0.05131193, 0.09763506, 0.25838932, 0.05387872, 0.21487248, 0.01095030, -0.16158201, -0.06524490, 0.07234001, -0.11742166, -0.07675225, 0.03243444},
  {0.02671501, -0.06676962, 0.03841081, -0.08175808, 0.07430784, -0.11774182, 0.14104903, 0.09539307, -0.05039175, -0.01381840, 0.04253543, 0.06707578, 0.00807367, -0.12329231, 0.13125832, 0.19994320, -0.04872318, 0.03154149, -0.11883070, 0.05270814, 0.06474127, -0.05773645, 0.09880739, -0.04599036, -0.08599330, -0.05397895, -0.08114246, -0.06968812, -0.09905696, -0.00090776, -0.15467453, 0.01816094, 0.02952457, -0.12495449, 0.07912677, 0.13561207, 0.12927820, 0.01908388, -0.05108859, 0.06923421, 0.05425560, -0.01926486, -0.13809992, -0.08507947, 0.15729243, -0.05648031, -0.09483578, -0.07610534, -0.06992285, 0.11554796, 0.05152499, -0.05975683, -0.01140537, -0.05209548, -0.09233323, -0.15197149, -0.01636638, -0.01846718, -0.13559084, -0.05728880, -0.04786661, 0.08271490, -0.05310977, 0.08541909, -0.10571382, -0.00487061, 0.02810111, -0.11874533, -0.02174282, 0.05043360, -0.05990889, -0.07048915, 0.05689077, 0.03034013, -0.02932476, -0.21247260, 0.05048903, -0.05300919, 0.19801158, -0.01247838, 0.01355426, 0.02138631, -0.11583124, 0.09328613, -0.04007932, 0.13782629, -0.02940792, -0.03679385, 0.10227910, -0.07223951, 0.09987902, -0.11704165, 0.09451526, 0.05591984, 0.02696986, -0.03142453, 0.21615441, 0.03831328, -0.10369553, -0.10261521, 0.04378017, -0.07426564, -0.06273048, -0.07142708, 0.06193175, -0.04301189, 0.14844745, -0.06980218, 0.12258549, -0.05448345, -0.01624519, -0.00073593, -0.06634079, 0.08072969, 0.06100048, -0.04293471, 0.06258258, 0.10002955, -0.13227589, 0.02993748},
  {0.14317706, 0.10630914, -0.05617174, -0.06266691, 0.07665750, 0.15835793, -0.32431364, 0.04119995, 0.24860379, 0.08035411, -0.06982189, -0.03937710, 0.06630523, 0.06317685, -0.03330261, -0.00741593, 0.15476499, 0.04430575, 0.08493327, 0.04473276, -0.17703740, 0.12297025, -0.05994601, -0.04580702, -0.12952147, 0.05782144, 0.15084331, -0.08431153, 0.03876570, -0.11113269, 0.13100611, -0.15715997, -0.04657986, 0.17668769, -0.02335457, -0.18231782, -0.13258080, -0.24270326, -0.21753906, -0.12328080, -0.05133896, 0.24029204, -0.06852777, -0.27562311, 0.07437366, 0.06328368, 0.13786742, -0.12335783, 0.10630450, 0.15569067, 0.18162566, 0.01747235, 0.19309175, 0.01849393, -0.03883606, -0.16781382, 0.00742857, 0.00935212, -0.19537883, -0.17922406, 0.03623778, -0.02371118, 0.04834972, 0.09876136, 0.01729215, 0.21562989, 0.26011181, -0.20266131, -0.16764189, 0.02733852, -0.28788409, -0.31280148, 0.08330099, -0.20913567, -0.08157603, -0.04983773, -0.03275235, -0.00474136, -0.11799430, 0.24774629, -0.19969063, 0.13271710, -0.28671646, -0.05790544, -0.08353309, -0.11479399, 0.05535578, -0.03085375, 0.15321666, -0.03416500, 0.13863064, 0.11204802, -0.05933696, 0.24381250, 0.08168601, -0.00283409, -0.03207585, -0.05868812, -0.07587557, -0.06414989, -0.04239346, 0.03972429, 0.07448392, 0.10298458, 0.22231719, 0.04799343, 0.09859408, -0.21996447, -0.17175119, 0.04950417, 0.02237935, 0.00683300, 0.11362437, 0.01760347, -0.06911936, -0.12034532, 0.02896145, 0.02672194, -0.03194871, 0.43156964},
  {-0.17064589, 0.06690793, -0.17379560, 0.05673028, -0.03977814, -0.01492749, -0.10606680, -0.10207040, -0.08253826, -0.01973758, -0.10157879, -0.12386605, -0.05036375, -0.07471782, 0.08446942, -0.12704358, -0.02607099, 0.13069986, 0.01177013, 0.07321634, 0.09049211, -0.00444029, 0.09166781, 0.04453292, -0.02469547, -0.04914835, 0.07629895, 0.00119388, 0.05856408, -0.06612254, -0.09375457, -0.19279338, 0.20728824, -0.00223753, -0.04969190, 0.00336938, 0.06062205, 0.03854033, -0.08377261, 0.01972177, -0.11777426, -0.12434378, -0.06861863, 0.06039489, -0.01738021, -0.06367530, 0.07820315, -0.12830850, -0.13830850, 0.08098476, 0.16689581, -0.04332016, 0.08090475, -0.09363841, 0.07924506, -0.09717279, -0.01359517, -0.11573923, -0.02381340, -0.01041385, 0.06063574, 0.13054879, -0.03236610, -0.03979611, 0.10948693, 0.04340016, 0.03257860, 0.04842325, 0.11558466, 0.09280195, -0.02785569, -0.09059509, -0.05083105, -0.08698411, -0.05126106, -0.06328012, 0.07990973, 0.02098076, 0.06923480, 0.24058120, 0.06135433, -0.01084690, -0.06983893, 0.00115531, 0.03178369, -0.07617769, -0.17269062, -0.04341423, 0.02317774, -0.01914172, -0.04718754, -0.11273196, -0.02250175, 0.11065400, -0.08677814, -0.02129327, 0.08692428, -0.09285841, 0.01300095, -0.05584264, -0.02408442, -0.07023161, 0.15249963, 0.06477972, 0.08843473, -0.10921267, 0.06531470, -0.01094853, 0.16205491, -0.09585043, 0.17648351, 0.16363740, -0.02903819, 0.04289426, -0.04082680, -0.05003647, 0.17445831, 0.15765639, -0.07777827, -0.12982270},
  {0.07229570, 0.05492125, -0.13870223, 0.07515477, -0.04499403, 0.04136935, -0.02266241, 0.03193850, -0.03180795, 0.03524404, 0.06263614, -0.15180388, -0.01325122, -0.00431102, -0.01315554, 0.01471503, 0.05100642, 0.20140626, 0.01075553, -0.01273286, -0.07315966, -0.01310832, -0.04414536, -0.16118290, -0.03403940, 0.07774308, 0.12876281, 0.06108934, -0.08175372, -0.07917457, 0.07188961, -0.15612602, 0.00474018, 0.01750221, -0.01908230, 0.05075727, 0.03709392, -0.05611310, -0.08185472, -0.09187865, -0.09078650, -0.00353008, -0.03697312, 0.03758825, 0.13780664, -0.05443273, 0.08292373, 0.06550524, 0.10021371, -0.04523646, 0.00817054, 0.08146713, 0.02825457, 0.00057687, 0.09235221, -0.00475831, -0.05676018, -0.01026698, 0.14402419, 0.05840429, -0.12046151, -0.04241549, 0.05310586, 0.05446921, -0.03603841, -0.10139196, 0.12891883, 0.10534640, 0.15304326, -0.06472784, -0.06944682, 0.09537444, 0.08038545, 0.04533871, 0.06847456, -0.16346206, 0.08708241, -0.09336134, -0.02050739, 0.00742357, 0.06780777, 0.10778524, -0.09854628, -0.01345513, -0.07052918, -0.17050189, 0.02139524, 0.02887437, -0.08419386, 0.01306097, 0.00054048, -0.04009914, 0.00714369, -0.09923407, 0.05869628, -0.04716478, -0.00576652, -0.05527554, -0.05856368, -0.09817865, 0.06497104, 0.02283450, 0.02523348, 0.10875285, -0.05631038, -0.12084518, 0.01691049, 0.10009930, 0.00710084, -0.10796755, 0.07101017, -0.12043680, 0.14664760, -0.00801027, -0.01720191, -0.00300064, 0.19826800, 0.00165185, 0.02335282, -0.00261230},
  {-0.05639746, 0.06315999, -0.00433401, -0.09415170, 0.03064501, 0.07996646, 0.04148804, 0.07925861, -0.06187521, -0.03684717, 0.01598632, 0.11808852, 0.02774145, -0.13766669, 0.08675996, 0.08285237, -0.09125222, 0.03054720, -0.12253777, 0.02774079, -0.06740550, 0.07712486, -0.08936111, 0.08433159, -0.05952105, -0.00792336, 0.14277102, -0.07227190, 0.05003231, -0.00512643, -0.05854133, -0.01455759, -0.01972542, -0.02546970, -0.12842703, -0.13677810, -0.10079197, 0.15477388, -0.03196929, 0.01443023, 0.03707098, 0.11994667, 0.03250995, -0.02615688, -0.09232282, -0.05629714, 0.07317095, -0.04975082, -0.00876721, -0.16296084, -0.22209416, -0.08478716, 0.05632961, 0.12312449, -0.01683407, 0.03910533, 0.03756100, -0.07915955, -0.11154436, -0.05043258, 0.07204306, 0.00711266, 0.14915578, -0.04192989, -0.09026829, 0.09627442, 0.06954394, 0.08020756, 0.00847793, -0.08300807, -0.06437499, 0.09012930, 0.04166005, -0.00215524, 0.08232836, 0.04742198, 0.07805046, 0.09491989, -0.15520880, -0.04353159, 0.02069269, 0.01741713, -0.16077439, -0.07389372, -0.05023072, -0.03087131, 0.04246328, -0.03475884, -0.10361921, -0.14166541, 0.05197537, -0.01947873, -0.14392912, 0.07158142, -0.12748331, 0.11552877, -0.03892814, -0.08434818, 0.08536863, -0.06318250, -0.01417111, 0.01992294, 0.00082963, -0.09055910, 0.09740435, 0.06695785, 0.07391699, -0.06435117, -0.00467388, 0.02078090, 0.05588836, -0.00676422, -0.10460391, -0.10325825, 0.16123009, -0.10238633, -0.09208479, 0.04432173, 0.05482706, -0.11334822},
  {-0.08962084, -0.00771410, -0.03598715, -0.01598592, 0.16086259, 0.01758288, -0.13845243, -0.05076344, 0.02835342, -0.10380896, -0.13683586, -0.08463627, -0.00213199, 0.10127205, 0.07533622, 0.07755743, -0.14552432, -0.00026776, -0.01802179, 0.15597756, 0.04896184, -0.09070317, -0.03991650, 0.12730350, -0.05718453, -0.09557314, -0.00844956, 0.09109240, -0.02175640, -0.07111496, 0.07568317, 0.02145714, -0.08394740, -0.12006628, -0.00734096, 0.00071154, 0.06682628, -0.12779637, 0.00183901, 0.03342567, 0.03807478, -0.05783630, -0.07603771, -0.03459952, 0.04163872, 0.12047823, 0.07503487, 0.00745843, 0.11601461, 0.04817098, 0.09054319, -0.05565679, 0.11292835, -0.00254353, -0.01215525, 0.04057142, -0.13667336, 0.05855916, -0.06429048, -0.07909693, 0.03862560, 0.05800920, -0.18837558, 0.15576543, -0.13220495, 0.10457893, 0.02428423, -0.00022556, 0.03298885, 0.04009535, -0.15384325, -0.01505567, 0.18092212, -0.17932962, -0.03516767, -0.08320998, 0.05946011, 0.03880895, 0.05678453, 0.14592527, 0.00584579, -0.06036373, 0.00317139, 0.05681760, 0.03592093, -0.03516738, -0.14836252, 0.02015210, 0.04878521, 0.02456798, 0.09343610, -0.01401366, 0.09598213, 0.09546109, -0.04201699, -0.10775132, -0.08470125, 0.03222054, -0.05436413, -0.07718077, 0.00729141, -0.03293441, -0.09893166, -0.11271856, -0.02045623, -0.00463727, 0.06071313, -0.00202289, 0.11561479, -0.07752889, 0.01118774, -0.00301325, -0.08180711, 0.07499715, -0.03828207, -0.00004526, 0.02379486, -0.02135271, 0.11171751, 0.15696733},
  {0.08582901, 0.05175893, -0.15816914, -0.01810667, -0.06783514, 0.00468354, 0.00143436, -0.11862154, 0.01611801, 0.05929667, 0.14188837, -0.03341300, -0.05363165, -0.10484502, 0.03380545, -0.01549172, 0.01609077, 0.09275879, 0.01499449, -0.17046672, 0.06579165, 0.00043320, -0.11892878, -0.18049036, -0.12432769, 0.04951752, 0.06017056, -0.09921606, -0.04195873, 0.06441519, 0.14126046, -0.01385888, -0.08993312, 0.06612672, -0.01226054, 0.08424910, 0.13665996, 0.01014208, 0.00393961, 0.00618428, -0.09217848, -0.02308904, -0.13734296, -0.10286374, -0.04033621, 0.00669315, -0.09742732, -0.05207808, -0.13507585, -0.03753585, 0.02261767, -0.13402516, 0.06741237, -0.06562064, 0.03532781, 0.11416240, 0.00650371, 0.04607798, 0.08813485, -0.01435044, -0.02986536, -0.04771159, 0.04496573, -0.08871054, -0.20903033, 0.06236519, -0.03996325, 0.11093535, 0.12551251, -0.10879204, 0.02182908, 0.04830318, 0.04026806, 0.02714096, 0.05035832, -0.13365294, 0.01961970, -0.03501835, -0.12783355, -0.08173523, 0.15833053, 0.00778275, 0.04053995, 0.08310329, -0.06297901, 0.09573301, -0.08282187, -0.08230313, -0.05106909, 0.07621116, -0.12795915, 0.03956316, 0.00864427, -0.03934041, -0.12517741, -0.09147535, 0.02951769, 0.02736198, -0.07709482, -0.00272843, -0.10591082, 0.00674090, 0.06229641, 0.08685048, -0.01173673, -0.02204686, -0.05338850, -0.11785012, -0.08445982, -0.03539215, 0.01055606, -0.06579104, -0.03046273, -0.08404700, -0.01615643, 0.06269100, 0.05153602, -0.00514298, -0.07631031, 0.06627727},
  {0.14977993, -0.05938038, 0.03336157, -0.08995526, 0.02572436, -0.03775091, 0.07490124, -0.08465871, -0.14697333, -0.10591578, -0.00755140, -0.12647857, 0.05164495, -0.05131939, 0.17335248, -0.08184409, -0.01957194, -0.04242747, -0.10114213, 0.06872018, 0.01024780, 0.01286753, -0.05111530, -0.16530164, 0.05468685, 0.00548447, -0.00190187, 0.08215563, 0.00727214, -0.01221864, 0.06794363, 0.07958346, -0.19992015, -0.04090201, 0.02327019, -0.09135322, 0.10680068, 0.05198848, 0.13070256, -0.01917758, 0.02880798, 0.03217135, 0.13391858, -0.07063799, 0.01811540, -0.06098843, 0.09167793, -0.00646307, -0.03151685, -0.00354566, -0.02291412, 0.08801313, -0.06568947, -0.00545877, 0.06045606, 0.07414358, -0.01315881, -0.01957193, 0.13312544, -0.02115864, 0.13869311, 0.09928953, 0.02453380, -0.04029537, -0.07774155, -0.07281151, 0.00232283, 0.07927794, 0.08091115, 0.08288103, -0.06062844, 0.13758983, -0.08145058, -0.04009585, 0.02796961, -0.11945529, 0.06498734, 0.08733032, -0.23382340, -0.20505475, -0.02932965, 0.08019786, 0.09343720, 0.01939560, -0.02698558, -0.08458137, -0.01155323, -0.06520191, -0.14533818, 0.05303689, -0.13713878, 0.10015007, -0.03793230, -0.13900039, 0.07357086, 0.00622614, 0.03918216, 0.05600432, -0.08538091, -0.11713324, 0.03361007, -0.05653604, 0.09818716, 0.10974020, 0.00179250, 0.05765785, -0.04965402, 0.10614215, 0.06940465, 0.08796234, 0.06167056, -0.02580750, 0.04308876, 0.07611802, 0.00233790, 0.00781256, 0.04838197, 0.11128766, -0.00258617, 0.04433604},
  {0.09192354, 0.13512218, -0.05394031, -0.08412433, -0.01046002, -0.03935928, 0.09440432, -0.08428491, -0.02007422, -0.01888001, -0.21273938, 0.06594961, 0.04429892, -0.05478758, 0.09995024, 0.09773300, 0.14508572, -0.03648837, -0.06227489, 0.12139820, -0.05783513, -0.10737611, -0.14789051, 0.00091992, -0.00999475, 0.07438971, 0.19591966, -0.05335141, -0.08883303, 0.02747389, -0.08153874, -0.08693639, -0.20595762, 0.05067890, 0.07976869, -0.13662744, -0.04635862, -0.02442212, -0.01572774, 0.06276150, 0.07509325, 0.05181911, 0.07037524, 0.04196497, 0.02813657, 0.14057124, 0.14999983, -0.06661471, 0.05135367, -0.06621975, -0.07165660, 0.17370953, 0.09572390, -0.00811220, -0.05945605, 0.08685191, 0.06957370, 0.07411408, 0.00420067, -0.13234748, -0.00384273, -0.13048758, 0.11447701, -0.09903294, -0.20514661, 0.00029441, 0.14968190, 0.07952259, -0.02703355, -0.00078951, -0.03093371, -0.16553628, 0.05619592, -0.12762617, 0.01007964, -0.09991290, -0.00816986, 0.06133062, 0.01128172, 0.10400646, -0.07625009, 0.09465314, -0.03158873, 0.03166214, -0.13498458, -0.19788912, 0.00125687, 0.03176594, 0.02609764, 0.06122478, -0.26033160, -0.02525333, 0.02013192, -0.10462065, -0.09656201, -0.14644939, 0.08563663, -0.12585834, 0.01669281, -0.01015153, 0.05210334, 0.03296504, 0.20962906, 0.01975326, -0.07280740, -0.11936533, 0.12148400, 0.01450607, 0.01672786, 0.05124795, -0.05054693, 0.03382179, -0.00738374, -0.10653895, -0.02891987, 0.05996257, 0.03830555, 0.04090388, -0.05924001, 0.25436369},
  {0.19716060, 0.03456142, 0.00465534, 0.06378067, 0.12085634, 0.03127966, -0.17995980, -0.04861926, 0.02997526, 0.08812945, 0.10900234, -0.06268152, 0.07494635, -0.03588203, -0.08747794, -0.16432764, 0.04344202, -0.00838068, 0.05884532, -0.05865724, 0.16671255, 0.02116814, -0.13027424, 0.03439670, 0.05595374, -0.09558639, 0.16287108, 0.02328745, 0.15344174, -0.03239417, 0.03176510, -0.12693955, -0.00143940, 0.01961624, -0.06342380, -0.15628953, 0.01476435, -0.05732816, -0.15621947, 0.07356984, -0.05548075, 0.11051516, -0.04157051, 0.01984082, 0.15744539, 0.15640105, 0.01994187, 0.08886049, -0.08338806, -0.07466003, -0.30410582, -0.00821326, 0.07395843, 0.22489640, 0.03085093, 0.13067137, -0.01268794, 0.10570288, 0.09398333, -0.12563941, 0.08005970, 0.05874971, -0.02279219, -0.02007868, -0.08284672, 0.08776376, 0.02548798, -0.10166720, -0.09019255, 0.04261036, 0.02910395, -0.13134819, 0.03585651, -0.09426907, -0.03610962, -0.03824916, 0.17121267, 0.06373437, 0.07122636, -0.13775262, 0.28556576, 0.13374703, -0.07530683, -0.07905006, -0.09991486, 0.02762813, 0.08681368, -0.03000998, -0.05164528, -0.12361882, -0.04755053, 0.02725968, 0.03497553, -0.03608751, -0.09636355, -0.07637089, 0.07773127, 0.04236986, -0.10630939, 0.06763589, -0.05615098, 0.03768671, -0.11146867, 0.03899786, 0.12152659, 0.06345683, 0.01509923, -0.16896577, 0.03199252, -0.11280070, 0.04539245, 0.07030072, -0.02313411, 0.04051337, -0.07999671, 0.05859933, 0.10122965, 0.12008738, -0.11218119, 0.08679973},
  {0.04379059, 0.10432767, 0.10934167, -0.02458157, 0.07965485, 0.10163887, -0.07808591, -0.08949240, -0.01696048, 0.09359303, 0.01083220, -0.03154453, 0.06252741, 0.02703307, 0.05085257, -0.12735130, 0.04802300, -0.04122892, -0.06913134, 0.02415188, -0.06338921, -0.08680870, -0.15379737, 0.05108430, 0.11641698, -0.00575404, 0.09737205, 0.01772222, 0.10574798, -0.01164712, 0.00168360, 0.01652488, -0.01600016, -0.03526889, -0.07017919, 0.01390089, -0.02683790, -0.03330055, -0.00588442, -0.06854548, -0.10442875, 0.09235339, 0.01519822, 0.00591388, 0.03667878, 0.04406004, 0.00373708, -0.06879422, -0.10487378, -0.07875579, 0.03371346, 0.06687026, 0.06077050, 0.11458564, -0.10010263, 0.13156892, 0.06391644, 0.08811314, 0.06364353, -0.08629163, 0.02546167, -0.01137922, 0.04368987, -0.06221711, -0.08916752, -0.06424723, -0.10212810, -0.05141473, 0.10501636, 0.04078118, -0.00111491, 0.11641127, -0.08966790, -0.03307924, 0.09614357, -0.08879719, 0.02905603, -0.08083583, -0.10945311, 0.02481995, 0.00260136, 0.12620026, 0.05907138, -0.03200827, -0.08789811, 0.01509859, 0.07100678, -0.12184925, -0.09126861, 0.03326480, -0.12159473, -0.06457025, 0.10249351, -0.00904857, -0.06090058, -0.10861204, -0.00353169, -0.03638881, -0.10747953, 0.06319133, -0.10517823, -0.06266888, -0.07183523, -0.08406971, -0.01152387, 0.05288893, 0.04784971, 0.04623320, -0.04890223, 0.03263028, -0.09125391, 0.08841035, 0.06785946, -0.07405851, 0.03705014, -0.11429410, 0.05759469, 0.04587512, 0.03833882, 0.11770315},
  {0.02286215, 0.11618368, 0.02793089, -0.07251702, 0.09013578, 0.00346704, -0.20241593, 0.06496409, 0.17060624, 0.06355119, -0.18336940, -0.07482556, 0.11088735, -0.06366384, 0.04779106, 0.01318848, 0.02659160, 0.07775842, -0.02300394, -0.00943676, 0.04920606, -0.06456005, 0.04538657, -0.02505403, 0.07962458, -0.10164306, 0.10120361, -0.05512360, -0.11184512, 0.06446862, -0.12867369, -0.01018962, -0.12684453, 0.07992470, -0.04494935, -0.11226661, 0.00284648, 0.00154634, -0.07207984, 0.00271662, -0.08938432, 0.00508898, 0.13195007, 0.03376157, -0.03966285, -0.04855661, 0.02128244, 0.07712700, 0.01756012, -0.03583463, 0.09113898, 0.12184513, 0.02265202, 0.06971078, 0.05583162, 0.05744107, 0.01349307, -0.04742386, -0.00509957, 0.00870667, -0.03471467, 0.02218854, 0.02169601, 0.06485096, 0.00475073, -0.06568655, -0.04637719, 0.03500989, 0.01707076, -0.01688899, 0.06936962, -0.03922030, 0.02586078, -0.02957683, -0.02538343, 0.00157073, 0.13298935, -0.04392518, 0.05385587, 0.09931538, -0.07770544, 0.02282592, -0.12920469, 0.06450251, 0.05895609, -0.00188538, 0.00036435, 0.05177787, 0.00380362, -0.06599563, -0.03760871, 0.05292948, 0.16697198, 0.04326977, -0.03017982, 0.04242332, -0.05351319, -0.08568345, 0.04272225, -0.06430259, -0.08639822, -0.06616639, -0.06395830, 0.09163821, 0.11866111, -0.03387912, 0.02101244, -0.01630179, -0.05963520, 0.07200962, 0.01613700, -0.01129561, 0.02596800, -0.05159299, 0.07707773, -0.06980252, -0.10823422, -0.00034005, -0.03209750, 0.03285107},
  {-0.22004133, -0.07870511, 0.00241354, -0.08339402, -0.01256331, 0.06789380, 0.13640694, -0.00963288, -0.14837474, -0.05276075, -0.07925482, -0.15117049, -0.04872945, -0.01955502, 0.18798439, 0.25816548, 0.15263589, 0.13556963, -0.02292768, -0.03917061, -0.20769882, -0.13968349, -0.00203925, -0.05682546, -0.02451988, 0.07871084, -0.17341956, -0.11904499, -0.11475994, -0.03915643, -0.01758207, -0.08196927, -0.06081404, 0.10487399, 0.15482904, 0.13306275, 0.09222651, -0.19749086, 0.12541173, 0.08068041, 0.02518355, -0.17296304, -0.07208366, -0.37457934, -0.00092243, -0.11977345, 0.11587416, 0.06859501, -0.16853130, -0.17989987, 0.10438345, -0.15487045, 0.02827667, -0.03720496, 0.01382427, -0.09670286, 0.01101379, 0.03787490, -0.00567183, -0.15270430, 0.11304205, -0.25052685, 0.09824228, -0.04211527, -0.05249092, -0.07422675, -0.01739143, 0.35651430, -0.32849154, 0.04671991, 0.01394297, -0.00382018, -0.15148827, -0.05533002, -0.09380882, -0.02437516, -0.24688354, 0.04531977, 0.10584196, 0.14781006, 0.07130783, -0.05713995, 0.11669084, 0.17389290, 0.04124543, 0.10838090, 0.00353137, -0.02220125, 0.00394343, 0.25149739, -0.15545125, -0.09519224, -0.10249721, -0.25041983, 0.04730190, 0.08196284, 0.06693251, -0.03441335, -0.01441326, 0.03624143, 0.01243870, 0.05652547, 0.24775411, 0.07225398, 0.03295339, -0.02389253, -0.10170253, -0.02450171, -0.10767229, -0.00334934, -0.05566899, -0.12347750, 0.15073816, 0.00996926, -0.01378260, -0.03990795, 0.16478725, 0.00194119, -0.17818941, 0.23653768},
  {0.13742408, -0.16863784, -0.11603449, -0.08824363, 0.13504146, -0.01511852, -0.07344658, -0.06055386, -0.20025206, 0.04884793, -0.24036865, -0.13874303, 0.12875265, 0.07491938, 0.16952172, 0.16906293, -0.06608365, 0.00500538, -0.03257946, -0.10851646, 0.05702098, -0.09058512, 0.12916876, -0.07114256, -0.07992712, -0.02417177, 0.04461113, -0.07061277, 0.11584888, -0.09395576, -0.07280436, 0.11614868, -0.01686000, -0.12978524, -0.09399181, -0.00090575, 0.29335421, -0.02222853, 0.13727704, 0.18509594, -0.11054217, -0.21199861, 0.15212677, 0.03601027, -0.01777629, -0.04452494, 0.03170327, 0.02641089, -0.24379574, -0.01745065, -0.01618787, 0.15685163, 0.03225437, -0.07637739, -0.10914331, -0.21649319, -0.01640659, 0.02606287, 0.04437285, -0.11875626, 0.05134152, 0.18523739, 0.01614727, -0.02275262, 0.01444608, 0.06758914, -0.19626179, 0.04834181, -0.18533278, -0.08705456, 0.06183190, 0.11478397, 0.05967261, -0.04173780, 0.01179206, -0.09529214, -0.14518768, -0.07584666, -0.06999127, -0.09242309, 0.17422731, -0.06008857, 0.11839400, 0.19914325, -0.05884879, 0.06546240, 0.03733972, -0.06439537, -0.19511403, 0.00582280, -0.21085393, 0.03923094, -0.06955735, -0.00401318, -0.07104757, 0.07060377, -0.05459897, 0.02350781, 0.07432275, -0.12637478, -0.05778275, -0.00052242, -0.06064159, 0.02410654, -0.05772441, -0.01318466, 0.20027497, 0.01865897, -0.01750932, -0.03147925, 0.01792557, -0.04179520, 0.00898019, -0.04025469, 0.09747496, 0.00352958, -0.08659430, -0.03042132, 0.09499671, -0.16896972},
  {-0.04366766, 0.12583138, 0.02458326, 0.02069730, 0.01966862, 0.06530619, -0.08547182, -0.05139434, 0.07289706, 0.07151508, -0.02194649, 0.06348906, 0.00170003, -0.01018215, -0.08097375, -0.08920668, 0.03088676, -0.01787219, -0.09025044, 0.03782918, -0.01634197, -0.01552108, 0.09188449, -0.06247167, -0.01527584, -0.03016281, 0.18053457, 0.09236915, -0.09141193, 0.04465540, 0.00602221, -0.07013859, -0.23826595, 0.10581706, -0.02993860, -0.16173133, 0.02627006, -0.12465881, 0.01641090, -0.00149296, 0.01074226, 0.15234195, 0.07401613, 0.00448930, -0.06277855, 0.13578774, 0.01733288, -0.01074872, -0.03807827, -0.06914219, -0.08459972, -0.09196566, -0.06851435, -0.04772278, -0.06515174, 0.03681919, -0.04821829, -0.03811022, 0.07864586, -0.04237865, 0.12400288, -0.01028285, -0.03359447, -0.09265209, -0.07428659, -0.00953722, -0.01491528, -0.08585481, 0.17025189, 0.04555725, -0.09253258, 0.07500145, -0.01716399, 0.10816048, 0.00253070, 0.07346988, 0.00606621, -0.07306195, -0.12291402, -0.13293654, 0.07859746, 0.10501546, 0.05779063, -0.09161779, -0.02581710, 0.06067138, 0.03459313, 0.06181227, -0.05393843, 0.03148631, -0.09910918, 0.06773167, -0.05444140, -0.08343586, -0.08948187, 0.05676688, -0.10711620, -0.10609764, -0.05155332, 0.06159100, 0.00905428, -0.05622698, 0.10688316, -0.08456288, 0.06372884, -0.11655486, 0.01865065, 0.07382787, 0.06742374, -0.08639985, 0.05141444, 0.15004699, -0.04584854, 0.07753171, 0.02074937, 0.08002649, -0.04976735, 0.02170014, -0.02661251, 0.17434405},
  {0.09781233, -0.14528407, -0.06427085, 0.06608906, 0.19055991, 0.08057343, 0.03423891, 0.06415927, 0.04984188, 0.03511725, -0.12771368, -0.11090215, 0.06504478, -0.07554652, 0.00403403, 0.05473962, -0.07221541, 0.06115705, 0.01823945, 0.02144077, -0.01903848, -0.14756125, -0.01971147, -0.00873396, 0.15975001, -0.08295339, -0.01200958, 0.03574922, -0.09442309, -0.08751053, 0.09473506, 0.10896517, -0.09476457, 0.10005894, 0.04802900, 0.08812243, 0.02882126, 0.17579083, 0.09503312, 0.10884863, -0.07315401, 0.03577533, 0.05447972, 0.07960128, -0.11819004, 0.01199993, 0.09799485, -0.10120829, -0.02970296, -0.19639282, -0.09367893, -0.05968314, 0.03950974, 0.10647811, -0.00627745, -0.16104697, 0.06986456, 0.01078707, 0.12476584, 0.02663411, 0.04978530, 0.09577087, 0.02208306, 0.05975041, -0.18809651, -0.08751298, 0.02733111, -0.04465818, -0.16741653, 0.01230634, 0.11267454, -0.15740035, 0.00469320, -0.06562443, -0.00534831, -0.13127933, 0.04996454, -0.03532257, -0.07292423, -0.02526081, 0.06170781, -0.08390992, 0.08661215, 0.04502170, -0.11200193, 0.07780439, 0.13667040, 0.01498489, -0.07983606, 0.06190245, -0.15825889, -0.10738898, 0.06694353, -0.19020665, 0.09511561, 0.08541869, -0.02818320, -0.08669078, 0.08749232, -0.00393334, 0.01667288, 0.08551853, -0.00011925, -0.03481217, 0.03759681, -0.00409950, -0.02523118, 0.07310636, 0.08614682, 0.05821910, -0.03628082, -0.12123545, 0.02631737, 0.01754167, -0.01729953, 0.01764029, -0.08580269, 0.08635533, 0.06544926, -0.01043973},
  {0.02446242, 0.00636925, 0.10741624, -0.10564707, 0.01491943, -0.02875220, -0.00057024, -0.05464613, -0.09413434, -0.05222905, -0.09821787, 0.01070257, -0.02100355, 0.00543399, -0.00701329, 0.17791924, 0.03420789, 0.06916192, -0.07079615, -0.06714065, -0.06087395, -0.11132839, 0.10943013, -0.04367121, 0.10741979, -0.09499951, 0.13257687, 0.05171512, -0.03624004, -0.04446202, -0.04978589, 0.03090455, -0.26778945, 0.11424135, 0.05012408, 0.00010617, -0.00305590, -0.02037607, 0.17570883, 0.03529881, 0.04719696, 0.01333725, -0.07400537, -0.20483398, -0.02937217, -0.09931238, 0.19783434, -0.04437599, -0.17411844, -0.09410916, 0.00414227, 0.14759371, -0.04893745, -0.03009415, 0.18009928, -0.20839833, 0.10441434, -0.08113895, -0.09137904, -0.00379531, 0.15019034, -0.11543979, 0.01719732, -0.01291263, 0.08834225, 0.05980889, 0.05163382, 0.04792525, 0.00335539, -0.06509816, -0.04129478, -0.11056651, -0.15359776, 0.05541227, -0.10952376, -0.08873896, -0.19085264, -0.06657793, 0.02191128, -0.07732593, 0.00254631, -0.09691344, 0.17651804, 0.23308443, -0.16474099, -0.06988352, 0.02644769, 0.04632294, -0.00262302, 0.02614472, -0.10570940, 0.04760574, 0.05143191, -0.04238559, 0.01434093, 0.03571605, -0.01893368, 0.08624262, 0.09323876, -0.04255631, -0.06984270, 0.01278561, 0.08422519, -0.13341908, -0.07595138, 0.09062579, 0.01136769, 0.06554259, 0.01023914, -0.03487273, -0.15926081, -0.01955821, 0.07927627, -0.06931236, 0.13773881, 0.05204148, 0.05285442, 0.06212515, 0.08403080, -0.06494641},
  {-0.30142263, 0.03630361, 0.06007877, -0.08065616, 0.02087389, 0.03100694, 0.21542738, -0.00188811, -0.14338212, -0.04920531, 0.06157944, -0.14107504, -0.10686900, -0.14923617, 0.21400565, 0.18587765, 0.00445419, 0.06448580, -0.03998300, 0.08471987, -0.21186373, -0.03195390, 0.03847820, -0.01924575, 0.00017707, -0.08348077, -0.14554623, 0.02580086, 0.11426463, -0.08918760, 0.08456271, 0.11770288, -0.28760442, 0.00224491, 0.16803068, 0.13608378, 0.05374096, 0.02042697, 0.11485063, 0.15953597, -0.05788865, -0.14033332, 0.05450478, -0.26055092, -0.19786015, -0.20516613, 0.16820914, 0.09345454, -0.11264650, -0.19092557, 0.22933188, -0.07848456, 0.01655030, -0.03921489, 0.14480904, -0.06745500, 0.09074881, 0.10474284, -0.02949896, -0.18710512, 0.10659846, -0.27060369, 0.17192177, -0.14509630, 0.07183716, 0.00565158, -0.04366197, 0.29921490, -0.31811869, -0.10131718, 0.22077183, 0.25379381, -0.19944528, -0.12274308, 0.05423186, 0.06241122, -0.16228241, -0.08532182, -0.13300684, -0.09062061, 0.09727754, 0.08509392, 0.28518966, 0.18016799, 0.13013819, 0.00454009, 0.04019343, 0.06215493, -0.11543076, 0.13561477, -0.21124226, -0.01318840, -0.14197564, -0.17671184, -0.00609386, 0.12306223, 0.13556603, 0.00265848, 0.07734644, 0.08565847, -0.07249371, -0.10595712, 0.16413620, -0.02000378, 0.06986253, 0.04158788, -0.04061577, 0.09313127, -0.10470948, -0.08079386, -0.21688952, 0.03748177, 0.04953400, 0.04967161, 0.16643956, -0.09904695, 0.18790217, 0.00827590, 0.06503258, -0.11672585},
  {-0.12917231, 0.08475520, -0.04447053, -0.08407421, 0.12696058, -0.02248270, -0.04038070, 0.00706719, -0.02546225, -0.09946667, -0.30281329, -0.00560896, 0.07970398, 0.06464387, -0.02678086, -0.00150331, 0.03603233, -0.08512044, -0.01310620, 0.08793520, 0.06176855, -0.03590173, 0.00149446, 0.05757578, 0.01955364, 0.06936760, -0.06038105, -0.03366678, 0.12206568, 0.05563321, -0.05504091, 0.08104417, -0.03178518, -0.10913695, -0.07940052, -0.23225078, -0.01472566, -0.08077102, -0.01560256, 0.01216326, -0.04190931, 0.14113991, -0.15192167, 0.21117216, 0.10610523, 0.15255420, -0.11215783, 0.03700671, 0.00211614, -0.05416549, -0.03839320, 0.07103123, 0.10468853, 0.27396843, -0.19295913, -0.08971432, -0.04104388, 0.03407133, -0.10948721, -0.12005319, -0.04047980, 0.07110674, -0.09659488, -0.01818268, 0.02104545, 0.00469254, -0.04833849, -0.11788294, -0.15799767, -0.04166390, -0.06790880, -0.13557802, 0.13237540, 0.01110185, 0.03883064, -0.03686392, 0.04569899, 0.01532006, -0.01484903, 0.10412418, 0.12200872, 0.00812816, -0.18732573, -0.00636153, -0.09324563, 0.03497030, 0.00605420, -0.05246277, -0.01947589, -0.10159853, -0.08251969, -0.02002006, 0.14482294, 0.13011551, 0.05748282, -0.02859306, -0.06240812, 0.09361947, 0.04681848, 0.06220432, -0.06810143, -0.06356395, -0.08703353, -0.02933822, 0.09063714, 0.02209445, 0.02338020, -0.00730035, 0.19740209, -0.02347560, 0.00898547, 0.12293600, -0.21249604, 0.09365907, -0.06544250, -0.07148322, -0.01593839, -0.02710135, -0.09540390, 0.21547712},
  {0.12815271, -0.04050210, 0.04704608, -0.06106195, 0.06629173, 0.19605207, -0.01322157, 0.03429382, -0.03619853, -0.01152703, -0.00253893, 0.02275470, 0.08130774, -0.12072650, 0.02633759, 0.08033962, 0.17615443, 0.02898684, -0.10356496, -0.09216609, -0.05876789, 0.05480939, 0.06309900, 0.03042046, 0.02585706, 0.04792099, 0.00713267, 0.09425741, -0.11391696, -0.06246389, 0.08106004, 0.07125244, 0.03755407, 0.07120391, 0.06715449, 0.12257754, 0.06435427, -0.06327833, 0.02383981, -0.05673312, 0.07751884, -0.02840651, -0.03628277, 0.08433182, 0.08465137, 0.01779910, 0.04896414, -0.06987967, -0.02006833, -0.05670944, -0.05704906, 0.09317122, -0.02002943, -0.05018122, -0.09768011, 0.10144812, 0.09834917, -0.03006442, 0.00013852, -0.04775250, -0.03442582, -0.12701634, 0.05250526, -0.10414348, 0.12470302, 0.07522529, 0.03289689, 0.12860373, 0.11900576, -0.05598069, 0.07885110, 0.09763255, 0.04462424, 0.11422887, -0.07975302, -0.02590174, 0.04324626, 0.04245510, 0.07827713, 0.01695973, 0.03718600, 0.07811838, 0.04380240, -0.02276617, -0.06465568, -0.03657523, -0.04481899, -0.03098455, 0.09361028, -0.03482717, 0.04046778, 0.07635980, 0.00698966, -0.06026193, -0.09387881, -0.06711379, -0.03185625, 0.03441504, -0.06012604, -0.01604741, 0.03895597, -0.12216761, 0.04205317, 0.15638761, -0.03805605, -0.02664404, 0.12202875, -0.04725740, 0.11947984, -0.06162832, 0.12227380, 0.06332882, 0.06434105, -0.05411470, 0.02217776, -0.11052127, 0.00238553, -0.11362149, -0.03942613, 0.00535442},
  {-0.11593422, -0.05304975, -0.02052195, 0.07210062, 0.12316854, -0.07597138, -0.13810384, -0.10167640, 0.01437746, 0.09750979, -0.00968837, 0.05003960, -0.02108529, 0.05104316, -0.02096667, 0.02014459, -0.03515511, 0.05512333, -0.02188069, 0.09466479, 0.05212357, 0.06132223, 0.08452222, 0.15327546, 0.05871490, 0.00258134, -0.00776417, -0.07030809, 0.11576751, -0.02986438, 0.07352833, 0.05625148, -0.03768200, 0.06468425, -0.14402413, 0.01215259, -0.11004284, 0.09496462, -0.08506989, 0.08832423, -0.12791365, 0.17110145, 0.07114000, 0.00054098, 0.08800199, -0.00334680, -0.06235838, -0.01329286, -0.07238158, -0.01426573, -0.13852942, 0.00046606, -0.10139024, -0.09020167, -0.08820727, -0.02646959, 0.05439646, 0.04868431, -0.11963658, 0.02670881, 0.01864168, -0.07903209, -0.10774798, 0.11666831, -0.00394306, 0.14538993, -0.00535468, -0.13327180, -0.12805973, 0.04629409, -0.05951919, 0.06034840, -0.07421177, 0.01126062, 0.12440056, 0.04989601, -0.18600562, -0.05501875, -0.11059877, 0.00586839, 0.03631604, 0.03895703, 0.09048296, -0.07558407, -0.08842965, -0.00201121, 0.09439178, 0.00708073, 0.02161762, -0.02336702, -0.08652513, -0.02049604, 0.01788406, 0.05240931, 0.04016187, 0.12242553, -0.06255007, -0.02928721, -0.11297698, 0.01088707, 0.05207311, -0.12130905, -0.01651928, -0.11547410, 0.04492155, -0.06523067, -0.04758170, 0.05953304, -0.03526552, -0.06618819, 0.03671419, -0.15366083, -0.01011305, 0.01390602, 0.05759434, -0.07109889, -0.14355186, -0.01139931, 0.05400372, -0.04721872},
  {0.14650612, 0.01495361, -0.11898652, -0.11760750, -0.05994410, 0.18546902, -0.06262565, -0.03538654, 0.07999651, -0.06811264, 0.03925545, -0.03292863, 0.02512607, 0.00320858, -0.07411557, -0.08041129, 0.09641888, -0.04217412, 0.06165522, -0.03133067, 0.05557832, 0.07890137, -0.09146003, -0.09280501, -0.05901008, -0.10915730, 0.03247645, -0.10690207, 0.00021698, 0.01418117, -0.11353987, -0.10429310, 0.06228624, -0.02768274, -0.03999441, -0.16949974, -0.02206968, -0.02516148, -0.07528356, -0.01516229, -0.04160145, -0.03966747, -0.05075457, -0.00762114, 0.08166461, 0.10809328, 0.03426972, -0.05998963, 0.03187872, 0.06316052, 0.02948070, -0.04085762, 0.00337317, 0.05199414, -0.04454535, 0.00873089, -0.16324113, -0.08492736, 0.12547985, -0.06916694, -0.02971567, 0.00885061, -0.09250140, 0.03482186, -0.01236632, -0.06176713, 0.00680487, -0.01697414, 0.17184375, 0.02144691, 0.08053178, -0.08338740, 0.00465768, 0.02133291, -0.14832257, -0.06009861, 0.08007543, 0.03781841, 0.04418598, 0.01513368, -0.05237268, 0.13281384, 0.00768798, -0.04678933, -0.02397422, -0.09433044, -0.12016404, 0.06909185, -0.06125326, 0.08154432, -0.00690050, 0.09372407, 0.12700549, 0.13068601, 0.00692968, 0.04312027, 0.01710552, -0.11062962, -0.09049095, 0.02164956, -0.09698781, -0.10349554, -0.01755858, 0.06506626, 0.03821161, 0.04716171, 0.09229892, -0.02491376, -0.08846232, 0.07814205, 0.16267550, -0.04546986, -0.03271886, -0.05195053, 0.08237425, -0.01760558, -0.01326137, 0.03437370, 0.06759539, 0.04230030},
  {0.02178173, -0.02564205, -0.02019484, -0.01915579, 0.09080558, -0.00623571, 0.02495579, -0.04446933, 0.07449041, -0.05983401, -0.05131885, 0.00012333, 0.04152593, 0.08186571, 0.12534951, 0.10608661, -0.04411273, -0.01848346, 0.02719263, -0.12949245, 0.01562849, 0.06412163, -0.08381729, -0.14614050, 0.06017569, -0.10278170, 0.05590821, -0.08251660, -0.12734154, 0.01927380, -0.04824245, 0.06446578, -0.16584609, 0.02461550, -0.10132992, -0.02270927, 0.07139975, -0.07527583, 0.00409780, -0.05376790, 0.02020906, -0.04345118, 0.03054688, 0.03616605, -0.00232564, 0.07456501, 0.04149623, -0.07143735, -0.06085136, -0.11478622, -0.02503881, -0.16899467, 0.11992676, -0.02509974, 0.01170632, 0.10610779, -0.01725307, 0.05639153, 0.12698330, -0.10893758, -0.04070256, -0.05130877, -0.11183858, -0.02795493, -0.07363467, -0.11141848, -0.08431364, 0.16350392, 0.00306980, 0.03266868, -0.00888940, -0.01081011, 0.00879367, -0.02803266, 0.03160195, -0.13911024, 0.02995548, -0.01813878, -0.13147506, -0.09859619, -0.00224350, -0.01476048, 0.05734320, -0.00291438, -0.00015263, 0.11517506, 0.01181545, -0.08425677, -0.06756446, -0.04095258, 0.00668242, 0.03980684, -0.04354344, -0.18336140, 0.11282548, 0.05268726, -0.10684323, 0.02625887, -0.04051723, -0.14673649, -0.07156895, 0.08210345, 0.00772491, -0.02724252, -0.06435578, 0.01517520, -0.03964138, 0.01942110, 0.04253202, -0.12449273, -0.02220777, 0.03204224, -0.05443137, -0.07562926, 0.04041203, -0.01954788, 0.09401675, 0.04634361, 0.06593347, -0.04669566},
  {-0.27098474, -0.02047966, 0.00964282, 0.07980675, -0.10913361, -0.15078475, -0.03803238, 0.05901758, -0.12702246, 0.04943518, 0.00693464, -0.01647262, 0.05572744, -0.07610229, 0.02115118, 0.07735026, 0.06873496, -0.11716799, -0.10160425, -0.03924539, 0.10779383, -0.07377584, 0.09820286, 0.07054041, -0.00726931, 0.05280156, -0.01811613, -0.08297651, 0.03205429, 0.04813560, -0.09118906, 0.11787704, -0.07961933, 0.08542489, 0.07466756, -0.04761745, 0.11824164, 0.08903555, 0.03487223, -0.11573383, 0.03782345, 0.13999826, -0.04669579, 0.00138209, -0.03191213, 0.09957043, -0.04234891, -0.09388425, -0.02673328, -0.02838099, 0.07472667, 0.03551027, -0.10956996, -0.01651083, 0.05520261, -0.00771636, -0.03555110, -0.02536948, -0.14264058, 0.09724033, 0.06343720, -0.14665523, -0.04795286, 0.08152457, 0.09209309, -0.06359097, -0.12572625, -0.02464078, -0.03083060, 0.09291506, -0.07629757, -0.05341378, -0.09470484, -0.00249148, 0.12948158, 0.15829726, -0.02874633, 0.07230864, 0.03413846, -0.16271779, -0.00839545, 0.06091993, 0.13420051, 0.04334563, -0.06234068, 0.11696757, -0.03897976, 0.06276928, -0.00562249, -0.05182544, -0.18262094, -0.03076729, 0.08463979, 0.00120985, 0.07794343, 0.10259463, 0.01779962, -0.10522971, -0.10545836, 0.02981516, -0.09649374, -0.05958036, -0.09030278, -0.05960633, -0.00200875, 0.00410713, 0.02620551, 0.07339076, 0.10845149, -0.01900276, -0.06034331, -0.04530986, -0.02959087, 0.07034919, 0.04168172, 0.03235332, -0.01110391, 0.02306402, 0.01917841, 0.08084549},
  {0.12046774, 0.12101468, -0.08344218, -0.11289003, 0.03764296, -0.05848559, 0.10264671, -0.08629759, 0.05288729, -0.09886115, 0.04287260, -0.01775327, -0.03606827, -0.11526576, 0.10732230, 0.10819563, -0.03846271, 0.00433980, 0.04722084, 0.06800033, 0.02762373, -0.04058782, -0.08258273, 0.12399926, 0.01003839, -0.07452919, 0.09389389, -0.01504324, 0.04280084, -0.02822274, -0.03621364, 0.01505262, -0.16262418, -0.01442410, -0.05131815, 0.14368106, -0.05312751, 0.00529255, -0.07437784, 0.09855957, -0.05150513, 0.06402220, 0.03598147, -0.10026443, -0.03959125, 0.02926414, 0.08347383, -0.03054292, -0.02619008, -0.06089210, 0.00114765, 0.15783964, -0.04419664, 0.12443677, -0.06686690, 0.03149202, 0.07914905, 0.00916603, -0.15986541, -0.01971111, -0.04366945, -0.20050327, 0.03034725, 0.09285980, -0.06123987, -0.11441958, 0.09914878, 0.03155171, 0.10167459, -0.08942047, 0.04698832, 0.04476384, -0.06957056, -0.03479137, 0.00214361, 0.07688215, -0.11751370, 0.03642056, -0.07802460, -0.08109681, -0.06557959, -0.07116029, 0.04627213, -0.04705676, -0.03559396, 0.04462645, -0.03017907, -0.09330558, 0.08529294, 0.05846642, -0.04593334, 0.05033500, -0.07848636, -0.04801030, -0.01111642, -0.07266378, 0.05604431, -0.11012069, -0.09683061, 0.00400290, 0.01991210, 0.03872360, -0.01981187, -0.05467289, -0.01669131, -0.08207619, 0.03361879, 0.03680391, -0.10718414, -0.02805033, -0.06096659, -0.04383382, -0.04834134, -0.09741584, -0.03378413, -0.06532810, 0.04942305, -0.01830172, 0.10681979, 0.07613167},
  {0.15744188, 0.15046301, 0.08309633, 0.07736329, 0.22416224, 0.12162045, -0.25612548, -0.11950451, 0.14730303, -0.09735558, -0.07536133, 0.04990242, 0.07559732, 0.13087291, -0.13950972, -0.03220948, -0.03172365, 0.00121036, -0.06382342, -0.00864600, 0.13539836, 0.15489377, -0.03565922, -0.02399740, 0.06365909, 0.03301499, 0.09455765, -0.02302586, 0.09736205, -0.13989469, 0.03740088, -0.06018042, -0.07017323, 0.11074992, 0.00622595, -0.00866824, -0.02140212, -0.14185205, -0.02626374, -0.03728420, -0.11913665, 0.16194732, 0.04063080, 0.06200539, 0.05561281, -0.03510457, 0.08361489, -0.07278994, 0.12502265, -0.15408081, -0.02664918, -0.05699777, 0.00733820, 0.06148623, 0.10498594, -0.04022361, -0.00876748, -0.16887091, 0.07504615, -0.05777387, 0.17992161, -0.04942288, -0.13140926, -0.06721146, -0.07520881, 0.02487579, 0.12720306, -0.03018559, 0.00262274, -0.01065408, 0.02731451, -0.03003604, 0.03730325, -0.02071385, -0.04046217, -0.15850179, 0.14746237, -0.01814171, -0.01124583, -0.07809573, 0.12817504, -0.01506931, 0.08409995, -0.14642391, -0.04581064, 0.06782912, 0.06635933, 0.07920296, 0.01083897, 0.08325742, -0.00216385, 0.00142108, 0.11077962, 0.10710550, -0.08855037, 0.09901697, -0.07890417, 0.05389721, -0.12995578, -0.11837750, -0.10312269, -0.11080696, -0.24545875, -0.12459758, 0.05891462, -0.06571350, -0.11375383, 0.04993584, 0.09980721, 0.04973695, -0.05882866, 0.14533079, 0.05458905, 0.03258612, 0.00241642, -0.09844773, 0.06632293, 0.09008214, -0.06122647, 0.05124921},
  {-0.12984850, 0.01190902, 0.01509094, -0.02932796, -0.00510529, -0.10890071, 0.03504955, -0.07950324, -0.10518281, -0.08467661, 0.04343916, -0.08077486, 0.12627740, -0.07413361, 0.07295869, -0.10110499, -0.08445588, 0.03591121, -0.00116619, -0.05388265, -0.07582109, -0.00199207, -0.17847180, 0.04995459, 0.09129833, -0.00069487, -0.03352002, -0.11661346, 0.07530180, -0.11758809, 0.07727560, 0.12454525, -0.11548695, 0.09118160, 0.03688502, 0.07337569, 0.04212612, 0.05088375, -0.05454051, 0.07524340, -0.12584999, 0.00592343, -0.04027615, -0.03163248, 0.05208989, -0.03334305, -0.04806262, 0.02980983, -0.02045415, 0.02553408, 0.04263471, -0.09195052, 0.00773382, -0.06173009, 0.00729782, 0.01422029, -0.03074054, -0.01864678, -0.04988678, 0.07037108, -0.04764654, -0.02805923, -0.05901262, 0.07776710, -0.08574360, -0.00395181, 0.00264138, 0.08332354, -0.05146492, -0.09305961, 0.07376648, -0.07992566, -0.01212224, 0.07225321, 0.00168855, 0.10970484, -0.03763622, 0.05822048, -0.09282420, -0.12526062, 0.03900317, -0.03988707, 0.09379745, 0.07742076, -0.06785442, -0.03495860, -0.00809010, -0.11118127, -0.01725525, 0.08216777, -0.11356995, 0.06382503, -0.06459490, 0.02546680, 0.11100882, 0.07732549, 0.05135849, -0.03939943, 0.07986483, -0.11973806, -0.07641482, -0.06964340, -0.03067044, 0.00300649, 0.04709296, -0.06875889, -0.00855048, 0.11581472, 0.08290382, -0.07808806, 0.01739500, -0.01692864, 0.03693740, 0.09502593, -0.04043554, 0.09041229, 0.03016153, -0.01267178, 0.14267632, 0.00383590},
  {-0.01700607, -0.04130073, 0.04821372, 0.05665009, -0.12996906, -0.00644942, -0.06939770, -0.11700767, 0.09905856, -0.03713989, -0.03057042, 0.01495846, -0.05074073, 0.09023305, -0.00821702, -0.13759002, 0.12153012, -0.12417294, 0.00420850, -0.10182054, 0.01159104, 0.03152112, -0.08953849, 0.01749756, -0.03460378, -0.00553928, 0.00608471, -0.04738950, -0.00281855, 0.07767064, -0.05884381, -0.00865281, 0.01384636, 0.05544819, 0.02088752, -0.11763468, 0.03534659, 0.04377783, -0.10042643, 0.05598764, 0.02119910, 0.01510409, 0.02710632, 0.02587463, 0.14593647, -0.05002390, 0.05883668, 0.07906500, 0.03954849, -0.03032000, -0.07365229, 0.06212045, -0.06405383, -0.01516932, -0.07752030, 0.08275228, -0.08242618, -0.02473312, -0.03893877, -0.01965458, -0.08778489, 0.09644562, -0.03776011, 0.06101577, 0.10172825, -0.10174644, 0.03831135, 0.02950510, 0.02711197, -0.05936786, -0.01447923, 0.13554642, 0.03836391, 0.02243341, 0.13538599, -0.00150944, 0.14412987, -0.05092960, -0.08173347, 0.07539970, -0.00633564, 0.12884717, 0.03009925, -0.04382012, -0.10870095, 0.01356252, -0.18165112, 0.07908359, 0.11536032, -0.01968593, 0.14779422, -0.03928384, 0.18104737, 0.06033431, -0.16835570, -0.08811906, -0.08079170, 0.00332292, 0.02003424, 0.07010140, -0.01643498, 0.05591838, 0.07422035, -0.06310510, -0.05433703, 0.02268146, 0.06340724, 0.15485616, -0.06105145, 0.01508933, 0.17030139, 0.02905764, -0.01397998, 0.01820209, 0.02078396, 0.06606283, -0.07064495, -0.08431820, -0.01060105, -0.04895896},
  {-0.05948498, -0.07635836, -0.11029904, -0.06372418, -0.00158720, 0.18392904, -0.10218523, 0.10634177, 0.02194409, -0.08047840, -0.22419596, -0.26380268, -0.01248268, 0.05625579, 0.13294569, 0.11955740, 0.03482176, 0.20673846, -0.01987508, -0.04218417, -0.11082094, 0.05516772, 0.15216090, -0.24802503, 0.05437638, 0.05895450, -0.17819653, 0.03143984, -0.13979466, -0.08690289, -0.03479166, 0.00769867, -0.04076450, 0.00546926, 0.06133954, 0.15527877, 0.23339619, -0.14650945, 0.13499166, 0.09179265, -0.03415235, -0.10716901, -0.14067630, -0.19502889, -0.00463446, -0.04208517, 0.07002287, -0.01664351, -0.04484218, -0.14078037, 0.13390099, -0.06229442, 0.10465829, -0.10686381, 0.11305619, -0.01027443, -0.06219470, 0.02696929, -0.01729768, 0.01244362, 0.09683383, 0.22605254, 0.01027470, -0.08215129, 0.11845428, -0.02051415, -0.12582853, 0.00818639, -0.22663888, 0.02464590, 0.03165944, -0.13202539, -0.02857226, -0.07593413, -0.00632666, -0.03889827, -0.17370954, -0.09914128, -0.14847396, 0.22008942, 0.10809129, -0.05034267, 0.10644186, -0.03769437, -0.02530776, -0.04286044, -0.15161772, -0.06456332, -0.14853528, 0.15409161, -0.08883473, 0.07855298, 0.05082908, 0.03065593, 0.11844469, -0.11121952, -0.01279861, 0.04345122, -0.02876468, 0.01848706, -0.04339115, 0.04754561, 0.00554679, 0.13629763, 0.14433806, -0.05115071, -0.02787382, 0.01095212, 0.12472550, -0.02683410, -0.09856293, -0.03924438, 0.09133527, -0.05215530, -0.01857515, -0.07110130, 0.14226817, -0.04398552, -0.13608608, 0.09030066},
  {0.01208009, 0.00234979, 0.05982317, 0.05632819, 0.04972638, -0.00790435, -0.05092588, -0.01414408, 0.10429907, -0.08764561, -0.09152805, -0.02645571, 0.10601430, 0.00808657, 0.04346057, -0.04435329, -0.00915323, 0.00805725, -0.12486584, -0.01322283, 0.03596106, 0.02609383, 0.08168033, -0.12875701, 0.04784310, 0.02642124, 0.19821489, 0.00630442, 0.03440075, -0.07631089, 0.02699056, 0.04800471, 0.00224539, 0.08762565, -0.12162337, -0.04109183, 0.08968815, 0.01655430, 0.01094478, -0.13066676, -0.00682479, -0.12951508, -0.02830729, 0.08238274, 0.13125122, -0.09285346, -0.04745623, 0.03671439, 0.04144826, -0.09815609, -0.10729028, 0.02589747, -0.00220358, -0.07932402, -0.07614619, -0.12111977, -0.12042052, 0.11078152, 0.02692992, 0.04669220, 0.02544693, 0.08579228, -0.17942345, -0.07640786, 0.09687670, 0.03542853, 0.05748340, -0.17109939, -0.05029425, -0.08722698, 0.05973113, -0.09679509, 0.06537911, 0.06188365, -0.03865517, -0.12476505, 0.14335737, -0.09088495, -0.11686061, -0.03237855, 0.17569812, -0.05162418, -0.03171439, 0.05861021, -0.18687366, 0.11731280, -0.09586145, -0.05195663, -0.25829756, 0.00663724, -0.08973646, -0.08254325, 0.15107296, -0.10191645, -0.09627008, 0.02517661, 0.01759731, -0.05720051, 0.09023466, -0.02015419, 0.03216549, 0.04470745, -0.08947138, -0.07382227, -0.01480536, -0.09866012, 0.08314705, 0.01310832, -0.06300953, -0.00147298, -0.13859643, 0.04787048, 0.06915742, 0.04067620, 0.07507613, 0.08376738, -0.08972907, 0.07298630, 0.07177049, -0.08621375},
  {-0.06491262, 0.05137157, -0.05582588, -0.00965760, -0.02679170, -0.15461387, -0.10609131, -0.09136797, 0.02545338, 0.09075624, 0.13797656, 0.14099976, -0.06021947, 0.17327532, -0.08171055, -0.23509435, 0.05754825, -0.05554048, -0.07127909, -0.00415729, 0.11145099, 0.13150799, 0.00981525, 0.07179544, -0.00946319, -0.00322329, -0.00689047, 0.05667736, 0.02517386, -0.10817808, -0.01072154, 0.18016286, -0.14602073, 0.06514952, -0.03648658, -0.08294134, 0.02242988, 0.10100342, -0.16614261, -0.00950759, -0.00971132, 0.20067981, 0.07068777, 0.16248432, 0.03905487, 0.15158629, -0.14655715, 0.06679986, 0.14372930, 0.06883149, -0.02065428, -0.02976772, -0.02155202, -0.05695925, 0.01983398, 0.03718783, 0.02456563, -0.05467512, 0.11117588, 0.00830135, -0.01499428, -0.06051921, -0.04797206, 0.07775507, -0.02374163, 0.01978895, -0.00164984, -0.05963364, 0.03811937, -0.01362309, -0.18860872, 0.00110515, -0.04303262, 0.09936429, 0.10059785, 0.00646890, 0.01600814, -0.03436551, -0.20359506, -0.03430332, -0.06010132, 0.08659138, 0.02153155, -0.01510591, 0.03343295, 0.06949071, -0.08238373, 0.07071123, 0.00806236, -0.02606444, 0.13900432, 0.20335647, -0.04584347, 0.12593193, 0.03318220, 0.02041448, -0.07971289, 0.08405015, -0.08262324, 0.09378910, -0.02898814, -0.10511206, -0.09753597, -0.17624006, 0.08396558, -0.10187308, 0.06538414, -0.07608374, 0.01149887, 0.06238067, 0.20709081, -0.05121622, -0.10281051, -0.11083504, -0.02564539, 0.08560558, -0.09282993, 0.07533919, 0.00931963, -0.02461432},
  {-0.00796577, 0.03143217, 0.10097709, 0.01979019, 0.03716488, -0.14602806, 0.05567258, -0.00581238, -0.14076094, 0.04391666, -0.09650438, 0.08237022, 0.05494040, 0.05533673, -0.00685452, -0.01917340, -0.10481820, 0.04459875, -0.05374398, 0.00690770, 0.03432427, -0.09876799, 0.09517954, 0.10077501, 0.12451918, -0.11257178, -0.04877837, 0.09019568, -0.04984787, -0.14560166, 0.04527050, 0.14028133, 0.05446582, 0.00637300, 0.09051139, 0.03941221, 0.01744391, 0.06203837, 0.07762549, -0.07234741, 0.05937002, 0.04000824, -0.11184726, -0.03261259, 0.03222152, 0.07271881, 0.02621846, 0.04907274, 0.05344127, -0.01897518, -0.03587113, 0.20232640, -0.04719426, -0.09776091, 0.05938279, -0.14540921, -0.11392467, -0.01524148, -0.03863980, 0.07116804, -0.04201929, 0.05333700, -0.08785415, 0.07292277, 0.18511920, 0.00880658, -0.07597901, 0.02410839, -0.02323652, -0.09269334, 0.02084937, -0.12241749, -0.03518342, -0.00576561, 0.09841467, 0.07290571, -0.04946156, 0.02547253, -0.04221871, -0.03297796, 0.08994763, -0.15861800, 0.18394633, 0.08256964, 0.00381729, 0.00164635, 0.07501402, -0.00727350, 0.01973240, 0.03833367, -0.11228505, -0.01629145, 0.00313915, -0.06121522, -0.00147074, 0.14480273, -0.03532689, 0.02571451, 0.08111268, -0.01071335, 0.01543666, -0.07156974, 0.06326281, -0.17623620, 0.06566595, -0.04588343, -0.05453181, 0.01779639, 0.05547354, -0.04643295, -0.10423361, 0.00165021, -0.05204283, 0.01791406, -0.02844346, 0.01331839, -0.06761058, 0.09238317, 0.03324558, -0.02935687},
  {0.03537362, 0.07696100, 0.03217519, 0.04514572, 0.06902105, -0.03858857, -0.04394502, 0.08189276, 0.00882277, 0.05987409, -0.05364144, 0.10935546, 0.02730154, -0.08567376, -0.06023604, 0.03761220, 0.05311475, 0.00782028, 0.03262483, 0.15487361, -0.06026066, -0.05039843, -0.03248080, 0.03677157, -0.06315335, 0.07007398, 0.20602602, -0.03439626, 0.14502791, -0.00662118, 0.09945432, 0.04088004, -0.26042140, -0.02944878, -0.09168760, -0.04640228, -0.11872278, 0.13969323, 0.05028671, 0.09990611, -0.10073504, -0.04650911, 0.05744463, -0.03380629, -0.05766385, 0.13915722, 0.01634866, -0.01990590, -0.01919335, -0.14642288, 0.05082812, 0.14058378, 0.11440709, 0.09100758, -0.00340421, -0.03127259, -0.05953044, -0.02506842, 0.07088950, -0.03417918, -0.03453414, -0.07484461, 0.00299132, -0.10562145, 0.04984636, -0.00038925, 0.10318102, 0.00741020, -0.06826009, -0.06686051, -0.02770262, 0.01238671, -0.11954504, -0.17645097, -0.05072266, -0.06370190, 0.08725227, 0.10043745, -0.19894700, -0.12796806, -0.02996654, 0.12895945, 0.10739134, -0.02893710, 0.09172150, -0.13905047, 0.08526258, 0.03090200, 0.07007962, 0.01806145, -0.07838640, 0.02709324, -0.01831057, -0.13989513, 0.02226374, -0.01620165, 0.03748461, -0.02156056, -0.04755723, 0.01383214, -0.01784052, -0.03159254, 0.13876392, -0.22587568, 0.05456138, -0.10244812, 0.01337973, 0.01655571, -0.07143294, 0.05512064, -0.12868679, -0.06802702, 0.10650829, -0.08065028, -0.03784293, 0.06250314, 0.06955214, -0.03101896, 0.04831218, -0.13912606},
  {-0.17825367, -0.12641624, 0.05991868, 0.01672815, -0.02665397, 0.05105923, 0.01206079, -0.10996685, -0.21310388, -0.10931311, -0.22052053, 0.02148890, 0.08235275, -0.03809619, -0.06020442, 0.18079838, 0.03836964, -0.06408894, -0.06601130, -0.14115112, -0.09603970, -0.08775125, 0.08428396, -0.07947304, 0.00932362, -0.08340833, -0.08927955, -0.10447594, 0.00927292, -0.06993630, 0.04183269, 0.08921735, -0.21843377, 0.06110838, 0.16158408, 0.16654658, 0.00321251, 0.02807782, 0.19553757, 0.04359343, -0.04489819, 0.02126302, -0.25132677, -0.04120106, -0.12187647, -0.06256418, -0.00668000, 0.00373524, -0.14215529, -0.06953581, 0.14773621, 0.05087701, 0.00529125, -0.03362111, -0.01093352, -0.08274191, -0.02524055, 0.08734419, -0.01037419, -0.24172825, 0.11332318, -0.17377827, 0.10052646, -0.08440609, 0.15597989, -0.01994129, -0.01218422, 0.20408368, -0.19962069, -0.09388604, 0.20231843, -0.17415152, 0.00735602, -0.04176353, 0.05952929, 0.14622560, -0.08503022, 0.04840549, -0.12064377, 0.04922577, 0.06958082, -0.07000787, 0.12183593, 0.14132603, 0.01707266, 0.11060527, -0.08638030, 0.04738673, -0.21169345, 0.10133423, -0.30301127, 0.07779147, -0.13087566, -0.01097281, -0.02843377, 0.06334275, 0.19370379, -0.03084579, 0.04152596, -0.06471561, 0.00733553, 0.04678763, 0.06408072, -0.03660071, 0.12332844, 0.01210845, -0.09328035, 0.08840581, -0.04643210, 0.02139281, -0.10041270, -0.08788172, 0.03612296, 0.00522486, -0.05288146, -0.01911192, 0.14294618, 0.00429089, 0.01938912, -0.11121607},
  {0.03302396, 0.08043545, 0.01889719, 0.07299943, 0.06504404, 0.05940923, -0.07699368, 0.01161081, 0.12639925, 0.09794410, -0.04783710, 0.04598677, 0.10122825, -0.07491969, 0.05071769, 0.09649777, -0.02606996, 0.10604408, -0.05075653, 0.11345039, 0.12455714, -0.04670484, 0.11631947, -0.02960921, 0.04902668, -0.09738724, 0.07392354, 0.07991752, -0.11678493, 0.04571747, 0.07903057, 0.02028596, 0.03630549, 0.02874064, -0.10511757, -0.08962929, -0.17992952, -0.02309589, -0.05694247, 0.02965279, 0.07384127, -0.05522031, 0.02424975, -0.04655283, 0.04099940, 0.11480168, 0.05604244, -0.05706635, -0.09502261, 0.07208721, -0.00759639, -0.00127215, -0.01031480, 0.03862260, -0.14010581, -0.00201747, -0.15238710, -0.05714637, 0.07082237, -0.04731864, -0.02114505, 0.00262826, -0.08159229, -0.02913375, -0.03987652, 0.06314877, 0.05384283, -0.09031619, -0.00373464, -0.01488457, -0.01358130, -0.12192789, 0.07108753, -0.10624398, -0.07705975, -0.15431871, 0.09224664, -0.02863812, -0.08052471, 0.03386006, 0.18892916, 0.04067003, -0.01796896, -0.04367116, -0.04153129, 0.07538872, -0.03922145, -0.08609464, -0.05249825, 0.04924033, 0.08827690, -0.08462127, 0.00303197, 0.19009948, 0.01428962, 0.11551441, -0.00606234, -0.01606601, -0.00540598, -0.06019313, 0.03860614, 0.03769291, -0.14578104, -0.00759347, 0.00323699, -0.06576454, -0.00333429, 0.02202010, 0.07590996, 0.04786966, -0.09200727, 0.11574352, -0.04538301, 0.05552392, -0.04220270, -0.04016555, -0.04281249, 0.18530072, 0.06280579, -0.00349233},
  {0.06475611, -0.02250169, -0.04542419, 0.08220241, -0.01709411, 0.02342783, 0.09136638, 0.01532269, 0.06326658, -0.07148255, -0.00686450, -0.06246952, -0.13044287, -0.05587574, 0.05058487, 0.00803645, -0.01968331, 0.05371971, 0.02413182, 0.14707577, 0.07930082, 0.07171435, -0.07461621, 0.05828294, 0.03428742, 0.05264328, 0.04893890, -0.04853540, -0.03680242, -0.12405676, -0.12028132, -0.01535244, 0.03075283, -0.02088235, 0.07468040, 0.03346676, 0.13598850, 0.07282455, -0.02958006, 0.04646292, -0.04314337, 0.12538622, 0.06078876, -0.06048900, 0.10848448, 0.03230706, -0.02001664, -0.06923969, -0.00476416, 0.01063563, -0.06848857, -0.02958974, 0.08397628, 0.03680063, 0.04356525, 0.00386053, 0.01002325, 0.03412133, 0.05397717, -0.02336491, -0.09317894, -0.01735661, 0.11168405, -0.02148923, -0.10649797, -0.02316428, -0.10956664, 0.02146219, -0.01609019, -0.00331530, 0.04381512, -0.08620882, 0.02311054, 0.01205217, 0.03235465, 0.00630121, -0.07576795, -0.03490661, -0.15182127, -0.07726523, 0.01067742, 0.09021032, 0.01318449, -0.03252265, 0.04847738, 0.11557507, 0.08121894, -0.12291984, -0.02465059, -0.10268613, 0.06839228, 0.05640711, -0.18072027, -0.01421970, 0.01740905, -0.08635698, 0.03874987, -0.08755583, -0.02325373, -0.08820150, -0.06909624, -0.00182650, 0.07537685, 0.08841773, -0.13626112, 0.03941494, -0.05749103, -0.05085092, -0.05875234, -0.11130483, 0.08590156, -0.03226728, -0.11130016, -0.06785724, 0.01378106, -0.00659710, -0.07587755, -0.05070271, -0.09895471, 0.16737063},
  {-0.03591853, -0.04010769, -0.02530184, 0.03734233, 0.01655340, -0.07574406, -0.13650636, -0.00323605, 0.00695836, -0.07229902, -0.04587788, -0.09371847, 0.03285543, 0.04877210, 0.01483871, 0.09433170, -0.10909025, -0.09685018, 0.01730821, 0.05975933, -0.03373646, -0.15850323, 0.05797241, 0.01727291, -0.05554221, 0.06615429, -0.00117694, 0.07411882, 0.05174157, -0.03894660, -0.03150811, 0.13450897, 0.01268737, 0.06058135, -0.07970068, -0.07730705, 0.00935636, -0.03099300, 0.10253482, 0.01148790, -0.06657957, -0.10067131, -0.01371304, 0.00860734, 0.08175312, 0.07216738, 0.10496344, -0.03487898, -0.05222602, -0.09995636, -0.07697364, -0.06415840, -0.02990386, -0.02885270, 0.04407979, -0.11555679, 0.05154911, 0.06230951, -0.09438556, 0.05938879, -0.02824792, 0.03105153, -0.00639030, 0.07730049, -0.06835908, -0.04630582, -0.01100275, -0.03824613, -0.05928847, -0.00451999, -0.16594377, -0.03206765, 0.01531681, 0.10219695, -0.11761444, -0.01296767, -0.11433472, 0.03335623, -0.11278502, -0.13389622, 0.04895870, 0.03175223, 0.08151336, 0.11677860, 0.08825689, 0.06372533, -0.04003894, 0.06654254, 0.00908004, 0.01571824, 0.04783862, 0.00899197, 0.05188751, -0.01789009, -0.05430564, 0.04161800, -0.01118406, 0.08421569, 0.07917487, -0.10553502, -0.00604339, -0.01568361, -0.08402713, 0.02444053, 0.03936792, 0.03259243, 0.08001113, -0.05549435, -0.14018576, 0.03738709, -0.06108923, 0.08493241, -0.08503775, -0.06077762, -0.05867065, 0.03226879, 0.02287234, -0.02221029, 0.00743649, 0.09342588},
  {0.22992623, -0.09772971, -0.08997654, -0.10534309, -0.08476713, -0.01120934, 0.01240722, -0.11251052, -0.02102198, 0.05376437, -0.08413571, -0.02227055, -0.07459460, -0.00411708, -0.04675793, 0.05645855, 0.18012296, 0.10669232, 0.04569727, -0.06684255, 0.01688120, 0.06103066, 0.01059074, 0.02697144, 0.02443073, 0.07400691, -0.08050498, 0.07533716, -0.09884589, 0.01766919, -0.03433405, -0.07941160, 0.04045325, -0.09161933, 0.00478332, 0.00036652, 0.13348716, 0.02348120, -0.07780078, -0.05265097, 0.01234548, 0.07238352, 0.11774226, -0.06300693, 0.16225603, 0.00209981, -0.00323746, -0.01256593, 0.02812572, 0.03188485, 0.04787702, 0.12062780, 0.08827321, 0.00982978, 0.07841797, -0.01989952, 0.01465097, -0.02811950, 0.04058387, 0.05935604, 0.00415455, -0.00585065, 0.13387267, 0.03688029, -0.01385378, 0.02244510, -0.07735486, 0.10447244, 0.05127981, -0.05786746, -0.03448691, -0.06757022, -0.09643556, 0.02139487, 0.09286589, 0.00741101, 0.07911864, -0.00616008, 0.07763955, 0.12984177, 0.00458640, 0.02268820, -0.07050577, 0.08391620, 0.08217181, -0.00681213, 0.07865774, -0.07592427, 0.10788655, 0.01662257, 0.00440271, 0.04124826, -0.04188899, -0.06343921, 0.00292684, -0.01764528, -0.07222343, 0.01698685, 0.04010696, 0.10748323, -0.07682437, 0.08999468, 0.08013417, 0.11198588, 0.05655136, -0.05071750, 0.13017367, 0.07326315, 0.13442871, -0.00744645, 0.13117094, 0.07201841, 0.15488000, -0.01770213, 0.08048367, -0.10488106, 0.09743311, -0.07933738, -0.11040188, 0.08109533},
  {-0.09744821, -0.00983648, 0.09221771, -0.07869001, -0.06123148, -0.10390265, -0.00679698, -0.12008259, 0.00429793, 0.08374380, 0.07967176, 0.02957288, 0.01014906, 0.06256546, 0.12326723, 0.06075507, 0.07741112, -0.21375170, -0.01938018, -0.08310813, -0.02442248, 0.02346340, -0.14163901, 0.10127860, 0.02383785, -0.10965564, -0.12969978, 0.02285521, -0.11774449, 0.03457415, -0.03889287, 0.07584323, -0.05584849, -0.03100432, -0.00467211, -0.02184362, 0.03568967, 0.07429619, 0.13950568, -0.00725762, -0.06613754, 0.01240125, 0.03466972, 0.10837892, -0.05911134, 0.05925179, 0.05635758, -0.09526445, -0.12526175, -0.11372569, 0.03994650, 0.13260061, -0.01995418, -0.08788648, 0.11771134, -0.03496287, -0.04954059, -0.04033594, 0.00389548, 0.12698691, 0.00958412, 0.02383797, -0.05613444, 0.03953438, 0.07679483, -0.07866111, -0.17853770, -0.02376174, -0.20191503, -0.01848508, 0.08707790, 0.14914107, -0.03493333, 0.02900250, -0.00505225, 0.05688840, 0.01680871, -0.11581142, -0.19509445, 0.04688607, -0.04127230, -0.07624611, 0.16491969, 0.09298442, -0.07309514, -0.04534055, -0.00881761, -0.09130926, -0.02124984, -0.06561626, 0.01941570, 0.07564491, -0.12353690, 0.04201217, -0.03734457, 0.07995601, -0.15832479, 0.02749383, -0.05935638, -0.12784316, -0.01259776, 0.06563654, 0.13825719, -0.03348613, -0.04674238, -0.03379223, -0.00954683, 0.07931858, -0.01879829, -0.00853663, -0.06554387, -0.01044681, -0.01132721, -0.01198004, -0.00872315, 0.00010840, -0.09712274, -0.03611247, 0.05058715, -0.12567264},
  {-0.12969576, 0.05486815, 0.05655733, -0.02772280, 0.00268844, 0.00631758, 0.08384536, 0.05335461, -0.07179775, -0.09441120, -0.18352148, -0.01551355, 0.08025151, -0.04532276, -0.03149938, 0.07969187, -0.08846401, -0.10542212, -0.04031826, 0.02453412, 0.12313087, 0.05462684, -0.03953841, -0.02797774, 0.15401086, -0.02552910, 0.08830214, 0.00511632, 0.07949430, 0.01614258, -0.08599621, 0.07410619, 0.00152177, 0.09415955, 0.10220010, 0.13119426, -0.03880321, 0.04648858, -0.05152498, -0.07609984, 0.07475659, 0.05188222, 0.04716482, -0.07542261, 0.04421569, 0.09919269, -0.04704674, 0.01432555, 0.04019452, -0.08317466, 0.02809944, -0.01654525, -0.14561518, -0.05014968, 0.14602274, -0.00632106, 0.06766639, -0.05428169, 0.00119354, 0.03087422, 0.05694664, -0.04615376, -0.11064950, 0.00061757, 0.09388576, -0.05977283, -0.07033726, -0.03550268, 0.02575269, 0.03863238, -0.00995216, -0.12209763, -0.09336562, 0.01204149, 0.09714992, 0.02799281, 0.05571085, -0.09527490, -0.07048918, -0.07377376, -0.07107889, 0.07516433, 0.05179808, -0.01166740, -0.04625820, 0.11595843, 0.01041421, -0.03684326, -0.01481541, 0.06376496, -0.08885572, 0.11273653, -0.00103834, -0.03848059, 0.01608711, -0.00423571, -0.00898127, 0.02308635, -0.07332860, 0.03398691, 0.05110279, 0.03605812, -0.16062343, -0.14895563, -0.02824041, -0.04839085, -0.06057838, -0.07371631, -0.06447874, -0.06817268, 0.00104772, -0.09456916, -0.07555214, -0.08250953, 0.09205486, 0.02795484, 0.06017863, -0.04676105, -0.02992413, -0.01188439},
  {0.12060335, -0.03869964, 0.11910356, 0.01709129, 0.18425800, 0.10239027, -0.06134510, -0.05393565, 0.08011483, -0.06064555, 0.06153085, 0.06314695, 0.12904185, 0.04251461, 0.00839412, 0.06876109, -0.18445760, 0.00696836, 0.03387546, 0.10941435, -0.04850459, -0.11371406, -0.17917381, 0.09625544, 0.17268710, -0.05564339, -0.06686754, -0.00062104, 0.09235250, -0.03814324, 0.05208869, 0.06564166, 0.13784787, 0.04994375, -0.04577680, 0.08903289, 0.01970269, 0.07520720, -0.02383841, -0.02951021, 0.07778598, 0.05865275, -0.04538723, -0.04492422, -0.05971812, 0.06816271, 0.09315871, 0.06574968, -0.09572697, -0.00581110, -0.07467040, -0.04144118, -0.10593989, -0.02189956, -0.06884663, -0.12952559, -0.06787558, -0.03270372, -0.09171892, 0.10284531, 0.09178090, 0.09897518, 0.04418302, 0.07512617, -0.18099140, -0.07760890, -0.10017522, -0.10001217, -0.03039249, -0.06557365, -0.12811232, 0.04301752, -0.04814006, -0.12333812, -0.16401580, -0.03090267, -0.06755508, -0.04817327, -0.06082373, 0.02716360, -0.15440619, -0.03703946, -0.01023516, 0.11249006, 0.00348989, -0.10906626, 0.02639594, 0.05164088, -0.03187837, -0.04179091, 0.16911526, 0.06961314, 0.00570926, -0.05258952, -0.05215740, 0.01545012, -0.08854130, 0.08844338, -0.00184864, 0.05282722, 0.02701028, -0.02937642, -0.12383802, -0.09401958, 0.05033902, -0.10685435, 0.03681813, -0.06263233, -0.19462521, 0.05503598, -0.06851187, -0.13857308, -0.10341102, 0.00943517, 0.01047030, -0.09529177, -0.12895940, -0.03466145, -0.00889063, -0.00966382},
  {0.06426261, 0.01001422, 0.00801342, 0.06052940, 0.02459882, -0.05028042, -0.00824944, 0.04933434, -0.07470196, -0.11669450, 0.09817512, 0.10259563, 0.12335306, 0.02849742, -0.12128396, -0.10228332, -0.00820354, 0.00158511, 0.10188005, 0.03801624, 0.01655582, 0.08463399, 0.01808160, -0.05578603, 0.06683543, -0.08182420, -0.00727190, -0.08967583, -0.02551656, -0.09883227, -0.07167282, 0.09113725, 0.13335809, 0.07615612, -0.12300954, -0.15301555, 0.04229902, -0.11753286, -0.12022434, -0.08709226, -0.09450839, 0.10076538, 0.07543584, 0.12802823, 0.12065992, -0.07024179, 0.08031891, -0.11683777, 0.11834598, -0.08337302, -0.04410812, -0.11635223, -0.21789137, -0.08045326, -0.08427236, -0.03915673, -0.13330853, -0.06704162, -0.03577861, -0.01488539, 0.04376186, -0.03564769, -0.04735617, -0.06285843, 0.19297934, -0.04137204, -0.01366393, 0.01457734, -0.02528155, -0.09856970, 0.01086214, 0.01577128, -0.06669417, 0.14698280, -0.09494404, 0.05338137, -0.20361668, 0.04818494, -0.03034349, -0.11410419, 0.06600837, 0.10125794, 0.17113270, 0.04454861, -0.02884947, -0.06308477, 0.12435190, -0.05999912, 0.03716018, 0.11914760, 0.14286652, 0.11883534, 0.12591141, 0.09509446, 0.03580380, 0.13661833, -0.23729597, 0.06365371, -0.02645283, -0.11710861, -0.09993382, -0.01048861, -0.12092781, -0.00999535, 0.00085524, -0.04157124, 0.03006164, 0.04451890, 0.09254188, 0.00664146, 0.11729055, 0.11968773, 0.09436835, -0.05456039, -0.10035024, -0.14320289, 0.02146972, -0.09545092, -0.00856685, -0.07424124},
  {-0.02642306, 0.06618966, -0.00174546, -0.09096596, 0.09259045, 0.00387855, 0.05337073, 0.05884890, -0.07056671, 0.00069897, -0.04917096, 0.11041807, 0.09567111, 0.03366120, -0.06011779, -0.10986596, -0.07247981, -0.08783960, 0.03051983, -0.11400142, 0.09632215, -0.00649301, 0.01939785, 0.11486521, 0.03207909, -0.07503991, -0.08935099, -0.10941228, -0.10121294, -0.10057617, 0.05421962, -0.08714224, -0.08124617, 0.10243436, -0.03460821, -0.02473733, -0.11806754, -0.03861419, -0.01512955, 0.08090687, -0.01466939, 0.00759419, -0.05145545, 0.09033145, -0.04960072, 0.05276059, 0.13155563, -0.12921681, 0.01236408, -0.00682073, -0.07532021, 0.06679352, 0.08085207, 0.08258615, 0.03586956, 0.06272893, -0.12706345, -0.08326119, -0.08549400, -0.05865496, 0.13371107, 0.00210084, -0.08701658, -0.00546591, 0.12072926, -0.05473134, -0.09184894, 0.06647778, -0.13037606, 0.04004008, 0.03536624, -0.14529197, -0.05436726, 0.08337844, 0.03353796, 0.10097725, -0.03559614, -0.07841870, -0.11515503, -0.01508593, 0.11566509, 0.12644908, 0.11401929, 0.01711804, 0.07199972, 0.12256449, 0.09198684, 0.07098765, -0.04447551, 0.00517319, 0.02209951, -0.04352145, 0.16917668, 0.07550865, -0.04974764, 0.07054643, 0.07480023, -0.05361844, -0.05559006, -0.09285422, 0.05990180, 0.05627289, -0.11502761, 0.02141460, -0.09335990, -0.02175037, -0.11873549, -0.06382498, -0.00887802, -0.07173201, -0.10559627, -0.07954976, 0.05893334, -0.03958821, -0.08385885, -0.08953383, 0.00030607, 0.14760351, -0.02204488, 0.04558746},
  {0.06757625, -0.08509152, -0.04622285, 0.01339686, 0.00409176, -0.05567876, -0.07695617, -0.06646585, 0.05995668, 0.04426089, -0.06727105, -0.11485094, -0.09547790, -0.03277642, 0.08077107, -0.15967806, 0.06958854, 0.11303448, -0.05550011, -0.06396760, 0.01831776, -0.02860049, -0.04691285, -0.02243978, 0.05176580, -0.01408359, -0.03602205, 0.03966219, -0.08292057, -0.00607248, -0.01430323, 0.05784100, 0.11621316, -0.10325950, 0.04447737, 0.04649318, 0.02760881, 0.04434270, -0.10465086, -0.00817696, 0.08328180, -0.04101836, -0.05136948, 0.03120545, 0.10363469, -0.12386267, -0.11494146, 0.03492349, 0.12137694, -0.03382871, -0.12009689, -0.05562805, -0.02093549, -0.04904963, -0.08865495, 0.02368740, -0.02184057, 0.02559076, 0.10518305, 0.13693233, -0.13498205, 0.06735749, -0.08906538, -0.11676276, 0.08598440, -0.00700765, -0.11342775, -0.10766495, 0.04600925, -0.10023892, 0.03240410, 0.03064564, 0.08986551, 0.05642489, -0.02138474, 0.00278514, 0.06891631, -0.03644609, -0.00744044, 0.00391076, 0.08374169, 0.00109791, 0.05418473, -0.17172793, -0.01399763, 0.02942023, -0.11735566, -0.09159926, 0.02886263, -0.09283742, 0.08940314, -0.08559285, -0.04703867, -0.05310728, -0.04011010, -0.09727721, 0.01614942, 0.03150894, 0.00699977, -0.05570153, -0.12090973, 0.06515092, -0.01601175, 0.10204691, 0.02626621, 0.07539675, 0.04279048, 0.10113156, 0.02890504, -0.03072562, 0.11288042, 0.03037637, 0.17926309, -0.00516448, 0.07050544, -0.07837048, -0.03084342, 0.03670601, -0.08498230, 0.07624766},
  {-0.07418572, 0.10568017, -0.05325043, -0.04272734, -0.00374723, 0.09422000, -0.06222431, 0.00239524, 0.12868562, 0.09945538, -0.11499391, -0.03585355, 0.02340297, 0.16580740, -0.13199225, 0.09106289, 0.06290733, 0.04085287, 0.06727610, -0.08040799, 0.03445706, -0.02926291, 0.11476060, -0.26504624, 0.10958693, 0.01573553, 0.09756758, 0.03231664, 0.03621177, 0.09312269, -0.05492427, -0.08258567, 0.26401138, -0.01316734, 0.02304584, -0.07356749, -0.11559737, -0.17531361, 0.01298900, -0.05195257, 0.03466120, -0.03888489, -0.18023030, -0.03787326, 0.01209162, 0.05403061, 0.14262678, -0.08098326, 0.03205800, 0.04883618, 0.11759479, 0.08298464, -0.12672284, 0.02999283, -0.09538420, -0.05634909, -0.02902349, -0.11870823, -0.19747624, -0.00584537, -0.01441867, 0.21158527, -0.12871492, 0.03490301, -0.01363041, 0.07964967, -0.06951385, -0.16118956, -0.15316485, -0.01510270, -0.03796315, -0.18517958, 0.07020716, 0.07915258, 0.02590631, -0.12401747, -0.06314812, -0.03139182, -0.00120756, 0.13244592, -0.00760239, 0.07737650, -0.23040389, -0.03096794, -0.08118409, 0.14834994, -0.11452748, -0.08414979, -0.15493844, 0.11686779, 0.02250209, -0.03673484, 0.04448828, 0.07687758, 0.12172257, 0.00691459, -0.00486325, -0.00558101, -0.09747009, -0.00739423, -0.00898049, 0.04780104, -0.02763502, 0.12403692, 0.05781397, -0.05294288, 0.01965080, -0.04501096, 0.05582234, -0.10130624, -0.03326011, -0.13562074, -0.01954577, -0.04269874, 0.01043745, 0.03576047, 0.12748601, 0.01556491, -0.07158576, -0.02818632},
  {0.26599580, -0.00781183, 0.05029443, -0.05230897, 0.11930579, 0.02847388, 0.02207702, 0.00815592, -0.03570291, -0.07021488, 0.00292128, 0.05736585, 0.15313478, -0.09191178, 0.03255253, -0.15325467, 0.05664468, -0.02203720, -0.11602096, -0.01030225, 0.07917074, 0.13090497, 0.13636000, -0.12135346, -0.00823797, -0.07060283, -0.00351326, -0.04673231, 0.01832243, 0.05221028, -0.08395956, -0.10959000, 0.00682475, -0.00564067, -0.06770682, -0.08706465, 0.04415681, -0.06374986, 0.09242212, 0.03306860, -0.04676792, -0.05171935, -0.13722515, -0.06075863, 0.03932949, -0.05289618, 0.05792259, -0.10738717, 0.12096736, 0.10291950, -0.10263736, 0.11087508, 0.06670345, 0.02503289, -0.08726191, -0.11498649, 0.03754074, 0.13971703, -0.07330921, -0.00329991, 0.10561769, -0.01512596, -0.00288306, -0.08228525, -0.00148805, 0.13382508, 0.06818364, 0.07239960, 0.05704810, -0.09734785, -0.11944857, -0.07996047, 0.01190341, -0.00997308, -0.02108906, -0.08157446, 0.11181390, -0.00944803, 0.01310593, -0.09284943, 0.18041940, -0.08362902, 0.01144141, 0.01288155, 0.00554692, 0.12943327, -0.17357796, 0.02268821, -0.08043697, -0.01346496, -0.08675466, -0.02068204, 0.19521368, -0.09002162, -0.16670738, 0.04528961, -0.04239392, -0.00119340, -0.03066532, -0.06497602, -0.10002280, -0.08467671, -0.11562722, 0.00918434, 0.08794341, 0.04475850, 0.04168253, 0.01118533, 0.04426327, 0.05688531, -0.13491450, 0.02928432, 0.06645434, -0.09342360, 0.05344232, -0.04390680, -0.03166859, 0.02731461, -0.11249451, 0.07574649},
  {0.05949419, -0.05354438, 0.09688783, -0.03357895, 0.02172202, -0.10303213, -0.10510606, 0.06850179, 0.12917352, 0.09410022, -0.00440583, 0.12428529, 0.05955735, 0.04986065, 0.05917390, -0.12117104, 0.03477963, -0.01485533, 0.02605749, -0.05063329, 0.00900569, 0.09918731, -0.24952184, 0.09877306, 0.01970259, 0.00298949, -0.07445049, -0.09947611, 0.02789664, 0.06981374, 0.10243808, 0.02900074, -0.04673614, 0.01695526, -0.12415750, 0.01625693, 0.06500760, 0.07214914, 0.09512585, 0.03366326, 0.03018310, 0.18381986, 0.13681583, 0.16214842, 0.14896238, 0.01340661, -0.09628562, 0.04099834, 0.05404566, -0.10243824, -0.02842066, -0.06804413, -0.05737704, 0.00452982, -0.05452656, -0.00943789, 0.01696624, 0.07262250, 0.04582252, 0.18414432, -0.14403927, -0.11479755, -0.02462476, -0.01129189, 0.03568304, 0.04777705, 0.05938828, -0.03726979, -0.01122498, -0.00808386, -0.06555650, 0.10266533, -0.02207951, 0.13860533, -0.03743519, 0.16559002, -0.02875191, 0.04619422, -0.12814909, -0.12524205, 0.15700978, -0.06593077, -0.04730681, 0.03904745, -0.03415046, 0.00419114, -0.00294649, 0.06277630, -0.03086226, 0.00532038, 0.04488672, 0.10501769, 0.08267558, -0.13681060, -0.10269722, -0.01276651, -0.13613372, -0.07724895, -0.06544013, -0.02624913, -0.05500242, -0.03282001, -0.10655738, -0.11799929, -0.09446622, -0.07649259, 0.18092564, 0.08836591, -0.04125566, -0.10635933, 0.09682025, 0.11343946, -0.01443830, 0.01870250, 0.04474955, -0.01078333, -0.17498341, 0.12693729, 0.03231033, -0.18170878},
  {0.08821280, -0.00798361, 0.08809380, -0.11816362, 0.01800582, 0.02988669, -0.01776642, -0.10864133, 0.04509434, 0.07911295, -0.18327284, 0.11699143, -0.06307469, 0.03472438, 0.09136765, 0.09093601, 0.04747502, -0.13136114, 0.06226565, -0.08593550, -0.02033838, -0.11917897, 0.01575206, -0.03296476, 0.12236033, -0.00482484, 0.08363600, -0.08509946, -0.08553557, -0.03109281, -0.00353604, 0.00770935, 0.07481495, -0.03202768, 0.05242691, 0.07122952, 0.02160087, -0.01809191, 0.06350411, -0.05480666, 0.03173570, 0.05358518, 0.08517323, -0.03287845, -0.08442810, 0.09907914, 0.10282813, 0.00716284, 0.07578009, 0.11423174, -0.01032589, -0.01859575, -0.02503131, -0.10388160, 0.12927397, -0.12595044, -0.02379584, -0.00438875, -0.09375278, 0.06923456, -0.02468475, 0.00212875, -0.12210199, 0.05297915, 0.01218497, 0.00405094, -0.04067846, 0.08707977, -0.03546972, 0.08978625, 0.09508742, -0.18111508, 0.01070276, 0.11382118, 0.06842811, 0.01401291, -0.01744568, -0.06386922, -0.07793112, 0.04245066, 0.03654025, 0.02716420, 0.02001312, -0.04179864, 0.14818868, -0.07906520, -0.10933652, -0.01403258, -0.05470835, 0.12493338, -0.01700627, 0.00775082, -0.00899138, 0.00962241, -0.03371302, 0.13289328, 0.06525190, -0.07211865, -0.06370402, -0.00603053, 0.02158095, 0.08857343, -0.00685989, -0.08981208, 0.01051081, -0.07247254, -0.14449644, 0.00872152, -0.05685644, 0.04860625, -0.04889110, -0.10981330, -0.08085276, -0.09654430, -0.05697057, 0.02770309, 0.02592435, -0.07633409, 0.07377976, -0.05341734},
  {0.21882121, 0.12754242, -0.05332116, -0.10711350, 0.11622371, 0.21555898, -0.14903988, -0.09848747, 0.00937043, -0.02588623, 0.16245224, 0.01952477, -0.00667299, -0.16898943, -0.16657634, 0.00492247, -0.06234220, 0.07154831, 0.10958479, 0.14554441, 0.00668260, -0.02973125, 0.00260187, 0.00534428, 0.02775056, -0.07670727, -0.00242246, 0.07898342, 0.01965228, 0.07596617, 0.16930673, -0.06409481, -0.04472221, 0.03993743, -0.07490256, -0.00428999, -0.14505875, 0.01216342, -0.08561443, 0.03282834, 0.04248832, 0.02670396, -0.25815606, -0.12444711, 0.12955850, 0.09374733, 0.07844540, -0.05678729, 0.01835504, -0.06550136, -0.07309484, -0.02098321, 0.08159747, 0.10312080, 0.02032132, 0.10819809, -0.00912626, -0.09167454, 0.15580060, -0.10540211, -0.00692957, -0.06098106, -0.02142746, -0.13692895, -0.01140708, 0.06486949, 0.20588192, -0.04247870, -0.00330691, 0.04700731, 0.08291432, -0.02840068, -0.10523986, -0.01408781, -0.09734434, 0.04622641, 0.11653928, 0.05590170, -0.07373902, -0.06282202, 0.07418535, 0.00862870, -0.10819412, -0.01131458, -0.06752553, 0.06110069, 0.11803844, -0.11819276, 0.03856198, -0.02138270, -0.04175435, -0.14541200, 0.14420722, -0.07784085, -0.00397793, 0.08841869, -0.07275556, 0.00534692, 0.01929515, -0.00182058, 0.09051593, -0.03873568, 0.07791669, -0.00272057, -0.05207639, -0.01837911, -0.01366595, -0.13244712, 0.02607454, -0.02699401, -0.21010306, 0.13526632, -0.03517799, -0.03960771, -0.02174409, -0.04884619, 0.13895489, 0.00747336, -0.06868821, 0.08877845},
  {-0.06623296, 0.22911511, -0.12490857, -0.04828832, -0.00944837, -0.05788136, 0.07201178, 0.01901506, 0.08562090, -0.05151442, -0.08496957, 0.00178976, 0.03251661, -0.13601312, 0.05093946, 0.11266318, 0.13885452, -0.04370502, -0.01588080, -0.00059505, 0.02442901, 0.04096999, -0.04409774, -0.11486920, 0.16715561, -0.07405509, 0.03509927, -0.00489761, -0.02492118, -0.02961714, -0.03002442, 0.03395955, 0.00030392, 0.07912514, 0.06203622, 0.05275765, 0.03824448, 0.05861954, 0.07963178, 0.03151572, 0.03374475, -0.02641804, -0.05757399, -0.03785566, -0.11156041, -0.01932149, 0.04829330, 0.06306075, -0.05042318, 0.01310200, 0.11944168, -0.00750482, 0.01538794, 0.04774609, 0.10787196, -0.18639204, 0.00347963, -0.10940762, -0.10635099, -0.16834918, 0.19700015, 0.10137608, 0.06764138, 0.03051188, -0.08664580, 0.02954824, 0.01511151, 0.20549108, -0.16276805, -0.09691961, 0.08246994, -0.05182403, -0.04084875, 0.02435580, 0.08641030, -0.06026202, 0.02636399, -0.12798861, 0.08892252, 0.08270147, -0.02549042, 0.07331234, -0.03480821, 0.17589051, -0.07238992, -0.03405694, 0.02586319, -0.10445482, -0.18380472, 0.19561847, -0.06126290, -0.05048113, -0.15833798, -0.07419372, -0.02503255, -0.04908672, 0.12259110, -0.08917807, 0.04260940, 0.04085120, -0.10070214, 0.00776319, 0.02549422, -0.07412928, 0.13332345, -0.02449851, -0.01901300, -0.06359676, -0.10100679, -0.07322028, -0.15135495, 0.01432239, -0.07884833, 0.06307027, 0.09503277, 0.05584487, 0.02077873, 0.11429094, 0.02625062, -0.14047931},
  {0.09599759, 0.06019201, 0.05663022, -0.02963986, 0.03777427, 0.08815254, -0.08190717, 0.04128030, -0.02866262, 0.03902674, -0.12524833, -0.00893530, -0.04698861, 0.11700061, -0.03213630, 0.11784313, 0.13343707, 0.07349431, -0.03186744, -0.02302470, -0.11047742, -0.05177653, 0.17350884, -0.00870475, 0.05533311, -0.10707381, 0.09718674, 0.02702333, 0.05614141, 0.08967637, -0.11687014, -0.07972226, 0.13847066, -0.00989917, -0.06908715, -0.10044421, 0.00077806, -0.09286858, 0.06333826, 0.09922445, 0.08355124, -0.05490660, -0.07793225, 0.10232342, -0.06217004, 0.00707091, 0.00775223, -0.07484618, -0.01440134, -0.00988029, 0.09704717, 0.05375400, 0.00839294, 0.01330203, -0.00003251, -0.04664571, -0.07829634, 0.05667391, -0.11021019, -0.02549232, -0.05101388, 0.12034924, -0.10098128, 0.06501507, 0.13302857, 0.04421181, -0.11992186, -0.12947874, -0.10821619, -0.01847297, 0.10481784, 0.10886590, 0.02195726, -0.02453067, 0.00227825, 0.09952637, -0.02579003, -0.02755166, 0.15749855, 0.09365971, 0.02067531, -0.15811133, 0.12579010, 0.02869732, 0.11296441, 0.03887892, -0.03928531, 0.05019770, -0.00081573, 0.00073177, -0.00592637, -0.01362869, 0.05347642, 0.05400180, -0.24176545, 0.16351818, 0.05848594, -0.01840125, 0.05450003, 0.01151339, -0.08424615, -0.08491535, 0.06570868, -0.06702934, 0.01894222, 0.06932908, 0.02347309, 0.15068839, -0.00632396, 0.02655157, 0.06108890, 0.01365765, 0.05848666, 0.02262518, 0.00412381, -0.06167918, -0.07973704, -0.10097403, -0.04976026, -0.00790229},
  {-0.03812069, 0.04431611, 0.06052349, -0.09168661, 0.05035385, -0.14699623, 0.05037422, -0.09525974, -0.03704476, -0.02748291, 0.05655560, 0.11381904, 0.07124235, -0.04176117, 0.12054867, 0.02924691, -0.12442987, -0.09749687, -0.03803231, 0.00113460, 0.14060469, -0.07840566, -0.16167381, 0.08987201, -0.02790080, -0.05991852, -0.10797644, -0.05795897, 0.03311996, 0.04109032, 0.06417733, 0.02571879, 0.05661711, -0.04772640, -0.00290506, -0.01852044, 0.05479473, 0.06241115, 0.06446926, -0.01867047, -0.11250259, 0.13928264, 0.05211200, 0.01323525, 0.02430029, -0.03023659, 0.12530999, 0.02633000, -0.07566343, -0.01248848, 0.02274141, -0.11228454, 0.09174821, 0.00839545, -0.12944609, -0.09562729, -0.08333874, -0.01387766, 0.07620996, 0.15040138, -0.13588133, 0.00871939, -0.01712087, 0.01463781, -0.12891868, -0.13716353, -0.08781731, -0.04246495, 0.12064812, 0.04519470, -0.01633765, -0.00050633, -0.04360516, 0.07170298, -0.03513820, 0.00724052, -0.07096023, -0.11956495, 0.05201313, 0.10599385, -0.00501138, 0.02746743, -0.11719998, 0.05870297, -0.11757325, 0.06241146, -0.01380211, -0.09864289, -0.01220959, -0.03266333, 0.15416561, 0.05478067, 0.00242223, 0.01161711, -0.12090600, 0.04010587, -0.03456829, 0.07216273, -0.06063693, -0.03726576, -0.07432430, -0.06146017, -0.08254290, 0.02514302, -0.04764262, -0.07316747, -0.06697588, 0.07158658, -0.03166020, 0.05050574, -0.10678230, -0.05995754, 0.05207669, -0.08487330, 0.10291351, -0.03959824, -0.04964854, -0.02537525, -0.14556077, 0.08148772},
  {0.05298144, -0.03105876, -0.06232127, -0.07643855, 0.06587407, -0.07405324, -0.01476221, 0.04235172, -0.12237227, -0.11232590, -0.12100862, 0.00986510, 0.00500938, 0.16924706, -0.03325117, -0.10578466, -0.00186079, -0.13086522, -0.08973391, 0.02466323, 0.03478831, 0.03308357, 0.05953891, -0.07282492, -0.07125471, 0.08383530, 0.03282836, -0.02395448, 0.03988646, 0.09890801, 0.06784797, 0.02063715, 0.04593236, -0.06523930, -0.15364963, -0.11889175, -0.04819250, -0.00041172, 0.06677972, -0.10871995, 0.00520910, 0.10806538, 0.11219244, -0.18329045, 0.06712224, 0.07280150, 0.09762369, -0.02356852, 0.17742883, -0.03856942, -0.02900147, 0.01405130, -0.00937336, 0.08890574, 0.01132325, -0.08420109, 0.11136352, 0.04587613, -0.00685861, -0.02259386, 0.12327693, 0.03659828, -0.08421467, 0.02822975, 0.02205223, -0.04712924, 0.08441935, 0.07895177, -0.06713954, -0.03074204, -0.07292366, -0.12067543, -0.03661566, 0.08833206, -0.03833881, 0.06953646, 0.07849236, -0.09082649, -0.04557158, 0.04833504, 0.01312879, -0.07762178, -0.10689138, 0.10533198, -0.04601639, -0.13828406, -0.04533902, 0.04684778, -0.05657708, 0.04609866, 0.07315149, -0.02422786, 0.04048457, 0.00492339, 0.03105591, -0.11819079, -0.11784548, -0.04457047, -0.10979247, 0.06054274, -0.02980491, 0.03198824, -0.13618700, -0.00054206, 0.15841800, 0.07652569, 0.00516687, -0.06612792, -0.16214384, 0.08587324, -0.03781706, 0.04697245, 0.02509147, -0.03050216, 0.00179313, -0.07648005, 0.03645515, 0.05781255, 0.03782133, 0.15836781},
  {0.02180217, 0.08146520, -0.12225196, 0.02474080, -0.03814787, -0.06689457, 0.05075767, -0.04788955, 0.01412825, -0.02582931, -0.09219776, 0.07637608, -0.12430963, -0.05713132, 0.06225559, 0.03166895, -0.00832920, -0.06543423, -0.05250540, -0.04438189, -0.08429918, -0.03835556, -0.00895545, 0.08474377, 0.02678329, -0.07659394, 0.11693738, -0.00080608, 0.01937343, -0.09012958, -0.13363664, 0.02490000, 0.03188915, -0.08660010, 0.13304685, 0.14596546, -0.04580702, 0.06601443, -0.02554549, -0.04612679, 0.08002056, -0.14994738, 0.00608513, 0.05102516, -0.04916883, -0.24972968, 0.02834184, -0.00880660, -0.07780379, 0.22077994, 0.03462721, 0.00419911, 0.13824792, -0.09064507, -0.09115580, 0.01768987, -0.00938571, 0.05701888, 0.08162441, -0.05520289, -0.08687227, 0.12852578, 0.13169882, -0.04474733, -0.02922311, 0.02870132, 0.08319740, 0.15144023, 0.08947166, 0.00178431, 0.22421211, 0.18326171, 0.14521950, 0.08704732, 0.14304878, -0.05320041, 0.15300737, -0.04879370, -0.01584418, -0.06865910, 0.01831366, -0.02539486, 0.03517839, 0.06234242, -0.06028456, 0.00523490, -0.02078179, -0.07920714, -0.03500681, -0.09063518, -0.06665481, 0.09475975, -0.11545977, 0.10746510, -0.11772855, -0.05955139, 0.03134585, -0.05915077, 0.00759613, 0.06057974, 0.05224143, -0.06675433, 0.17299004, 0.05309837, 0.06413537, 0.07867789, 0.08343726, 0.08747241, 0.03987466, -0.07128002, 0.03053143, -0.03378001, 0.13077882, 0.07865129, -0.04136616, -0.00600210, 0.06711179, 0.05867983, -0.06285690, 0.05522240},
  {-0.01761489, 0.13336441, 0.02617678, -0.02839219, -0.01570078, -0.14126767, 0.08624182, 0.04114264, -0.10297479, -0.08675807, -0.06688776, 0.03747045, 0.04857052, -0.07065845, 0.09741986, 0.11357818, -0.00000575, -0.21768484, -0.08433270, -0.06257147, 0.10043009, -0.04768058, 0.08607699, 0.04976382, -0.04147448, 0.03614742, 0.08524928, 0.08862143, -0.01212527, -0.03837443, -0.04402818, 0.10680525, 0.10381027, 0.08389442, -0.02606578, -0.04332665, -0.04143556, 0.03067295, 0.09916452, 0.12804890, 0.00711121, -0.03533312, -0.08846001, 0.08144695, -0.03449945, 0.02618634, 0.18222009, -0.02533463, -0.06446331, 0.11155176, -0.07469673, 0.04539271, -0.12563832, -0.01067476, 0.09900754, -0.15286991, -0.04613102, -0.05664909, -0.04378410, 0.10176186, 0.07126059, -0.03455675, -0.02604697, 0.08880775, 0.19602615, 0.04194030, -0.08293863, -0.05225022, -0.09717892, -0.01017006, 0.05540803, -0.22264282, 0.03846996, 0.07250557, -0.05012728, 0.03615546, -0.12008672, -0.07547714, -0.09493137, -0.16022053, -0.08793260, 0.00901509, 0.06197015, 0.06057012, -0.03571011, 0.11454201, -0.08133480, -0.08697327, 0.00516576, 0.18719052, 0.08695911, -0.10554788, -0.06057203, 0.00726609, -0.09079813, 0.10557101, -0.11699751, -0.06397947, -0.10661381, -0.06316657, -0.00971874, -0.11761241, 0.04263090, -0.04596740, -0.04995047, 0.02878981, -0.06445958, -0.05033645, -0.07456121, -0.11286282, -0.01070833, 0.01104435, -0.05644252, 0.09757575, 0.03484844, -0.08113256, 0.10420602, 0.07640810, 0.09751562, -0.17364646},
  {-0.04730193, 0.05483631, 0.05760695, -0.03464929, 0.00207989, -0.01124273, 0.03277221, 0.06159353, -0.03666594, 0.02256505, -0.13028368, -0.00315204, 0.10521328, 0.02367531, 0.01697198, 0.00475676, -0.03826464, -0.20189655, 0.04037840, 0.07997266, 0.04280863, 0.07712878, -0.06671387, 0.04248934, 0.01950955, 0.06997375, -0.01002708, 0.04445350, 0.03448468, 0.03286620, 0.02243598, 0.01707819, 0.09491536, 0.05579352, 0.12497913, -0.00598523, -0.08791557, 0.12249593, 0.01918559, 0.05937383, 0.00795744, 0.16066469, -0.07752958, -0.10118570, 0.11816010, 0.04091410, 0.09652973, -0.07561467, 0.02279042, -0.06926431, -0.00957133, -0.01016216, 0.04644702, 0.14585158, -0.04621486, -0.12419196, 0.04777240, 0.03349720, -0.08174318, -0.00425279, 0.06228761, 0.01957350, -0.07029766, 0.02696951, 0.11174305, 0.08348101, 0.05521639, -0.04522241, 0.05208486, 0.09291060, -0.07888266, -0.02610916, -0.01105712, 0.05752369, 0.01890477, -0.00036410, -0.04241145, -0.05680393, 0.01255686, -0.04243071, -0.00922681, -0.07444399, -0.15413558, -0.01117878, 0.08157445, 0.05776700, -0.09461682, 0.00611989, -0.06173247, 0.05082778, 0.12650971, 0.04561209, 0.00182598, 0.04486352, -0.08189598, 0.03728843, 0.03071850, -0.08296537, 0.09347326, -0.04698062, 0.04583795, 0.07891470, -0.00656355, -0.11014853, 0.04797796, -0.04593053, 0.00119211, -0.10748492, -0.10926431, -0.10714675, -0.05876632, -0.04597668, 0.05059579, 0.04222585, 0.08599126, 0.07435171, -0.03911036, -0.00809728, 0.05399992, -0.05061606},
  {0.09066021, -0.12660654, 0.16458926, 0.01828467, -0.00949584, 0.00620650, -0.03169701, -0.08909684, 0.00540043, 0.05654790, -0.01971255, -0.11611985, 0.09701231, 0.00127230, 0.06277278, 0.03541253, -0.06124732, 0.11900046, -0.00811814, -0.00223614, 0.07910012, -0.09876299, -0.07646932, -0.02086889, -0.00326711, -0.11186016, 0.00851093, -0.03142120, 0.09553884, -0.12961341, 0.00315625, 0.08025005, -0.07547371, 0.08705302, -0.12157485, 0.02313423, 0.10809162, 0.02580363, -0.01386238, -0.05414148, 0.06005137, -0.02889589, 0.01831762, 0.00142836, 0.03596321, 0.00193250, 0.06970209, -0.09427873, -0.02035653, 0.02256233, 0.05131618, -0.09253585, 0.06240506, 0.13350721, 0.08109277, -0.10265427, 0.08426043, -0.06586947, 0.07894339, 0.09151828, -0.11873236, 0.08833901, -0.09181990, -0.10258327, -0.16481487, -0.07783411, 0.02882751, 0.07668158, -0.05633433, 0.08585205, 0.07219230, 0.07537752, 0.03845751, 0.09539697, 0.10744404, -0.01547564, -0.07544323, 0.05795780, -0.17410719, 0.14867274, -0.07078393, -0.11802088, -0.04203288, -0.04676346, -0.16796795, 0.06363716, 0.07962809, 0.04308416, 0.04740123, -0.12327494, 0.14826714, -0.07902745, -0.06241116, -0.01676710, 0.09050994, -0.10927789, -0.13475901, 0.06252787, -0.00769015, -0.02770303, -0.04503620, 0.03596024, -0.02872139, 0.13995598, 0.01891518, -0.10792538, -0.01628042, -0.00135698, -0.00125590, 0.02914647, -0.06941409, 0.01708528, 0.04113745, 0.03671699, 0.06319314, 0.00819809, -0.04182170, -0.01797489, -0.09582508, 0.06659409},
  {0.02037537, 0.01885919, 0.08022574, 0.04942913, -0.05482312, -0.06540691, 0.14959458, -0.08009133, 0.04261130, 0.03559400, -0.22153416, 0.11520225, -0.11356849, -0.15324880, 0.03751739, 0.07156420, 0.05656197, 0.00869699, -0.04484618, 0.01212095, 0.03957599, -0.01408614, 0.03205110, 0.00031913, 0.03329049, -0.00793662, 0.00939311, -0.05583311, 0.06958617, -0.09882735, -0.09059253, -0.04413534, -0.14515920, -0.08385888, 0.05987031, -0.07391959, 0.03598874, 0.04061059, 0.12786075, -0.08132053, -0.04741431, 0.02060781, -0.04302523, 0.08343628, -0.01799483, -0.02047512, -0.15428062, -0.04257375, -0.01996396, -0.05102466, -0.07243501, 0.12236895, -0.01539641, -0.05867154, -0.06725071, 0.13894039, -0.07171538, -0.05898838, -0.01759724, 0.13252400, -0.08876117, -0.03272811, 0.00437119, 0.01757383, 0.12201082, 0.00393716, 0.04724139, -0.10671498, -0.08958112, -0.06227217, 0.10303008, -0.00915240, -0.01094442, -0.02630408, -0.02406176, 0.01566785, -0.03765112, -0.11033614, -0.11409064, -0.10433601, 0.04682423, -0.02046358, 0.02516546, -0.08758305, 0.06535475, 0.06379431, -0.14164229, 0.01624094, 0.16701069, -0.10005687, -0.05398415, -0.10255893, 0.06826556, 0.00160259, 0.00276937, -0.00445375, 0.04375668, 0.00004414, 0.02784710, 0.04066698, 0.08369209, -0.02207983, 0.02423699, -0.08441997, -0.16515416, -0.02436117, 0.02352738, 0.00555273, 0.03884816, -0.09656157, -0.08928817, 0.00243246, -0.00672345, -0.02865095, 0.11490968, -0.12618163, -0.01590910, -0.11266907, 0.07619033, 0.02111899},
  {0.00904693, 0.09255266, 0.07262275, -0.10163513, 0.13014659, -0.06779344, 0.10618807, -0.11837764, -0.04935060, -0.00759834, -0.19872524, -0.08061129, -0.02598682, -0.00591769, -0.07119843, -0.09100644, 0.11448658, -0.10301143, -0.04589202, -0.00049221, 0.13836862, 0.07698548, 0.08480056, -0.08051994, 0.15477791, 0.00852334, -0.06034997, 0.00822071, 0.00111714, -0.09202742, 0.00751839, 0.12024484, 0.09620226, -0.03420399, -0.01694265, 0.06010084, 0.02415392, 0.05618112, 0.00009752, 0.02175679, 0.02304280, 0.12654026, -0.11416846, 0.03458689, 0.04407542, -0.04848734, -0.05385131, -0.00346116, 0.13471848, -0.06601268, 0.04308637, 0.03402152, 0.06104120, 0.06787130, 0.04110942, 0.05013059, 0.03728888, 0.06115893, 0.03913008, 0.15452030, -0.00643270, 0.06171419, 0.00500625, 0.02780019, -0.01969862, 0.08247149, -0.00595078, 0.05815106, -0.03839206, -0.03154597, -0.05364615, -0.10805479, 0.06468171, 0.07860349, -0.11002107, 0.08558749, -0.03487543, -0.05111001, -0.04201474, 0.11986389, 0.07260893, 0.12278015, 0.04005598, -0.05364562, -0.08791707, 0.10661259, -0.04117379, -0.10320504, -0.00924487, -0.07104602, 0.02349479, -0.01963965, 0.04269944, -0.03297380, 0.05629958, 0.02186452, 0.07841803, -0.05893473, -0.05313462, 0.01021760, 0.06869943, 0.03854572, -0.11454787, -0.04279297, 0.01281099, -0.11308456, -0.04870898, 0.02758864, -0.06148124, -0.07397833, -0.07862517, 0.09627663, 0.04827543, 0.02586132, 0.04934463, 0.03768308, -0.03943034, 0.12271574, -0.08899032, 0.11308201},
  {0.05326855, -0.12321002, 0.01471196, 0.01917215, 0.00998677, -0.03072323, 0.10067825, -0.07689355, -0.02031605, -0.09341487, 0.00021442, -0.10890998, -0.03869071, -0.03010240, 0.06381477, 0.06790722, 0.03750753, 0.03573084, -0.06909540, 0.07411661, 0.06494793, -0.05800058, 0.00214124, 0.04708196, 0.07633609, -0.00093320, -0.00817487, -0.08061406, -0.07008020, -0.09691005, -0.03827734, 0.07897731, 0.09698229, 0.08093532, 0.13934106, 0.05621434, 0.14917009, -0.03875299, 0.14198337, -0.01000199, -0.07273769, 0.01390508, 0.04157719, 0.08483259, 0.12492467, -0.07320819, -0.01207542, -0.00018092, -0.11568808, 0.10521677, 0.08973392, -0.13041210, 0.13104959, -0.06323645, 0.01016375, 0.00301309, 0.00501866, -0.04631869, -0.00569178, 0.11431358, 0.01382518, 0.01873343, -0.04031096, -0.07779466, 0.01828907, -0.03782138, -0.09814239, -0.01801034, -0.08032280, -0.05166272, 0.11636927, 0.06179348, 0.00573746, 0.09539844, -0.06637149, 0.05638327, -0.07364598, -0.11185377, -0.10977791, 0.00070908, 0.05762440, -0.11727814, -0.01404023, -0.02580420, -0.10330267, 0.12976244, -0.22192492, -0.05665624, 0.03581017, -0.00938266, -0.10465295, 0.09150498, -0.02397880, -0.14460516, -0.13343939, 0.05759468, -0.06109660, -0.04054330, -0.06891730, -0.00638165, -0.07120484, 0.02011519, -0.08419403, 0.01875891, -0.10404943, -0.00222418, -0.15578447, -0.01149327, 0.11052883, 0.06230811, 0.03995297, 0.00180114, 0.13504589, -0.06807327, 0.09629332, -0.09131963, 0.04176791, 0.06206731, 0.00120311, 0.16898142},
  {-0.13360171, 0.09097453, -0.10144025, 0.06911427, 0.00387952, 0.03090293, -0.08096895, 0.08547053, 0.10754350, -0.08008230, -0.28790459, -0.07199619, -0.04864696, 0.00918408, -0.08744517, 0.06830607, 0.13466421, -0.08782670, -0.09775490, 0.10735283, -0.12769979, -0.03434577, 0.29504409, -0.03230114, 0.02696948, 0.04579026, 0.08228207, 0.04764889, -0.09626876, -0.01280316, -0.15339687, 0.00072764, -0.00430497, 0.01020531, 0.11204732, 0.12351932, -0.09495699, 0.02897211, -0.02800245, -0.03791979, 0.07851262, 0.12541066, -0.02187130, -0.07773483, -0.07944301, -0.09400721, -0.02006186, -0.01231229, 0.00735334, 0.07127988, 0.06504700, 0.09679922, 0.07386862, -0.11310781, 0.05563796, 0.01318421, -0.10155975, 0.08732684, -0.00435252, 0.03573687, 0.04558127, 0.08094312, 0.00495490, -0.01677577, 0.06279481, -0.06625228, 0.05621140, -0.05780397, -0.17272495, -0.01436646, -0.09362955, -0.16697352, -0.00980775, -0.13513087, 0.10369780, -0.09322231, -0.10342443, -0.11298425, 0.11847378, 0.12622164, 0.01741369, 0.13170059, 0.06416821, -0.03830782, -0.01035445, -0.02770624, -0.10584006, -0.01542181, 0.19419065, -0.04629483, -0.08742529, -0.11071059, -0.02618467, 0.05014550, -0.14836076, 0.12176744, 0.15086092, -0.00004135, -0.02638981, 0.03085636, -0.04864341, -0.03264612, 0.18155813, -0.10067270, 0.07701345, -0.05702228, 0.03493712, 0.04569905, 0.02168641, -0.07396867, -0.02455809, 0.07423639, 0.08118951, -0.10425495, 0.02428850, -0.00964346, 0.06213713, -0.03330877, 0.03883496, 0.13963395},
  {-0.09426963, -0.04060614, 0.09258581, -0.01361923, -0.06964225, -0.10647130, 0.03464713, -0.05016360, 0.03126532, 0.02490370, -0.15672599, 0.12851712, -0.09098722, 0.12643175, 0.04514202, -0.18546560, 0.00937571, 0.04929696, -0.02083835, 0.09413199, -0.03661056, 0.09178120, 0.04585063, -0.04975042, -0.01803378, 0.07757442, 0.08048351, 0.04273008, -0.13001336, -0.11662478, -0.06513718, -0.04818569, 0.00585012, 0.08784436, 0.13032897, -0.08013134, -0.03438823, 0.08320177, 0.07402545, -0.12760931, -0.12614308, 0.12861301, 0.01199753, -0.05091357, -0.09685194, -0.01869936, 0.02447443, 0.05492075, 0.11111547, 0.01349686, -0.05084847, -0.06360704, -0.02997179, -0.05384011, -0.00475194, -0.16820496, -0.14413716, 0.02829060, -0.02623885, -0.01460330, 0.13263127, 0.11379223, 0.04512242, -0.04900128, 0.02430282, -0.00512083, 0.07785189, -0.12096088, 0.14366375, 0.01333980, -0.08531584, 0.09848311, 0.14960098, 0.10920256, -0.02433936, -0.08328386, -0.04832956, -0.02293948, -0.00161865, 0.01838085, -0.13471660, -0.14684997, -0.05551315, 0.00588976, 0.00636956, -0.11641566, -0.12033615, -0.12045997, 0.19946425, 0.04596189, -0.05380920, -0.05621818, -0.10680771, -0.04001309, -0.14604440, 0.08256109, -0.06845584, -0.02102049, 0.09711089, 0.03755122, 0.08486762, -0.10438772, 0.07565583, 0.05839502, 0.00009585, -0.05486768, -0.05859349, 0.19768056, 0.03924707, -0.08247098, -0.01030997, 0.07929024, 0.02029346, 0.03876700, 0.08828149, -0.05398504, 0.02455043, -0.01674745, 0.01493268, -0.05237374},
  {0.10067909, 0.10964536, 0.02394365, 0.00660272, 0.02182876, 0.06232239, 0.03713117, -0.11529528, 0.03021917, -0.04532767, -0.01006164, -0.16429831, 0.17020243, 0.00894361, -0.04145423, -0.09349220, 0.11247964, -0.12190393, -0.07662013, -0.05050169, 0.08263885, 0.17163546, -0.09102443, -0.01969162, 0.02891527, 0.01941982, 0.09184384, -0.06951439, -0.04291617, 0.03404142, 0.00592077, -0.13858026, 0.07674555, -0.08436681, -0.06991056, -0.13639809, -0.10233352, -0.17098875, -0.07043031, -0.13206196, 0.06775643, 0.01259647, -0.07227263, -0.07909013, 0.10444318, 0.20314240, 0.12830086, -0.07924183, 0.12657259, -0.08315318, 0.03135711, -0.03467365, -0.00020609, 0.04946279, 0.03388341, 0.13826342, 0.01878967, 0.06390098, 0.11787906, -0.11215353, 0.02361310, -0.10781996, -0.00381842, -0.11788066, 0.10217886, -0.01050651, -0.00240092, 0.09241800, -0.03246157, 0.01269179, -0.03530889, -0.21896344, -0.14426289, -0.00277598, -0.02879222, 0.07271621, 0.11247788, -0.04389869, -0.10958814, 0.03214878, -0.00487676, -0.06637082, -0.10103258, 0.04084820, 0.02109915, 0.10495387, -0.11101674, -0.07996030, -0.18968293, 0.17491388, -0.10185014, -0.08076091, 0.12678324, -0.09190398, 0.03603832, -0.05554717, 0.05544382, -0.11046040, -0.04195070, -0.04319649, -0.10458481, 0.00090263, -0.12539198, 0.08927731, -0.02579836, -0.06173301, 0.02296202, 0.00837173, 0.02666104, -0.02692816, 0.19947833, 0.06756081, 0.03707118, -0.07452261, 0.02020187, -0.08893439, -0.04373725, 0.02641102, -0.13496196, 0.19530223},
  {0.01997459, -0.08599377, 0.13392387, 0.05441859, 0.06334738, -0.06253056, 0.10364074, 0.02226281, -0.03049648, 0.05914685, 0.00932356, 0.10157513, -0.11079886, 0.08954527, 0.06071159, -0.05497587, -0.04183647, -0.09585669, 0.08071220, -0.03814800, 0.06486140, -0.05685240, -0.07759126, 0.09812307, 0.00719900, 0.02316956, -0.07279102, 0.01719235, -0.00764105, -0.10250822, -0.17927341, 0.07142782, 0.16374743, 0.03122001, -0.00792498, 0.09025288, 0.08402465, -0.01910934, -0.03030159, -0.10841405, -0.02881021, -0.00622366, -0.06706556, 0.07266311, 0.01822796, 0.02842942, 0.13049842, -0.13553479, -0.10739784, -0.15917012, 0.05747971, -0.04969388, 0.06526340, 0.04631281, -0.02810941, -0.02420569, -0.01652890, -0.13195488, -0.19018954, 0.06521139, 0.07737094, -0.00479719, -0.07498735, -0.07996231, 0.02172452, 0.01852091, -0.08487807, 0.06858736, -0.10349558, 0.02095070, 0.00500731, 0.00807652, 0.08201041, -0.00145515, 0.05570820, -0.12499808, 0.04086511, -0.09692755, -0.08514942, -0.02591977, 0.04659484, -0.09965575, -0.05090444, 0.00658705, 0.01002782, -0.10879596, -0.12382246, 0.05219582, 0.02590421, 0.01988790, 0.07236438, -0.05676593, -0.08587869, 0.00098482, 0.08652709, -0.10491944, 0.05197534, 0.02775592, 0.06308614, -0.05381991, -0.12989251, 0.07286770, 0.02021955, -0.07978620, -0.12218345, -0.02737159, -0.07421658, 0.03815173, -0.12970424, -0.04420063, -0.09899952, -0.06450385, 0.17501776, 0.05543972, 0.05023578, -0.05634582, -0.06929680, -0.17985348, -0.02459559, 0.15465057},
  {0.19317091, 0.03926019, 0.08009000, 0.05529909, 0.05030068, 0.03910890, 0.09021065, -0.08469922, -0.03650640, 0.06521352, -0.09582242, -0.08742227, 0.20213971, -0.02168385, -0.03229430, -0.03853713, 0.03397532, 0.01124366, 0.11311837, -0.12660809, 0.02622326, -0.03512324, 0.07254598, -0.16771935, 0.06316489, 0.08934261, -0.07364592, -0.03289630, -0.07318412, 0.02263418, -0.03381003, -0.17445679, -0.12072762, 0.10410726, -0.03118142, 0.12952831, 0.05661620, -0.06569868, 0.17549612, 0.06813511, -0.06002244, -0.13889657, -0.07196109, 0.00349222, -0.04120773, 0.00347756, 0.02079473, 0.06564156, -0.03687323, -0.20224911, 0.04996941, -0.06584059, -0.12764472, 0.09889276, 0.04722952, -0.13963117, -0.02016432, -0.06106255, 0.08270775, 0.05235567, 0.00646617, -0.12987894, -0.02111703, 0.02201600, 0.02003982, 0.10742952, 0.12478219, 0.01818085, -0.06575833, -0.09401648, 0.00295174, 0.05818428, -0.11246272, -0.05676387, -0.05204185, 0.06246532, 0.03686307, -0.09759520, -0.01750219, 0.03274617, 0.10634150, 0.04655835, 0.06072347, -0.07481743, 0.04698048, 0.03788575, -0.09276466, 0.01286885, -0.05923891, 0.18957350, -0.05030712, -0.03994114, 0.12254710, -0.16981381, 0.08250439, 0.01875104, -0.15185231, 0.01616101, 0.02291994, -0.05894382, -0.05837629, 0.06386703, -0.03437211, -0.18801288, -0.19559191, -0.05673901, -0.00047132, -0.01474264, 0.05128497, -0.09253577, 0.04850534, 0.12327681, 0.11102120, -0.03826131, 0.09539580, -0.02465030, 0.11050703, 0.15573454, 0.07717452, 0.06123643},
  {-0.12904911, 0.23164058, -0.08719657, 0.00961220, 0.05491881, -0.07875507, -0.17671841, -0.10012599, 0.15070333, -0.06870905, -0.02621364, -0.13357468, 0.11672727, 0.11189405, -0.08765823, -0.09170242, 0.01765876, -0.08711778, -0.09755038, 0.11812518, -0.11245445, 0.08624378, -0.04108676, -0.14383629, 0.00182963, 0.07624526, 0.18620446, -0.08217654, -0.05491389, -0.00042042, 0.01113494, 0.01567427, 0.20604366, 0.05808574, -0.07423986, -0.10562607, -0.31747603, 0.05004383, -0.13825811, -0.05874185, 0.10395060, 0.08614077, 0.05674656, -0.10577942, 0.08236203, 0.03094382, 0.20817682, -0.03651236, -0.07982349, -0.06297615, 0.01608743, 0.07951135, -0.09827754, -0.14903016, 0.04187277, -0.38563874, -0.11332574, -0.01967589, -0.25157323, -0.08263540, 0.05877151, -0.05443129, -0.03500752, 0.28151605, -0.00812161, 0.09024018, 0.09167586, -0.03926483, -0.09177464, 0.08120909, -0.14424002, -0.17407915, 0.02756726, -0.13195343, -0.06275758, -0.07222794, -0.04350316, -0.11224868, -0.03740138, 0.21871956, -0.05896989, -0.07998773, -0.02348594, -0.06931789, -0.06028350, -0.11089449, 0.10559712, -0.00878980, -0.13104279, 0.06205726, -0.06949846, -0.07936951, 0.06071318, 0.16143596, 0.05932531, -0.11893836, 0.04918762, -0.08316016, -0.10060704, 0.05607552, -0.04313399, -0.09808426, -0.07635212, 0.02368850, 0.05012186, 0.01578161, -0.03712269, -0.06030304, -0.09401128, 0.00284366, -0.00101616, -0.11157656, -0.01425839, 0.05072842, -0.13462153, 0.07252993, 0.09362753, 0.05522485, -0.04818656, -0.00929874},
  {0.03051026, 0.10108016, 0.07961765, 0.03102541, 0.01899179, -0.06214377, 0.11784697, 0.06654765, 0.09476808, -0.02946187, -0.17994303, 0.05527606, -0.08490458, 0.11158501, 0.20775509, -0.04673872, -0.08663720, 0.06525057, -0.02781597, -0.03487808, -0.07244622, 0.00893335, 0.02307593, 0.07434759, 0.03515229, -0.10242067, 0.10881765, 0.01537832, 0.06554309, 0.04576254, 0.02664337, 0.09025057, -0.14190182, 0.01411972, 0.13510376, -0.11715588, 0.08239372, 0.18809117, 0.17078108, -0.03184588, -0.12360562, -0.09904882, 0.05161153, 0.15966326, -0.09332727, -0.16608903, -0.01808069, 0.02814468, 0.07823357, 0.09311768, -0.05877811, 0.09862193, -0.06213878, 0.05267182, 0.12275762, -0.00604258, -0.09435719, -0.00194515, 0.03976681, 0.11729913, 0.04716545, 0.02381058, -0.05387537, -0.07123747, -0.11750673, -0.00571022, 0.11126647, 0.10286772, 0.10598137, -0.10353728, 0.01571459, 0.20499842, -0.10722748, -0.03992519, -0.12351423, -0.02372641, 0.09005713, -0.04627775, -0.21161123, -0.10744558, -0.02028927, -0.08480230, 0.10506963, -0.04212958, 0.05478200, 0.04219768, -0.05931351, -0.01367176, -0.00733471, -0.12290622, 0.02651661, 0.06072484, -0.17194010, -0.08123715, -0.04386244, 0.16836600, -0.00234673, -0.09058122, -0.11297105, 0.05629408, -0.09569420, 0.00172389, 0.09494945, -0.04516306, -0.05311413, 0.08682851, -0.03937626, 0.03133490, 0.07764865, -0.10735785, -0.02948617, 0.03052255, 0.04371851, -0.04048700, 0.13144849, -0.00846170, -0.14926140, -0.06050491, 0.11266714, 0.01717546},
  {0.02180140, 0.10811358, 0.04572210, 0.02448923, 0.22108698, 0.16552323, 0.06836388, -0.11595964, 0.01848822, 0.02431953, 0.05711120, 0.14725135, 0.06331927, -0.01184400, 0.00943417, -0.03041884, -0.01087374, 0.09348254, -0.00528379, 0.02124399, 0.11002831, 0.04667665, -0.19619448, -0.08518487, 0.13018917, -0.06448390, -0.07820246, 0.02203006, -0.05050862, 0.06570422, 0.07030399, 0.06474931, -0.13305885, -0.02581188, -0.06680641, -0.09733772, 0.04863744, -0.01041835, 0.02316551, -0.07913377, 0.07767456, 0.14140427, -0.09254394, -0.07356143, 0.02721130, -0.01769633, 0.17648640, 0.06864298, 0.05862615, -0.04613053, 0.06367536, 0.00165312, 0.15892841, 0.16348584, -0.13222848, 0.02088630, -0.11809029, 0.03553315, -0.09808270, -0.02118082, 0.04210626, 0.13772281, -0.04271135, 0.03907348, -0.11849391, 0.04647976, 0.09215127, 0.05216485, -0.11710115, -0.02149616, -0.20749468, 0.04499236, 0.13314825, -0.12185235, 0.04154081, -0.06956324, 0.01507762, -0.04904713, 0.15131055, 0.11837466, -0.02493897, -0.06461187, -0.07880958, -0.09707050, -0.11906382, 0.00948157, 0.13831523, -0.00163284, 0.11366369, -0.07866235, -0.04955558, -0.11002803, 0.13196185, -0.05721604, -0.09932572, 0.02863998, -0.01670656, 0.04745113, -0.02581156, -0.01193552, -0.01053897, -0.12044770, -0.05301873, 0.06181552, -0.00656869, -0.08652428, -0.03555812, 0.04018199, -0.05464513, 0.06154452, -0.13850030, 0.01929606, -0.05986920, 0.03620994, 0.11991844, 0.06882173, 0.03692549, -0.18421833, -0.12436462, 0.09732113},
  {-0.17201899, 0.16660397, -0.13402452, -0.10348178, 0.11649284, 0.06917048, -0.21846183, -0.08418974, 0.17489892, 0.00849696, -0.00548801, -0.13310845, 0.13509010, 0.19481027, -0.11582492, -0.24207157, 0.16762283, -0.09551512, -0.13709858, 0.07034214, -0.02378092, 0.15900709, 0.01826448, 0.00307179, -0.13033557, 0.10691430, 0.10362631, 0.10574681, -0.09296048, -0.05311322, -0.09330686, -0.20526004, 0.04903410, -0.06925485, 0.00732406, -0.07200398, -0.18078433, -0.15865500, -0.07245348, -0.04143329, -0.08978505, 0.13703795, 0.09594171, -0.01485067, 0.01054162, 0.07212241, 0.12908068, -0.12460369, 0.05799741, -0.09387079, 0.06967944, -0.07444313, 0.05244493, -0.01133899, -0.00348314, 0.04427226, 0.02561386, -0.08566838, -0.16855232, -0.07431234, 0.02149765, -0.12567475, -0.12197686, -0.10653591, -0.15584379, 0.05119298, 0.19808099, 0.13507362, 0.08289883, -0.10567542, -0.10895005, 0.07264696, 0.16483188, -0.06711997, -0.15266716, 0.07405192, 0.08554440, -0.01993100, -0.12256673, 0.17951125, -0.04802863, -0.09436598, -0.14947779, -0.07829081, -0.16487740, -0.21458620, -0.13421312, -0.09703202, 0.06270391, 0.14139593, 0.06704416, 0.01702337, 0.15068567, -0.04522779, -0.04895692, -0.21655430, -0.02841840, -0.07321769, -0.08329248, 0.03000994, -0.07271775, -0.08824720, 0.02598809, -0.08038911, 0.15342635, -0.08336657, -0.05003473, 0.01921199, -0.12927704, 0.08306184, 0.13544546, 0.13415201, 0.05339706, -0.01023338, 0.04301979, 0.01133842, -0.04974856, -0.03389729, 0.04574233, 0.12458113},
  {-0.07038610, -0.00636961, -0.24771722, -0.07941848, -0.09160889, 0.06604028, 0.10957069, -0.09694660, 0.05063517, 0.06033443, -0.01330191, 0.08549830, -0.06679289, -0.11123759, -0.15966596, -0.02625410, 0.09042652, 0.13196827, -0.11587069, 0.13009086, 0.05059802, 0.06139851, -0.03587448, 0.02617637, -0.16440541, 0.07983730, 0.13980804, 0.03958023, 0.06907377, -0.05619994, -0.09151145, -0.00248425, -0.23068011, -0.24044782, -0.09290396, -0.05306221, -0.02284836, 0.11624184, -0.01920445, 0.19281748, -0.06702437, -0.23618622, 0.12959059, 0.05463808, -0.23658086, -0.05458334, -0.07576940, -0.02028381, 0.00401419, 0.08584417, 0.04587547, 0.16376628, -0.03037930, -0.00177759, -0.21574616, 0.21893845, 0.08966549, 0.09789453, 0.02149094, 0.01673899, -0.13350601, -0.08805921, 0.22291653, -0.11511086, -0.01941363, -0.02710441, 0.21595336, 0.15014793, 0.17462854, -0.09630468, 0.18782410, -0.03587798, -0.19633742, -0.09027972, 0.13779058, -0.01189540, 0.03104933, -0.06745791, 0.18561363, -0.26505640, -0.00887433, 0.08968782, -0.04092846, 0.12648313, 0.09921715, 0.04301491, 0.06425145, -0.05549331, -0.02344112, -0.00842722, -0.05730064, 0.05337225, -0.00735202, -0.00931576, -0.03940908, -0.12990549, 0.14000884, 0.07801650, 0.07295363, 0.00829192, 0.00706969, 0.03147138, 0.05416777, -0.07737597, -0.26260835, 0.08885802, 0.08939478, 0.04075929, -0.02328435, 0.07797077, -0.03377400, 0.16784142, -0.19620213, 0.04161134, 0.18408805, 0.03411305, -0.03980391, 0.00018616, 0.00273478, 0.03191103},
  {-0.09194977, 0.10643355, 0.02609809, 0.09023102, 0.15149178, 0.07141495, -0.03204245, -0.04162986, 0.07437954, 0.01131365, -0.04022112, -0.05952846, -0.04141571, -0.11026524, -0.18306205, 0.06995841, 0.03470165, -0.08475392, 0.09059513, 0.07632484, 0.04944393, 0.06880253, 0.02915440, -0.05580265, 0.01629040, -0.08268217, 0.13600746, 0.05084603, -0.07274834, -0.00003170, -0.00164555, -0.03738088, 0.02809973, -0.08570987, 0.00899129, -0.00520241, -0.07367478, 0.00274922, -0.07981747, 0.01712724, -0.02560524, 0.08369745, -0.17832747, -0.10758261, -0.01497915, -0.00944887, -0.02080069, -0.10985661, 0.02027671, 0.02629749, -0.07338142, -0.02022142, -0.10530228, -0.05222213, -0.12783384, -0.04743282, 0.05850140, 0.11659279, -0.00054591, -0.06553455, -0.06278472, -0.02587345, -0.09633797, 0.17043611, 0.07189327, 0.10150450, -0.05516454, -0.02592806, -0.01258007, -0.04951154, -0.13309050, -0.34237114, -0.07875726, 0.15270089, -0.20501301, -0.02470972, -0.05459935, -0.09287516, -0.02121599, 0.06072548, -0.05674179, 0.06397605, -0.07007544, 0.03690610, 0.03502624, -0.01291978, -0.08048222, 0.02501789, -0.14318362, 0.01655291, 0.04548089, -0.00944898, 0.04051355, -0.06720866, 0.06891459, 0.03119876, 0.15072607, -0.03703797, 0.01758010, -0.13512130, -0.13045473, 0.00828707, -0.23180202, -0.05623875, -0.05536072, -0.02854556, 0.07048726, -0.17393515, 0.01541912, -0.02293030, 0.10610307, 0.01929776, -0.08464907, -0.10616770, -0.07124737, -0.00097635, 0.10910639, 0.11469156, -0.15459061, -0.01673280},
  {0.04272596, 0.10709799, 0.00528300, -0.06785473, 0.17790090, -0.00361195, 0.01871775, 0.02631586, 0.18770763, 0.06701118, -0.06624056, 0.07433474, 0.18199992, 0.04275006, -0.23270608, -0.11902887, -0.00705972, -0.16712172, -0.02900689, 0.11808281, -0.06419211, 0.09800992, 0.08401718, -0.09818135, -0.05809633, -0.10488740, 0.03924554, -0.09981739, 0.09489565, 0.03490748, -0.10940359, -0.04977815, 0.04000684, 0.13698785, -0.07420536, -0.11292641, -0.22589591, -0.14246458, -0.11417598, 0.03272474, 0.02835185, 0.05877115, 0.07471861, 0.00109936, 0.00979032, 0.11465068, 0.03473556, 0.00884072, 0.13610503, -0.20690207, 0.01908286, -0.09381127, 0.00744407, 0.04724157, -0.04577175, -0.08611540, -0.08966730, -0.03016863, -0.08399119, -0.05685245, 0.00939724, -0.13836139, -0.07776635, 0.08267138, 0.05483690, 0.15657382, 0.16227826, 0.03593747, 0.18448345, -0.02156362, -0.03542245, -0.11345076, 0.08860588, 0.20213516, -0.14059645, -0.05956184, 0.08385080, -0.11263475, 0.09707916, -0.05216957, 0.01535116, -0.02144043, -0.13372564, -0.00097027, 0.01555812, -0.11571971, -0.03405922, -0.10761276, 0.07195646, 0.12335569, -0.01920988, -0.15268996, 0.11060924, -0.08113567, -0.00785639, -0.10182562, -0.09105413, -0.07544556, -0.03602829, 0.02924395, -0.06491423, -0.07133321, -0.15391342, -0.17882806, 0.04525257, -0.07652019, 0.06593585, -0.01602194, -0.01255052, -0.01128146, 0.00181664, 0.09539778, 0.09783445, -0.01810057, 0.04009053, -0.03784116, -0.07012038, -0.13989508, 0.08051895, 0.06160522},
  {0.05034881, 0.02329971, 0.12756740, 0.04050777, 0.05450965, 0.15010910, 0.05979743, -0.02515661, 0.05532709, 0.04738741, -0.15626493, -0.01668359, -0.01485253, 0.11389114, 0.12170029, 0.05915989, -0.02226680, 0.00045707, 0.05174972, 0.06278694, 0.05673816, -0.02984281, -0.13365708, -0.01397713, -0.00145975, -0.02571780, 0.00456843, 0.05892347, -0.10636631, -0.04201208, -0.00429701, -0.00985975, -0.03846638, 0.14157812, 0.14313088, -0.03701745, -0.01149870, -0.01645266, -0.04590324, 0.07832690, -0.08333644, -0.02605539, 0.00385047, -0.03943244, -0.02263675, -0.03197427, 0.02124807, -0.09420014, 0.01951983, -0.04090987, -0.06784217, -0.09404144, 0.03520638, -0.03584938, 0.02278909, -0.12759550, 0.04762294, 0.00132307, -0.02489394, 0.03872473, 0.02885209, 0.07828496, 0.12796932, 0.03086434, -0.07064318, 0.00598776, -0.03919531, 0.06430355, -0.01695589, -0.04895420, 0.03849702, 0.05160603, -0.05155347, 0.01444460, 0.05376222, -0.19106257, 0.11745320, 0.05532861, -0.01630915, -0.02721810, 0.04852243, 0.07459637, 0.05791223, 0.04930637, 0.03309083, -0.05578027, -0.08964077, -0.07219949, 0.15032318, -0.12485582, 0.00847811, -0.01477501, 0.10728102, 0.08909336, 0.04247982, -0.10272417, -0.08469369, 0.04445772, -0.05792823, -0.02022452, -0.03341902, -0.08043281, 0.09272895, -0.04485290, -0.07601933, -0.09119396, -0.04210823, 0.10968089, 0.00202688, 0.05784321, -0.03795074, 0.00423686, 0.03340930, -0.08936886, -0.03279018, 0.03042580, -0.03664862, 0.08903020, 0.02952269, 0.29193130},
  {0.04754530, 0.10851338, 0.02998867, -0.11499915, 0.03001136, -0.00290704, 0.16752808, -0.11614902, -0.12465412, -0.01580568, -0.04966335, 0.08717170, 0.02970787, 0.00051888, -0.02764617, 0.10604877, -0.03213579, -0.07440445, -0.04149142, 0.03466078, 0.05771764, 0.01161582, 0.16552690, -0.08439337, 0.06424003, 0.02763463, 0.07648807, 0.04022537, -0.02504629, 0.01421334, 0.01719295, 0.03379586, -0.04422773, 0.03227310, 0.04323754, 0.12974644, -0.01898697, 0.01199804, 0.04896035, -0.01632958, 0.05466318, -0.23862307, 0.00719084, -0.05828867, -0.10023727, 0.11535233, 0.07581370, 0.03102958, -0.08713003, 0.05525536, -0.07189029, 0.03036693, -0.04192249, -0.04020298, -0.08234068, 0.00047593, -0.02604237, 0.11919488, -0.02803870, 0.04342556, -0.05241438, 0.11278328, -0.02983324, -0.06695588, -0.02733860, -0.00107959, 0.06252560, 0.12752171, -0.10917258, 0.09044512, -0.00251650, -0.14937383, -0.10079769, 0.08684992, 0.06081442, -0.14418291, -0.02021502, 0.08304651, -0.10685378, 0.09013572, 0.06020114, 0.19358470, 0.06080193, 0.09321813, -0.02004300, 0.08197556, -0.14521205, -0.03578131, -0.07407846, -0.02467936, -0.05245394, -0.11751570, -0.02054334, -0.05043258, 0.11808274, 0.05143343, 0.21043354, -0.02158462, -0.05929901, 0.08737669, -0.13187763, -0.07945277, -0.04518951, 0.08015341, -0.04143061, -0.01767657, -0.01862078, 0.06615262, 0.06345414, -0.04786856, -0.05237737, -0.01608493, -0.05424343, 0.04909298, -0.04616433, -0.09647983, 0.10413694, 0.03025983, 0.01671244, -0.03799320},
  {-0.10927080, 0.10487749, 0.14011431, -0.11313467, -0.05282206, -0.08892850, -0.01199131, -0.08216070, -0.00169449, -0.05799280, -0.12579925, 0.00844152, 0.05864755, 0.06470449, 0.08835682, -0.11495072, 0.10091592, -0.07135253, -0.10847253, -0.00466334, -0.07334395, -0.06193680, 0.11072585, 0.11304919, -0.02941006, -0.09120414, -0.10088326, 0.00457457, -0.04740579, -0.09337082, -0.14980955, -0.05207306, -0.00861599, -0.07103282, 0.11388749, -0.03972202, -0.04802464, -0.02345285, -0.01767270, -0.06832636, -0.01330724, 0.10046955, 0.05967021, 0.01951076, 0.02329209, 0.14473391, -0.12972349, -0.05536042, 0.01740074, 0.05117944, -0.05825307, 0.04588721, -0.05043372, 0.10154480, 0.07080579, 0.07091928, 0.04654099, 0.12089440, 0.05385150, 0.13429351, -0.08097166, -0.02038501, 0.03444627, -0.08739793, -0.10751913, 0.01692453, -0.01874509, 0.06167218, -0.01260021, 0.00600996, -0.02806225, -0.03690812, -0.02888527, 0.02271691, 0.10366299, -0.08222009, 0.02386934, 0.08488990, -0.03560246, 0.08146547, -0.11620344, 0.00634155, -0.11840256, -0.09265189, 0.00969057, 0.00537483, -0.15761919, -0.03727191, 0.12616910, 0.02050525, 0.03033071, 0.05531530, 0.14310698, 0.03928534, -0.13140665, -0.01357121, -0.00793280, 0.02762804, -0.08512300, -0.05785180, 0.06975807, -0.10816362, -0.02415156, -0.10538834, 0.01588758, -0.03360664, 0.10736056, 0.01610871, 0.06626916, 0.00445715, 0.13898438, 0.11035103, 0.09082280, 0.02768005, 0.01111724, 0.07119202, -0.04731461, 0.06046049, 0.06736475, 0.01043013},
  {-0.03085869, -0.06945782, 0.01936902, 0.08534315, 0.03886990, -0.04353411, 0.08569160, -0.06769650, -0.00489961, -0.08829097, -0.06787791, 0.03970570, -0.05544722, 0.07983297, 0.04313954, -0.05262725, 0.06152500, 0.12937400, 0.03679060, 0.17458639, 0.12192346, 0.07236603, -0.05692111, 0.06077262, 0.05413330, 0.07103614, -0.09863587, 0.04664071, 0.00737064, -0.05721426, -0.10683428, 0.09770668, -0.05360513, -0.04171628, -0.03817572, -0.09970745, 0.09563516, -0.01093841, 0.04329137, -0.01169499, -0.02953485, -0.03727481, 0.02330944, -0.01388737, -0.05980023, 0.01503131, -0.09075441, -0.05484393, 0.10539179, 0.08229627, -0.10522392, -0.01368914, 0.08677134, 0.00719698, 0.06258949, 0.05845976, 0.03402964, 0.06554554, 0.02324333, -0.05089396, -0.02508197, 0.09224311, 0.04639826, -0.03643973, -0.11614630, -0.03382066, -0.03644641, -0.03160613, 0.07378087, 0.01745503, -0.01848472, -0.02489750, 0.16132921, -0.10524006, 0.07653377, -0.11329337, 0.14136922, -0.10117901, -0.03490316, 0.10422599, 0.04591795, -0.03415687, 0.06542240, -0.10063386, -0.06939545, -0.08292596, -0.16162235, 0.01870311, -0.06647712, -0.09863724, 0.04318596, 0.00974247, 0.01629086, -0.09169848, -0.05518340, -0.06159320, 0.02393464, -0.03564408, -0.06872375, -0.04798340, -0.04216531, -0.05848299, -0.02110061, 0.05188221, -0.08133001, 0.07143217, -0.02118470, 0.13237572, 0.02373886, -0.10425065, -0.00910788, -0.01163727, 0.03172842, -0.06363671, 0.12483626, 0.07587706, -0.10589609, -0.13460076, -0.02934681, 0.17061350},
  {-0.00730829, -0.02158807, -0.11531103, -0.10297783, 0.02957225, -0.14279284, 0.00253917, 0.01006159, -0.01900393, -0.05727093, -0.11457781, 0.10047023, -0.21158667, 0.00363063, -0.01697428, 0.04067951, -0.01219754, -0.02584877, -0.06778210, 0.04923220, -0.01715986, 0.05668902, 0.12005083, 0.05713958, -0.02604546, 0.07163606, 0.05324579, -0.02154142, 0.08804424, -0.11708105, -0.01050022, 0.02542140, 0.16103142, 0.04387342, -0.02508385, 0.05401712, -0.04416902, -0.12196644, 0.00844986, -0.07204822, -0.03325269, 0.00895291, 0.04599403, -0.11388757, -0.09969401, -0.18487519, 0.09306996, 0.00483553, 0.05257120, 0.09401223, 0.11089072, -0.00648569, -0.02632872, -0.04301101, -0.07784137, -0.02710973, -0.04318379, -0.07203592, -0.12592392, -0.08179718, 0.17186229, -0.04643183, 0.00642311, -0.05360939, -0.00739404, -0.04426406, 0.04313569, -0.07594568, -0.10524821, 0.06919651, 0.09669502, 0.04004269, 0.14960949, 0.01314908, 0.06170468, -0.01778959, 0.02397458, -0.07813613, -0.25571901, 0.08794510, -0.05129153, 0.08381499, 0.05514487, -0.01030983, -0.09246288, 0.01392090, -0.00603359, 0.03514103, -0.05394988, 0.11606067, 0.01673281, 0.01214621, -0.01490572, 0.00235024, -0.00227179, 0.08329785, -0.07929797, 0.04685644, 0.02450794, -0.00917668, -0.10165717, 0.06310648, -0.04837050, -0.02962052, 0.16871165, 0.05894709, -0.01781460, -0.00615910, -0.02595174, 0.07765190, -0.02980301, 0.05205677, 0.07996459, 0.01445473, 0.08245236, -0.04568007, 0.05305717, 0.00058592, 0.12251471, 0.02014411},
  {0.09491093, -0.01628128, 0.03120556, 0.07903489, 0.00415844, 0.03771505, 0.04643779, -0.08912622, 0.04806013, 0.06801447, -0.04479118, -0.05243884, -0.06048836, -0.02331936, 0.07533786, -0.00504639, -0.04407483, 0.09274655, -0.08979671, 0.00203276, -0.02267219, 0.15825191, 0.10768164, -0.02753503, -0.11242163, -0.05046354, 0.13525362, 0.02275753, -0.11323957, -0.02741446, -0.20217223, 0.02504359, -0.10915877, -0.05399685, 0.07532333, -0.10101783, 0.13645358, -0.00009773, 0.01477895, 0.00457582, -0.05387690, -0.10130406, 0.19790453, -0.07495482, -0.15317598, -0.04892535, 0.05143905, 0.08959147, 0.10897046, 0.05349422, 0.05888084, 0.06139654, -0.01587157, -0.15188675, 0.07350881, 0.04383185, 0.08281786, -0.03490768, -0.01464501, 0.09688729, 0.17158240, 0.12298983, 0.10196505, -0.15516022, 0.00694468, 0.02603494, 0.05179092, 0.12664919, 0.13941434, -0.09943693, 0.05235811, -0.00462740, 0.08218919, -0.09381753, 0.07364681, 0.07463824, 0.17098469, -0.03720828, 0.01257317, -0.15981415, -0.07858367, -0.05411663, -0.08544353, -0.02227872, -0.02412052, -0.15755425, -0.21232437, 0.07771074, 0.06389237, -0.06317280, 0.04699998, -0.05867046, -0.05440456, -0.09790702, 0.05964818, -0.01934332, -0.11824483, 0.06783180, -0.08706341, -0.00766002, -0.09768432, -0.10163596, 0.08561689, -0.08159430, -0.00839708, 0.09215482, 0.07895166, 0.00082875, -0.06941652, 0.02019785, -0.05137113, 0.08863641, 0.20295270, -0.02887292, -0.00019325, -0.01947848, -0.00624512, -0.18327306, 0.11501388, -0.07992496},
  {0.08385201, 0.03129249, 0.08727999, -0.00349176, 0.08095892, 0.18239506, 0.00770021, -0.07529369, 0.05877442, 0.06483136, 0.05858004, -0.02059890, 0.16110055, 0.00135363, -0.19098274, -0.02032560, 0.15035546, 0.07202500, 0.06891480, -0.03954847, 0.07359002, 0.09929623, 0.13370679, 0.02554924, -0.00747522, 0.04988202, 0.08380944, -0.05574363, -0.14368898, 0.00790205, -0.10598350, -0.02469741, -0.10167166, -0.05948508, -0.11106415, -0.14537793, 0.03056290, 0.02858433, -0.10335495, -0.01723493, 0.00788385, 0.10547397, -0.04386270, -0.05472160, 0.07552309, 0.07803843, -0.00214863, -0.06526152, 0.18971719, -0.13802274, -0.04057132, -0.06619119, 0.07845375, 0.05770650, -0.00633208, 0.03931575, -0.10633152, -0.02973000, 0.04087513, -0.04668323, -0.04290862, 0.03999484, -0.11805169, -0.05314017, 0.04333896, 0.01902001, 0.05982993, 0.05409307, 0.10152543, -0.04533229, -0.17396784, 0.03223411, 0.10249724, 0.01921979, -0.09506134, -0.06164821, 0.06742953, -0.10729143, 0.07631110, 0.20456183, 0.06984071, -0.09799651, -0.08836715, -0.10614286, -0.04500772, -0.09612005, -0.07473221, -0.04123302, 0.02393596, 0.08523083, 0.08431286, -0.07402309, 0.18080920, 0.04347088, 0.00171131, -0.22106290, 0.14810443, 0.01276590, -0.06448109, 0.03810917, 0.01874118, -0.01683403, 0.10574660, 0.01745142, 0.10707789, -0.07023165, 0.08456700, -0.14230309, 0.08297693, 0.05150077, 0.09174914, 0.04918307, 0.06200949, -0.06111241, -0.09162654, -0.06883056, 0.00142415, -0.03301404, -0.11082123, 0.25072369},
  {-0.03990206, 0.04179389, 0.01132916, -0.01541549, 0.02053507, 0.07863100, -0.12874743, -0.10583236, 0.02436474, -0.08928459, -0.05455354, 0.07586287, -0.19293086, 0.05354699, 0.14174448, -0.21191151, -0.00978826, 0.13436639, 0.00507985, 0.19218814, 0.06710796, 0.22314590, -0.00237172, 0.16740415, 0.04759181, -0.02831923, 0.03278099, -0.08243025, -0.01109916, -0.03624137, -0.09100006, 0.02570728, -0.13856125, 0.05725886, -0.10439849, 0.00842659, 0.04555982, -0.03172331, 0.02161008, 0.13687611, -0.01462244, 0.08928854, 0.23131812, -0.08603180, -0.06344923, -0.07373926, 0.07390512, -0.13277374, 0.01236584, 0.02739163, 0.08642297, 0.03329571, -0.01436522, 0.00570054, 0.03955576, 0.09890381, 0.02994071, 0.04288622, -0.18698192, 0.02995662, -0.03328707, 0.14580812, 0.07509426, 0.00622432, -0.21345125, -0.04004048, 0.13697052, 0.06507989, 0.13727693, 0.10109370, 0.06291495, -0.03431947, 0.25561219, -0.16200042, -0.04398812, -0.12026354, 0.09659386, 0.04248536, -0.05061884, 0.09120314, 0.03403091, -0.03576742, 0.00691075, -0.23743840, -0.01491535, -0.26177216, -0.06714102, -0.00629940, 0.08831690, -0.09691693, -0.01714000, -0.03441966, -0.14306889, 0.06107579, 0.05291479, -0.16018981, -0.13266152, 0.08714312, -0.02690493, -0.10016076, -0.12534980, 0.02563434, -0.03837567, -0.00742269, 0.04384352, -0.10324595, 0.17916392, 0.04431201, -0.24993025, 0.05023502, -0.01050112, 0.14713679, -0.10165415, 0.01716563, 0.19465724, 0.06306119, -0.18004303, -0.22421259, 0.17837538, 0.12450773},
  {-0.03575586, 0.16471986, -0.04582281, 0.02064848, 0.24421546, 0.14904159, 0.11234382, -0.08977538, 0.11565230, -0.08713953, -0.10661869, 0.00779274, 0.04289648, -0.03711101, -0.01707736, 0.06578694, 0.15872860, -0.03018119, 0.00177954, 0.08951621, 0.04356991, 0.18600480, 0.04908416, -0.01114233, 0.11095686, -0.03085833, 0.04416230, 0.03644420, -0.04637069, -0.03243287, 0.03574125, 0.04180557, -0.06976199, 0.00046552, 0.00150939, -0.18875520, -0.27026370, 0.04909831, 0.03851022, 0.04178421, 0.04133447, 0.11355394, -0.08475704, 0.06137369, -0.05302805, 0.03368849, 0.04081320, -0.00206942, 0.19198641, -0.06541780, -0.01533398, 0.06712311, -0.00464129, 0.13141853, -0.06540298, -0.02290318, 0.02744578, -0.01409401, -0.09345075, -0.05049622, 0.02389556, -0.04073580, -0.09686007, 0.09130517, -0.03517658, 0.13582399, 0.14409228, 0.05502405, 0.02802471, 0.02465061, -0.01918812, -0.03888529, 0.11948293, 0.08745836, -0.06378268, -0.11451425, -0.01744829, 0.02465062, 0.02949845, -0.03224003, 0.04032451, 0.13108900, 0.02696608, 0.04203963, 0.05906824, -0.13979697, -0.11361435, 0.04681628, -0.16696113, 0.10586981, -0.01783410, 0.01350834, -0.01433233, -0.06171635, -0.03425835, -0.15523243, 0.10037948, 0.00425835, -0.01264846, -0.02990260, 0.01913689, 0.05887275, -0.17376159, -0.02244222, 0.00689125, 0.03532949, -0.05722370, 0.01206068, -0.05069605, 0.07854465, 0.07041691, 0.10418726, -0.03702181, -0.07072832, 0.06960083, 0.01601612, 0.04008678, 0.14950922, 0.11417815, 0.13923295},
  {-0.02117971, 0.17870252, 0.03413746, -0.07743868, -0.02530650, 0.10688596, -0.16837238, -0.08321299, 0.21568890, 0.06152651, -0.02015753, -0.18868053, 0.09988791, 0.16049314, -0.03866243, -0.06736014, 0.09700172, -0.03478807, -0.04665257, 0.08129764, -0.07827301, 0.22597292, -0.05868211, -0.08361790, -0.05893803, -0.05970925, 0.19105615, -0.07630570, 0.01336563, -0.01486075, -0.09422536, -0.18937692, 0.08095704, 0.17632529, 0.03106256, -0.20244725, -0.34236965, -0.24742943, -0.06950805, -0.21408747, -0.03716062, 0.11323667, 0.05294416, -0.22048423, -0.08186804, -0.00864534, 0.15191907, -0.10921403, 0.21967085, -0.12603244, 0.07765548, -0.01879054, -0.07919035, -0.01089192, 0.06821205, -0.21983674, -0.00244735, -0.18500730, -0.18748808, -0.15011190, 0.21557172, 0.00424433, -0.09936062, 0.13379054, -0.06409018, 0.17793676, 0.19089183, 0.18313794, 0.09701861, -0.03858874, -0.20795560, -0.12888308, 0.18165274, -0.10207744, -0.06953120, -0.10534232, -0.00718351, -0.06851398, -0.16550644, 0.22715540, -0.03961799, -0.11589096, -0.05817057, -0.11406017, -0.08270793, -0.31269124, -0.09633982, 0.02981211, 0.05900230, -0.02623726, -0.00593607, -0.06040340, 0.01928546, -0.03153230, 0.02661300, -0.12928723, -0.19070347, -0.11461076, -0.11131910, -0.03768012, -0.08482245, -0.02752605, -0.05468940, -0.00649862, 0.18494499, 0.05506492, -0.14793977, 0.05285654, -0.22763905, -0.08238617, 0.02261415, -0.01301041, 0.16451527, -0.05977077, -0.12759946, 0.07308256, 0.21168493, -0.15054204, 0.01408342, -0.00780710},
  {0.11813883, -0.00242568, 0.05120632, 0.08943000, -0.02686370, -0.05633806, 0.08936331, -0.02371168, -0.13222182, 0.01265091, -0.22490117, -0.02273986, -0.16441992, -0.06801941, 0.25140798, 0.09814426, 0.04356895, -0.09275642, 0.02079907, 0.10268789, -0.04445845, 0.14654689, 0.10691720, -0.05078906, -0.09146429, -0.10899192, 0.08655862, -0.08391614, -0.00739580, -0.04366552, -0.08168472, -0.12534954, -0.08778617, 0.03390916, -0.05850713, -0.04907743, 0.12950805, 0.04761519, 0.10745441, -0.04058107, -0.06763303, -0.23057649, 0.17791322, 0.06579441, -0.14443792, -0.18494137, 0.00772251, -0.06736870, -0.02371550, -0.03237843, -0.06407065, -0.09966090, 0.02287018, -0.12002291, 0.07001055, -0.05196328, -0.07098795, 0.00918513, 0.02265761, 0.00283482, -0.00320398, 0.13783635, -0.02704272, -0.19132897, 0.10447001, 0.06353528, -0.08749215, 0.17798385, -0.04656119, -0.06692394, 0.10183668, 0.12464695, 0.13787982, -0.07366298, -0.09014100, -0.08253948, 0.01852759, -0.09657690, 0.00911510, 0.06727415, -0.01759272, -0.05402573, 0.14478785, 0.04013877, 0.01142148, -0.06536634, -0.13498031, -0.04214618, 0.02861949, 0.03634416, -0.11501272, 0.09197688, 0.08952220, -0.10778090, -0.03269824, 0.02026347, -0.09640257, -0.10880964, 0.03176766, -0.00674487, -0.05491490, -0.08039436, -0.00378487, -0.09660803, -0.16631457, -0.11814367, -0.03541785, 0.14633521, -0.09619272, -0.02416403, -0.03139402, 0.10851305, 0.14648947, 0.07100327, 0.21621093, 0.02980597, -0.22979121, 0.00493529, 0.07175788, -0.05234329},
  {0.12006230, 0.00183942, -0.05318991, -0.04035789, 0.02905548, 0.09382100, 0.04319282, 0.01335636, -0.03824607, -0.02378676, 0.05742829, 0.11553269, -0.00146399, 0.06454283, -0.05347498, -0.05488500, -0.08588473, 0.11386346, -0.02241659, 0.08416305, 0.02393283, 0.08721949, 0.05557088, 0.06815070, -0.08080985, -0.07756981, -0.01044766, 0.04351637, 0.04803065, -0.06702209, 0.03198897, -0.00613806, -0.01185700, -0.02221505, -0.07051878, -0.06657380, -0.07974692, -0.07156423, -0.03549374, 0.10987479, -0.04796784, -0.02512429, 0.11511367, 0.03273238, -0.10655861, 0.14270370, -0.00484203, -0.08258393, 0.17029709, -0.00004679, 0.08235587, -0.02405829, -0.02179391, 0.17059863, -0.06587043, 0.14771496, -0.12027451, 0.02806265, -0.03313753, -0.03094782, -0.11254681, -0.11396761, 0.08439340, -0.01686156, 0.04884176, 0.08864410, 0.12164465, 0.08491845, 0.05912768, -0.07186715, 0.04470088, 0.02609773, -0.06577250, 0.01206166, -0.21398512, 0.11140263, -0.05100732, 0.07943729, -0.07278980, 0.08579855, 0.07046708, 0.05176143, -0.02445030, 0.06027086, 0.04056282, -0.03848670, 0.02865005, 0.04506385, -0.02615419, 0.05069887, 0.09994464, 0.15552428, -0.00026799, 0.15946577, -0.13254653, -0.02156696, -0.05618830, 0.00836843, -0.03641683, 0.01647390, -0.15574309, -0.02594491, 0.03750646, 0.09560994, -0.02088278, 0.03453770, 0.12908444, -0.13482103, -0.00606082, -0.05761560, 0.02900947, 0.02888564, -0.21108520, 0.08177280, -0.00756585, 0.02510568, 0.04421086, 0.03945317, -0.00503587, -0.01890143},
  {0.06023932, 0.02737521, -0.05866128, 0.05982278, 0.14163974, 0.02166681, -0.10986272, -0.09241043, -0.01073241, -0.11490994, -0.07116324, 0.03165887, 0.01128509, -0.08039288, -0.17412968, -0.01260526, 0.03822470, -0.11346344, 0.01607963, 0.07477903, 0.02094773, 0.01489574, -0.02345072, 0.17357394, -0.07022743, 0.00647187, 0.16236545, 0.01198975, -0.03448889, -0.12970887, -0.10280437, 0.03977895, -0.06291802, 0.08015226, 0.08295999, -0.13093886, -0.15381940, 0.09908871, -0.20531644, 0.00617797, 0.01239427, 0.20033348, 0.00048414, 0.12440643, 0.09875620, 0.16128413, 0.04737572, -0.05043642, 0.15927601, 0.07913555, -0.06956293, 0.05516513, 0.10878819, -0.00201583, -0.05199607, -0.06723627, -0.11481565, 0.06551725, 0.00485868, -0.11723796, -0.03226785, -0.07560731, 0.02189005, 0.04829811, -0.01047195, 0.08360258, 0.03595002, -0.17385706, 0.09034862, -0.10443421, 0.01463730, -0.15137595, -0.00544935, 0.04337221, 0.12512405, 0.00645948, 0.13670865, 0.07554147, 0.05928858, -0.10318938, -0.00871729, -0.12275798, -0.15352568, -0.04813849, -0.09874936, 0.04241073, -0.02113032, 0.07460711, 0.05664674, -0.14762588, -0.09218310, -0.03954101, -0.05583919, 0.01909246, -0.02802480, -0.09803689, 0.00424621, -0.08301283, -0.10426240, -0.13276829, -0.08512259, -0.10893594, -0.01565397, -0.07321959, 0.03637055, -0.04904807, 0.11521824, 0.00749036, -0.01004968, -0.04324546, 0.02306110, 0.15771274, 0.02887344, 0.03502046, 0.02833543, -0.05106631, -0.09732836, 0.07235182, 0.00047490, 0.18413544},
  {0.04045359, 0.05082901, 0.07570921, -0.08369678, -0.04031690, 0.01898571, 0.01195811, 0.07285737, 0.01934710, -0.02575829, -0.17078555, -0.03043249, 0.05928658, 0.00018638, 0.01053471, -0.12388541, -0.07883418, -0.04121256, -0.06200019, -0.02543890, 0.11062419, 0.10271259, -0.16062927, -0.01374424, 0.04642038, 0.00181887, 0.02616494, 0.05599047, -0.09375246, 0.02747156, 0.00504249, 0.06972815, -0.09598699, -0.06731820, 0.07417877, -0.11817253, -0.02963647, 0.03086875, -0.09589683, 0.01252768, 0.07822879, -0.06553646, -0.08428339, 0.06541867, 0.09159575, -0.07236156, 0.06005919, -0.03281287, 0.08025880, 0.03501403, -0.15942344, 0.15521015, 0.02401324, 0.04113257, -0.00741738, -0.03684673, 0.04382513, 0.06844790, -0.06748175, 0.02780511, 0.00856004, 0.01383669, -0.15150672, 0.06970121, 0.02888203, -0.03872270, 0.01579325, -0.13782649, 0.10882347, -0.03689357, 0.02045484, -0.02946537, 0.16996321, -0.03457076, 0.01332035, -0.14827876, 0.13807425, 0.08162775, -0.02808550, -0.06774066, -0.10548125, 0.03883521, -0.10155381, -0.00073483, 0.04646220, -0.02504754, -0.10705092, -0.10853125, -0.01175803, 0.02193248, -0.00373842, 0.01452719, 0.00655763, -0.02191708, -0.14532852, 0.10497218, -0.07365070, 0.06555472, 0.00549024, -0.05822318, -0.01402815, 0.04925132, -0.11018720, 0.02752685, 0.03326177, -0.11903917, -0.01412526, 0.08129746, -0.08357411, -0.05721015, 0.03411521, -0.02953060, 0.04845573, -0.08574455, -0.04496431, -0.03785328, -0.10873231, 0.09019911, -0.08355093, -0.01209623},
  {-0.02040615, 0.09743916, 0.08066949, -0.11775603, 0.03090621, -0.07181572, -0.03104747, -0.08814402, 0.03770866, 0.03556881, -0.04225390, -0.05960048, -0.02599143, -0.02468006, 0.03701955, 0.07360576, 0.04568772, 0.06033483, 0.08005679, 0.03005814, -0.02493028, -0.18302138, 0.01464051, -0.04932779, 0.09832399, -0.08368680, 0.00481212, 0.02827497, 0.09513956, -0.02357825, 0.08665544, -0.06989490, -0.09018769, 0.15636934, -0.04327038, 0.05659188, -0.00902920, -0.02828178, -0.01837919, 0.02362533, -0.07867179, -0.03559235, -0.02671767, -0.01707618, 0.09026390, 0.07511979, 0.18099855, -0.05411542, -0.05901094, -0.14365526, -0.03156948, 0.05100491, -0.08850161, 0.09524259, 0.04591076, -0.01116836, -0.06773251, 0.02779746, -0.00639042, -0.08574685, 0.13980605, -0.09475048, 0.08416238, -0.01592848, 0.07994238, 0.00741411, 0.04575600, -0.04103181, -0.06746011, -0.03135172, -0.00173831, -0.12731659, -0.04609857, -0.03669703, -0.06902701, 0.02660654, 0.08706442, -0.10533171, -0.05020447, -0.06853686, -0.12717606, 0.11784685, -0.04466191, 0.12291399, 0.02872946, -0.12667292, 0.15997018, 0.06059480, -0.17139089, -0.07235331, -0.09317389, -0.04066568, 0.03086844, -0.03129921, -0.08808453, -0.01512787, 0.06619748, -0.04292094, 0.01318309, -0.01779626, -0.12954618, -0.10249218, -0.06161153, 0.04764455, 0.03812359, -0.02644073, 0.02104266, 0.01682322, 0.02738198, -0.10238592, 0.04750038, 0.01195388, -0.00130397, -0.05707942, 0.02696530, -0.02012332, -0.01235652, 0.11199774, -0.04991874, 0.04213650},
  {-0.03786015, -0.03074188, -0.12823297, -0.03191326, 0.14882344, 0.05631223, 0.00837892, -0.11866017, -0.05255478, -0.01047657, -0.23649800, -0.07279945, -0.00253688, -0.06077339, 0.14938125, 0.09099923, 0.09716537, -0.03052896, 0.03858943, -0.01915466, 0.11268618, -0.04792027, -0.02428931, 0.03065462, -0.01947630, 0.05612372, 0.18457876, -0.11556934, -0.07628025, -0.03293079, -0.02239909, 0.04348652, 0.00918587, 0.03703491, 0.07561190, -0.02127103, -0.04103918, 0.03037627, 0.10446482, -0.05922389, 0.04083259, 0.02585220, -0.05568259, -0.08686042, -0.08070338, 0.09745572, -0.06690440, 0.06548333, 0.11908993, -0.01507413, 0.02119382, 0.02841796, 0.03278859, 0.11513157, -0.02624413, 0.08653941, 0.08193399, 0.08404636, 0.00967612, -0.16861634, -0.08978043, -0.07135511, 0.13912222, 0.11710611, -0.08198729, 0.08310951, 0.08823136, 0.11702631, -0.04619990, 0.07529939, 0.03188361, -0.15477072, -0.00154551, -0.10266680, -0.15523435, 0.03187251, -0.05412654, 0.07656975, -0.04883851, -0.05714852, -0.06931513, -0.06594174, -0.07049134, 0.17088440, 0.07327341, -0.08411390, 0.01974388, -0.07732451, -0.04550573, 0.07432779, -0.00772426, 0.07122006, -0.09887749, -0.08597057, 0.02436842, -0.09388752, 0.04872857, 0.03793116, -0.02386058, -0.11747112, -0.01563297, -0.10713058, 0.08679634, 0.03105076, 0.11821111, -0.10097691, 0.00264754, 0.04561036, -0.12109787, -0.09466339, 0.04922008, -0.09001108, 0.08716434, -0.04017900, 0.02340399, -0.07918571, 0.05455259, 0.11475218, -0.05471561, 0.05549890},
  {-0.08239999, 0.01471892, 0.05837519, -0.10528744, -0.08621907, -0.16041534, 0.03927414, 0.06596902, -0.02195151, 0.00706188, -0.01154825, -0.08440836, 0.00055057, 0.00133208, -0.05204637, -0.03751652, -0.04006569, -0.14470722, -0.10795800, -0.13281055, 0.09220092, 0.06772006, 0.03812430, 0.09033326, 0.07910678, -0.00929482, 0.02235408, -0.08132005, 0.03215883, -0.03771400, 0.08355993, 0.09355874, -0.25306323, 0.07781266, 0.09881379, 0.03009860, -0.02932348, 0.00878669, -0.03064067, -0.03241795, -0.03058623, 0.01332029, 0.03096355, 0.13450132, -0.06881560, 0.02213117, -0.18921430, 0.01927871, -0.04432885, 0.21005784, 0.07357906, 0.00436160, 0.00411593, -0.08717825, -0.01049558, 0.02696490, -0.09530757, -0.14548349, 0.00704490, -0.12918650, 0.07322477, 0.06298654, 0.01367441, 0.10080553, -0.03593095, 0.10850158, -0.05384862, -0.04505680, -0.06851736, 0.06444377, 0.01762103, -0.12050010, 0.07754236, 0.03193977, -0.15676345, 0.14003038, -0.05497739, 0.04620417, 0.04703675, -0.15895499, -0.24306078, -0.10875845, 0.02495872, 0.05910955, 0.02722096, 0.01481094, -0.04264908, -0.04669716, 0.01108070, -0.01502934, 0.00336547, 0.06835882, -0.03460614, 0.15998241, -0.01659667, -0.01364472, -0.05562017, -0.02222176, -0.01736330, 0.06806998, -0.09474354, -0.11417879, -0.02134191, -0.06749287, -0.05622067, -0.04327388, -0.09179114, -0.03450176, -0.10609421, 0.01447488, 0.09737664, -0.14711483, -0.05287014, 0.09785006, 0.05276587, -0.05399809, -0.10593903, -0.13118327, 0.02814984, 0.12684953},
  {0.25052673, -0.04694265, -0.04679703, -0.09572531, 0.16139443, 0.02408418, 0.02034812, -0.04540965, 0.06492342, -0.09156846, -0.15719865, 0.07694329, -0.03331056, -0.29701644, -0.02040198, 0.05574076, -0.12220792, 0.01402052, -0.06055448, -0.00451393, 0.22266220, -0.13833232, -0.14056981, -0.01351592, 0.06264650, -0.09639635, -0.00896746, 0.00780573, 0.04084503, -0.12891859, -0.12677746, -0.00707042, -0.01563790, -0.05571979, -0.06936176, -0.05553268, -0.09393080, 0.17796524, -0.05258625, -0.07816482, 0.01642839, -0.00271297, -0.05236999, 0.09329340, 0.12778579, 0.21509258, 0.00121599, 0.08680257, -0.00778089, 0.09894007, -0.08242777, 0.08238358, 0.11239197, 0.09634069, -0.29979295, 0.12694199, 0.20482671, 0.24344341, 0.11607634, -0.05982032, -0.06573962, 0.10612635, 0.04733771, -0.10559510, -0.26435864, 0.01520535, -0.05698467, -0.11893806, -0.14911303, 0.01274939, -0.14858970, -0.07175443, -0.01983926, -0.02207310, -0.05918175, -0.23123115, 0.08747534, -0.02029928, 0.08448657, 0.02833220, -0.04047500, 0.15668935, -0.20752943, 0.08281336, 0.18616048, 0.10086480, 0.10588703, 0.07047964, -0.11493912, -0.03733908, -0.09902733, -0.17992559, 0.18287656, 0.06100214, -0.04600627, -0.06760542, 0.22352664, 0.04298127, -0.07299370, -0.12632982, 0.06203739, -0.06256592, -0.04377142, -0.05681785, -0.24003784, 0.01125946, 0.13748316, -0.12886392, 0.08867487, 0.02410350, -0.16952382, 0.04757976, -0.12697707, 0.00624816, 0.03674033, 0.05759968, -0.03129084, 0.20065360, -0.21581341, 0.16480079},
  {0.09401587, 0.00805974, -0.00019209, 0.05929149, -0.03154578, -0.11263937, -0.10692616, -0.10293902, 0.03846364, -0.06507475, -0.08651178, 0.03084296, 0.04054986, -0.00049129, -0.03251369, -0.08308460, 0.02600594, 0.00442268, 0.04468798, 0.10607237, -0.03624988, -0.07705742, -0.00889973, 0.06854862, 0.13810322, -0.08434208, 0.06676749, 0.01005129, -0.03804927, -0.01015182, 0.00688922, 0.00040424, -0.04477091, 0.07712331, 0.08115376, -0.13382706, -0.05452634, 0.10251940, 0.01883560, -0.03085456, -0.09996494, 0.08590687, 0.04722935, 0.11155753, 0.08879654, 0.04293561, 0.07440627, 0.00373540, -0.06896807, 0.06199954, -0.08560450, -0.03440563, 0.00617639, 0.05697300, -0.03599911, 0.01286413, -0.08122322, -0.06290641, -0.05142391, -0.07159702, -0.01449050, -0.09232572, 0.14848027, 0.00742594, -0.00713040, 0.04429229, -0.01817810, -0.01539489, 0.13114934, 0.01999054, -0.02267333, -0.13325790, 0.04423453, -0.06271158, -0.05288923, 0.06637194, 0.02667049, -0.02212184, -0.15567674, -0.04048232, -0.09350982, 0.09857322, -0.03389909, -0.07008303, 0.05682277, -0.08845932, -0.03729812, -0.11195352, -0.01507120, -0.13954778, -0.02952633, 0.03640556, 0.08483811, -0.00290977, -0.07054686, -0.02246598, 0.04476979, -0.02408750, -0.06654333, 0.04463649, -0.02339986, -0.01996862, -0.06338401, 0.04373818, -0.05096581, -0.00776741, 0.03369304, 0.00120004, -0.03389858, 0.00466608, -0.05369273, 0.01508416, 0.07932960, -0.04597099, 0.00121804, 0.03885403, 0.08011819, 0.01614509, -0.09457335, 0.13700303},
  {0.12315375, -0.06027248, -0.08352130, -0.01080374, 0.11456832, 0.13160719, 0.09245554, 0.05994745, -0.04247833, -0.11266669, -0.22317868, -0.01955345, 0.04049356, 0.08515584, 0.07077076, -0.03528732, -0.05828805, -0.08462453, -0.08233090, -0.00749401, 0.10880863, 0.15509233, -0.18973041, 0.07611094, -0.07748728, -0.11027503, 0.05308299, -0.01868543, 0.01494819, -0.06598417, -0.10439555, 0.06321549, -0.07763692, -0.02408812, 0.05181097, 0.00619591, -0.01917063, -0.10094084, 0.03861015, 0.02459702, -0.12595770, -0.11095490, 0.05380589, 0.07772909, 0.06175202, 0.19015527, -0.06522079, 0.00783462, 0.11846403, 0.07328310, 0.02169078, 0.01080831, 0.04499525, 0.07319582, 0.02694684, -0.06843597, 0.00750027, 0.10407515, 0.03237937, 0.04733251, 0.05019972, 0.15659216, 0.00230918, -0.07576943, -0.07268681, -0.09832624, -0.00991652, -0.10108586, 0.03203157, -0.07665386, -0.13083339, -0.08280236, 0.02227486, 0.05154227, -0.06886303, -0.07323021, -0.02932971, -0.00531959, 0.03585989, -0.00612102, 0.07988086, 0.08194179, -0.04455266, -0.07051612, 0.05365933, 0.04664849, -0.26724613, -0.05378764, -0.12081427, 0.02811462, 0.00047266, -0.11146859, 0.06898788, 0.12523620, -0.12666847, 0.01385115, -0.11970983, -0.04218943, 0.02276961, -0.05820221, -0.10391708, -0.11319357, 0.02544661, 0.13244866, 0.01313033, -0.11615703, 0.11338624, 0.10861356, 0.04350200, 0.07942303, -0.06668818, -0.07469030, 0.01568590, 0.07518326, 0.01331932, 0.04137215, 0.06539404, 0.05398443, -0.07522522, 0.07770180},
  {-0.07718674, -0.01634458, -0.07550597, 0.05704948, -0.04881091, -0.00964562, 0.04268922, -0.09853155, 0.06878053, 0.05275201, -0.15746695, -0.02445105, -0.02300108, -0.06233925, 0.06586464, 0.07460280, 0.08667705, 0.11184075, -0.02119947, -0.06949095, 0.01492435, -0.03617077, 0.20515838, -0.05029562, 0.02874915, -0.12206253, -0.07480232, 0.07370169, 0.08261003, -0.03593511, 0.07559460, 0.07637679, -0.18544617, 0.12698589, 0.10432013, 0.09067311, -0.05600024, -0.10358682, 0.10526587, 0.08376606, -0.07474835, -0.02801883, -0.11585180, -0.07752845, -0.16286059, -0.26146495, 0.24311911, -0.06318456, -0.14817844, -0.17652194, 0.17877772, -0.05817051, -0.08172387, -0.14780924, 0.04963483, 0.06121837, -0.02832968, -0.02886492, -0.00000118, -0.08064946, 0.03356928, -0.18982770, 0.17708354, -0.04816778, 0.03361420, -0.00872467, 0.01754691, 0.25331351, -0.27743354, -0.03633967, 0.17350656, -0.05633267, -0.29694653, -0.13558120, 0.12601733, -0.02242031, -0.25037074, 0.03499340, -0.19599558, -0.19546285, -0.01161557, 0.04923594, 0.10319425, 0.19015528, -0.01205176, -0.04015267, 0.13366960, 0.00198913, -0.13165198, 0.30572864, -0.21657218, -0.03836004, -0.19033687, -0.24490750, 0.07083931, 0.33004460, -0.12422736, -0.06245999, -0.06830712, -0.06882621, -0.08341034, -0.04174755, 0.10227053, -0.10782655, 0.05608837, -0.05635148, -0.19433556, 0.07208605, -0.03067926, -0.06521871, -0.21613471, -0.26484492, 0.02087563, -0.05923369, 0.06594532, 0.06581947, 0.13957670, 0.04145028, 0.06209119, -0.27414683},
  {0.16858807, -0.01960990, -0.05296141, -0.00085166, 0.08363945, -0.07462966, 0.16595845, -0.04417650, -0.06301190, -0.02472531, -0.00442359, -0.18529944, 0.10761664, 0.00589010, 0.14057817, 0.11167509, -0.00583701, 0.18034478, -0.10849774, -0.03965231, -0.02686194, -0.15796252, 0.05804713, -0.11996871, 0.05512524, -0.10201787, -0.02735566, 0.01747859, -0.05789369, -0.06449322, -0.08760874, -0.04027594, -0.15229571, 0.03760652, -0.03116344, 0.01025281, 0.11119437, -0.00079316, 0.04910135, 0.05627329, -0.13005447, -0.21867840, 0.05784794, 0.06684547, -0.00622392, 0.07958992, -0.05189491, -0.05596034, -0.06938513, -0.02805662, 0.03465502, -0.08986646, 0.01785667, 0.14968681, 0.03573057, -0.16516186, 0.07838502, 0.08943510, 0.06016530, 0.04744182, 0.02941764, 0.11742549, 0.14373238, -0.07357102, -0.13160659, -0.05048518, -0.10815646, 0.07427588, 0.05724966, -0.00122256, 0.00439487, -0.10944787, 0.00400921, -0.11988058, 0.12569182, -0.24387006, -0.00043115, 0.07749397, -0.00823281, 0.14125012, -0.01944617, -0.09774838, 0.06502756, 0.05141174, 0.10969864, -0.10654309, 0.05114356, -0.07890427, -0.09006262, -0.12279166, -0.05243376, -0.05087160, 0.03282808, -0.09606666, -0.02393470, -0.18095320, 0.02800566, -0.02798744, 0.03856181, -0.07389581, -0.04934022, -0.04771341, 0.00269680, -0.01981797, -0.05350586, -0.04902043, 0.08889456, 0.12888856, 0.08901390, -0.02044189, -0.10029506, -0.06680524, 0.00789857, 0.06180631, 0.07622843, -0.00196924, 0.07811776, 0.10682810, -0.20121557, 0.08171506},
  {-0.10640838, -0.01878407, 0.05166390, -0.07581300, 0.02626226, -0.05591339, -0.11830121, -0.04410090, 0.08448255, -0.07756926, -0.10389198, -0.07291044, 0.08648551, 0.10949589, -0.09190535, -0.04803074, 0.01596707, 0.01179799, -0.08342423, -0.03476467, -0.01007297, 0.02120660, -0.17891213, -0.04784533, 0.12712319, -0.00536138, 0.01171440, -0.05528553, 0.03303062, -0.04989884, 0.02429298, 0.05192124, 0.01636374, -0.05798819, -0.09544732, 0.00631975, -0.01032694, 0.04793624, -0.11372638, -0.07035395, 0.04880544, 0.05900959, 0.09376388, 0.03344316, 0.12621397, -0.00325095, 0.06723624, 0.07679837, 0.09291219, 0.00027944, -0.04834755, -0.05082565, 0.09534345, -0.03085051, 0.07225147, -0.00676612, 0.03175254, -0.13397753, 0.07643367, 0.11526929, 0.01601688, 0.00689688, -0.02883817, 0.07393327, 0.01117431, -0.06563307, -0.03897896, -0.04262317, -0.01862626, -0.05699219, -0.12250029, -0.04834151, 0.12849846, 0.17622164, 0.09456912, 0.07829878, 0.02513213, 0.01100367, -0.05162277, 0.07384859, -0.07683360, -0.10010978, 0.02661595, -0.02334349, -0.09999033, -0.00342276, 0.08185825, -0.04054910, 0.10016315, 0.00748384, 0.01299262, 0.00905975, 0.05870683, -0.00240916, -0.04669843, -0.04483857, 0.00788018, 0.00194842, -0.01924314, 0.00821062, -0.05073746, -0.05636963, -0.17386663, 0.02435429, 0.06725025, 0.03596199, 0.07707370, 0.15068652, 0.13223010, 0.01781191, 0.15613441, -0.00835146, 0.06369724, -0.05010817, -0.11861879, -0.06283046, -0.04887553, 0.03290615, 0.01142508, 0.16982861},
  {0.08901788, -0.17243531, -0.13983491, 0.06077879, -0.05176112, -0.09504890, 0.16606443, -0.11506788, -0.01379507, -0.09546714, -0.12055337, -0.21336964, -0.06462301, -0.06828821, -0.00246444, 0.04775969, -0.07311203, 0.05773935, 0.05158177, -0.04750030, 0.02078551, -0.15399604, 0.03156861, -0.03798986, -0.13585594, 0.01581765, 0.06318906, -0.09795818, -0.11296547, 0.06364228, -0.13257377, 0.05243034, -0.12232216, -0.11290725, -0.12034872, 0.11557934, -0.00834723, -0.01516912, 0.12353310, 0.08001790, -0.01088265, -0.17904249, 0.04327887, -0.03951604, -0.04960366, -0.13089013, 0.00738418, -0.12061576, 0.09913029, 0.02775860, -0.03317484, -0.03344807, 0.01810160, 0.03292483, 0.04551668, -0.07080843, 0.06304407, 0.15012471, -0.06690621, -0.05386166, -0.19698845, 0.02344618, -0.03708278, -0.01400330, -0.01670811, 0.01227426, 0.06893747, 0.14405145, 0.15961038, 0.01660015, 0.01628908, 0.05725357, -0.03167877, -0.00105323, -0.05891468, 0.06484776, -0.02897040, 0.08020916, 0.16695434, -0.00428092, 0.05455979, -0.15886083, 0.01037345, 0.08496398, 0.13757026, -0.22337969, -0.02890643, 0.02886442, 0.17217779, 0.13755184, -0.09966510, 0.01602490, 0.05969872, -0.02713436, -0.09119635, -0.26010182, 0.08007372, -0.00395058, -0.07880241, -0.09834073, 0.01389012, 0.01726758, 0.15149140, 0.06815711, -0.08290594, -0.11942513, -0.01317711, -0.02488525, -0.01063514, -0.04760177, 0.01357394, 0.01302543, 0.02816297, 0.09820980, -0.04234311, 0.04411392, 0.06537172, -0.19493233, 0.03642743, 0.03240153},
  {-0.01541218, 0.04943686, 0.16907842, -0.12314580, -0.02807900, -0.13577273, 0.07772002, -0.05826599, 0.04773766, -0.06217864, -0.14300422, -0.05564497, -0.16775671, 0.05447272, 0.01238631, 0.01130637, 0.11374665, -0.05457573, -0.04793784, -0.13341300, 0.10327075, 0.02970679, -0.04378122, -0.03426540, -0.06814423, -0.04286776, 0.11615350, 0.07622899, -0.08130341, 0.02425526, -0.01958120, 0.05881302, -0.00935447, 0.06934177, 0.05856184, -0.07816766, -0.07893296, 0.10093791, -0.10549718, 0.00318061, -0.05704576, 0.11416765, 0.02709145, 0.11565537, 0.06471448, -0.10992788, 0.00099779, 0.06833380, -0.10341614, 0.10202349, -0.01015064, 0.20126146, 0.03339110, -0.05759137, -0.07404660, 0.08776092, 0.09148225, -0.11684541, 0.02367633, -0.07379038, -0.00865076, -0.04816531, 0.03931750, 0.00927454, 0.02911376, 0.01556133, -0.05983252, -0.00686135, 0.03678767, -0.01502121, -0.04134769, -0.13210528, 0.07407706, 0.01851130, -0.13341828, 0.07587855, 0.03837917, -0.09449081, -0.15493102, -0.02251161, 0.02880643, -0.01200277, -0.09842330, -0.01959119, -0.12151574, -0.16345581, -0.15069304, -0.09483678, -0.00841793, -0.10526187, -0.13840207, 0.09091883, -0.13098192, -0.01888149, -0.04168952, -0.02278286, -0.00596252, -0.07596599, -0.06537447, 0.05171506, 0.01267268, 0.04616645, 0.04779064, -0.05480931, -0.08533997, -0.09364012, -0.04829772, 0.13926050, -0.16062383, 0.08841007, -0.09817261, -0.16279510, 0.12726675, 0.00291124, 0.08484434, -0.09203325, 0.10267469, 0.00163009, 0.23667239, -0.03113510},
  {0.08125003, 0.10668676, 0.00276664, 0.05436087, -0.07627171, 0.02520107, -0.07219288, -0.09861258, 0.11805027, -0.05869166, 0.07113966, 0.08175301, -0.17324322, 0.03487558, -0.01829923, 0.12389980, -0.04106053, -0.09251817, 0.08312840, 0.08249767, 0.03145975, -0.00453635, 0.14003587, 0.12271894, -0.09265968, -0.07979777, 0.07738567, 0.00487522, 0.03140689, -0.05949812, -0.05177097, -0.04631845, -0.28823987, 0.12853701, 0.02665201, 0.04796358, -0.08626744, -0.09629060, 0.10135526, 0.12970814, 0.03386500, 0.09500355, 0.12842830, -0.12369975, -0.17249925, -0.24907833, 0.14443319, -0.07974061, 0.01723294, 0.01157532, -0.03315992, 0.19606118, -0.03639162, -0.20924863, 0.03630482, -0.10755419, -0.05960845, -0.22889017, 0.01126453, -0.04957962, -0.06299915, -0.09317950, 0.12493911, 0.03673855, -0.11638386, 0.14828543, 0.05202993, 0.21857533, 0.08166430, -0.05845705, 0.21346550, 0.05565554, -0.13519356, -0.18775447, 0.00742810, 0.18301575, -0.20412652, -0.07728255, -0.09786287, -0.09931988, 0.08960076, -0.04386906, 0.15960960, 0.20443940, 0.07559320, -0.15294184, 0.08787724, -0.00711818, -0.01306075, 0.24876955, -0.21264023, 0.07266136, -0.00108641, -0.14542419, -0.01549419, 0.04987920, -0.08172152, -0.09811507, -0.03698722, -0.10876212, -0.01443906, 0.09402393, 0.08983868, -0.28632000, 0.15598212, 0.01573259, -0.02617081, 0.06593399, -0.17863600, 0.02234183, -0.06476437, -0.01214845, 0.15882292, 0.05458556, 0.05919315, 0.07758987, 0.05948676, 0.00283427, 0.13761710, -0.02311579},
  {0.09341909, -0.07490143, 0.14503530, -0.05678313, -0.01599609, 0.09675183, -0.09836205, -0.07269145, -0.01337796, -0.06331651, 0.00694329, 0.06602099, 0.17469370, -0.15212281, 0.15901056, 0.02020855, 0.01241534, -0.00251608, 0.06882697, 0.07158635, -0.03419244, 0.04048734, -0.08156675, -0.05942571, 0.02091875, 0.09516049, 0.00819592, -0.01592972, 0.09018205, 0.03000456, 0.03094588, -0.20064397, -0.03127331, 0.03620051, 0.00578871, 0.04436612, 0.05959534, -0.01892720, -0.06045729, -0.00449513, -0.09571193, -0.22471282, -0.17435898, 0.07751994, 0.16007844, 0.01676415, -0.13920385, -0.07710343, 0.03369175, 0.00698790, -0.24423283, 0.07926279, 0.12950373, 0.10703023, 0.00212913, -0.03792749, -0.00822738, 0.11734495, 0.08053993, -0.04694698, 0.03017712, 0.14201608, -0.11523847, -0.00402577, -0.06162401, -0.06928369, 0.05729901, -0.05438999, 0.03397277, -0.00144885, 0.10871691, -0.04881041, 0.00688285, 0.00926268, 0.14741708, -0.12364008, 0.27811146, -0.05713512, 0.12758133, 0.15490901, -0.09558685, 0.02521684, -0.02354410, -0.09140550, 0.00910200, 0.00148969, 0.03430226, 0.03910326, -0.09552602, -0.17253844, -0.01243374, -0.09586726, 0.12719804, -0.07235377, 0.05195557, -0.06008234, 0.17082752, 0.07877962, -0.04590781, 0.00977210, -0.07958707, 0.06286081, -0.06858367, -0.03547748, 0.01446022, 0.00067373, 0.16460817, 0.13874406, -0.02006824, -0.05392731, -0.13140273, -0.00275505, -0.07603150, -0.10681847, 0.11754467, 0.07698907, -0.05830086, -0.03275091, -0.20775704, 0.12188906},
  {-0.03521054, 0.13685256, 0.02528570, -0.01440177, 0.08167944, 0.01812978, 0.05289215, -0.04293395, 0.02883876, -0.02526362, -0.01744151, 0.02290979, -0.04241682, -0.08174185, -0.12521352, 0.10205641, 0.00833855, 0.04841474, 0.02794900, 0.09847978, 0.03600231, 0.09783729, 0.03633248, 0.21020071, -0.00192320, 0.05445359, 0.02323742, -0.05944132, 0.08414706, 0.01320646, 0.03996452, 0.04709530, 0.00589439, 0.05844592, 0.10590074, 0.04793108, -0.19056797, 0.04704346, -0.00413997, 0.12138455, -0.04006862, 0.06851000, -0.00247614, -0.02320041, 0.01765723, -0.04485945, -0.08883770, 0.07711131, -0.04907664, 0.02703027, -0.10050928, 0.00870707, 0.11124271, 0.06776554, -0.11268997, -0.03714531, -0.09596215, 0.15565214, 0.08590700, 0.01348815, -0.03265386, -0.13480003, 0.05343882, 0.11437892, 0.02632528, 0.14778185, 0.08172035, -0.04406773, -0.06826641, -0.12364312, 0.03659954, 0.06143837, 0.11471067, -0.00326575, -0.13091151, 0.10810964, 0.06660177, -0.08337218, -0.04843371, 0.00388600, -0.10326801, 0.12651806, -0.02561273, -0.09962741, -0.05274828, 0.11887999, 0.00706860, -0.11598629, -0.09694140, -0.05993468, -0.02951282, 0.01885453, -0.11031419, -0.04210153, -0.08962312, 0.08847386, -0.05594362, -0.05870270, 0.03243926, 0.04032568, -0.08892661, -0.11690663, 0.04259475, -0.07815634, 0.06554621, 0.00723640, 0.12152439, -0.13743807, 0.05593807, 0.01278927, -0.05258373, 0.06616604, -0.08594841, -0.04178599, 0.09562452, -0.04772589, -0.05784532, -0.05687995, 0.05954427, 0.02714818},
  {-0.08103128, 0.08309310, -0.08998451, -0.07707861, 0.12163128, -0.00409193, -0.19060859, -0.08614063, 0.02486732, -0.05342883, 0.00442836, -0.04229146, 0.01612897, 0.04032342, -0.11427646, 0.09187443, -0.02248082, 0.08248334, -0.08029883, -0.02848958, 0.16540870, -0.08672503, 0.01193256, 0.04384368, -0.08869080, -0.10570797, -0.01818538, -0.07133945, -0.05341008, -0.04709962, -0.08860002, -0.00544751, -0.00970543, -0.08150762, 0.00166256, -0.06191197, -0.03126588, 0.10492418, -0.18200894, 0.00088088, 0.04151255, 0.13540493, 0.13361192, 0.10204745, 0.04500100, -0.07458786, -0.03098870, -0.12838621, -0.03907704, 0.13211711, 0.01399395, -0.03670195, 0.02558346, -0.01399595, 0.00332389, 0.10543339, 0.05247428, -0.03136582, 0.04141845, -0.13057020, 0.03034943, -0.00720977, 0.04796324, 0.09832843, -0.07037472, 0.07966835, 0.00318768, 0.08054778, 0.09034987, 0.08643141, -0.03051304, 0.11206144, -0.11417344, 0.05464924, -0.07081784, 0.01365792, -0.01155882, -0.04839792, -0.10528665, -0.01571008, 0.05423532, -0.06809541, 0.02447644, 0.06171811, 0.03756005, -0.01121034, -0.06866772, -0.09285589, 0.03136605, 0.10676647, 0.00880798, 0.15686156, -0.11790676, 0.12874863, -0.05020514, -0.04866306, 0.07185937, -0.01787613, -0.08859800, 0.08900589, -0.03893814, -0.08175981, -0.04973655, -0.13683629, 0.06404588, -0.05261393, 0.09097350, 0.09727384, 0.00415898, 0.07423466, 0.05669193, -0.05022652, 0.04320517, 0.02285520, 0.05207512, 0.02542488, -0.06400567, -0.03069003, -0.01601274, -0.12326512},
  {0.03606323, 0.04420001, 0.06021924, 0.05754872, 0.15161683, 0.14958240, -0.07700647, -0.00379452, 0.11222129, -0.06283617, -0.12487469, 0.00756394, 0.18548150, -0.04938197, -0.04942901, -0.03721602, -0.02617830, 0.00846967, 0.08025865, 0.06694718, 0.06554195, 0.20796999, -0.05016869, -0.01167539, -0.02625833, 0.04124296, 0.01780912, -0.10143159, -0.05534255, 0.04878889, -0.01948465, 0.03391962, 0.13808182, -0.02679224, -0.06075224, -0.08591690, 0.00812487, 0.03207579, -0.01805702, 0.01961449, -0.03074923, -0.06768091, 0.06680530, -0.08264850, 0.05924606, 0.10986583, 0.04932780, -0.10936411, 0.14342497, -0.02920742, 0.10929229, 0.05107380, -0.03715778, 0.14406574, -0.01747578, 0.07787023, -0.02514536, -0.03508491, -0.03293012, 0.01232276, 0.03821722, -0.03895930, -0.07024523, 0.09852525, -0.04191237, -0.02751816, 0.06460539, -0.04275327, 0.03813932, -0.00714375, 0.00642160, 0.02806758, 0.02531102, 0.11279908, -0.03214698, -0.14334422, 0.12850057, 0.08443277, -0.10352688, 0.06650782, -0.01545219, -0.07081240, -0.09817674, -0.03548294, 0.10014766, 0.05880323, 0.04566106, -0.01245772, -0.08971120, 0.00560285, 0.17150073, -0.12405492, 0.09964540, 0.10329189, -0.05791977, -0.06634417, -0.05801332, -0.00759247, -0.01872996, -0.07520320, -0.09589877, 0.00020071, -0.14427838, 0.03053926, -0.00310502, -0.08724384, -0.10653159, -0.04555133, 0.06152523, -0.03735612, 0.07881625, 0.02998766, 0.02007877, 0.01696221, -0.00185733, 0.04479847, 0.08990590, -0.03093020, 0.01207400, -0.01698499},
  {-0.01103613, 0.08615313, -0.06005935, -0.02638648, 0.05125429, -0.03513733, -0.06306922, -0.02697399, -0.09413981, -0.05483628, 0.02768804, -0.06889088, 0.08764809, -0.05983857, 0.08460722, 0.07394911, -0.00808503, 0.11653167, -0.10655735, 0.00164161, -0.01650184, -0.10194033, 0.10952455, -0.08650834, -0.02768612, 0.02268758, 0.02296128, 0.04368104, 0.03150375, -0.00307673, -0.02612162, -0.09816771, -0.06124702, 0.11642399, -0.02305262, 0.01177865, 0.02866397, -0.06516110, 0.02580373, -0.07066534, 0.08168190, -0.04356081, 0.04147273, -0.08957338, -0.05119546, 0.02272607, 0.02410783, 0.07593087, 0.01957401, 0.02331553, 0.09747431, 0.09818822, 0.04574004, -0.00606912, -0.02604268, 0.02227298, -0.05425349, -0.04516120, -0.02617948, -0.06081214, 0.04055386, -0.05723966, 0.13707194, 0.06905086, 0.05726832, 0.00113915, 0.01413947, 0.07773934, -0.16154039, -0.04949708, -0.07056912, -0.10398297, 0.00640084, -0.01303722, 0.12400528, 0.10362972, -0.03728913, -0.02731988, 0.03291929, -0.05419568, 0.12842384, 0.05881013, 0.03584062, 0.00319445, 0.07957431, -0.06568110, 0.08243914, 0.05025065, -0.00235887, -0.05280906, -0.06691001, 0.06961603, -0.06595282, -0.00522873, -0.11165874, -0.07165235, -0.10325126, 0.09008543, 0.03713080, -0.07279269, 0.05648072, -0.10973186, -0.01244094, -0.06013589, 0.11066131, 0.07614946, 0.09796243, 0.08324475, -0.00699604, -0.08853240, -0.09686285, -0.03111703, 0.02541962, -0.07339701, 0.02707795, 0.03940110, 0.02332010, 0.04432074, 0.05997073, 0.10501122},
  {-0.09606598, 0.13453963, 0.03526009, -0.00288177, -0.14207774, -0.07991271, -0.06273454, -0.02087542, 0.06599394, -0.11737035, -0.00548864, -0.02921650, -0.09285256, -0.09186815, -0.08814724, 0.02117412, -0.03476360, 0.07294592, -0.02058188, 0.12004845, -0.05857872, -0.16227923, 0.05436568, -0.11503927, -0.12058073, 0.08479962, -0.03036994, -0.07977910, -0.03148293, -0.03085023, -0.03057866, 0.06731624, -0.18166727, -0.03868968, -0.09247102, 0.09816046, -0.13068941, 0.10422501, 0.01242611, 0.10327031, -0.09214427, -0.00166444, 0.02699457, -0.09164130, -0.04330502, -0.09070943, -0.10510803, 0.03148379, -0.15554994, 0.15807070, 0.14812315, 0.03907213, 0.09058449, -0.01691066, -0.10403285, 0.04771269, -0.06631293, -0.04913552, -0.06228687, -0.11966820, -0.11398146, -0.00855750, 0.11955816, -0.04771579, -0.17371881, -0.08286089, 0.03536158, -0.04605053, 0.14702146, 0.08759021, -0.00925109, -0.11048409, -0.03953569, 0.03352798, 0.02916754, -0.04804075, -0.09988102, 0.03872157, -0.04043737, -0.06213234, -0.05634852, -0.05506288, 0.08142624, 0.15031831, -0.06147824, -0.09876444, -0.02633448, 0.01946026, 0.02212151, 0.09285858, -0.03436567, 0.09051050, -0.03665915, -0.05311362, 0.02689542, -0.00875520, 0.04340134, 0.04143112, -0.08534814, 0.05519767, 0.00351221, 0.04315372, 0.14883602, 0.06044338, 0.04369512, -0.03406536, 0.09301477, -0.08068707, -0.12693904, -0.06806175, 0.07400783, -0.20554569, -0.06555276, -0.04384575, 0.00809484, 0.01064763, 0.03888355, -0.05509634, -0.11562297, 0.03382904},
  {-0.06920069, 0.14454314, 0.07849310, -0.03751029, 0.13082674, -0.13775846, -0.00210618, 0.01428477, 0.07210804, -0.02089409, -0.28494501, -0.00750110, 0.03701635, 0.04896760, -0.15560004, -0.05673907, -0.18367119, -0.09991881, 0.01527121, 0.00712072, 0.17518486, -0.01372670, -0.05842715, 0.06662652, -0.00125201, 0.02953241, 0.03712979, 0.01284896, 0.06950390, -0.07164406, 0.04326741, 0.05431182, -0.02911686, 0.04429941, 0.01772474, 0.03841858, -0.14471547, 0.19776791, -0.04979193, -0.04259947, -0.07606987, 0.02582862, 0.16244623, 0.17713930, -0.01613973, 0.14339490, -0.04472699, 0.03514476, 0.05709156, 0.13791424, -0.09613044, 0.09789416, 0.09385819, -0.01050520, -0.20160866, 0.15477595, -0.13168074, 0.09354615, -0.06578846, -0.02501027, -0.10206129, 0.10322709, 0.12829533, 0.16445537, -0.21260808, 0.09872389, 0.04154029, -0.09955554, -0.00583991, -0.03007011, -0.06434330, -0.14106007, 0.04965401, 0.09669499, -0.08271696, -0.10776219, -0.07102119, 0.03063765, -0.04993201, 0.06328502, -0.15974998, -0.00906555, -0.07715387, -0.03162842, 0.05616787, -0.04890957, -0.12088464, -0.01265279, -0.02468085, -0.06784136, 0.04093082, -0.02857706, -0.06509000, 0.08447973, -0.05928887, -0.02323259, -0.03221101, -0.04769223, -0.05748584, 0.05466528, 0.00863979, -0.04996894, -0.05072657, 0.03372212, 0.03833804, -0.08966455, 0.05400931, 0.07739404, -0.07159226, -0.09931590, 0.06882805, -0.10793538, -0.19013797, -0.00676917, 0.03411232, -0.07693192, -0.13966139, 0.12632586, 0.12494625, -0.13596769},
  {0.23367321, -0.03920785, 0.00188148, 0.05228928, 0.09672802, -0.03608002, -0.10539036, -0.00151727, -0.08856401, 0.08141003, 0.11473982, 0.00200117, 0.14531454, -0.06629357, -0.08881512, 0.11544382, -0.01140726, 0.09001198, -0.01349848, 0.03162978, -0.04025750, -0.10896661, -0.00846969, -0.13650431, -0.03608493, 0.00104797, -0.11375436, -0.01895672, -0.14979605, -0.12913698, 0.04771539, -0.02170145, 0.12886548, 0.02480133, -0.03274111, -0.00783163, -0.01043235, -0.08689553, 0.03804702, 0.00885892, 0.06516412, -0.04130571, -0.01358325, -0.12777752, 0.16852963, 0.19854338, 0.01613291, -0.11188739, -0.04074974, -0.00581764, 0.00979651, -0.01119201, -0.03143304, 0.15069541, -0.00850826, -0.02061588, 0.03885840, 0.14597315, 0.05916537, -0.04807970, -0.08444588, -0.13212095, 0.03496239, -0.04309236, -0.03882726, -0.02879003, 0.05182125, -0.11043259, 0.06084973, 0.09007356, -0.20342866, -0.12044395, 0.11478927, -0.03505939, -0.21497171, -0.02985367, -0.02717734, -0.01275715, -0.15328348, 0.12882544, -0.03638544, 0.11015417, -0.01217800, -0.05862138, -0.02435609, -0.05612803, 0.09560908, -0.12451082, 0.03465728, 0.01706205, -0.03232994, -0.04408420, -0.00216379, 0.07236085, -0.05875057, -0.14493474, 0.05267201, 0.07282601, -0.03230323, -0.05817873, 0.02888488, 0.05082455, -0.08787217, 0.11168735, -0.05816825, -0.10718954, -0.04246892, -0.02879282, 0.12671810, -0.05991926, -0.10193447, 0.03022124, 0.03445244, 0.07495215, -0.08964089, 0.07026187, 0.07504929, -0.06734382, -0.24734569, 0.19235496},
  {-0.05771569, 0.03590822, -0.09435878, 0.04869701, 0.00332404, 0.06863032, 0.06278135, -0.07766406, -0.07892835, -0.04121679, -0.00443742, 0.05678442, 0.04185544, 0.05270103, 0.09360304, 0.04363710, -0.09155033, -0.04781576, -0.01774882, 0.07803064, 0.12012196, -0.04975541, -0.04329335, 0.06496385, 0.04394824, -0.03937438, 0.02163791, -0.04160886, -0.00701344, -0.10135705, -0.12336467, -0.08936967, -0.07044534, -0.02920410, -0.07915829, 0.06496184, 0.08714104, -0.01345949, -0.01078294, -0.08793683, 0.04221391, 0.05136254, 0.10500534, 0.01868467, -0.03354163, 0.03740387, -0.00791429, -0.07844659, -0.03200242, 0.00094997, -0.07877217, -0.00775693, 0.11993884, -0.02829569, -0.04116379, 0.05841246, -0.10220536, -0.01838855, 0.09284130, -0.04441467, -0.04842519, -0.00308626, 0.10217139, -0.02816748, -0.01547104, -0.02119005, -0.01864861, 0.00511585, 0.00210261, -0.06900947, 0.00222460, 0.01410300, -0.04400913, -0.06562925, -0.04754767, -0.00297715, 0.02508034, -0.07444998, -0.08846873, 0.02400826, 0.00932409, -0.01959300, -0.00442859, -0.04482603, 0.11587314, 0.02562106, -0.06149463, -0.00516776, 0.14068362, 0.03307519, 0.03830699, 0.04519260, 0.05069113, 0.00613115, -0.04885567, -0.02439282, 0.06963301, -0.12208088, 0.07376718, -0.08212484, -0.12244513, -0.04798123, 0.13609794, 0.04452057, 0.04347233, -0.10853188, 0.08564026, -0.06171500, -0.07211863, -0.11005342, 0.09621055, 0.06559126, 0.07033692, 0.03016048, 0.03842035, -0.07100496, 0.05350087, 0.03770514, 0.09810939, 0.09756885},
  {0.11369849, 0.11337006, -0.06232901, -0.08649371, 0.03101346, -0.04803201, -0.01003004, 0.00925546, 0.10820383, 0.04515433, 0.01451031, -0.13358361, 0.10204417, -0.04547678, -0.06261564, 0.00103440, 0.00232523, -0.06336311, -0.03741461, -0.07313546, 0.08696011, 0.07372797, -0.16630156, -0.09850948, -0.04206128, 0.03590014, -0.11856832, -0.11438688, 0.01233360, 0.08440147, -0.01636707, 0.03028723, 0.16721642, -0.07376935, -0.06190801, -0.12454573, 0.14663105, -0.07344748, -0.12503207, -0.09008823, -0.03486809, 0.08648552, 0.02010898, 0.12659606, 0.00477819, 0.08082106, 0.04049075, -0.02068264, -0.04106155, 0.05782553, 0.03999850, -0.06393771, -0.02048317, -0.01114983, 0.10551005, 0.11378531, -0.00478451, 0.09738509, 0.06518061, 0.11450206, -0.07029810, 0.04858493, 0.09132008, 0.02416719, -0.05356929, -0.01931195, 0.05198239, 0.00343399, 0.04162087, 0.04230408, 0.01106637, 0.09074184, -0.03213553, 0.10109671, 0.09927103, -0.02448009, 0.03438264, -0.01447746, -0.01045668, 0.01454000, -0.03786869, 0.10379957, -0.10387751, -0.12341061, 0.02266245, -0.07709365, -0.10010207, -0.08265057, -0.00549684, 0.04312206, 0.10027666, 0.02154861, 0.18219879, 0.13165078, -0.14188808, 0.05841388, -0.02488066, -0.11679677, -0.08976381, 0.08460082, -0.06322642, -0.07466833, 0.07539450, 0.16614471, -0.01081418, 0.02139186, -0.09958861, 0.10586500, 0.08429366, 0.07323996, -0.02237655, 0.04922330, -0.07559988, 0.06475650, 0.04588762, -0.05118234, 0.08987206, -0.12659076, -0.07815110, 0.05500077},
  {0.11188555, -0.07187037, -0.08799418, 0.01927122, -0.00425547, -0.00452353, -0.08278952, -0.10794557, -0.05682966, 0.02584307, -0.17780395, 0.01478579, 0.05511812, -0.17713547, 0.03247746, 0.07510582, 0.10542896, 0.15007606, -0.03681286, -0.06402866, -0.03713606, -0.14052853, 0.15905519, -0.24006240, 0.06210661, 0.02577866, 0.11446023, -0.04761039, 0.10230507, -0.05145629, -0.03481086, -0.09492753, -0.23441878, -0.05525702, -0.03029158, 0.14255241, 0.07226127, 0.00445706, 0.09643202, 0.15632249, -0.06987096, -0.24779433, -0.07422126, -0.08738169, -0.17525163, -0.01294317, 0.05393118, 0.07359314, -0.09637964, -0.04828006, 0.06770317, 0.08751433, 0.04077144, 0.02344768, 0.06607997, -0.00463459, 0.15338357, 0.07969529, 0.05930898, -0.03780640, 0.00049163, 0.05734598, 0.13546760, -0.09220920, -0.19048497, -0.05717384, -0.07763550, 0.04771492, -0.01424140, 0.04290335, 0.09351941, 0.02750438, -0.02750038, -0.17398942, 0.06842905, -0.10196989, 0.02846208, 0.08172105, 0.11624995, 0.05467739, 0.12601230, 0.12700030, -0.00550356, -0.02224990, -0.02638690, -0.00469078, 0.17488645, -0.12011480, -0.09958422, -0.02047862, -0.09188181, 0.02808444, -0.04069152, -0.02579987, 0.06651665, -0.01619693, 0.04549038, -0.02796465, -0.12579146, -0.03621493, 0.13483129, 0.06500335, 0.11163215, 0.09286886, 0.01002109, -0.07654829, 0.04236627, 0.11532855, 0.06541669, 0.02062399, -0.02428857, 0.03210062, -0.00877046, 0.02013877, 0.13227460, -0.11910001, 0.13952447, -0.14753714, -0.02139682, -0.02742045},
  {0.13191077, -0.10884331, 0.01240809, 0.04894810, 0.07030015, 0.03203361, 0.03138269, -0.07835720, 0.00652534, -0.11232939, 0.04818730, 0.05493459, 0.11776744, -0.16148111, 0.09450840, -0.11195352, 0.14822826, 0.16416399, 0.06712282, 0.00489785, -0.01883919, 0.05467682, -0.08376294, 0.07412687, 0.01591026, -0.10842347, -0.03149306, 0.03422413, -0.04426291, -0.09777489, -0.00935434, -0.08219205, 0.02026367, -0.04588958, -0.02785735, -0.06611896, -0.14295076, -0.04500145, 0.08357905, -0.08433904, 0.01630362, -0.17404671, -0.08378682, 0.04125442, -0.01887954, 0.01789747, -0.00012545, -0.08829386, 0.05488939, -0.09412772, -0.02911886, -0.02223311, 0.13489622, 0.01120385, -0.08727971, 0.08565941, -0.09582968, 0.22522709, 0.05109545, 0.01104682, -0.02456019, 0.05537631, -0.06369288, -0.17549604, 0.01372689, -0.10963471, 0.05083562, -0.05275343, 0.09184662, -0.10544743, 0.11613520, 0.04430819, -0.07539611, 0.05055396, 0.02148264, -0.14677793, 0.11356051, 0.07544421, 0.05250298, 0.15584028, 0.14088076, 0.11944173, 0.05280504, -0.14413828, 0.10892023, -0.19850425, 0.00234078, -0.00243070, 0.04231360, -0.02546342, -0.02794966, -0.10291770, 0.00316113, 0.06926270, -0.10346279, -0.22284271, -0.01405035, -0.10853038, 0.04617775, -0.04117808, -0.00498723, 0.05744200, 0.02493638, 0.06507545, -0.10148960, 0.03636567, 0.10184728, -0.09960908, -0.03592240, 0.02930051, -0.04407384, 0.12993290, 0.02025483, -0.00074175, -0.02550223, -0.07243605, 0.12443107, -0.00874521, -0.14945565, 0.10521008},
  {-0.09505531, 0.18055642, 0.10845347, -0.07592331, 0.06536686, -0.10005201, -0.00608199, -0.05364067, 0.18124115, -0.01710595, -0.06691069, 0.09976752, -0.06103880, -0.00174543, -0.02238530, -0.03285275, -0.10580837, 0.00331742, 0.01192672, 0.08554216, 0.07638430, 0.07609245, -0.22370280, 0.11467155, -0.05045174, -0.09290779, 0.05841174, 0.02529565, -0.08113085, -0.00506616, -0.03063994, -0.00762262, 0.03378072, -0.01278631, -0.08470239, -0.09696108, -0.10945570, 0.00881520, -0.01616796, -0.01048885, -0.04551304, 0.07423349, 0.20111755, -0.01173765, 0.02580863, 0.04960250, -0.02974866, 0.01601054, 0.04019056, -0.05636343, 0.04045498, -0.07669048, 0.06383304, 0.08448461, -0.02302030, 0.09141020, -0.07885296, -0.20258147, 0.05094261, -0.06095384, -0.00285620, 0.05022290, -0.00344033, 0.15232624, -0.01997066, -0.10495666, 0.13439326, -0.01850752, 0.05155111, -0.00819204, -0.07102607, 0.11901115, 0.00302190, 0.03635233, 0.04444948, 0.12443484, 0.03061740, 0.04358123, -0.07003534, -0.10047227, -0.03064884, 0.02726576, 0.10586386, -0.12968166, 0.04347221, -0.07616302, -0.23586240, 0.01919186, 0.11248010, -0.04937208, 0.15163590, 0.06122360, 0.02359158, 0.17123626, -0.06040244, 0.04509808, -0.22813253, -0.06180744, 0.00115843, 0.05855165, -0.15129389, 0.05463687, 0.00518065, -0.15126088, 0.06171812, -0.04323493, 0.06969143, 0.04906851, -0.09374954, -0.11301725, 0.09658060, -0.00756718, 0.05211299, -0.10348795, 0.07529633, 0.01485976, -0.11816507, 0.02695001, 0.18963945, 0.02935949},
  {-0.09130726, -0.06149567, 0.00721534, 0.00286360, 0.03350183, 0.15297163, 0.16742672, -0.01042467, -0.05063210, -0.01301279, -0.15956271, 0.06185090, 0.03661813, -0.10099367, -0.01904070, 0.08432957, 0.06494136, 0.10857798, 0.07066983, -0.00247288, 0.02334609, 0.06736639, -0.01197192, 0.09082673, -0.00210678, -0.07252984, -0.05775360, -0.00900009, -0.11280326, 0.07618176, -0.07197307, 0.08407293, 0.03852247, -0.01486523, 0.05168287, -0.12131841, -0.11100610, -0.07358905, -0.06934133, 0.14523806, -0.03564063, 0.11176231, 0.05842470, 0.11399096, -0.01947573, -0.14302924, -0.04533854, -0.05624027, 0.02745821, 0.00780882, -0.03815516, -0.06098400, 0.03095778, -0.07542334, -0.02680399, 0.14937295, -0.07418724, 0.11484884, 0.02250952, -0.07607551, 0.02639097, -0.15962625, 0.14638983, -0.06855472, -0.11923165, 0.01478911, 0.09976985, 0.12598026, 0.06916118, -0.02762781, 0.02242789, 0.03141800, -0.12236246, 0.05795603, -0.05828004, 0.10554788, -0.04382923, -0.01680141, 0.10593137, -0.06026923, -0.14827116, -0.01704529, 0.06818996, 0.04340924, 0.11042359, -0.21459159, 0.16368160, -0.01597824, 0.15895504, -0.04062084, -0.05047663, 0.10632977, -0.07982435, 0.02548955, -0.06902763, -0.09853155, -0.09358260, 0.06640554, 0.03712866, -0.00459857, -0.04076147, 0.05298854, 0.06413430, 0.04854720, -0.07716963, -0.08802113, -0.11026056, 0.03989324, -0.19258457, -0.03787427, 0.04497889, -0.12401205, 0.09481210, -0.01203219, -0.10956138, -0.00180120, -0.08390377, -0.09220552, 0.07287898, 0.15095197},
  {-0.00513993, 0.03421975, -0.04855137, 0.04264278, -0.02832447, -0.10085293, -0.13744482, 0.06351208, 0.19632347, -0.07255386, -0.09407459, 0.03065773, -0.10460632, 0.13080944, -0.13624342, -0.10669105, 0.06850713, -0.14971711, 0.00370083, -0.04331927, 0.05321384, 0.04938421, -0.17389926, 0.11416116, 0.08248500, 0.02645787, 0.10281318, -0.05931060, -0.16079338, 0.00032425, -0.04874793, 0.05230989, 0.07512965, 0.06325583, -0.07542551, -0.00527585, -0.12540726, 0.17346427, -0.12318596, -0.15596461, 0.09107800, 0.14611398, 0.06863737, 0.17714611, 0.06249269, 0.12250467, -0.08035903, -0.01623740, 0.02788963, 0.15479510, 0.00348401, 0.01669192, -0.05981418, -0.00953257, -0.07237826, 0.00042514, -0.05528716, -0.01404859, -0.05549484, -0.02551803, -0.06267599, 0.13382724, -0.08411887, 0.22343405, 0.10895358, 0.07579914, 0.12065509, -0.05969752, 0.08991815, -0.07791606, -0.00501468, -0.07912175, 0.15207085, -0.03363577, -0.02361771, 0.16562670, -0.05470474, 0.05525834, -0.20294598, 0.03632095, -0.11979584, -0.12499262, -0.05018232, 0.02637323, 0.00697246, -0.01013877, -0.17655867, 0.00981838, 0.11260272, -0.09427613, 0.09907959, 0.15478133, -0.12534980, 0.12877452, -0.14773792, -0.10208917, 0.00867915, 0.02727624, 0.09075466, 0.04675061, 0.03120949, 0.03949232, -0.01256923, 0.00745834, 0.10429330, -0.07660396, -0.09559676, -0.02359347, -0.11383791, -0.01617816, 0.15954061, -0.21529959, 0.10948273, 0.02204253, -0.13194640, 0.04772918, -0.11184178, 0.03671059, 0.04668582, 0.01605450},
  {0.11601396, -0.01937971, -0.04835077, -0.03852054, 0.07647285, -0.06630948, -0.02505212, 0.07808774, 0.05171869, 0.09501113, 0.02154675, -0.11339816, -0.08463117, 0.03091418, -0.03629316, -0.01742223, 0.11128151, -0.08087772, 0.04929378, -0.16039500, -0.02609900, -0.23546764, 0.16926362, -0.04693345, 0.14704418, 0.08879762, -0.01063157, -0.05757715, 0.05447617, 0.04799641, -0.12981267, 0.13071005, -0.06011442, 0.11587033, -0.05347754, 0.08548242, -0.01707840, 0.11872461, -0.10830182, -0.04041745, -0.03419604, 0.10518588, -0.02388452, -0.01132506, -0.05156234, -0.02267000, -0.06375345, 0.01616113, -0.15514952, 0.03260918, 0.06315580, -0.08465692, -0.06595477, -0.07885030, 0.10271078, -0.01256191, 0.02870302, -0.07907835, -0.02998026, -0.14499122, -0.10107245, -0.18060555, -0.07884212, 0.11648268, -0.14066179, -0.01419732, -0.00743678, 0.09825269, 0.00727372, 0.08211574, 0.12074982, 0.05309306, -0.18395591, 0.06526256, 0.12490745, 0.10091739, -0.02130719, -0.11600250, 0.06913058, -0.05767994, -0.09109530, -0.03898557, -0.02440163, -0.03433698, -0.04406352, 0.00352849, 0.09979559, 0.06406561, -0.04727441, 0.10354777, 0.05008552, 0.02229642, -0.04832291, 0.06297880, -0.11445827, 0.17545630, 0.02140361, 0.04024284, -0.05229692, -0.09243029, 0.03160210, -0.10267680, -0.00540848, -0.21679211, 0.07638808, 0.04676155, 0.06597924, 0.18168162, -0.16898233, -0.01081820, -0.10286340, -0.05799203, 0.17124806, -0.08455632, 0.00724568, 0.07838936, 0.00267671, 0.12008613, -0.12051995, 0.11262072},
  {0.16016334, 0.12610880, 0.05931037, -0.02657297, 0.02981047, 0.21646479, -0.03247842, 0.04981325, -0.09000656, 0.09291378, -0.16552760, 0.10842852, 0.10399574, -0.09134796, 0.07286045, -0.14241558, 0.02586083, 0.03139608, -0.03487423, 0.19231611, -0.05664051, 0.23497480, -0.20074363, -0.08413766, 0.00702964, -0.08530060, 0.18001887, 0.06662799, -0.19240630, -0.04653264, 0.04718965, -0.11914030, -0.06576278, -0.04425336, 0.01252503, -0.24373464, -0.03638344, -0.11059714, 0.11077034, -0.05183832, -0.05898827, -0.05664298, -0.00093493, -0.10454006, 0.00038509, 0.12289470, 0.08110820, 0.07005708, 0.15083724, -0.09219115, -0.03631281, 0.05257749, 0.10567511, 0.12412408, -0.05148426, 0.00797522, 0.02623284, 0.10408045, 0.16395053, 0.00468684, 0.02336497, -0.00413810, -0.08530897, -0.17165865, -0.09611993, -0.07655805, 0.12153381, 0.04193991, 0.15577881, -0.10253427, 0.01354710, -0.04428356, 0.07025661, 0.01668710, -0.16248131, -0.16403265, 0.25567597, 0.01834603, 0.03536131, 0.04952814, 0.12216285, 0.03805850, 0.06089241, -0.09085499, 0.12384445, -0.05212923, -0.09325261, 0.04748866, -0.05994986, 0.01965656, 0.02240092, -0.04139047, -0.05354676, 0.01068683, -0.15857868, -0.16889986, -0.02346778, -0.08488791, -0.00388593, -0.09881308, 0.05746326, -0.11407125, 0.00725491, 0.12100926, -0.07360986, 0.02572428, -0.01590098, -0.06120010, 0.04839440, -0.00710268, -0.10035698, 0.16528140, 0.01110477, -0.03853653, 0.08175527, 0.01040964, -0.03669915, -0.23972067, -0.04351005, 0.02123563},
  {-0.00349542, 0.05751746, 0.06657851, 0.05032994, 0.09137028, -0.09551952, -0.08287797, 0.00561957, -0.02326735, 0.04168114, -0.17161554, 0.17305808, -0.11273009, -0.16457988, -0.06088048, -0.03147487, -0.03655303, 0.09149846, -0.08784579, 0.06176068, 0.06144984, 0.08521295, 0.03146289, -0.07451151, -0.03359126, -0.05692880, 0.01430490, 0.07604101, -0.03802699, -0.00732042, 0.05106072, 0.12166573, -0.08011083, 0.02482724, 0.06055005, -0.04555643, -0.10891779, 0.02874304, 0.01757843, 0.05835828, 0.01013205, 0.02205209, 0.02042884, 0.03399774, -0.13493833, -0.01332588, 0.08639653, -0.00198174, 0.04124421, 0.07677336, 0.11993879, -0.00375120, 0.03917577, 0.08988802, -0.09716526, 0.05124005, -0.00067252, -0.10252278, 0.02401573, -0.00736856, -0.03838665, -0.09303801, 0.02299698, -0.06595724, -0.01219547, -0.04473961, 0.04364099, 0.12478426, 0.07883684, 0.04749946, 0.00107561, 0.00653390, -0.13723406, 0.08562877, 0.00545229, -0.16608891, 0.13787308, -0.07152121, 0.08996496, -0.14390983, 0.02623446, 0.02843086, -0.11417757, 0.03314012, 0.18044862, 0.05278079, -0.03025655, 0.02624308, -0.03114567, -0.03718156, -0.06717315, 0.01612503, -0.18198480, -0.03848648, 0.12172221, -0.00726784, 0.12118693, 0.01295617, -0.06770957, -0.08894387, -0.01997159, -0.09678985, 0.14609900, 0.00461193, -0.02053085, -0.05204996, -0.02276303, -0.02832503, 0.03579825, 0.01882080, 0.00650238, -0.12459756, 0.06724932, 0.00130673, 0.12231120, -0.05889624, 0.07625222, -0.05517521, -0.11845797, 0.06337005},
  {-0.03510233, 0.12767380, 0.06639528, -0.08678545, -0.17152153, -0.10877018, -0.03459882, -0.11284561, 0.03186765, -0.10757703, 0.11122663, 0.09781906, 0.10583144, 0.08916669, 0.06116545, 0.05012335, 0.01999784, -0.10157860, 0.01719984, 0.01353548, 0.07445779, -0.01013832, -0.01007565, -0.04928508, -0.02207037, 0.02520313, -0.00032316, 0.04716966, 0.07294032, -0.07982422, -0.05811580, -0.04139336, 0.00218016, 0.03446350, 0.08782885, 0.13975900, 0.07255393, -0.07758680, -0.00477867, -0.01347840, -0.08309153, 0.05808683, -0.08535658, 0.01981688, -0.04757627, -0.13334043, 0.00657807, 0.04969861, -0.01800278, 0.00245144, -0.00310940, 0.12144960, 0.07816445, -0.04319790, 0.13938656, -0.07578354, -0.00383209, 0.00781085, -0.06667563, -0.02219726, 0.13607861, -0.17285842, 0.04072456, 0.04097115, -0.06651594, 0.07164862, 0.06201143, 0.00555136, 0.09710974, 0.02157211, -0.06404704, -0.02780349, -0.06521859, 0.06232330, 0.05279185, 0.13453525, -0.14042853, -0.01887235, -0.06441072, -0.06672855, 0.02475692, 0.01671746, 0.19387503, 0.07372577, -0.02662960, 0.04148134, -0.14161475, -0.09553788, 0.19057578, 0.06172802, -0.01289771, 0.12392663, 0.00497859, 0.00628932, -0.01706728, 0.03856103, -0.02797582, 0.02004659, -0.06425893, -0.05523577, -0.12781502, -0.03103921, 0.12056739, -0.20502315, 0.17049667, -0.00548938, 0.00691745, 0.15223584, -0.12195072, -0.02743446, -0.05888817, -0.18393289, -0.02710869, 0.01439066, 0.04140800, -0.06182928, -0.08027803, 0.06498115, 0.15168479, 0.05801250},
  {-0.05402494, 0.06841013, 0.10168858, -0.08731987, 0.00383318, 0.07192577, 0.11767164, -0.06008614, -0.04125979, -0.03715980, -0.09313447, 0.08777685, -0.02839539, 0.02749603, -0.01046242, -0.02488097, 0.14689425, -0.02199531, -0.04019450, 0.11205275, -0.09189559, -0.04345601, -0.06643403, 0.01989744, 0.00497024, -0.08478395, -0.06349366, -0.01185060, -0.09120470, -0.05191827, -0.18506151, -0.09765338, 0.02367085, -0.09542058, 0.07580595, 0.09947310, -0.03557093, 0.06120596, 0.14072557, 0.09437498, 0.02369429, -0.04403286, -0.10155716, 0.08139439, -0.04713380, -0.09259884, -0.02017254, 0.07386107, 0.10085701, -0.08660728, 0.01321819, 0.08766890, -0.09593133, -0.07564726, -0.05085645, -0.13074139, 0.05716746, 0.04917558, -0.02750755, 0.03417244, 0.03725103, 0.08330192, 0.03063108, -0.06859188, 0.02772798, 0.15530039, -0.07486409, -0.16079062, -0.12822293, -0.04955328, 0.02830819, -0.03832303, 0.17360272, -0.05127854, 0.05280933, -0.08496175, -0.11249300, -0.08320085, -0.07592858, -0.01770726, 0.06488245, -0.05257137, 0.07418031, 0.06437833, -0.08195792, -0.07929135, -0.03117458, -0.01549537, -0.05763888, 0.00959045, -0.05979042, 0.08183748, 0.02654126, -0.04923285, 0.00493332, 0.08292487, -0.03330066, -0.02109138, 0.03563786, -0.09599515, -0.03062206, -0.03316804, 0.06946057, 0.09624787, -0.16340536, -0.10767149, -0.03959730, 0.01485662, 0.00233420, -0.03605836, 0.02747217, 0.01297550, -0.01798248, -0.01593217, 0.08570383, -0.07425210, 0.10994254, -0.03230561, 0.03483710, -0.00787419},
  {-0.05356658, -0.01479278, -0.01392726, 0.01452300, -0.02743158, -0.04008646, 0.09818689, 0.03649041, 0.01072239, -0.04160557, 0.10315246, -0.10117710, 0.03776027, 0.01969470, 0.10928883, -0.03606101, -0.03169501, -0.08179796, -0.10292816, -0.00686939, -0.01898894, -0.07537994, -0.00540456, -0.02588198, 0.04925422, -0.08078494, 0.01329766, -0.05323565, 0.10349827, 0.03834669, 0.05140337, 0.05569003, -0.03653683, 0.06654081, -0.09823409, 0.12215107, -0.02918796, -0.12490007, 0.07669979, 0.09604337, 0.06837008, 0.07708360, 0.11954855, 0.00369232, -0.05442186, 0.01172468, 0.04525629, -0.02444290, -0.07864776, 0.01247159, -0.03712057, 0.02942431, 0.11903090, 0.01525663, 0.02357074, 0.01568977, 0.00818253, -0.14780459, -0.05759814, -0.11270172, 0.02820702, 0.05159597, 0.02144805, -0.01488089, 0.04484720, 0.00002384, -0.00327815, 0.08563014, -0.02787222, -0.07625861, 0.08983456, -0.00419470, -0.06626937, -0.04291114, -0.03289363, 0.01452164, 0.00130871, 0.03537101, -0.04069275, 0.03014130, 0.15086752, -0.13649708, 0.04499256, -0.01468676, -0.06404290, -0.07852305, 0.09316885, -0.04929420, 0.03122720, 0.12090854, -0.03446775, 0.14945294, -0.08913875, 0.07970683, -0.10465952, 0.08418209, -0.20135674, 0.02369825, -0.04638375, 0.02977168, -0.00533702, -0.09216776, 0.10476415, 0.02720244, 0.14544594, -0.00942934, 0.11158980, -0.01930978, 0.01630242, -0.04342562, -0.01142127, 0.09711979, 0.14953074, -0.11158304, -0.02567835, -0.09784799, 0.06377215, 0.04543297, 0.12431228, -0.00384400},
  {0.12193435, -0.06166259, 0.04212894, -0.00435815, 0.07582645, 0.08673273, -0.01613586, -0.03872558, 0.07422946, 0.06361868, -0.03595303, -0.15831767, -0.07164522, 0.12478100, 0.05618306, 0.04544917, 0.08115707, 0.07251452, 0.02141208, 0.09702367, -0.04943096, -0.10752954, -0.16134818, -0.09684977, 0.09985309, 0.02104901, -0.03502201, -0.02724192, 0.06243456, -0.09790529, -0.09751561, -0.00260925, -0.08067559, 0.11340766, -0.02675224, 0.14231932, 0.19266255, 0.04676640, 0.08910961, -0.03416640, 0.00506032, -0.04948501, 0.10414875, -0.20633337, 0.11450837, -0.08767385, 0.15843071, -0.00448705, -0.06601058, -0.08861348, 0.28590116, -0.02264008, -0.08516371, 0.01524732, 0.03529900, -0.04487463, -0.04581308, 0.04945317, 0.02429581, 0.01261344, 0.09124383, 0.04952232, 0.04164809, 0.04539243, -0.11165076, -0.18290995, -0.09830490, 0.18789722, -0.10414793, -0.05643958, -0.02108422, -0.02315439, 0.07254057, -0.01786979, -0.12795441, -0.03382048, 0.07738467, 0.05133086, -0.07025296, -0.00937201, -0.21100077, -0.02142125, -0.00812582, 0.09062556, -0.07889486, -0.00652672, -0.11338595, 0.04253970, -0.04063248, 0.07632446, -0.13694164, 0.03082781, -0.03847057, -0.04275377, 0.03644833, -0.01132464, 0.04938569, -0.07414228, -0.10303964, 0.02064866, 0.00984336, -0.02527689, -0.01744377, 0.16432080, 0.18237188, 0.02356482, -0.13497481, -0.10516407, -0.27358621, -0.04570031, -0.08375792, -0.09362915, 0.10931925, 0.03156538, -0.06108319, 0.07077052, 0.16461307, 0.11189604, -0.08599769, -0.08693669},
  {0.02780221, 0.19643274, -0.16982652, 0.00932489, 0.01415247, -0.09612001, -0.19017603, 0.04748870, 0.14920044, 0.07809059, -0.04438774, 0.02079896, -0.14632218, -0.01335690, 0.11422316, -0.02698740, 0.01718341, 0.10174003, -0.00087007, -0.01644840, -0.04295255, 0.04712515, -0.15956160, -0.04924745, -0.07468463, -0.11779271, 0.18675523, -0.10967090, -0.05214214, 0.00364014, -0.03111033, 0.07279682, 0.02438877, -0.15662658, -0.12351082, 0.00030222, 0.04588013, 0.06477377, -0.08782987, 0.07880192, 0.07763912, -0.06962280, 0.19768070, -0.15796773, -0.05969908, -0.00246685, 0.10158661, 0.04366127, 0.07757214, 0.04103449, 0.09763430, -0.03873226, 0.15823381, 0.03245114, 0.02664009, 0.08906293, -0.13945115, -0.02393236, 0.09792199, -0.06889442, -0.14154838, 0.12073230, 0.17102084, 0.12575004, -0.23627771, -0.01639043, 0.09266663, 0.03265504, 0.06088635, -0.10168997, -0.02595703, -0.04571024, -0.14321688, -0.07907168, 0.00374626, -0.13239777, 0.13909052, 0.03375880, -0.06370453, 0.03210426, -0.04905577, -0.06650452, -0.08216022, 0.09112398, 0.04598415, -0.00550179, 0.02422136, -0.02137280, -0.05173736, 0.01127949, 0.11203449, 0.12207819, -0.03138347, -0.04492673, -0.16464809, -0.12093200, -0.07946340, 0.04306142, -0.02571994, -0.04690731, -0.03247664, -0.09773905, 0.11821383, 0.05362673, 0.02528691, 0.00290016, -0.02460792, -0.00451157, -0.32005739, -0.07394951, 0.09581955, 0.01259134, 0.00729984, -0.00375560, 0.07078724, -0.01373211, -0.02436678, -0.03441722, -0.08314393, -0.27057007},
  {0.04870948, -0.02255400, -0.04404638, 0.07503961, -0.06667607, 0.03073260, 0.00626257, -0.01821293, -0.09952709, -0.04152009, 0.11435014, -0.06811368, 0.03343749, 0.17045802, -0.01177939, 0.09921323, 0.05585454, 0.04975770, -0.00595971, -0.03557889, -0.17753045, 0.12067615, -0.19423197, 0.06892900, 0.03191752, -0.08502241, 0.00010469, -0.00368864, -0.03275938, -0.04508384, -0.15935452, 0.00739719, 0.12961297, -0.06336933, 0.06985582, 0.01225677, 0.07697881, -0.15710324, -0.02771288, -0.03875506, 0.01577710, -0.06930383, 0.05710139, -0.09572490, 0.06885157, -0.06113822, 0.17751025, -0.01584795, 0.00850697, -0.05426865, 0.14936897, 0.10486847, 0.04362152, 0.00692211, 0.15149252, -0.09087552, -0.02752291, 0.09268191, -0.05317654, -0.01546599, -0.03954830, 0.00170692, -0.12925541, -0.06850133, 0.09004543, 0.05312272, 0.10444202, 0.03677372, -0.08706988, 0.08172749, -0.07116625, -0.00200005, 0.14319812, 0.05436063, -0.06630498, 0.07629058, -0.17835370, -0.09006365, 0.03404719, 0.04367318, 0.13740465, -0.12851132, 0.15685117, 0.05639589, -0.06008058, -0.15831243, -0.06403118, -0.10375816, 0.14833444, 0.14090127, 0.00495154, -0.03954661, 0.10643037, 0.06437565, -0.12901825, -0.09252920, -0.14838167, -0.01273507, -0.10660701, -0.11230475, -0.02603872, -0.11287162, 0.04913396, -0.08492881, -0.02957151, -0.01734788, 0.12706199, -0.00671673, 0.03173958, 0.02190144, 0.00511793, -0.05520281, 0.14156806, 0.06899484, -0.10602956, 0.02084885, 0.01932032, -0.15528227, 0.04003857, -0.04739558},
  {0.01916827, -0.04254040, 0.00532983, -0.10243581, -0.03516239, 0.00383461, -0.04632908, 0.07660647, -0.03797106, -0.02965701, -0.06849842, -0.01636432, -0.05557521, 0.08483945, 0.02831607, 0.02396908, -0.07838724, 0.04631689, -0.06098656, 0.06239848, -0.08195605, -0.04837501, -0.18160129, 0.06687380, -0.02030983, 0.05342139, -0.08882024, 0.00431833, 0.03950980, -0.12216055, 0.07705576, -0.00444807, 0.04269461, 0.06306382, -0.12222158, 0.00435473, -0.04185506, 0.08039405, 0.09386167, 0.05804235, 0.04294695, -0.05217104, 0.11064036, 0.03074298, 0.11465991, -0.05919728, 0.08323643, -0.02726233, 0.02723485, 0.09374060, -0.02045940, 0.06631085, 0.01803241, 0.00617986, 0.03813486, 0.06012727, 0.04586721, 0.06496711, -0.02930360, 0.13462596, 0.02134075, 0.07376814, 0.00294228, -0.00140478, -0.04743452, -0.09491915, -0.11624366, -0.08102443, -0.06417853, -0.10894888, -0.01200350, -0.07779068, -0.01707324, -0.01700572, -0.11106541, -0.04029949, 0.08503409, -0.07717288, -0.09279541, 0.02395284, 0.13405630, 0.03642146, 0.00668054, 0.01711108, -0.00031462, -0.07054473, -0.04679466, 0.06690013, -0.05070506, 0.07084578, -0.07958488, 0.01110224, 0.02409659, 0.01954040, -0.11550679, -0.02748576, -0.11134957, -0.01566038, -0.08980278, -0.10675417, -0.08754257, -0.05135622, 0.09737891, -0.01847637, -0.00706504, 0.04061366, 0.12127328, -0.00648793, 0.05502957, -0.05201881, -0.00059471, 0.02725786, 0.07739285, 0.07137696, 0.08327401, -0.01445147, -0.10141819, -0.13544407, -0.09110244, 0.05163582},
  {0.17875633, -0.18660678, -0.00632277, -0.12294343, -0.10404991, -0.11877965, 0.12196914, -0.08000397, 0.02846817, -0.08458952, 0.01169963, 0.10196985, -0.00180338, 0.04314414, 0.04917734, 0.06561790, 0.13767636, 0.05621925, 0.05831793, 0.09032670, 0.07570585, 0.10049354, 0.05354917, 0.01182159, -0.02111107, -0.03641881, -0.04757215, 0.05186594, 0.05948750, 0.01229540, -0.00513725, 0.06414456, 0.12786861, -0.07478359, 0.02242780, 0.13998862, 0.07473943, -0.10435263, -0.09262810, 0.06221659, -0.10204564, -0.04127623, 0.05456346, 0.00853550, 0.15243219, 0.08597305, -0.00506564, -0.03286318, -0.09493575, -0.08854721, -0.03191623, 0.10842404, 0.13874117, -0.11266764, 0.03909640, 0.01685009, 0.05123378, -0.03373867, -0.03307837, 0.04951548, 0.06321862, -0.01358437, 0.07429388, 0.00788115, 0.08809415, 0.09137879, -0.05760011, -0.08919808, -0.05324147, 0.00585732, 0.13289687, 0.04994325, 0.09123397, 0.11554196, 0.11936475, 0.02168611, -0.02316133, -0.00281168, 0.09779180, 0.02460853, 0.00068132, 0.13073626, 0.07780920, -0.13571274, 0.02888411, 0.03674528, -0.01091964, -0.04393160, 0.19816907, -0.03997809, 0.11028064, -0.01148720, 0.02971758, 0.00727009, 0.00753849, -0.02856464, -0.08569996, -0.00043360, 0.04689308, 0.07261939, -0.07107560, 0.01486890, 0.02263044, 0.03606966, -0.06905752, 0.01371664, 0.00297817, 0.13856317, 0.04840256, 0.01707902, 0.00494960, 0.04113077, 0.10108199, 0.04592531, -0.10228539, -0.04466873, 0.09357537, -0.03674560, -0.07182339, 0.02053662},
  {0.06342158, 0.08264498, 0.09003022, -0.08714837, 0.10241845, 0.21959166, 0.10994776, -0.08094063, -0.06472902, -0.07994404, 0.07712716, 0.09927154, -0.12655109, -0.11239441, -0.10510543, 0.04195775, -0.09184143, -0.09780549, 0.05221880, -0.01877158, -0.08852375, 0.01145066, 0.02460734, -0.03340465, 0.08449004, -0.05764784, 0.06439200, -0.07063000, -0.07562587, 0.07667291, 0.00064260, -0.10756828, 0.08768415, 0.13976149, -0.02230833, -0.10926408, -0.04747777, -0.01569310, -0.01522645, -0.01429775, -0.04481615, -0.06180095, -0.22673529, -0.05949502, -0.12547398, 0.01724632, -0.00087948, 0.06457178, 0.14217973, -0.08812612, -0.14678909, -0.04037807, -0.01579109, -0.04777811, 0.01208189, 0.06870626, 0.12333866, -0.04667177, 0.04238281, -0.07468297, 0.09662513, 0.07061992, -0.12966560, -0.04654862, 0.14640050, 0.11483476, -0.00664058, -0.12591013, 0.01961128, -0.08680616, 0.03339435, -0.19463027, 0.05107246, -0.03129909, -0.01958960, -0.18107097, 0.06886070, 0.02303008, 0.01938356, 0.12116814, -0.05358603, 0.13209209, 0.05293331, -0.17977661, 0.12909710, -0.00216786, 0.06102939, -0.07838609, 0.14517942, -0.08402137, -0.01644056, -0.09456787, -0.15747562, -0.02992720, -0.10660628, 0.14854142, 0.05207837, -0.05677101, -0.12534499, -0.09948222, 0.06468259, 0.00304161, -0.00493013, -0.06829917, -0.13547106, -0.00494415, -0.04054701, -0.11329657, 0.15475056, 0.04314169, -0.03325557, 0.09189296, -0.17256299, -0.07132885, 0.02096946, -0.05175491, 0.02546950, -0.14724115, -0.07145574, 0.16040997},
  {0.03381463, 0.07507087, 0.07837868, -0.11679628, 0.07100749, 0.22773904, 0.06607155, 0.07816367, -0.06264534, 0.05345860, -0.11998204, 0.06312645, 0.00151228, -0.03825879, 0.09792975, 0.03352312, 0.02034361, 0.10160484, -0.00734102, 0.08152840, -0.00856232, 0.08775753, -0.13290483, 0.08493730, 0.02975217, 0.01375324, -0.15914686, 0.06432484, -0.05454332, 0.04959133, 0.01328638, -0.06017926, -0.05545114, 0.09067292, -0.04740077, -0.05147173, 0.09653591, -0.01319509, 0.00764719, 0.10180689, 0.04249789, -0.09062680, 0.03044825, -0.03651337, -0.04987750, 0.04055496, -0.03134492, -0.08266785, 0.03332983, -0.05233666, 0.04127207, 0.01625378, 0.10538223, 0.06923535, -0.03391361, 0.13088214, -0.05345760, 0.01867943, -0.05622115, 0.07029091, -0.06054426, -0.07809420, -0.00627899, -0.12399636, -0.08074467, 0.01737575, 0.02254150, -0.01410908, -0.01941442, 0.03008808, -0.07968548, 0.03430466, -0.01660905, 0.10471991, 0.09181918, 0.01993978, 0.01657619, -0.05890975, -0.09369916, -0.11721903, 0.01888042, -0.16126509, -0.00283495, -0.03671319, 0.02265261, 0.09150037, 0.13129590, -0.04819170, 0.17016846, 0.00339737, -0.09089801, -0.00359318, -0.00845334, 0.01574954, -0.01424929, 0.12105514, 0.11437234, 0.09095635, 0.05470224, -0.06205447, 0.08406413, -0.02914277, 0.10717497, 0.03266221, -0.16849340, 0.02468068, -0.05123336, 0.13369092, -0.00012380, -0.01107398, -0.14871916, 0.14349914, 0.06482220, 0.01655841, 0.01144134, -0.00807683, -0.12821487, -0.19424976, -0.05366869, 0.20364775},
  {0.02951987, 0.02030176, 0.08805267, 0.02704955, -0.07553912, -0.04857846, -0.05136856, -0.00471458, 0.13541977, -0.08496945, 0.02156545, 0.09770282, -0.06852774, 0.16820338, 0.09474628, -0.13615139, -0.00272973, -0.01942422, -0.09271282, 0.10148894, 0.00617055, 0.15410315, -0.39427385, 0.13671081, -0.03461706, -0.06975701, 0.10052719, 0.06106617, 0.14557856, -0.05599773, -0.02293657, 0.15233266, -0.08783855, -0.04674967, -0.08450546, 0.05805288, -0.11414332, 0.13361144, 0.01027583, 0.00679589, 0.01004570, 0.03178887, 0.24488075, 0.18800250, 0.06540263, -0.09836955, -0.09399287, -0.06296541, -0.01959806, -0.01304150, -0.02969176, 0.00132023, 0.03909760, -0.02013313, -0.12997407, 0.04831817, -0.13359180, 0.02466095, -0.00642100, 0.10582524, 0.10454986, -0.01150781, 0.04275217, 0.04651907, -0.02826727, -0.09696198, 0.04992368, 0.02985365, 0.16104315, -0.06767548, -0.02937821, 0.12767091, -0.07929163, 0.02535887, 0.07278135, 0.02536944, -0.13362555, -0.00529151, -0.20214741, -0.15830496, -0.10886954, -0.03816442, 0.08940667, 0.04804256, 0.08671807, -0.02099287, -0.05808297, -0.02649588, 0.09888734, -0.03136310, 0.06438167, 0.12903623, -0.09619751, -0.08554269, 0.04395359, 0.11161963, -0.08091512, -0.07649305, -0.01113517, 0.09130417, 0.03441722, -0.10139081, 0.02023775, -0.07584880, 0.10535570, -0.10101678, 0.02715827, 0.15996686, -0.15914381, -0.03895120, 0.05620842, 0.00014961, -0.01247370, -0.07737333, 0.14438577, -0.07713036, -0.03268045, -0.08372775, 0.14608939, -0.12127211},
  {-0.08430248, -0.08769540, 0.08329365, 0.01976853, -0.05543818, -0.09033577, 0.04676455, 0.04862673, -0.08238483, -0.00611891, -0.01972286, 0.02109972, 0.05426780, 0.07114591, 0.22709146, 0.24473809, -0.03992969, 0.07841502, -0.10770649, 0.04382410, -0.04724236, -0.06826607, -0.08605540, 0.03956357, 0.10402413, 0.07383528, -0.17060421, -0.10459879, -0.02990996, -0.03723038, -0.10402124, 0.05188448, -0.03792154, 0.06112704, 0.02748593, -0.00744962, 0.20405272, -0.08318296, 0.15563869, 0.11258725, -0.05734741, 0.01767301, -0.04473616, -0.10430478, -0.14878093, -0.11368657, 0.16854225, -0.05996114, -0.03233679, 0.02498966, 0.17140473, -0.13559394, -0.03237737, 0.09367916, 0.06640904, -0.04849464, -0.04342684, 0.06844626, -0.21234503, 0.15184939, -0.01482492, 0.09581125, 0.06508405, 0.16640966, 0.03243931, -0.03809946, -0.13120079, 0.04753910, -0.14933836, -0.07612874, -0.00637328, 0.01380604, 0.19797525, -0.00989999, 0.05364650, 0.10306533, -0.04085146, 0.04782772, -0.08867835, -0.04583538, 0.00321502, -0.13416710, 0.04706722, 0.10799575, 0.06042328, 0.03543773, 0.01007890, -0.01178790, -0.01513804, 0.07626262, -0.03928400, 0.17657337, -0.09499084, -0.06794186, -0.05858848, 0.01710360, 0.05134430, -0.11536835, 0.08340129, -0.02629456, 0.04673962, -0.08111376, -0.00869239, 0.09802544, -0.11459325, 0.02564394, -0.05736459, 0.07664090, -0.13970812, -0.00814532, -0.01130775, 0.02587054, 0.06097078, -0.11071905, 0.15479562, -0.09492797, -0.00714990, -0.11777364, 0.04369592, -0.00493278},
  {-0.00379910, 0.17290093, 0.00571601, -0.06372411, 0.04948440, -0.01347069, -0.17488086, -0.01663758, 0.14241268, -0.00517746, 0.11216111, 0.03470797, -0.00821479, 0.13997613, -0.02287407, 0.01963136, -0.12657355, 0.03141638, 0.01688416, 0.00681421, 0.10789026, 0.05086946, -0.01771999, -0.04758440, 0.02405087, -0.09726661, 0.02690693, 0.04646429, 0.08473203, 0.05027458, -0.04698306, -0.04481491, 0.16114837, -0.12860046, -0.19756897, 0.04164605, 0.04486842, -0.03478675, -0.13076508, -0.07688753, -0.09122333, 0.07003412, 0.19633484, -0.06015030, -0.06991597, 0.10340228, -0.03750012, -0.02435501, 0.04244247, 0.08631296, -0.05618545, 0.11412597, 0.20371473, -0.13585560, 0.00015197, 0.06518287, 0.00144075, -0.01057857, -0.03916151, -0.01462831, -0.05573889, 0.20150758, -0.04850918, 0.01370173, -0.05499042, -0.06093815, -0.04308853, -0.06692874, 0.05263434, -0.02911639, 0.07383537, 0.19869111, 0.12864442, -0.09924688, -0.03246260, -0.02527624, 0.04870985, 0.03962827, -0.12169265, -0.00061543, -0.12397959, 0.01270123, -0.04904425, -0.16884953, 0.04937869, -0.09374274, -0.08404190, 0.04301677, 0.17899214, -0.10313049, 0.08867128, 0.19655827, -0.07627717, 0.19267938, -0.02111602, -0.01827983, -0.06591573, 0.08129541, 0.04369590, 0.01823178, -0.02031432, -0.02179254, 0.08993743, 0.01532246, 0.04826451, 0.08180282, 0.18069765, 0.00252516, -0.20905319, -0.08470604, 0.02191905, -0.14590988, -0.04161563, 0.04303024, 0.04529626, -0.07632732, -0.11895119, 0.00900528, -0.07223918, -0.27413771},
  {-0.04902602, 0.06888197, 0.17291820, 0.08149324, -0.03673502, 0.06904068, 0.05380044, 0.03628017, 0.05046672, 0.04186232, 0.07144652, 0.08120389, 0.00533537, -0.05203803, 0.01138344, 0.02861554, 0.01274343, 0.03313611, -0.03069298, -0.03833171, 0.05761821, -0.01203091, 0.12283986, -0.12127024, 0.13706186, -0.06780364, -0.06027675, -0.10885354, -0.12815768, 0.06009228, 0.00536075, 0.11786362, 0.03063066, 0.16973278, -0.02048482, 0.01457521, -0.05099485, 0.08571800, -0.05258436, -0.12203629, -0.02169197, -0.06138222, -0.02493923, 0.03053500, -0.02136334, -0.12033276, -0.13021748, 0.01246110, 0.03083477, 0.08779207, -0.06065785, -0.08031363, -0.00308829, -0.10871638, 0.16664188, -0.00660005, 0.09603561, -0.14263749, 0.04948286, 0.13852821, 0.06538638, -0.07866469, -0.12313276, 0.06632517, 0.01067670, -0.14651284, 0.05702954, -0.00919291, 0.11525148, -0.07311546, -0.10321435, -0.07190841, -0.08383362, 0.01146636, 0.18376902, -0.11912785, 0.06725032, -0.06687458, 0.01255487, 0.11399285, -0.29445744, 0.05395016, 0.07467337, -0.06453478, -0.11580257, 0.12906443, -0.02953928, -0.02272228, 0.15089601, -0.00437063, 0.03239999, 0.07554474, -0.05484657, 0.05705188, -0.03156215, 0.18147777, 0.00078061, -0.09508426, 0.02334496, 0.06642734, -0.02789582, -0.09121976, -0.05473032, -0.13497452, 0.06084608, -0.12561201, -0.16616888, 0.04589513, -0.12782736, 0.09531901, -0.00958477, -0.27570254, 0.08137016, 0.03206016, -0.04504838, 0.00059635, -0.13164099, 0.00470146, -0.05918867, 0.03630076},
  {-0.15234891, -0.13279705, 0.03420901, -0.01850990, -0.13467705, -0.12751645, 0.11082585, 0.07186684, 0.01658087, 0.02068240, -0.00770786, 0.06682561, -0.01178706, 0.02533747, 0.16130804, -0.07343164, 0.17095640, -0.10397257, -0.09980862, 0.06086452, -0.12533846, -0.00007585, -0.04445410, 0.02265281, -0.06441060, -0.07557426, -0.16578203, -0.11017499, -0.06344976, -0.05649875, -0.08788964, 0.15597777, -0.00610245, -0.05861260, -0.06550461, -0.03075621, -0.01689668, -0.10569018, 0.02027147, -0.06932028, -0.07405288, 0.01890616, 0.16586870, 0.00020788, -0.05845598, -0.08514484, -0.01609734, 0.02016698, 0.09918649, -0.01879440, 0.00820582, 0.03388606, -0.13376486, -0.08599424, -0.05320428, -0.00665702, 0.00250939, 0.07011041, -0.11388309, 0.04503354, 0.07685125, 0.01657993, -0.06910601, 0.01658871, 0.11068050, 0.04468218, 0.00444528, -0.08267448, -0.03388523, -0.03489866, -0.02966055, 0.16369803, -0.01073516, 0.12020648, 0.16290104, 0.21821052, -0.02937688, 0.08477046, 0.09354753, 0.02231933, -0.00207844, -0.15892622, 0.10409074, -0.03434012, 0.02552577, 0.02651871, -0.07028139, -0.09745555, 0.12769444, 0.05296884, 0.05104955, 0.16514631, -0.20531520, 0.15819408, -0.05559900, 0.04823481, 0.00995767, -0.11647301, -0.09728299, 0.02165861, 0.08417013, 0.07957796, -0.05149417, -0.00378209, -0.11613023, -0.04311998, 0.09121566, 0.18010454, 0.06791352, -0.03340285, 0.07055464, 0.05202863, 0.13920707, -0.08283128, 0.06671454, 0.04592671, -0.13689427, -0.18226512, 0.14118312, 0.19994603},
  {-0.00626225, -0.07553531, -0.02573366, -0.11009615, 0.13946268, -0.06328256, -0.03955757, -0.01007592, -0.03377848, -0.06414154, 0.07368798, -0.05940078, 0.01478527, -0.08785184, 0.04204441, 0.12055015, -0.16188130, 0.04263746, 0.07135934, 0.06546885, -0.02582627, 0.03089168, -0.00283038, -0.14888966, -0.02613313, -0.04607098, 0.03874872, 0.08375242, -0.00779037, -0.02208976, -0.00557334, 0.05644473, -0.02588511, -0.05500815, -0.02677733, 0.02335125, 0.07416405, 0.01618501, -0.09922088, 0.15270460, 0.06749493, -0.11735112, -0.03872319, -0.10017309, -0.11774039, -0.08503761, 0.13559696, 0.06099795, 0.04646989, -0.05472105, -0.00775168, 0.09913530, 0.04102971, 0.08282421, -0.04172273, 0.01054707, 0.01945811, -0.03161403, 0.12243566, -0.04925226, -0.07771019, 0.15008990, 0.11923365, 0.08670139, -0.09775094, 0.00385889, -0.00074694, 0.01566764, -0.10179941, 0.01365138, 0.04050827, -0.00135419, -0.11270542, -0.11428393, -0.14648734, -0.09065607, 0.01103309, -0.08860806, 0.15814973, -0.06377864, -0.00883169, 0.06214104, -0.05552213, -0.03154904, 0.08728252, -0.03589481, 0.04157106, -0.08041447, -0.26705557, -0.00026968, -0.14139901, 0.10517869, -0.14591520, -0.08232287, -0.00482756, -0.13535845, 0.09542830, -0.03687240, 0.00797996, 0.05135109, 0.06856356, -0.07645406, 0.23206529, 0.00306751, 0.07267755, -0.08109778, 0.08763896, -0.02654904, 0.00037684, -0.10141363, -0.07952954, -0.02607274, -0.09729734, 0.08915102, -0.00250205, -0.09197968, 0.01277453, -0.06678622, -0.12601414, -0.02434275},
  {0.07715857, 0.00371482, 0.08161357, 0.07868075, 0.07754218, -0.14719936, -0.02034732, -0.09285302, 0.07243849, 0.04499141, -0.00162193, 0.11325947, 0.09798887, 0.10083079, 0.20032030, 0.09271899, -0.08211260, -0.05990481, -0.14051467, -0.00695388, -0.00868225, -0.06748957, -0.20026442, 0.08122368, 0.13048011, -0.02642207, -0.03735724, 0.05382122, -0.07972972, 0.02510761, 0.07952287, -0.03073546, -0.11936625, 0.08437280, -0.01739853, 0.09987735, 0.06875635, -0.02808509, 0.09703045, -0.07420830, -0.00692871, -0.01248876, 0.17463750, 0.02948319, 0.04709605, -0.04740452, 0.13359466, 0.05072469, -0.09201878, 0.05102540, 0.01760925, -0.12133394, 0.06097915, 0.09477163, -0.04823380, 0.06806353, 0.06296715, 0.08131383, -0.09629205, -0.04775124, -0.06359885, 0.13021113, 0.11673534, -0.05717315, -0.09470397, -0.17180561, 0.06783771, 0.13462950, 0.14313711, 0.02587924, 0.09928384, 0.03158970, 0.02599811, 0.02186619, 0.14806935, 0.02707350, 0.08620638, 0.01567326, -0.18434705, -0.09909669, -0.19314292, -0.07351649, 0.01899755, 0.12838013, -0.05055716, -0.00518046, -0.09674268, -0.09736058, 0.04320403, 0.09195097, 0.06081617, -0.03968477, -0.10189293, 0.07492221, -0.09031858, 0.03294372, -0.05460613, -0.08942149, 0.00441772, -0.13116078, -0.00732050, -0.00166587, 0.05751955, -0.08800626, -0.11278397, -0.04070672, 0.06334023, 0.17953853, -0.08739116, -0.01822204, -0.01918179, -0.12394780, 0.04253795, -0.06157082, 0.16399594, -0.01835483, -0.05752209, -0.04341683, 0.15232970, 0.10572696},
  {0.11403517, 0.11317550, 0.03185283, -0.10059974, -0.10597830, -0.05277981, -0.02866671, -0.11942008, -0.13308416, -0.02211435, -0.04574711, 0.07353409, -0.00575382, -0.17970513, 0.02482915, -0.01299098, 0.08815213, 0.18687552, 0.06822649, -0.05146642, 0.03080854, -0.02561327, 0.11505949, -0.10153355, 0.03396145, 0.03125433, -0.04543358, 0.04243753, -0.07379176, -0.09517618, -0.13181901, -0.08602510, -0.09163831, 0.05880128, 0.04173648, 0.04563205, -0.11641122, 0.06817807, -0.04121048, 0.13760576, -0.08768719, -0.00816988, -0.15959683, 0.02424437, -0.00962859, -0.03313674, -0.07127102, -0.06303960, -0.12768453, 0.12796696, 0.11184055, 0.01475477, 0.02801599, -0.03269996, -0.00135542, 0.09806118, -0.10074776, -0.04604661, 0.13704121, -0.05516141, 0.09608866, 0.03395270, 0.00554683, -0.11161853, 0.17482725, 0.14404982, 0.13788760, -0.03995164, -0.10813867, 0.01897600, 0.08845320, 0.00007994, -0.06691703, 0.04758220, -0.01534554, -0.03143372, 0.02861377, -0.09403727, -0.13190602, -0.17713736, -0.03663368, 0.23477216, -0.05975025, -0.03445661, 0.06914137, -0.07901628, -0.05033923, -0.10849763, 0.01481372, 0.03878363, 0.03825508, -0.08831304, -0.03167736, -0.06054359, 0.10725554, 0.00945295, 0.00489402, 0.07511228, -0.04827848, -0.10680229, 0.09829341, -0.07678905, 0.10731217, -0.02174777, -0.15686695, -0.07749772, -0.10218315, -0.11075719, 0.19423690, -0.10570335, -0.13145009, 0.14856663, -0.00050940, 0.05962769, 0.08795844, 0.04787584, 0.12534288, 0.10119446, -0.01463300, 0.17140970},
  {0.04720190, -0.02044761, 0.16916205, -0.08431257, 0.04758841, 0.01593489, 0.06906716, 0.04763845, 0.02685114, -0.03473666, -0.04499962, 0.05048035, 0.07908879, 0.11205477, -0.09720160, 0.02862979, 0.01140516, 0.00119276, 0.00890928, -0.13649127, -0.09376888, -0.01775584, -0.09575257, -0.12027496, 0.08345622, -0.09888210, -0.10687203, 0.07588581, 0.01792127, -0.10433611, -0.03478029, -0.01521721, -0.03619003, 0.10281244, 0.08659884, -0.09731958, -0.01137415, 0.08590967, 0.07151874, -0.08125652, -0.01888466, 0.11481831, 0.04147480, 0.07559403, -0.02820013, -0.03564974, -0.02378194, 0.02990551, -0.04981037, 0.03139582, -0.00476316, -0.04425228, 0.00604288, -0.04833454, 0.09062503, 0.03984714, -0.01666238, -0.13354033, 0.06779948, 0.02207484, 0.05971237, -0.09719070, 0.01292432, 0.07588119, 0.06992891, 0.02154086, -0.13284086, -0.10033018, -0.06033127, 0.07847165, -0.08350112, 0.04675678, 0.03198785, 0.12198539, -0.11684351, -0.07330261, 0.09979194, 0.03541342, 0.03771034, 0.04856881, 0.06670378, 0.09184165, 0.05593036, -0.14893925, -0.11472345, 0.02055474, -0.09754861, 0.05389729, 0.02759777, -0.08063448, 0.07569228, -0.06408633, 0.07553832, -0.01725113, 0.07944833, -0.09281662, -0.12342577, 0.02347630, 0.08491009, 0.08942578, -0.05090603, -0.03232543, -0.01537173, -0.04091297, 0.00625949, -0.07442547, -0.12532011, 0.04843367, -0.02515614, -0.03248158, 0.06065328, 0.12101999, 0.06204280, 0.08601844, -0.01494917, -0.00239540, -0.10368842, -0.06713138, 0.07329181, 0.03213022},
  {0.29235733, -0.00234984, -0.06760935, 0.07489974, 0.09819298, 0.02802959, 0.04976512, -0.11419050, -0.06193245, -0.01402297, -0.02788151, -0.08376462, 0.06876736, 0.00784969, 0.18369986, 0.09591246, 0.11966367, -0.01677948, -0.08999594, 0.11109634, -0.12460547, -0.12821618, -0.16568151, -0.14310475, 0.05111626, 0.03729073, -0.00841663, -0.00178876, -0.08765671, -0.05487632, -0.01290478, -0.01508742, 0.00369814, 0.13295087, -0.12278454, -0.10378751, 0.04235103, -0.13100496, 0.16394942, -0.12784158, -0.10001129, 0.10130119, -0.03641385, -0.19314577, 0.02823183, 0.08277792, 0.05560307, -0.14293645, 0.03539999, 0.04307989, 0.16271551, 0.13043135, -0.00788568, 0.07672717, 0.05077245, -0.19399321, -0.04963440, -0.02120131, -0.00080846, -0.09386324, -0.01982252, 0.12251741, 0.08956914, 0.08204265, -0.17704028, 0.00798594, -0.07178198, 0.07775505, -0.01312440, -0.06239162, -0.00981153, -0.00491485, 0.21105497, -0.08739446, -0.01997273, -0.17215504, 0.14894097, 0.00989917, -0.11815325, 0.14525110, -0.11397687, -0.07972223, -0.12450549, -0.02115495, -0.17836800, -0.23070256, 0.09740186, 0.01613618, -0.07859007, 0.09948248, -0.06717607, 0.02826494, -0.08693600, 0.06590819, 0.02443404, -0.04547942, -0.05418255, -0.03422921, 0.00017529, -0.03771809, -0.13350521, -0.03965138, 0.06635431, 0.03612838, 0.16311398, 0.00055030, 0.10894748, -0.13190965, -0.18516739, -0.02669947, -0.08012015, -0.06554591, 0.11652250, 0.10457670, 0.10470708, -0.12794529, 0.10766877, -0.01676653, 0.03046478, 0.03692054},
  {0.06110825, 0.02088600, 0.02151995, 0.00553822, 0.08079451, -0.08914396, -0.21045703, -0.04975403, 0.05726483, -0.07186641, 0.13845822, -0.14592268, 0.07652712, 0.08034725, -0.00276048, 0.11710942, -0.08200599, 0.10708001, 0.05852733, 0.07053284, -0.05396988, -0.04879688, -0.23682962, -0.09921360, 0.01087653, 0.05250473, -0.01008416, -0.02121985, -0.03376665, -0.10097884, -0.05016147, -0.01086872, 0.11568253, -0.15227850, -0.12446374, -0.06440485, -0.01252855, -0.03210689, 0.14843385, -0.06656080, -0.09100103, -0.06412563, 0.15022807, -0.11866163, -0.13104911, 0.03536937, 0.15553139, -0.05340207, 0.03669392, 0.08463845, 0.20452048, 0.17343129, 0.03489450, -0.00039264, 0.06633736, -0.18555112, -0.07217089, 0.05497788, -0.03564201, -0.07863230, 0.01976023, 0.19118890, 0.04784732, -0.00010920, -0.12904462, 0.08974503, -0.04172064, 0.04408037, 0.05727061, -0.09549481, -0.01028697, 0.13364959, 0.11283661, -0.16368572, 0.04915874, 0.05709690, -0.10878331, -0.02841272, 0.00378330, 0.00667496, -0.05469077, 0.06126411, 0.10327049, 0.05646753, -0.05434019, -0.15905611, 0.08598716, -0.06057875, -0.20368585, 0.07980231, -0.06138989, -0.02164306, 0.02423559, -0.00171500, -0.17564559, -0.18660820, -0.15504339, 0.00690523, -0.05502410, 0.00419719, -0.09422925, 0.05893126, 0.11301948, 0.02544707, 0.17559645, -0.06769841, 0.04485998, 0.09010049, -0.20620020, -0.07695089, 0.04358254, -0.08077573, -0.01141419, -0.02912603, 0.14951566, -0.09340517, 0.07442208, -0.14332724, 0.08245495, -0.17112000},
  {0.15640047, 0.02781991, -0.08840349, -0.10712408, -0.02855701, 0.01027949, 0.02045748, -0.13011296, 0.00751580, -0.05228737, 0.11873746, -0.05416087, -0.09822101, -0.07302127, -0.04330879, 0.01473771, 0.08358142, 0.12076484, -0.00877379, 0.00875438, 0.00366369, -0.06423587, -0.03171526, 0.06961511, -0.01831675, -0.08981776, -0.01428816, -0.10652810, -0.09639992, 0.04463837, -0.03776230, -0.07892131, -0.05329582, -0.06708676, 0.06974521, 0.04179404, 0.02090090, -0.13309716, -0.13949327, 0.04074400, 0.08373415, -0.07824777, -0.15505838, 0.12657255, 0.20610315, -0.02392258, -0.08049675, -0.06706885, 0.04498594, -0.02171163, 0.09957944, 0.07233559, 0.13056675, -0.06613041, -0.14913324, 0.11938956, 0.00687548, 0.06405874, 0.09376476, -0.05773868, -0.09453295, -0.01239850, 0.05037900, 0.07372430, -0.00901858, 0.00472323, 0.06359583, 0.06292614, 0.03474680, -0.11081145, 0.08918179, 0.02188799, 0.05399933, -0.00717722, 0.10412333, -0.04426429, 0.01830751, 0.07745066, -0.03222602, 0.05436832, -0.06915706, 0.06904883, -0.10122033, -0.03293611, 0.11654267, 0.03039959, 0.04725947, -0.04065246, 0.16799124, -0.07426678, 0.10243891, -0.10535026, 0.20259131, 0.09734207, -0.01249880, 0.01274649, 0.04446885, 0.01677878, 0.05267746, 0.01788256, -0.01889058, -0.11036737, 0.07750029, 0.13172390, -0.11125767, 0.01691318, 0.00521135, -0.15979920, 0.02880170, -0.03813206, 0.13180734, 0.08643252, 0.01296904, -0.08511908, -0.14755689, -0.07106282, 0.07510226, -0.02058140, -0.09531919, 0.09661677},
  {0.04052586, -0.05208560, -0.02617470, -0.04629566, 0.05648074, 0.01425331, -0.11988188, 0.07501411, -0.01509863, 0.01226046, 0.12014371, -0.10930362, -0.00140005, 0.00990647, 0.05548283, 0.06573050, -0.09345344, -0.06584827, -0.08010437, 0.02662377, -0.08487121, -0.01600227, -0.07274840, -0.05228431, 0.11414231, -0.02249880, 0.06715046, -0.04300543, 0.08267926, -0.01769714, -0.06629493, 0.02777579, -0.05990078, 0.04028505, -0.01473348, 0.02987863, 0.01640602, -0.12594709, 0.15234272, -0.05184437, -0.07254020, 0.11390280, 0.00788469, 0.01495648, 0.04131500, -0.00426054, 0.15854900, -0.04103512, -0.02931890, -0.08110417, 0.05762885, -0.00201926, 0.08660021, -0.00166097, 0.11885412, -0.02017435, -0.11471243, 0.05614213, -0.06652398, -0.00243413, 0.07609686, -0.04214410, -0.06124962, 0.09131356, -0.10046803, -0.11022025, -0.05468082, 0.01854329, 0.02776346, -0.05561482, 0.00999464, 0.07872088, 0.10663646, 0.05802184, -0.11406237, 0.08616944, 0.03307953, -0.02186063, 0.00173543, 0.03726734, -0.00021935, -0.00857317, 0.09879619, -0.08804294, -0.12938866, -0.12254966, 0.11539810, -0.06057376, 0.01381594, -0.01684497, 0.04780195, -0.05084949, 0.00504023, -0.08509267, 0.07514652, -0.09913267, -0.06898568, -0.07133950, -0.02113613, 0.08765323, -0.13141777, 0.05617443, -0.00593013, -0.11552615, -0.04803073, -0.10400995, 0.06433260, 0.09995493, -0.15019612, -0.09665703, -0.09518413, -0.01916582, -0.00324307, -0.10095225, 0.08713906, -0.05283961, 0.05853719, -0.02850073, 0.03802887, 0.09370424},
  {0.02821723, -0.04547576, -0.04534093, -0.10043850, -0.08824518, -0.00661772, 0.18001492, -0.10965911, 0.09110512, 0.01482505, -0.17832360, -0.00863968, 0.04260579, -0.08273943, 0.10348713, 0.01208853, 0.02552916, -0.03636777, 0.01350254, -0.04480952, 0.06543033, -0.01043940, -0.03390520, 0.07939075, -0.08276051, 0.02925332, -0.10394578, 0.00590179, -0.03329091, -0.08620726, -0.05966946, 0.10792813, -0.01630872, 0.08068275, 0.14781412, 0.11477826, 0.00976931, 0.08331750, -0.00380370, -0.05583765, -0.01666596, -0.09541898, 0.01216954, 0.05523438, 0.02177796, -0.04534137, 0.00130862, -0.07271397, -0.07892141, -0.03257282, -0.00726895, 0.12759155, 0.08807609, 0.06864831, -0.06770057, 0.00523582, -0.01041589, -0.11564644, -0.06122575, 0.14106916, 0.03854150, -0.03942607, 0.01823232, -0.06729197, 0.12100472, -0.08331885, -0.00145311, -0.05264825, 0.05582001, 0.09518689, 0.12696786, 0.07559608, 0.00396102, -0.01968624, -0.03214840, 0.00178779, -0.10850282, 0.08532227, 0.02974492, 0.02092820, 0.03117396, -0.05994181, 0.15614939, 0.10255273, -0.02149418, -0.00994824, 0.09494742, -0.04351154, -0.00562049, -0.08831199, 0.07881217, 0.08883652, 0.07391447, 0.04227695, -0.07826312, -0.06971727, 0.11505876, 0.02098493, 0.08187604, -0.10981328, -0.01258557, -0.04357240, -0.01381588, -0.04941923, -0.00913841, -0.08167442, 0.02967315, 0.04381133, -0.01365690, -0.10109648, -0.01668004, -0.03728043, -0.02140211, -0.10678523, 0.05560526, -0.06381050, -0.07840344, -0.00023536, 0.04682473, 0.06868120},
  {0.04506718, -0.01258668, -0.04590244, -0.01457325, 0.07069887, 0.10784821, 0.09006771, -0.05177465, 0.07158207, 0.09764887, -0.27960280, -0.07394368, -0.05862784, -0.02071584, -0.02209955, 0.05217788, -0.00413589, 0.03148519, 0.03992186, 0.06182817, -0.01567842, 0.04765243, 0.17962962, 0.02400492, 0.08528556, -0.03816121, -0.07050789, -0.04252080, 0.09553269, 0.08947215, -0.12863147, 0.11089506, 0.02050121, -0.03128801, -0.10394901, 0.05947974, 0.09825870, 0.01568375, -0.00475525, 0.14260210, 0.03214549, -0.05460036, -0.15027240, 0.04066776, 0.06735128, -0.12301115, -0.07809058, -0.01221033, -0.07626656, 0.08307687, 0.01592162, -0.22094432, -0.06442415, 0.02800424, -0.13713349, -0.13803002, 0.03128554, -0.04700979, -0.21405545, 0.03560429, -0.10656700, -0.15728818, -0.26592606, 0.08637856, 0.04690398, -0.00685271, 0.03726332, -0.09767414, -0.03688592, 0.05934493, 0.00688834, 0.01554028, 0.08516588, -0.01208627, -0.02794407, 0.01961159, -0.09960607, -0.05873038, 0.01730656, 0.09373333, -0.01041194, -0.04825419, -0.03225632, 0.05419768, 0.00081358, -0.01367242, -0.06502964, -0.03988916, 0.03810855, 0.08753163, 0.10157536, 0.14070979, -0.16463800, 0.18197979, -0.00812027, 0.07294070, 0.29330567, 0.07511992, 0.06024765, -0.06701174, 0.08723139, 0.07851233, 0.00017847, -0.05868448, -0.11908279, 0.07319831, -0.07523013, 0.04561514, 0.02595178, -0.01832284, 0.05622779, -0.09886969, -0.00825168, 0.05009396, -0.15894595, 0.00306219, 0.08405276, 0.06940939, -0.01736156, 0.07185368},
  {-0.00837113, 0.03845743, -0.00415150, 0.03957784, -0.00381090, -0.02290538, 0.08655636, -0.02048522, -0.08489439, 0.08263800, -0.12766801, -0.02667888, -0.11904763, -0.03532027, 0.17594007, 0.00687028, -0.05370939, 0.06097165, 0.05952917, 0.18148121, -0.08000989, 0.00441789, 0.06174722, 0.11100687, 0.04066794, 0.05164114, -0.09443941, -0.08128828, 0.05198133, 0.04686920, -0.14339019, 0.18063384, 0.11591965, -0.02425209, 0.05252569, 0.08434381, 0.12784702, 0.04582822, 0.11369999, 0.01830717, 0.01740406, 0.03027160, 0.12637235, 0.03981347, -0.08205847, 0.00900324, -0.06908412, -0.07054795, -0.04628259, 0.16607417, 0.04769174, -0.05589100, -0.03775967, -0.08958758, 0.05972080, -0.13748735, -0.03787894, -0.00086081, -0.20412603, 0.13586605, -0.07486493, 0.18577300, 0.04823920, 0.17409430, 0.11273434, 0.07450415, -0.00660455, -0.07276909, 0.05600446, -0.05169235, 0.07823414, 0.06612507, -0.00102280, -0.10815470, 0.17253301, 0.01326444, 0.02849611, -0.01173561, 0.04731775, -0.14349410, -0.07022162, -0.18407780, -0.04480830, -0.07748123, 0.02467569, 0.01162867, -0.16446935, -0.04020336, 0.12093712, -0.02192939, 0.03065728, 0.04914545, -0.16503175, 0.12299214, -0.04826740, 0.00060699, 0.02259450, -0.10324124, -0.09785017, -0.07466074, 0.00144577, -0.10924453, 0.02360104, 0.10864576, -0.08139262, -0.05716206, 0.08483005, 0.07989814, -0.08765456, -0.08367616, -0.03018397, 0.14185651, -0.14194162, -0.10348329, 0.04661711, -0.02401842, -0.18989021, -0.13148908, 0.09043366, 0.03461460},
  {0.08713645, -0.05980685, 0.00712769, 0.08442920, 0.07416113, -0.06849019, 0.07001252, 0.08238640, 0.07839973, -0.11407968, -0.01273733, 0.02341688, 0.08322335, -0.01002010, 0.12837614, -0.13035585, 0.04951679, -0.03342183, -0.07343289, 0.07662435, 0.12134485, 0.01214810, -0.19061476, -0.01350945, -0.03743855, 0.06013795, 0.03860941, 0.06491060, 0.08281603, -0.03791222, -0.02522808, 0.09553615, 0.01318415, 0.06063693, 0.01163668, -0.06852708, -0.04990296, -0.02700864, -0.04631686, -0.00831559, -0.04691595, 0.12213416, 0.07527827, 0.13062227, 0.09077423, -0.01158259, 0.04052382, -0.05720522, 0.10710574, 0.04311502, -0.00153528, -0.04530951, -0.10890424, -0.06398775, 0.06693299, 0.11774772, 0.05352329, -0.06899782, 0.09284030, 0.20816885, 0.10817884, 0.06742530, -0.04602561, -0.00766784, -0.08874015, -0.21543670, 0.07842032, -0.07776336, 0.16403757, -0.03455357, -0.09402487, 0.02210170, -0.09813543, 0.07675780, -0.09282987, -0.06359629, -0.00032323, 0.04212538, -0.03196476, -0.14566036, -0.12699486, 0.03406852, -0.06719909, 0.03857934, -0.13827072, -0.03205305, 0.16055371, 0.02207375, 0.09437338, 0.02180606, 0.07847501, -0.07942885, 0.09797204, 0.07896019, -0.17384660, 0.11569412, -0.24384990, -0.08949320, 0.07298774, 0.00457647, -0.01158230, 0.01616044, -0.11331216, -0.06692530, 0.00221698, -0.01256201, -0.07851300, -0.02739484, -0.04711072, -0.10160778, 0.19996268, -0.10519144, 0.12558584, 0.08500701, -0.05175745, 0.05591194, -0.06775316, -0.03768252, 0.11123421, 0.11597512},
  {-0.08791841, -0.07727557, 0.03680122, -0.11280450, 0.10346819, 0.02260636, 0.07917408, 0.02419291, -0.07004850, -0.11817233, -0.18395925, 0.01408209, 0.09695467, 0.10777381, 0.24809602, 0.07879749, -0.21981212, -0.03600877, -0.10840589, 0.09497361, 0.12162463, 0.13473369, -0.03107831, 0.05904467, 0.02395828, -0.10035025, -0.10020883, -0.00955689, 0.05368804, -0.11338811, -0.07460067, 0.17532369, -0.10912897, -0.05030952, -0.16219354, -0.08143487, 0.18264425, 0.15135291, 0.16891240, 0.19195898, -0.03430004, 0.05078949, 0.10762502, -0.04300746, -0.16995817, -0.15429084, -0.03010646, -0.11264450, 0.12250266, 0.06497429, 0.01060133, 0.05219107, 0.08699428, -0.05611769, -0.02881549, -0.15381642, -0.06492509, -0.01579903, 0.02303807, 0.23892869, 0.05549929, 0.29545298, -0.01179832, 0.06162940, -0.10013615, -0.14015670, -0.08786520, 0.06222637, -0.09179906, 0.06788764, -0.00012208, -0.03338438, 0.17259075, -0.08624024, 0.15896630, -0.02425415, -0.02770084, -0.05610049, 0.00792002, -0.03316909, 0.06533806, -0.09187070, 0.05223009, 0.03165488, 0.04685894, -0.12394997, 0.00583771, -0.11352087, 0.00350174, -0.03744600, 0.05730499, 0.20387214, -0.31403726, 0.01710748, 0.12096509, -0.06467058, -0.08148656, 0.05749772, -0.02158923, -0.14098342, 0.01971293, 0.00352688, 0.00026469, -0.03802793, -0.03444171, -0.01776151, 0.15479495, 0.08317427, -0.19756804, -0.02088190, -0.12171440, -0.09883419, -0.16087054, 0.00921227, 0.19450521, 0.03656365, -0.20342878, -0.02376701, 0.06702736, -0.02421298},
  {0.17662269, 0.05051423, -0.06315970, 0.03616901, 0.11346390, 0.09495747, -0.05256370, 0.00215759, 0.06002531, -0.01898812, 0.04576755, 0.09534923, 0.07484913, -0.08018131, 0.00312842, -0.06262495, 0.08807005, 0.02067612, -0.10211467, 0.01017645, 0.00771393, 0.04000885, -0.12247254, 0.07538389, 0.03520127, 0.06003136, 0.10187586, 0.03316255, 0.16126955, 0.08078555, 0.04152901, -0.07310908, -0.01033185, 0.07963419, 0.05282481, -0.10027484, 0.08416052, -0.01446118, 0.16050516, 0.07945534, 0.09573782, 0.10604300, 0.13137358, 0.05353837, 0.02750360, -0.09346842, 0.03790456, -0.12054963, 0.02665994, -0.06615764, 0.05062631, -0.05928531, -0.06482177, 0.13952425, 0.09055150, 0.05421634, 0.01207054, 0.08316924, 0.12973794, 0.09279714, -0.09759064, 0.00990914, 0.09406340, -0.05600250, -0.03064516, -0.02612655, 0.09872114, 0.10882072, -0.03623684, -0.05491811, -0.05334161, 0.09707708, 0.00949128, 0.01808592, -0.15497237, -0.11993629, -0.09306509, 0.02991453, -0.11578828, 0.12234896, -0.07821004, 0.04916884, 0.08796348, 0.17447446, -0.04781754, 0.08553857, 0.03419176, 0.01687955, -0.14107123, 0.03191222, -0.11737859, -0.14361349, 0.04744878, -0.11043552, -0.05358109, -0.00720895, -0.23293397, -0.11791845, 0.06105595, -0.08349378, -0.06356159, 0.05897529, 0.12589714, -0.02183967, 0.13426168, -0.05861432, 0.14015222, -0.04338381, 0.01196943, 0.07239505, -0.13028458, -0.05735743, 0.13616532, 0.08423441, 0.10724286, -0.11695398, 0.12578398, -0.06003129, -0.06255767, -0.07913402},
  {0.00905158, 0.19841924, -0.00325743, 0.04382145, 0.03944584, 0.12456052, -0.02866143, 0.01655743, 0.02313372, -0.02358193, -0.25092208, -0.05015952, -0.04751608, -0.03797659, 0.07780980, -0.05389605, 0.05150273, 0.02560961, 0.06056889, -0.09601020, 0.02279604, -0.09458853, 0.11592648, 0.06932836, -0.04448680, -0.09920833, 0.03587662, 0.05129630, -0.07270259, -0.01711114, -0.14181553, -0.04951011, -0.21582446, 0.04430814, -0.09146610, 0.03444852, 0.07551646, -0.01117380, 0.01200850, 0.02475987, 0.07279296, 0.02091334, 0.05616175, -0.09577005, -0.04037983, -0.04306374, 0.13949548, -0.11458308, -0.01022836, -0.00367284, -0.06063921, -0.02395915, 0.00594227, 0.12350954, 0.05321236, 0.03174563, 0.04316361, -0.03290826, 0.11806192, -0.14978176, -0.05808898, -0.04451984, 0.05241227, -0.00197015, -0.23194450, -0.13868503, 0.17141214, 0.22015344, 0.13771461, -0.05111554, -0.04846358, 0.13822657, -0.06783289, -0.17719863, 0.04458676, 0.01002300, 0.17791744, -0.09793515, -0.13919859, -0.13394891, -0.12590663, 0.07186255, 0.00268619, 0.04954916, -0.10632644, -0.01948221, -0.13434325, 0.04557664, 0.13246369, 0.01663660, -0.03244248, 0.00077559, -0.00543511, -0.08593469, -0.12632273, 0.03239866, -0.03038410, -0.00065047, 0.06063344, -0.00228477, -0.01658251, -0.02380818, 0.07568307, -0.16523534, -0.08584685, 0.08039267, 0.11196189, 0.05013383, 0.03229535, 0.09562404, -0.05632496, -0.14718457, 0.13332371, -0.10046401, 0.08988508, 0.06551828, -0.12171714, -0.06924232, 0.01334542, 0.04300816},
  {0.00874153, 0.02959659, 0.03423506, -0.09463415, 0.09288991, 0.02522444, 0.04549495, -0.10265998, 0.11252986, -0.07365661, -0.02358536, 0.15146829, 0.02251155, 0.07600486, -0.12208657, 0.07045516, -0.06052215, -0.01888068, -0.00100226, 0.09417960, 0.07462982, 0.01932184, 0.02083048, 0.15980546, 0.09433284, -0.02947705, 0.02372224, -0.02683397, 0.01463790, -0.05772884, -0.14745589, 0.01648545, -0.10730931, -0.12382054, 0.03988848, 0.14146030, 0.10373413, 0.04107198, -0.03687266, 0.04510094, -0.03422711, -0.11750895, -0.04363326, 0.01340678, -0.02423918, 0.02188316, -0.05289618, 0.09026007, 0.08137561, 0.03506086, -0.11879169, 0.05106308, 0.02171332, 0.07768533, 0.03766928, 0.00126572, 0.03502345, 0.05889761, -0.00351817, 0.19052304, -0.01359134, -0.05943342, 0.03049094, 0.06733008, -0.01912581, 0.03041611, -0.05614844, -0.04750072, 0.08645438, -0.02948520, -0.00833169, 0.06545005, -0.04116246, 0.13525464, 0.09486541, 0.10616811, 0.03566392, -0.02055430, -0.04223709, -0.21512344, -0.04434386, 0.08708543, -0.00511543, -0.06390589, 0.13430405, -0.00670940, -0.10897935, -0.07130352, 0.13312644, -0.06881075, 0.17706950, -0.02790322, 0.03989484, 0.03820397, -0.07114404, 0.12379117, 0.03542935, -0.06207441, 0.02658842, -0.10615337, 0.05615276, -0.08101249, -0.11477935, -0.11698973, -0.26278341, -0.07076435, 0.10233640, 0.11066233, 0.06304241, 0.04390420, 0.14303575, -0.08984357, -0.08195120, 0.05513998, -0.07184406, -0.06477617, -0.06558521, -0.00617598, 0.00847479, -0.00248805},
  {0.08504195, 0.15944412, -0.02514118, 0.00416481, -0.00587718, 0.08757732, -0.26652199, -0.10796690, -0.03291555, -0.06020522, 0.03415747, -0.06144191, 0.13574795, -0.11687914, 0.00219275, 0.03661661, -0.07311748, 0.09669064, -0.08713069, 0.01725233, -0.14498624, -0.07799532, -0.05902693, -0.09096077, 0.05873957, -0.11337380, 0.15726088, 0.10080922, 0.10545148, 0.09242420, 0.04132959, -0.13420624, 0.04990385, 0.04401862, 0.01088647, 0.11389279, 0.00624896, -0.09907944, 0.02698685, 0.10676784, -0.01561819, -0.03320603, 0.03293692, -0.10770044, -0.00296518, -0.16974118, 0.05138967, -0.00729960, -0.07183664, 0.02039861, -0.00117095, 0.04323665, -0.12897624, -0.03014135, 0.11701167, -0.10639099, -0.01260660, -0.05497838, 0.03552350, -0.05588689, 0.16466565, -0.04016035, -0.01550207, -0.07638910, -0.18124418, -0.04933729, 0.11153057, 0.13559096, 0.02066183, -0.09849366, 0.05181541, 0.03190726, 0.07404437, -0.13572142, -0.06257884, -0.02830710, 0.07843794, -0.02187073, 0.08861931, 0.13853438, -0.01321809, 0.07839126, 0.10884685, 0.04855138, -0.00727272, -0.09139799, -0.01158963, -0.04313335, -0.16601844, -0.00337501, -0.14287303, -0.11791980, -0.05146668, -0.05081353, -0.09334461, 0.04112787, 0.08501736, -0.05936325, -0.08596808, -0.01831488, 0.04611265, -0.09696635, 0.20538145, 0.12157888, 0.14403644, 0.04753310, -0.09149121, 0.03506504, -0.02047935, -0.08725585, -0.03230406, -0.20937274, 0.04273083, -0.03910242, 0.13525555, -0.04022155, 0.23574559, 0.00137803, -0.01296260, 0.00196639},
  {0.15131088, 0.06018143, -0.13980107, 0.04440115, -0.01147073, -0.02534883, 0.06830385, -0.12062137, 0.00575898, 0.01456400, -0.04243823, 0.15875453, 0.11491174, -0.06158599, 0.13282365, 0.01640315, -0.04463951, -0.01087357, 0.01936659, 0.12447972, -0.00626935, 0.02373493, -0.00774695, 0.13114555, -0.17503101, 0.09885634, -0.10357887, -0.12205895, -0.00127340, -0.14815998, 0.06586631, 0.00751580, -0.25425476, -0.06886737, 0.02790763, -0.06757140, 0.02272785, 0.02944146, 0.05020402, 0.09724669, 0.07598577, -0.06235236, 0.01695975, 0.01345451, -0.06354859, -0.10740315, -0.04676765, -0.10452408, -0.01030499, -0.02238177, -0.06892436, 0.12962797, -0.03180549, 0.02747584, -0.00415790, -0.01612632, 0.00417096, 0.04123235, -0.14061317, 0.18208490, 0.01691575, 0.03637545, 0.05631867, -0.08508230, -0.08461656, -0.03833995, 0.11417724, 0.12208606, 0.10324805, -0.01447161, 0.08688349, 0.14186232, 0.04521357, -0.15129808, 0.08895814, -0.09810981, -0.09500877, -0.04873838, 0.11650085, -0.16513561, 0.11957268, -0.22536634, 0.11002607, 0.03946229, 0.13140655, -0.13729979, 0.00196061, 0.06668552, -0.06631297, -0.05984671, -0.09164102, -0.05632906, 0.09216665, -0.11758544, 0.13873158, -0.10240830, 0.05736304, -0.09798860, -0.11042561, 0.01690935, 0.00735256, -0.06711631, -0.04310871, -0.12860614, -0.00074158, 0.04874759, 0.23761760, 0.08465285, -0.05731581, -0.08581043, -0.12306650, 0.16164719, -0.12308832, 0.05245527, 0.14885867, 0.03763837, -0.11363671, -0.02286846, 0.13944623, -0.05948647},
  {0.11285679, 0.10121379, -0.10951664, 0.04139693, -0.06559394, 0.07670398, 0.07116280, -0.08178767, 0.02716331, -0.10829984, -0.11937106, 0.06469113, -0.06503940, -0.15027319, -0.01590892, 0.07158391, -0.05527955, 0.13509122, 0.09392450, 0.04752895, 0.16583844, -0.17762262, 0.20893341, -0.20054162, 0.02649301, -0.06456669, 0.14245668, 0.02970065, -0.02461721, 0.03027902, -0.02042565, -0.08641832, 0.01175573, -0.04579807, -0.11462820, 0.03177352, 0.08393033, 0.15603347, 0.06334534, 0.07067563, 0.05164133, -0.13682543, -0.09007394, -0.10496625, 0.07251670, 0.04055466, -0.04484009, -0.03448930, -0.08860245, 0.01467414, -0.02774967, 0.09060080, -0.00606618, 0.01968848, -0.18129472, 0.02898821, -0.02453423, 0.12409613, 0.11944542, 0.06651904, -0.12072513, -0.07733501, 0.23463859, -0.11895531, 0.04261282, -0.10526720, 0.12902565, 0.05794758, 0.08605140, -0.07825541, 0.09442714, -0.00198661, -0.16691521, 0.03530053, -0.14477061, -0.24910511, 0.01606395, -0.00351161, 0.15104428, -0.13705853, -0.00330587, 0.23163302, -0.03502526, 0.04271598, 0.09030529, 0.01148098, -0.06234391, 0.03255088, 0.14901748, -0.14048101, 0.01190498, -0.10457140, 0.04156282, -0.13653184, 0.10027225, -0.01388665, 0.10193987, -0.09084766, -0.05440828, 0.03920544, 0.06250580, 0.08578865, 0.05029544, 0.15898693, -0.22629468, -0.01908513, 0.09096509, 0.16570987, 0.14150284, 0.03430828, -0.12213044, -0.05344773, 0.02123855, -0.05458229, -0.01040031, 0.00772850, 0.04646944, 0.11458410, -0.21078101, -0.02545786},
  {0.09804205, -0.04836880, 0.15865228, 0.07211973, 0.11223631, 0.10202160, -0.01904614, 0.08466467, -0.00457776, -0.07596881, -0.12694927, 0.01928382, 0.18361092, -0.01896721, -0.01646165, -0.08310412, 0.06071391, -0.01510102, -0.00810721, -0.04010131, 0.03294126, 0.02088030, 0.08876581, -0.02257658, 0.16730456, 0.08224025, 0.06746523, -0.09531542, 0.02213981, 0.07475895, 0.05388760, -0.01665749, 0.01995667, 0.20728065, -0.01324674, -0.10298469, -0.08922204, 0.06387349, 0.02984737, 0.05727913, -0.05234754, 0.08526490, -0.00894774, -0.04991702, 0.13633484, 0.06659152, 0.03653400, 0.04376035, 0.13401808, 0.04585212, -0.05051439, -0.00413711, 0.05679644, -0.04259108, -0.03028664, -0.14920115, -0.03095413, 0.06690713, -0.05557023, 0.01636262, -0.07568482, -0.17865165, -0.01282580, -0.03172413, -0.10540485, 0.13709593, 0.08868971, 0.06032435, -0.10448872, -0.00139491, 0.04776232, -0.00568976, 0.02385093, 0.05072157, -0.20159793, 0.00051605, -0.04186711, -0.05695658, 0.06226930, 0.06009368, -0.06390294, 0.11939939, -0.02519901, -0.02443406, 0.10315552, -0.07920814, -0.15946741, -0.00357369, -0.06695567, -0.08084846, -0.00133738, 0.01594777, 0.13275655, -0.03587084, 0.16031106, -0.10576236, 0.04346363, 0.06000355, -0.10834819, -0.01235104, 0.08301597, 0.03574522, -0.18900242, -0.04563151, -0.10376024, 0.02687971, -0.07673358, -0.10783602, -0.06400281, -0.10111577, 0.06788769, -0.00713850, 0.09895899, -0.07726296, -0.08153467, -0.00444360, -0.04738051, 0.04561291, 0.06873553, 0.17834078},
  {0.04141103, -0.07651605, -0.10395629, -0.02390440, 0.10888210, 0.19972110, -0.07669431, -0.09344944, 0.01849464, 0.09052692, -0.08499510, 0.12005662, 0.05595180, -0.05413226, 0.10129815, -0.00086724, -0.12432110, 0.02432683, -0.02958958, 0.12544914, 0.08852228, -0.06009959, -0.27474028, 0.01829224, -0.12874962, 0.01298785, 0.09292996, -0.02967362, -0.02645370, -0.08094518, -0.00053774, 0.06038152, -0.11320852, 0.03488946, -0.01465932, 0.01642124, -0.07526341, -0.12936473, -0.02290768, 0.07586716, 0.04396575, 0.10270614, 0.01823755, -0.01437745, 0.05384298, -0.04668738, -0.01105808, -0.08374801, 0.08054654, 0.07117005, 0.11532559, 0.05366042, -0.01127890, 0.09750064, 0.01111493, -0.01978854, 0.00540958, -0.01631441, 0.06750655, -0.12570693, -0.08814510, 0.08972158, 0.22055855, 0.10457404, -0.06103446, -0.07987811, 0.14771605, 0.11320799, 0.14089036, 0.00468521, -0.09551250, 0.08456245, 0.03666007, -0.00305027, -0.00917188, -0.08694806, 0.14694244, 0.09160601, -0.08522285, -0.06326499, 0.12217467, -0.01860571, -0.03992441, 0.09826083, 0.05721732, -0.20146418, 0.02611582, -0.09465589, -0.03855971, -0.03148653, 0.01109712, -0.10056156, 0.06074645, -0.00140770, -0.11965315, -0.08380865, -0.19978575, -0.03024831, -0.05268106, -0.06864364, -0.07596959, -0.03372402, 0.16603979, -0.03505374, 0.00975462, 0.05727899, 0.04768803, -0.10871154, 0.00089938, 0.05398116, -0.06513517, -0.03807196, 0.05099788, 0.09326348, 0.13294630, -0.10396340, 0.03550196, -0.10387086, 0.03065216, 0.05068644},
  {0.08157641, -0.05049379, 0.01450002, 0.06406742, -0.10294513, 0.10979328, -0.05413794, 0.01331298, -0.08950565, 0.08735929, -0.12447482, -0.06137811, 0.10829002, -0.02951011, 0.16827983, 0.01385665, -0.15383218, 0.05257029, -0.02716746, 0.08724467, -0.02604236, -0.03857680, -0.19479682, -0.00222417, -0.07430991, 0.04058065, 0.06625804, -0.06932859, -0.01623914, 0.02194133, 0.07734831, -0.04903679, -0.01736777, -0.08964850, -0.05428852, 0.10309771, -0.02788309, -0.01054581, 0.04711379, 0.01103409, -0.05093388, 0.00215682, 0.00994524, 0.07057413, -0.03915109, -0.10902411, 0.01362234, -0.07584418, 0.04340528, 0.12205065, -0.04639789, -0.00437398, 0.07493029, -0.04942456, 0.02722790, -0.07686680, 0.04035111, -0.03094771, 0.10738496, -0.07884832, 0.01747840, 0.06811978, 0.18346955, -0.02854387, -0.02215765, 0.01454156, -0.10257297, 0.01108386, 0.02320589, -0.06769974, -0.04629583, 0.09075939, 0.04127677, -0.09457048, 0.02643290, 0.01441828, 0.08612397, -0.00400411, -0.06483936, -0.12076917, 0.03436687, 0.01949848, 0.11148039, 0.01273862, -0.03377245, -0.14133039, 0.11552586, -0.07028516, -0.00023269, 0.04453154, -0.04288673, -0.09974345, -0.02947036, 0.08974300, -0.04690633, -0.01809602, -0.08832275, -0.05716606, 0.00468598, -0.02997075, 0.05811168, -0.05822928, 0.00063240, -0.03096518, 0.07061205, -0.03614054, 0.10779239, 0.11098971, 0.02940763, 0.00533323, 0.02722925, -0.00400797, -0.01857837, 0.03890722, -0.01401337, -0.07645474, 0.15255906, -0.13145860, 0.04657820, -0.09318171},
  {0.14468868, -0.10829594, 0.00931163, 0.07523267, -0.14085305, 0.06363524, -0.05926358, -0.10366221, -0.00767962, 0.00880191, 0.02390817, -0.08151993, 0.08147059, 0.03069627, -0.03702170, 0.02510196, 0.11213574, -0.00442174, 0.04107151, 0.00464901, 0.12855946, -0.11218386, 0.03034461, -0.12273432, 0.11206713, 0.06699686, 0.10455090, 0.06030927, -0.01679861, -0.06982050, 0.08482111, -0.09708238, 0.11333565, -0.05253195, -0.00020375, 0.05160767, 0.21445382, -0.02540566, -0.05115951, -0.05723976, 0.00809228, 0.02384473, -0.03009058, -0.07533211, 0.06627323, 0.07500308, -0.13042103, 0.06566032, -0.13024648, 0.00374922, 0.08784420, 0.02705155, 0.12456089, -0.05752732, 0.03738195, 0.04399381, -0.02557562, 0.12134036, 0.07062700, -0.03865758, -0.14778079, 0.16304362, 0.06714201, -0.05584924, 0.03819738, -0.13773552, -0.14685144, 0.06734772, -0.04977317, 0.04083956, 0.00440550, 0.09975535, 0.08011744, -0.03238510, 0.01258801, -0.09235644, 0.09360683, 0.08444458, -0.09478840, 0.06639607, -0.13593817, 0.05513517, -0.07774251, 0.00250962, -0.14791337, 0.08808666, -0.06699324, -0.07360268, -0.07355971, -0.16345130, 0.11046671, 0.07025626, 0.09772837, -0.13982350, -0.04179138, -0.00684624, 0.04194282, -0.06592111, 0.08163299, -0.08807544, -0.09805977, -0.07361017, 0.09714471, 0.11526211, -0.11301939, 0.08201336, -0.03659273, 0.02643808, -0.01029639, 0.02208401, 0.03885809, -0.01769629, 0.02098558, 0.01433135, 0.07047424, 0.01736344, 0.05612551, 0.18020308, -0.15772061, 0.08256587},
  {0.17357533, 0.00864387, -0.01871572, 0.05464415, 0.07929900, 0.00702795, -0.04143852, -0.11455902, 0.03838211, 0.07494069, -0.09364361, 0.01313197, 0.12526639, 0.09305251, 0.01433061, 0.04945263, -0.02403619, 0.00991187, -0.00462865, 0.03837845, -0.04384945, -0.03362356, 0.00014095, -0.06597830, 0.00995755, -0.09030037, -0.01114035, 0.05906153, 0.06419245, -0.00613477, 0.04748110, 0.05259192, -0.18840499, -0.00699524, 0.06056082, 0.08782352, 0.10620144, 0.05048104, 0.01496996, 0.02152569, 0.05654441, 0.04243080, -0.01301334, -0.00437148, 0.05469865, 0.00301748, -0.06933636, 0.05361618, -0.01745277, 0.06997541, 0.07545728, -0.08138537, -0.07094885, -0.04725635, -0.04969169, 0.03795631, 0.03599228, -0.04199862, 0.13232800, -0.14821951, 0.10227413, -0.01906747, 0.05849760, -0.04330667, 0.01092614, 0.01023902, 0.05851748, 0.00587388, 0.04024966, -0.09961606, 0.11945293, -0.07916970, 0.01619304, -0.03669644, -0.07212862, -0.11763814, 0.09780687, 0.06673708, -0.14219591, 0.04009988, -0.02621415, -0.06267258, -0.04345430, 0.07220273, 0.10306782, -0.07188741, -0.04805935, -0.11441702, -0.06150595, 0.02657488, -0.09811528, -0.02235242, 0.04682730, -0.05979300, 0.13450320, -0.06758619, 0.00886973, 0.06312467, -0.02353972, -0.12242089, -0.11369021, -0.06579138, 0.04526304, 0.06177115, -0.03796785, -0.05963969, -0.02375213, -0.03793297, 0.06266627, -0.12535770, -0.09616229, 0.04537736, -0.01289860, -0.10629645, 0.05558148, -0.07050626, 0.02243516, -0.13512708, 0.00721684, 0.11067528},
  {0.07189224, -0.07351327, -0.02481002, -0.03231610, 0.02760931, 0.11865719, 0.10170681, -0.07099092, -0.06604986, 0.03009600, -0.01764125, -0.01204416, -0.05584449, 0.03295275, 0.08358116, 0.15682544, -0.02286318, 0.09900744, 0.02948795, 0.03626150, 0.08968542, -0.03485738, 0.02222309, -0.02284146, -0.04825876, -0.06466446, 0.09680746, 0.06522326, -0.02246863, 0.04483945, -0.01834930, -0.07383987, -0.09064870, -0.04086103, 0.05319486, -0.00096091, 0.04868061, 0.06649526, 0.16034524, 0.07029884, 0.02222968, -0.11751621, 0.07293247, 0.02005027, -0.13334996, -0.06302630, 0.02694406, 0.06616923, 0.02129149, 0.05815738, 0.10449062, -0.09183854, 0.12460358, -0.01284771, -0.11221763, 0.09131620, 0.03624913, 0.07443091, 0.06095359, 0.06241101, 0.03536914, 0.00435089, 0.03883285, 0.02683628, 0.02171884, 0.05264052, 0.08038493, -0.02691405, -0.08129761, -0.04235625, -0.05322759, -0.06991289, 0.14000466, -0.06402302, 0.05679847, 0.01470619, 0.04653886, -0.00715582, 0.16071603, -0.00373620, 0.03749047, -0.05263526, -0.02253200, -0.02559840, 0.06858319, -0.11589270, -0.09106652, 0.02289437, -0.09768986, -0.04226029, -0.13729623, 0.02697262, -0.05410093, -0.03691422, -0.07727195, -0.11175038, 0.07799943, 0.04027517, -0.00679651, -0.04214441, -0.11233976, 0.04454920, -0.00490309, -0.04150130, -0.11131121, -0.02412608, 0.11368585, -0.00174352, -0.00135307, -0.01757632, -0.00775973, -0.01558300, -0.01567374, -0.05572977, 0.13785948, -0.08855319, 0.05746839, 0.00428945, -0.06971377, 0.11374321},
  {0.05375768, 0.06392156, -0.02621101, -0.04684357, 0.05539959, -0.01118028, 0.10668910, 0.06787635, 0.12599033, -0.09102252, -0.06449500, 0.08013473, 0.04804502, 0.14659920, -0.10098118, -0.00919415, 0.02310099, -0.12104018, -0.05304617, 0.00054945, -0.00077879, -0.05692713, 0.02339617, 0.00124135, -0.09365867, -0.07111483, 0.05826364, 0.01368366, 0.02641348, -0.11894330, 0.02319711, 0.08757450, 0.09525488, -0.04537504, 0.10959915, 0.09987315, -0.05355259, -0.07696562, -0.04830426, 0.05680257, 0.03254956, 0.06487548, 0.06724560, 0.07679319, -0.06859432, -0.13025533, 0.03818584, -0.00751905, 0.13873330, 0.06114097, -0.06113722, -0.02659135, 0.01963084, -0.04673151, 0.03234690, 0.06115025, 0.06403742, -0.12183555, -0.19356267, -0.04067310, 0.00812809, 0.02467705, -0.04237685, 0.11670306, 0.07787595, 0.16301745, -0.05331667, -0.03798741, 0.06099443, -0.09457332, -0.00933020, -0.07643322, -0.02953087, 0.01247529, 0.11245564, -0.01005134, 0.02731187, 0.02304865, -0.10247923, -0.06253082, -0.06206725, 0.09316340, -0.09411072, -0.07894962, 0.08606846, 0.06541505, -0.29055440, -0.11232111, 0.02884929, -0.02656857, 0.00543377, -0.00024891, -0.12956616, -0.03588553, 0.12933873, -0.03370817, 0.00255274, -0.11898220, 0.01265305, 0.02751621, 0.00628494, -0.01623494, -0.03293064, -0.13658912, -0.11466129, 0.04083110, 0.01335362, 0.06735475, -0.02855723, -0.02068143, -0.03205858, 0.05266128, -0.01731048, -0.10322630, -0.10449860, -0.03489428, -0.13077512, -0.04161751, 0.06666834, 0.06482987},
  {-0.02998256, 0.04774924, 0.07346198, -0.11056604, 0.06945902, 0.00674600, -0.02621872, 0.08400839, 0.12043431, -0.02582560, 0.08046220, 0.05463162, -0.13688338, 0.10440785, 0.09304335, -0.01646515, -0.00882293, -0.06270238, -0.11657778, -0.09257513, 0.16697584, 0.02031320, -0.00519129, 0.00477287, 0.04661508, -0.11487450, 0.02612810, -0.00493081, -0.07446525, 0.00226038, -0.07411338, 0.07194945, -0.02298157, -0.03853643, 0.06037945, 0.07830507, 0.11588489, 0.01723311, 0.04101255, 0.01359748, 0.08134703, -0.01979411, -0.07043415, 0.06808972, -0.10887754, -0.02900159, 0.01924927, -0.11108845, 0.08936543, 0.06181670, 0.08248139, 0.00583930, -0.06577313, 0.03910494, 0.00256067, -0.06544577, -0.15062901, 0.03164861, -0.00361229, 0.03507052, -0.10521232, 0.00103978, -0.01648761, 0.07861082, -0.12606838, -0.05804281, -0.08287101, 0.16442539, -0.08421034, 0.04971563, -0.01685662, -0.09983487, -0.09999156, 0.00411755, 0.01656993, -0.03222810, 0.00473804, 0.04262842, 0.18342075, -0.07774891, -0.09346039, 0.00684562, -0.02596459, 0.10396920, 0.12635219, -0.00864777, 0.01271612, -0.09823132, 0.06180186, -0.06553540, -0.06173762, -0.01683323, -0.09549574, 0.02304837, -0.03355516, 0.07984208, 0.09717129, 0.03365198, 0.04776590, -0.12817448, 0.02948699, 0.03030721, -0.00090239, 0.10564146, -0.15911900, -0.05743220, 0.03574325, 0.08857394, 0.01016141, -0.07525908, 0.00953582, -0.01406825, -0.15453219, -0.00946315, 0.15403731, 0.03347260, -0.08326641, -0.17319377, -0.09556571, 0.08385610},
  {-0.05689031, -0.08314571, -0.03242058, -0.04972035, 0.05022643, 0.06621932, 0.06736191, -0.05571277, -0.02978324, 0.07735424, -0.06099018, 0.02120195, 0.10826240, -0.01082826, -0.06655551, 0.01993888, 0.07997794, 0.07052944, -0.09715577, 0.10918812, -0.03473248, 0.15233760, 0.02063778, 0.03346313, -0.24838857, -0.01196466, 0.01006436, -0.03103284, -0.03316831, 0.05620004, -0.06803706, -0.12281307, 0.07130410, -0.18260562, 0.01420964, -0.08253288, 0.01128221, -0.04895271, -0.04935953, -0.07151046, -0.07879978, 0.08528656, 0.02335477, 0.05042849, -0.01457228, 0.11776598, -0.14939238, -0.11698648, 0.08466125, -0.07615331, -0.04635514, 0.00600387, -0.06298169, 0.02682022, -0.03519724, 0.00613772, -0.00223102, 0.01673884, 0.01930926, -0.07536130, -0.14943646, 0.05796209, 0.12085008, -0.07821050, -0.00842719, -0.03688093, 0.16824043, 0.00860850, 0.07746387, 0.01656153, -0.12703621, 0.14580274, 0.12365069, 0.09457014, -0.01419803, -0.02170902, 0.08915804, -0.10870539, 0.03716953, 0.10246675, -0.08376918, 0.00614830, -0.09845755, -0.02534752, 0.04051394, -0.13545455, 0.08824997, -0.02829385, 0.01070254, 0.13580716, -0.03601752, 0.13015215, 0.05915111, 0.09915463, -0.06303765, -0.16742620, -0.02415597, -0.02734336, 0.02389084, -0.08496390, 0.05703446, -0.00977692, -0.01883584, -0.05811098, -0.04874320, 0.00667637, 0.03097775, -0.05664000, -0.03473829, -0.08824577, 0.14432697, 0.03098752, 0.05258298, 0.02434571, -0.11916009, 0.08472490, -0.09157376, -0.02178489, 0.02195930, 0.11157805},
  {-0.05962009, -0.06234837, 0.01558367, 0.05477889, 0.14259328, -0.06486640, 0.00287787, -0.11158476, 0.04114784, -0.01972300, -0.09918410, 0.07130579, -0.03791612, -0.04198074, -0.10608764, -0.06076911, -0.06887549, 0.08592931, -0.06772368, 0.08636612, 0.20196126, -0.05251265, 0.04053440, 0.17750244, -0.01302258, 0.08365107, -0.03882750, 0.02261980, -0.09808706, -0.03331741, 0.07145344, 0.08556413, -0.06938245, -0.08750194, -0.06522809, 0.00902447, -0.11460709, 0.03554551, -0.05142369, 0.05316597, -0.04958916, 0.13822539, -0.10172751, 0.10769603, -0.07366411, -0.00810852, -0.09240086, -0.08253723, 0.00794563, 0.01056289, -0.08142240, -0.08113665, -0.07458881, 0.01594069, -0.11447974, -0.00181301, 0.07571973, 0.03695719, 0.01204001, 0.14840603, -0.12545991, -0.02075872, 0.04947356, 0.15294051, -0.11523014, 0.00329545, -0.04597666, -0.01234611, 0.10536274, -0.02871823, -0.05877985, -0.05400325, 0.00492835, -0.01851962, 0.18254107, -0.13229205, -0.00894893, -0.00511076, 0.16153668, -0.11767484, 0.06219222, -0.01247799, -0.00552732, -0.07379702, 0.19545412, -0.11334363, 0.20755152, -0.07157703, 0.15220803, -0.04385705, 0.09300026, -0.03187905, -0.12185340, 0.16654590, 0.13485679, 0.10877319, -0.09169014, -0.06894612, -0.10929015, -0.09555972, 0.00327912, -0.01731866, -0.06842763, -0.06270952, -0.05472264, 0.01077768, 0.15659238, -0.09776020, 0.13816932, -0.03461603, 0.02799464, -0.01355731, -0.16293229, 0.07878225, -0.02651133, 0.00697732, -0.15105481, 0.02336508, -0.07349971, -0.13039960},
  {0.04056257, 0.00452394, -0.05443436, -0.01026204, -0.06375542, 0.01576535, -0.03478996, -0.02737985, -0.01215558, -0.07379951, -0.14527471, -0.18440060, 0.22124515, -0.03538726, 0.00903484, 0.07730946, 0.03877551, 0.05333101, 0.01692028, 0.03628358, 0.08085728, 0.01601793, -0.08668695, -0.07186572, 0.06321087, -0.04799452, 0.03223053, -0.10106165, -0.12095582, 0.06983789, 0.10679659, 0.03614238, -0.05966618, 0.00251225, -0.02958106, -0.03508478, -0.04380431, -0.17397197, -0.05726403, 0.06475957, -0.00032944, -0.01646882, 0.00648121, 0.03573287, 0.08868069, 0.07469127, 0.08272862, -0.07804090, 0.12453382, -0.07716593, -0.01232934, -0.11835128, 0.07972376, 0.03509183, 0.11151283, 0.10520551, 0.08040944, 0.05921001, -0.03089628, 0.01555405, -0.10199207, -0.03376902, 0.21408802, 0.04674708, -0.00487959, -0.02116448, 0.01678246, 0.14500439, -0.06473748, 0.03211460, -0.12102270, 0.05630016, 0.03403478, 0.08808853, -0.10170324, -0.01710656, 0.02709474, 0.02639765, -0.01867579, 0.02987968, -0.11015901, 0.13019314, 0.07509553, -0.00295652, 0.15110780, 0.11681511, -0.02379149, 0.01420386, -0.00850692, -0.00339070, -0.03487476, -0.03051506, 0.20931172, -0.07078242, 0.05234076, -0.18724044, 0.00585344, 0.09285165, -0.09225177, -0.02456412, 0.00112904, -0.09954154, 0.14867730, 0.14555238, -0.04619702, -0.03520272, -0.11992270, -0.10010094, 0.04986602, 0.00516943, 0.02696207, -0.08473737, 0.01558485, -0.01743143, -0.19363034, 0.00024538, 0.14764351, 0.08485262, -0.12086335, 0.17934816},
  {-0.22241466, 0.25902554, -0.11930188, 0.03958573, 0.14262240, 0.25311008, -0.15118898, 0.08178094, 0.03274223, -0.00991942, -0.18325238, 0.16334698, -0.04878785, 0.02505236, -0.01716331, -0.04051234, -0.08106546, -0.14469028, 0.02059486, 0.19267026, -0.01260400, 0.05412566, -0.01693661, 0.10257143, -0.10683618, -0.05342631, 0.06011336, -0.00937220, -0.06248318, -0.01063784, -0.07711350, 0.02054813, -0.05248251, 0.06087904, -0.19471668, -0.15334174, -0.12628083, 0.07476686, 0.04339118, -0.02230750, 0.03754789, 0.15688848, 0.12831070, 0.09285677, -0.15845501, -0.06807026, 0.01549497, -0.02874323, 0.21577725, 0.09947995, 0.13608448, -0.01035981, -0.21612431, 0.05047242, 0.03828796, 0.14124739, 0.05467632, -0.12860170, -0.00048181, -0.06877274, -0.07191820, -0.11115868, -0.03127543, 0.02799297, -0.07751525, -0.04719229, 0.15928018, 0.09022062, 0.03797630, -0.05242908, 0.11338206, 0.09981383, -0.04771065, -0.14354767, 0.06524667, 0.07814463, 0.04819836, 0.08423197, 0.07944082, -0.07811691, -0.10018374, 0.03115879, -0.03293143, 0.08003949, 0.13040118, -0.07427261, 0.02391781, -0.02119203, 0.11616380, 0.14984533, -0.10174725, 0.19288264, -0.10950365, 0.17979890, 0.01244467, 0.03420365, 0.05989819, -0.11701028, 0.00055798, -0.04455763, -0.02967528, 0.08803568, -0.04998038, -0.09412570, -0.03580903, -0.06454701, 0.09790222, -0.05627549, -0.11290828, -0.06945864, 0.01068787, -0.05789402, -0.01947529, -0.10388245, 0.15093997, -0.03566340, -0.18465972, -0.01913349, 0.19768405, 0.05820039},
  {0.06639039, 0.04309553, 0.11364806, 0.00716301, 0.10431330, 0.04362186, 0.03177872, 0.08762679, 0.02004411, 0.08388207, -0.20549369, 0.12081369, -0.03113930, 0.03984882, -0.11103381, 0.03192733, 0.11900839, -0.04562358, 0.07058413, 0.13004729, 0.02994174, -0.05425600, -0.09806094, 0.12672988, 0.09682351, 0.02373530, 0.08897418, -0.04266531, -0.03073166, -0.08363417, -0.00583725, 0.06484175, 0.03091766, 0.07117672, -0.08127504, 0.06388576, 0.01944187, 0.06319009, 0.00131890, 0.04406839, -0.05967379, 0.00763991, 0.03325054, 0.00746948, 0.03637247, 0.04142853, -0.04380449, -0.05209123, -0.06033696, 0.09683685, -0.11780708, 0.02807000, 0.06246964, 0.03329423, -0.04916739, 0.06578086, 0.05295096, -0.03540429, -0.07523359, 0.08065152, -0.02109489, 0.02176872, -0.05395782, -0.15363932, 0.09735466, -0.04652607, -0.10799626, -0.01947935, 0.08174438, 0.06372868, -0.10482699, -0.08688249, -0.05423772, -0.03937560, 0.10983188, -0.15076867, -0.03650144, 0.06033914, 0.01269844, -0.19779958, -0.04964071, -0.05114856, -0.09097691, -0.07393187, 0.00117459, 0.03798397, -0.13851623, -0.00343221, 0.07535899, 0.00746282, 0.06317011, 0.04177882, -0.09885096, 0.06735072, 0.05874536, -0.00439738, 0.00971635, -0.03558237, 0.03763338, -0.07620368, -0.13134106, -0.09368926, 0.05653509, 0.10235795, -0.20478520, -0.12856022, 0.09073094, -0.01082053, -0.04951306, -0.10417645, -0.05993002, -0.04475047, -0.16283585, -0.02135602, 0.11214454, 0.05743096, -0.21167389, 0.00046896, -0.09976199, 0.03757092},
  {0.02382117, 0.09927586, 0.11186056, -0.05518096, -0.02352508, -0.04712830, -0.04453009, -0.10295484, 0.09707540, 0.07192075, 0.01617361, 0.08966815, -0.06767599, 0.06493321, -0.00657684, -0.03086559, -0.06277649, 0.03581380, 0.00113604, 0.04430468, -0.10559882, 0.11476085, 0.06303984, -0.05218104, -0.09573675, -0.10131252, -0.04736815, -0.00152681, 0.00873875, 0.04517956, -0.10910488, 0.02237234, 0.10317761, -0.04463855, 0.02358584, -0.07013926, 0.09702490, -0.04952419, 0.11898288, 0.05999497, -0.11158300, -0.02826278, 0.12500523, -0.00662220, -0.00648104, -0.08535159, -0.03233102, -0.08272465, 0.12172527, -0.05819982, -0.03058678, -0.01017149, -0.10307370, 0.03232339, 0.03722631, -0.07747621, -0.07976422, -0.11016171, 0.11028662, 0.06827126, 0.06172399, 0.11577539, -0.05754616, 0.07629821, -0.02422056, 0.12743717, 0.07375663, -0.04119515, 0.05759048, -0.01341061, 0.13126247, -0.00405888, 0.13108575, 0.03042733, 0.05764408, 0.08930611, -0.13811967, 0.04302817, -0.01296596, 0.10413824, 0.05236430, 0.08260062, -0.01883794, 0.07044055, 0.02882861, -0.07950725, 0.04511944, 0.07952451, 0.04225326, -0.03049765, 0.08839118, -0.04111059, -0.01277285, 0.14916569, 0.13821815, -0.05310810, -0.10595231, -0.04388665, 0.02819419, -0.11902229, 0.07029436, -0.01305986, 0.02560766, 0.04945832, -0.02632978, -0.05651807, 0.10709289, 0.10964682, 0.13273373, -0.11884955, 0.12739037, 0.16021472, 0.06421773, -0.06070758, 0.08033539, 0.01328063, 0.03243114, -0.06396292, 0.14789259, -0.01051344},
  {-0.04225032, 0.07961675, 0.02919036, -0.02058807, -0.00335381, -0.02384556, 0.04712449, 0.07175118, 0.06230390, -0.01176887, -0.03487979, -0.03978154, -0.03094532, -0.09304126, -0.04018226, -0.09348237, -0.04988814, -0.00681050, -0.06319091, 0.10098374, 0.07630944, 0.13340554, -0.13163981, -0.09299087, -0.02883643, 0.05234499, 0.08407477, -0.01376778, -0.04900169, 0.00343869, -0.05943263, -0.08667478, 0.06326050, 0.04902000, 0.08033325, -0.13385351, -0.10121579, 0.04809245, -0.14268973, -0.11911447, -0.02811484, -0.00919470, -0.00612320, 0.01745482, 0.08427018, -0.05626014, -0.16022515, -0.08154751, 0.04142133, 0.08713586, -0.01607880, 0.16746309, 0.10999689, -0.06062198, -0.00523572, 0.04253646, -0.10904796, 0.06585439, 0.08029658, -0.05180936, -0.08061853, -0.06611130, 0.09223891, -0.00862786, 0.05145721, 0.01608290, 0.02745089, -0.08801383, 0.13090736, -0.07203464, -0.08325786, 0.05763455, -0.00302857, -0.03225172, -0.00964000, -0.10442858, 0.22377974, -0.12457070, -0.06473818, 0.03160359, -0.23880112, 0.16100545, -0.17411600, -0.15364718, -0.05611194, -0.11050759, 0.08761524, -0.04675918, -0.05949366, 0.03249362, 0.09354124, -0.08053682, 0.05178823, 0.03407450, -0.12860757, 0.00824108, 0.06661022, 0.01821020, -0.02858230, -0.09781889, -0.05463714, -0.08088178, -0.10362593, 0.03307808, -0.08696514, -0.03126357, 0.04117649, 0.00110095, 0.02073726, 0.08196811, -0.04030985, -0.03879281, 0.01187334, -0.10684179, -0.10359053, -0.07832259, 0.05643938, 0.00598829, -0.15430105, 0.04164426},
  {-0.00802658, 0.02894270, -0.04180188, 0.06540859, 0.05424371, 0.13873796, 0.02835131, 0.06610623, -0.02680112, 0.06658682, -0.10579427, 0.10636035, 0.12824515, -0.06880280, 0.09556245, 0.03923199, -0.11195527, 0.17750563, 0.07924412, -0.02543376, 0.09539428, -0.03543570, 0.06433990, 0.00295459, -0.03425884, 0.08631106, 0.06642830, -0.03355783, -0.03428412, -0.05871269, -0.01568621, 0.05619542, 0.04983427, -0.00708457, -0.06975763, 0.04867154, 0.06871433, -0.01199730, 0.09020913, -0.10232777, 0.01713951, -0.10732187, -0.03329707, -0.01914278, -0.09616378, -0.02358124, -0.02060801, -0.07959581, -0.05895436, 0.08013038, -0.04902251, -0.06214502, 0.15973860, 0.14832380, 0.00574923, 0.05628532, 0.02620640, 0.21504225, -0.07631747, -0.00407984, -0.04157089, 0.12142593, 0.03322581, -0.03189770, 0.06841429, -0.15213995, -0.01408248, 0.01661251, 0.08000374, -0.11224129, -0.08355241, 0.04581355, 0.10070360, 0.09719232, -0.11556907, -0.20665593, 0.05345989, -0.05001705, -0.00437165, 0.02297748, -0.06655882, 0.13591954, -0.03101908, -0.06823789, 0.11480945, 0.10189540, -0.18223636, -0.01584627, -0.13642547, -0.16448970, 0.06505402, -0.03181771, 0.08211871, 0.01728655, -0.09645659, 0.04704782, 0.04959420, 0.01489540, -0.02624442, -0.04672057, -0.06823214, -0.11867854, -0.08019152, 0.09194127, -0.10763181, 0.02806390, 0.02428446, -0.01629013, 0.08019423, 0.04660233, -0.15522811, -0.05277213, -0.15683679, 0.09261228, -0.05760476, -0.10759383, 0.02129648, -0.10565302, -0.02363549, 0.13120446},
  {-0.06039337, 0.00505930, 0.06267542, -0.08871865, -0.04158481, 0.11900125, 0.01601918, 0.08883304, -0.00737534, -0.06069170, -0.03611765, 0.02930726, 0.01166475, 0.05361874, -0.05175703, 0.04404451, 0.13293734, -0.06155645, -0.09846044, 0.03522575, 0.11550485, -0.06234326, 0.07421660, 0.01944276, -0.19221132, 0.01078985, 0.16250154, -0.01047059, 0.00454274, -0.04982052, 0.07515781, -0.06928856, -0.09205938, -0.04640326, -0.05744652, -0.07783051, -0.14990252, 0.06050117, -0.14395708, 0.06186040, -0.06459664, 0.01711385, 0.09012731, 0.11185698, 0.00905378, 0.14541931, -0.02913783, -0.02161047, 0.13915379, 0.15272544, -0.11827067, -0.01078830, 0.11004527, 0.09727771, -0.02950332, -0.04535981, -0.00600701, -0.11610520, -0.09471044, -0.02440534, -0.01546809, 0.04673994, -0.06909540, -0.00172016, 0.01519667, 0.05054547, 0.14485201, 0.06511742, 0.00663484, 0.05404387, -0.01798956, -0.16287039, -0.00627082, -0.14602622, -0.07541785, 0.12521805, 0.04802731, 0.00596964, -0.11342723, -0.07999171, -0.14665759, -0.03125360, 0.03550812, -0.04106779, 0.03398651, -0.05614452, -0.05062802, -0.00530375, -0.01254179, 0.08933955, -0.07802020, 0.01949216, 0.03778480, 0.01134907, 0.00029268, -0.15170331, -0.09558694, 0.09355870, -0.02762047, -0.12436439, 0.04599155, 0.01108069, 0.14219229, -0.01450703, -0.12289108, -0.11768858, 0.04553196, -0.17019424, -0.02447358, -0.09950411, 0.07616825, -0.03244872, -0.16628085, 0.08634575, 0.04889420, 0.04888335, -0.12055933, 0.07669526, 0.06136039, -0.01270192},
  {-0.09952880, 0.11993594, -0.02624619, 0.07904471, -0.02985837, -0.11153603, 0.02046683, -0.09974476, -0.09588141, -0.00222731, 0.06963804, -0.07804195, -0.01121474, 0.00250251, 0.07284573, -0.02954482, 0.04396758, -0.15807998, -0.03050629, 0.05798101, -0.06336769, -0.02061468, 0.18632287, 0.10513484, -0.13921022, -0.06325235, 0.01306766, -0.00965702, -0.01208452, 0.05189463, -0.00787173, 0.08930469, -0.07075206, 0.02570316, -0.03902416, -0.10271022, -0.00774052, -0.10950805, 0.04512253, 0.08819520, 0.06379243, 0.12710549, 0.02300807, 0.04556493, -0.16315927, -0.19509140, -0.00939640, 0.00961979, -0.03128076, 0.12461627, 0.10738745, 0.12249357, 0.04736381, -0.12830257, 0.00467165, 0.02690485, -0.10407872, -0.08613639, -0.14178643, 0.06913987, 0.05934585, -0.12613478, 0.02252292, -0.00950690, -0.00820757, 0.14480840, 0.01019412, 0.00774167, -0.07140663, 0.08589601, -0.12179174, 0.03291530, -0.05173021, 0.06887132, -0.01079667, 0.15359922, -0.10280598, -0.00136911, 0.04384799, -0.02277535, -0.22177358, -0.03839463, 0.01681575, 0.10279665, -0.07392769, -0.09699579, -0.13696750, 0.06588729, -0.08121700, 0.23697452, -0.12554450, 0.02808017, 0.01097288, -0.05049144, 0.00531687, -0.02444066, 0.04839275, -0.08961039, -0.01247683, 0.09160990, -0.05003688, 0.01687640, 0.14545351, -0.05196867, 0.11218587, -0.04224197, -0.00011720, -0.05603003, -0.12701900, -0.04037192, -0.00402083, 0.02625211, 0.15164131, -0.06477894, 0.03211945, 0.07037964, 0.04748955, -0.09368169, 0.04089015, -0.04105382},
  {-0.08022548, -0.09938697, 0.06349626, -0.07666150, -0.01453474, -0.10865042, 0.00892247, 0.02577127, 0.02191915, 0.01480960, -0.06745814, -0.07011081, -0.07798922, 0.16429974, -0.13506125, 0.01593292, 0.20401497, 0.00892903, 0.08866537, -0.23179668, -0.10100765, 0.03275438, -0.07323073, -0.14143458, 0.12476271, -0.01023891, 0.03266271, -0.10170730, -0.01138460, -0.02177697, 0.04113939, -0.05276829, 0.02241009, 0.04457768, -0.10868049, 0.04561642, -0.06861053, 0.04899906, -0.10230662, -0.00887603, -0.01089267, 0.10050879, -0.07586422, 0.07070791, 0.09670497, -0.14695403, -0.08236578, 0.08353080, -0.05416869, -0.06225106, 0.10041151, -0.07210099, -0.04096311, -0.02379683, 0.04269423, -0.03873472, 0.04289061, -0.14225700, -0.11140407, -0.02866360, 0.06411656, -0.10638814, -0.15252843, 0.01811207, 0.18069845, -0.12300243, -0.06154168, 0.01373688, 0.19985676, -0.08910180, -0.08092289, -0.04331693, -0.03373917, 0.02879042, 0.12364946, 0.06551927, 0.08944742, -0.02106536, -0.03337382, 0.12285560, -0.19045989, 0.05968493, 0.06776113, -0.16898224, -0.13370349, 0.14997032, 0.14022715, 0.00191825, 0.01459762, 0.13228048, -0.00388829, -0.03964038, -0.06901353, 0.00307897, 0.02280397, 0.00222858, 0.07861195, -0.07759498, 0.06118587, 0.04867890, 0.04456223, -0.09113989, 0.04411438, -0.16218714, 0.09065259, 0.03682523, -0.22009493, 0.00307380, -0.04339143, -0.07426460, 0.11992779, -0.24099521, 0.07142713, -0.02811912, -0.04251146, -0.09006518, -0.02300620, -0.00783714, -0.01415458, -0.00314647},
  {-0.09532563, -0.14641626, -0.14537194, 0.01998999, 0.07673883, 0.03096773, 0.11450789, -0.09030470, -0.17901401, -0.11434008, -0.07447212, -0.16645253, -0.00163807, 0.00710742, -0.06682107, 0.07220561, -0.07811679, -0.03479055, -0.01206738, -0.07286032, 0.01129994, -0.00584752, 0.00187932, 0.14689864, -0.04701175, 0.07834791, -0.04687025, 0.08890093, -0.04018912, -0.02181235, -0.12645516, -0.01052115, -0.08936735, -0.15609708, -0.03419990, -0.00834696, -0.05779200, 0.01787521, 0.01444023, 0.06698592, 0.05037754, -0.01574742, 0.02945158, 0.09256867, 0.05004669, -0.01431376, -0.16431250, -0.10759801, 0.11065178, 0.06368096, 0.10380319, -0.03780531, 0.02513972, 0.06820195, -0.05596159, -0.08442134, 0.07314342, 0.14943007, 0.02917098, -0.03275163, -0.15817331, -0.03366131, 0.10577730, 0.14823598, -0.02228458, 0.10935707, 0.02356244, 0.09125963, -0.08318713, -0.01744295, -0.13294815, -0.06574511, 0.09123068, 0.09657332, -0.31710643, 0.11386691, -0.02840286, -0.10444681, 0.09927132, -0.10749505, -0.06170788, -0.18001705, -0.11655995, 0.16184922, 0.08955189, -0.02904092, 0.00687013, -0.05494499, -0.10252903, 0.00964843, -0.05419881, 0.11446336, 0.12109105, 0.02850780, 0.07281464, -0.11085242, -0.07335909, 0.07419654, 0.06753454, -0.05764519, -0.13981080, -0.06192815, 0.01216207, -0.17476217, -0.11630133, -0.10966279, 0.09851438, -0.27267960, -0.00093631, -0.10479312, 0.02846197, -0.09192469, -0.13447547, -0.08313876, 0.00744279, -0.03156649, 0.06960902, 0.06845815, -0.08577494, -0.02294442},
  {-0.10648859, -0.02667983, -0.12277500, -0.10164826, -0.02741497, 0.06496109, -0.03402641, 0.07127815, 0.07822891, -0.03645694, 0.01715968, 0.06893864, 0.09543004, 0.07886859, -0.09034876, -0.09266104, 0.07732951, -0.04316331, -0.02958169, -0.04566630, -0.06845040, 0.11207195, -0.01300696, -0.02953191, -0.11832828, 0.03681467, 0.10035244, -0.05465599, -0.04137948, -0.09162708, -0.06947159, 0.11217234, 0.00281724, 0.04822962, -0.04474023, 0.01693098, -0.00546173, 0.05599862, -0.11028636, 0.07041808, -0.05587766, 0.04445874, 0.07366699, 0.06415401, 0.02339207, -0.05025042, -0.08132628, -0.06457905, 0.15505111, 0.17303200, 0.09696998, -0.12812816, -0.05358339, -0.10892661, -0.06736979, -0.00436926, -0.10766693, 0.08939448, -0.02126241, 0.06032727, -0.06779167, -0.08261621, -0.10197741, 0.13463682, 0.02197628, -0.02260862, 0.12864138, -0.10299461, -0.05304482, 0.06516461, -0.03179487, 0.08783948, 0.06311744, -0.01202871, -0.04607452, -0.06643029, 0.13244410, -0.05405284, 0.07718222, 0.12007463, -0.00301240, -0.07432526, -0.05108815, 0.11350659, 0.05557225, 0.00786709, 0.03583533, -0.07835347, 0.08429681, 0.00857759, 0.07823221, 0.03429865, 0.12139520, 0.09958623, -0.00218193, -0.06430421, 0.02668548, -0.08021792, 0.10010850, -0.04866551, -0.08242157, -0.10560297, -0.02397897, -0.07337630, -0.00212636, 0.02540305, 0.15029337, -0.04145979, 0.00721791, -0.00126074, 0.15637107, 0.06951556, -0.03019155, 0.04249484, -0.12549597, -0.09458233, 0.12428609, 0.02089776, -0.03807878, 0.12042445},
  {0.17208102, 0.01386330, 0.05382446, 0.03666313, -0.03840535, 0.02431592, 0.02462369, -0.09936590, 0.02581199, -0.11313742, -0.14547811, 0.09623723, 0.05613019, -0.01688780, -0.01108262, -0.05044067, 0.00940046, -0.03086098, -0.02369005, -0.01300034, -0.03884482, -0.02788337, -0.05443665, -0.09264322, -0.00202733, -0.01079449, 0.01254894, -0.00354903, -0.07060613, -0.09395649, -0.13079672, 0.05286486, 0.01504088, -0.10438407, -0.11476673, -0.06109405, 0.00798430, 0.01405012, 0.02815363, -0.10431910, -0.04291249, -0.09833910, 0.05983490, -0.02463687, 0.09948625, 0.06447770, 0.08427177, -0.07040696, -0.00369551, 0.04755644, 0.04756293, -0.07602169, 0.13119978, 0.07217018, 0.08600169, 0.01228024, -0.00863891, 0.06193189, 0.05819855, 0.10534032, -0.10220871, 0.12694515, 0.01329337, -0.03836282, 0.05499241, -0.01460460, 0.04773445, 0.07857018, 0.00609145, -0.00168869, 0.04252886, 0.11142241, -0.04361370, 0.02911738, -0.07853076, 0.03087899, 0.03709759, 0.07634628, 0.06469042, 0.03963863, -0.03198459, -0.11098009, 0.04728403, -0.00685199, 0.06894819, 0.09515206, -0.11329689, -0.02745515, -0.13872634, -0.01567049, 0.03660408, -0.01345409, 0.03023157, -0.04607033, -0.13925348, 0.03715643, 0.01436647, -0.03134480, -0.10543677, 0.05971991, 0.04547369, -0.06981753, 0.07360876, 0.15201713, -0.12460078, -0.08483140, 0.03889976, -0.08147547, -0.08986651, -0.02656088, -0.02777083, 0.06638353, -0.11784360, 0.00698450, -0.04398301, 0.03862163, 0.06743723, -0.10290078, -0.03934940, 0.14446385},
  {0.13823791, 0.22235371, 0.02660558, -0.11278715, -0.10849418, -0.00518176, 0.01435643, 0.01497622, 0.25240663, -0.08506003, 0.02852503, 0.06816103, -0.09973771, 0.02731157, -0.14893886, 0.01014968, 0.20791799, -0.02409219, 0.01336595, -0.04361753, -0.01456159, -0.17214809, 0.22737138, -0.12988117, 0.14046057, 0.06946100, 0.13548441, -0.08965327, 0.06528220, -0.10251866, -0.02532535, 0.01899623, -0.17954136, 0.10790297, -0.05363194, 0.01731302, -0.25062448, -0.02558276, -0.02854901, 0.02283741, 0.06643331, 0.15500128, 0.19612709, 0.06178205, 0.02151510, -0.16566096, -0.03323445, 0.04654000, -0.03957174, 0.07181093, 0.06252075, -0.03324843, -0.16347781, -0.17890650, 0.13752219, 0.06197298, -0.05342665, -0.29198319, -0.05231172, -0.12820606, -0.00788727, -0.07148232, 0.05860836, -0.09774011, 0.05143292, -0.06763844, 0.00075599, 0.18643130, 0.10118868, -0.01161560, 0.09252936, 0.02817431, -0.24453127, 0.03205013, 0.29247853, 0.09043971, 0.04157417, 0.04446036, -0.04575841, -0.31175429, -0.06532821, 0.03737517, 0.07173224, 0.09389097, -0.03077124, -0.13815260, 0.19473842, -0.07989769, 0.18772633, 0.05623640, -0.16282330, 0.03044799, -0.10042085, 0.07056803, 0.11211350, 0.02031192, -0.22178662, -0.12316255, 0.10526627, -0.08628905, 0.06670347, -0.03865552, 0.02637030, -0.38695121, 0.25629807, -0.07669193, -0.00012837, 0.14226699, 0.07625996, -0.03514921, -0.07804491, -0.14213596, 0.21420948, -0.06357516, 0.09332364, -0.09240367, -0.04254678, 0.10937136, 0.12687477, 0.03577700},
  {0.04229222, 0.05579111, -0.11664280, -0.02344670, 0.08250368, 0.17148580, -0.05897232, -0.09181183, -0.10837936, -0.03403001, 0.07549610, -0.01485265, -0.04549733, -0.23186634, -0.00113691, -0.05292603, -0.21959141, 0.05618260, -0.05766042, 0.05841653, 0.00687206, -0.04385185, 0.05348310, 0.07351651, -0.01554741, 0.09682985, 0.04956660, 0.06137829, -0.04440715, -0.03424354, 0.12501429, 0.00573293, -0.00761837, -0.02779460, 0.10133629, 0.10119571, -0.09003556, -0.04455727, -0.02844772, 0.02598906, 0.03328343, -0.01530798, -0.18056166, -0.07453660, -0.03829687, 0.00137782, 0.02685313, 0.07976221, 0.05852996, 0.09641228, 0.12643784, -0.05426440, 0.03826531, 0.00779146, -0.04322178, 0.19992267, -0.11533653, 0.08525956, 0.10275882, -0.10227940, -0.05082354, 0.02797143, 0.00246219, -0.00336476, -0.11490086, -0.09691530, 0.22975716, 0.01226902, 0.12012253, -0.08642619, -0.03406623, 0.04665961, -0.07581876, 0.05156854, 0.04473794, -0.01650291, -0.00036012, 0.06859557, 0.04146268, 0.03875155, 0.08420102, 0.00818807, -0.21373636, 0.05199829, 0.23383673, -0.11122170, -0.14578538, -0.11262669, -0.05615454, -0.00908040, -0.02176106, 0.00097469, -0.00907618, 0.04490136, -0.04809886, -0.00601961, 0.08606026, -0.05964008, -0.03101043, -0.09115480, -0.00587839, -0.03151153, -0.04331668, 0.13133244, -0.01514310, 0.02951357, -0.01969110, -0.09510705, -0.02848125, -0.08083110, -0.16974610, 0.00044870, -0.10946731, 0.07739877, -0.02147935, -0.10051294, 0.25250676, 0.00348923, -0.27809057, 0.16750532},
  {-0.07576759, -0.01487307, -0.06695288, -0.05768724, -0.04085851, 0.03876526, -0.02458372, -0.06700286, 0.00535453, -0.01322427, -0.18901284, 0.02342570, -0.03447945, -0.02848867, 0.13287203, -0.06709746, 0.01561865, -0.03194612, 0.08211116, 0.03513529, -0.01572816, -0.05275561, -0.16322225, 0.02915592, -0.04488561, -0.07637759, -0.03327004, -0.11710037, 0.05005727, 0.06531300, 0.03850879, 0.00414247, -0.00684704, -0.06196984, 0.01342132, 0.06320298, 0.11760509, -0.06359486, 0.03273674, 0.00189818, -0.07815031, -0.00325803, 0.07280979, 0.01289611, -0.01384634, 0.04681575, -0.08676314, -0.05833538, -0.03005133, 0.01043566, 0.11564493, -0.09598262, 0.00610013, 0.01213277, -0.07774869, 0.09422571, 0.09000069, 0.04529005, -0.01572051, 0.06199104, 0.01180241, -0.03740018, 0.09978916, 0.07348384, -0.12129890, 0.01280471, -0.00978520, -0.03658954, 0.07539899, -0.10122998, -0.07845242, -0.05739156, 0.15123737, 0.04681706, 0.01215006, 0.00121309, 0.09831882, -0.04478817, 0.08766951, 0.04259392, -0.21407528, 0.02093896, -0.11924876, 0.02681251, -0.00688475, -0.00670466, 0.17823301, -0.10322274, -0.10201493, -0.06364550, -0.11026787, 0.06043405, 0.12137722, 0.04216683, -0.15579633, -0.09374358, -0.00035585, -0.03000020, 0.03150121, 0.06910571, -0.00511548, 0.01840105, 0.10086026, 0.15916191, -0.05507490, -0.12367146, -0.02229960, -0.02638666, -0.15060705, 0.05459800, 0.07245961, -0.15005392, -0.00689388, -0.09701740, -0.04536356, -0.06810727, 0.07381585, 0.09119073, 0.06487259, 0.00283250},
  {-0.14865041, 0.06650352, -0.10232180, -0.09434742, -0.08894958, 0.06982796, -0.07415979, -0.00167642, -0.06356854, -0.01832383, -0.20595749, 0.09294756, -0.05162819, -0.03430873, -0.17818178, -0.09114404, -0.12076870, -0.03657609, -0.05100136, 0.05367185, 0.10718279, -0.01409217, 0.22349223, 0.05999254, -0.05182347, 0.05753369, -0.08962300, -0.10371598, -0.17249756, -0.04648025, 0.00250784, 0.08458193, 0.01285662, -0.03577186, 0.13332541, 0.00879592, -0.13898815, -0.04975849, -0.08759944, -0.03396315, -0.04052209, 0.00111586, -0.01511939, 0.07965248, -0.07509244, -0.12498973, 0.01320513, 0.04558265, 0.13614549, 0.09988154, 0.05593286, -0.02840452, -0.03743272, -0.05499056, -0.04098504, 0.25987169, 0.03397398, -0.05022027, 0.02254622, -0.09906074, 0.07274761, -0.15662117, 0.07298677, -0.03058964, -0.05214200, 0.17368574, 0.14569418, 0.00653015, 0.09909356, -0.10364673, 0.02587095, 0.16167298, 0.03308333, 0.06537235, -0.10721220, 0.10897963, 0.04890153, -0.03290902, -0.08507758, 0.00117595, -0.13383688, 0.05143322, -0.00029365, -0.07864556, 0.15483493, -0.00336431, -0.01333518, -0.11715364, -0.08037984, -0.01275456, 0.01046855, 0.01559996, 0.04167356, 0.13012171, -0.06106134, -0.01206454, -0.04320545, -0.04278322, 0.03031312, 0.04584759, -0.15462533, 0.05937219, 0.06528696, 0.12726694, -0.09228279, -0.02742359, 0.06073764, 0.00072859, -0.13612127, 0.05813807, -0.03185482, 0.07358181, 0.07807244, 0.05694779, -0.13714764, 0.09725642, 0.14061658, -0.17429231, 0.11924760, 0.15377936},
  {-0.09543200, -0.13095307, 0.06392878, 0.00654435, -0.05007922, -0.07872840, 0.03089765, -0.04369596, 0.13717337, -0.03168834, -0.02896663, -0.13047577, 0.01687512, 0.10583524, 0.07124276, 0.06099833, 0.09705944, -0.14569028, 0.05426463, -0.26281214, -0.14529586, -0.00747397, 0.08703081, -0.16890238, -0.11162417, 0.09183388, 0.04649825, -0.10876500, 0.04070274, 0.07813387, -0.08644500, -0.06215781, 0.00553287, -0.11998992, 0.00743588, 0.05999685, 0.05264426, -0.07588007, 0.12300741, -0.01092421, -0.12298410, -0.08674162, 0.17568317, -0.00120565, 0.06259646, -0.23719630, 0.02297462, -0.02218407, 0.02563215, 0.01879762, 0.14661872, 0.16390982, -0.10542662, -0.29377609, 0.05195028, -0.18628797, -0.09139480, -0.05742239, 0.05990474, 0.13183478, 0.01335250, 0.10856076, 0.07534339, -0.11605222, 0.07591623, -0.00765126, -0.01940333, 0.11450574, -0.01014339, 0.09622312, -0.01460303, 0.10052533, 0.02463993, -0.03820070, 0.10255720, 0.16303019, 0.06679039, -0.09093534, -0.06081413, 0.11737937, -0.10518079, 0.02780053, 0.08707356, -0.02426624, -0.03411485, -0.03471826, -0.02619211, 0.08041127, -0.14226843, 0.06842423, -0.11830826, 0.03636647, 0.00915561, -0.08364552, -0.10520229, -0.07701439, 0.01449884, -0.04298879, 0.05765914, 0.02528898, 0.02988425, -0.01045903, -0.06351525, -0.12571041, 0.14795598, -0.11010972, -0.07613274, 0.03517953, -0.06711698, 0.03427640, 0.18343732, -0.25961211, 0.25935435, -0.04060083, -0.01133993, -0.07360398, -0.10216621, 0.14707339, 0.16203316, -0.06550497},
  {0.05427556, -0.04166086, 0.08888080, 0.03011490, -0.06842542, -0.11053104, -0.07955833, 0.05745821, 0.09510975, -0.08780855, 0.04037455, -0.13825528, -0.00567031, 0.04405432, -0.11656431, -0.15364918, 0.12829372, -0.00830269, 0.05543315, -0.11664814, 0.09396555, 0.17801543, -0.00127057, 0.00196081, 0.02002409, 0.03567563, 0.09277107, -0.01863548, 0.03508670, 0.03865673, -0.10767923, 0.03618381, -0.07293144, 0.08584609, 0.06308815, 0.07112722, -0.04261174, -0.01006385, -0.09803300, -0.17611028, 0.05049149, 0.12895879, 0.04336942, 0.03940297, -0.01607275, -0.11095309, 0.02876185, -0.04938726, -0.09469995, 0.08490786, 0.08386081, 0.13840292, -0.01624001, -0.15045424, 0.08007707, 0.04122313, -0.05020162, -0.29867730, 0.09770428, 0.01909890, 0.12374780, -0.03567996, 0.06061653, -0.03585850, -0.01737190, -0.17693464, 0.10117079, 0.11941105, 0.16954871, -0.04740465, 0.20037630, 0.03080712, -0.00141320, 0.10606077, 0.12515093, 0.05576022, 0.13572109, 0.01444322, 0.00260641, -0.10064922, -0.16984637, 0.06143175, 0.00678590, -0.10678659, 0.00481902, 0.02686294, -0.17387888, -0.11537409, 0.15078150, 0.04055950, 0.04986482, 0.02871474, 0.10655753, 0.09869463, 0.11737469, -0.05499577, -0.02626051, -0.01457390, -0.09025140, -0.12575284, -0.11400761, 0.04438706, 0.05242378, -0.05555201, 0.07260100, 0.03448083, -0.08641553, 0.14097646, -0.02553055, 0.06035776, -0.00004124, -0.15199670, 0.24437106, -0.01655990, 0.04183268, 0.01503751, 0.06338974, 0.07865443, 0.13220906, 0.19640465},
  {0.19680898, -0.07300745, -0.12204381, 0.05267348, 0.10221492, 0.08384147, -0.02114253, -0.02509782, -0.07055800, -0.05882470, -0.05034524, 0.11609042, -0.08569962, -0.14862804, -0.01678925, -0.02824530, -0.05095094, -0.01647176, 0.01305427, 0.10317050, -0.06011709, 0.07945456, -0.12622529, 0.15553322, -0.10454258, 0.06427781, 0.00862028, 0.02408529, -0.09476579, 0.07353302, 0.09670416, 0.14437203, 0.07778144, -0.04289898, -0.08370723, -0.11423183, -0.09936685, 0.08015264, -0.09832411, -0.01057429, -0.01125045, -0.12983279, -0.00650145, 0.04480547, -0.04581883, 0.05495958, -0.03041484, 0.00747582, -0.01018440, 0.11814589, 0.00045561, -0.07280133, 0.02439506, 0.23315054, -0.08690820, 0.23137465, 0.08231190, 0.20341606, -0.00524132, 0.03599123, 0.06784911, 0.07822569, 0.05289625, -0.01587537, 0.01431441, -0.06871182, 0.19056873, -0.02451130, -0.01207693, -0.04966576, -0.00497206, 0.11545130, 0.02055276, -0.00810936, -0.32444906, -0.08731041, 0.20329416, 0.06535552, 0.05912524, 0.01945206, -0.02383142, 0.08431339, 0.02026745, 0.10578445, 0.32805970, -0.10914373, -0.01053994, 0.00284255, -0.22155802, -0.00687593, -0.01241509, -0.01549695, 0.01844184, 0.06162049, -0.08908539, -0.09680067, 0.20075762, -0.10798227, 0.09990506, -0.07253392, 0.04099660, 0.01472744, 0.09072435, -0.01034322, -0.20938216, 0.05005476, 0.17404979, -0.12123223, -0.06323516, 0.03360108, -0.19922812, 0.10335675, -0.24512275, -0.03839816, 0.14225945, -0.03545799, 0.10468411, 0.03046126, 0.02240914, -0.04241822},
  {0.03042936, -0.08035831, 0.07176954, 0.00112020, 0.01818702, -0.07622263, -0.01829786, -0.06768326, -0.07832702, 0.00906977, 0.16213511, -0.04895788, -0.01339579, -0.02316600, 0.04162006, -0.09493011, 0.08532070, 0.04863393, -0.05810099, -0.05753344, 0.03048138, -0.07622891, -0.08390715, 0.01408620, -0.08198436, -0.03369555, 0.02552066, -0.07637230, -0.03325601, 0.06417406, -0.14880930, 0.08765385, -0.04648155, 0.04092556, -0.04974732, -0.01473863, -0.05429444, -0.08089469, 0.00555129, 0.01398661, 0.02678209, -0.04893102, 0.09968264, -0.04655382, 0.00780712, -0.08056881, -0.08006283, -0.10404491, 0.08041716, -0.01097650, 0.09324294, 0.09425683, 0.06481794, 0.09834805, 0.06457107, -0.01556485, -0.02927921, 0.03167025, -0.07668820, -0.07392705, 0.07933914, -0.04070538, -0.05561097, 0.08230834, 0.07948583, 0.07746190, 0.00613801, 0.09412815, 0.00569161, 0.01351814, 0.04005450, 0.07482000, -0.00663706, 0.06072676, 0.08895528, 0.04959623, -0.05808216, 0.08770484, -0.13520275, -0.05524720, 0.09261029, -0.00433824, 0.12943016, -0.12739891, 0.06838623, -0.08080122, 0.13732617, 0.01172973, 0.06856060, 0.10143260, 0.08301828, 0.10601519, -0.02614221, 0.12748516, 0.08913878, -0.01737378, -0.03177242, -0.10975549, -0.07950405, 0.02485625, 0.08288524, -0.02301051, -0.00952484, -0.14098389, 0.13221803, 0.04778172, 0.13492416, 0.06012067, 0.02337656, -0.09894547, 0.09759926, -0.00709622, -0.01194281, -0.00517322, -0.03996307, 0.08345889, -0.05345250, 0.05266695, -0.07740960, -0.10425063},
  {-0.09767450, -0.14866255, 0.08771216, 0.05792718, -0.01896342, -0.08352706, -0.02958412, -0.04989059, 0.10428070, 0.02895401, -0.14829932, 0.11251917, 0.03164949, 0.12926149, -0.12929055, -0.07383708, -0.04389474, 0.09469692, -0.05861085, 0.05589244, -0.05103561, 0.06591580, -0.01500099, -0.05988441, -0.01087748, -0.00667124, 0.03502356, -0.08399907, -0.18820861, -0.03141476, -0.04240410, 0.09271806, -0.06018830, 0.00382841, -0.05533037, 0.08403198, -0.06694581, 0.08867098, -0.04750135, 0.03541402, -0.10479141, 0.08758298, 0.05765037, 0.04433507, 0.05471475, -0.03177545, -0.03073774, -0.12556607, 0.14003992, 0.12671696, -0.07829650, -0.08814397, 0.03270584, 0.09623993, -0.09262373, 0.07498501, -0.02849678, 0.05791547, -0.03650414, 0.03633511, -0.11659188, 0.03662162, -0.03738407, 0.15742852, -0.13818248, -0.05584098, -0.09225688, 0.00518522, 0.09537482, 0.03832035, -0.04789518, 0.01782079, -0.00143432, -0.01592067, -0.12852457, 0.08763021, 0.07760567, -0.10850392, -0.02136218, -0.05320274, -0.25276861, 0.02074672, -0.12348241, 0.11646967, 0.03818768, 0.03279822, 0.02690578, -0.07397512, 0.07394236, -0.00176586, 0.15500152, 0.09391192, -0.03095902, 0.02533373, -0.11389796, -0.12342902, -0.03743457, -0.00473878, 0.07186029, 0.06776569, 0.03140872, -0.04943331, 0.04927767, 0.04231427, 0.05835617, 0.03184525, -0.01926795, 0.02547855, -0.11477991, 0.06983407, 0.10161871, -0.10963275, -0.15459290, -0.06528233, -0.07030151, -0.02168505, -0.04185491, -0.10983206, -0.12134402, -0.01455435},
  {0.05395137, -0.00886189, 0.04274148, 0.04525597, -0.03504375, 0.13366483, 0.02485742, -0.00165355, -0.08779949, 0.06376961, 0.03605001, -0.04857873, 0.01293907, 0.06046201, -0.01869918, -0.04750089, -0.02699398, 0.10234132, -0.01276339, 0.10809974, 0.02686989, 0.16330096, -0.03383026, 0.15337862, -0.09693730, 0.06549813, -0.04473647, 0.00742362, -0.15664995, -0.02169346, -0.09131728, -0.10564647, 0.09704500, -0.01769641, 0.01457682, 0.04564625, 0.05805328, 0.06423763, 0.10143258, 0.06147875, -0.07523657, -0.08929311, 0.01843963, 0.08275186, 0.04829605, 0.07438433, -0.09124332, -0.00197729, 0.14056894, -0.07351155, 0.07836760, -0.09138855, 0.04532159, 0.02833446, -0.01006514, 0.05478773, -0.00841858, 0.04033386, 0.15409988, -0.01675388, 0.03696708, -0.03104386, -0.06358163, 0.06306489, -0.05316808, 0.04083085, 0.05117781, 0.03427639, -0.09282453, -0.10549773, -0.07835840, 0.07830667, 0.11593603, -0.01501607, 0.06157237, 0.00277063, -0.08369350, -0.03704285, -0.07776973, -0.04525434, 0.19486631, -0.17485487, 0.06701899, -0.03154516, 0.00115200, 0.03113067, -0.06456238, 0.04144785, 0.03365860, -0.08331273, 0.03389582, -0.04005828, -0.02511682, 0.07515177, -0.12742861, -0.02273742, -0.07824051, -0.05703737, 0.08007580, -0.03496845, -0.02282266, -0.07295071, 0.12585327, 0.09187730, -0.18524918, -0.03174191, -0.00185337, -0.07278303, 0.01400121, -0.02951068, -0.09101468, -0.00371502, 0.07681832, 0.05771783, -0.04538081, -0.08478849, -0.08604286, -0.05994900, -0.06510376, -0.05580230},
  {0.10314213, 0.06319707, -0.01147946, 0.04248894, 0.11616772, 0.09150372, -0.12063821, 0.04699970, -0.10218241, -0.04086674, 0.00588958, -0.06936333, 0.01648659, 0.03325372, -0.00808344, -0.08626407, 0.09077473, 0.11042764, -0.00757447, 0.03024014, 0.03706736, 0.10852862, 0.10032334, 0.11176778, -0.10856097, -0.00467691, 0.00265897, -0.06715728, -0.02332586, -0.13617617, 0.08080453, -0.12070547, -0.07440116, 0.04197984, -0.07085823, -0.12660055, -0.17931658, -0.05771348, -0.03038055, -0.06976970, 0.04003241, -0.03458646, 0.04490454, -0.05802287, -0.01310203, 0.06631662, 0.09063525, -0.02225929, 0.00205049, 0.03868481, 0.09047104, 0.12174726, 0.15047421, 0.11785902, 0.01994225, 0.04405195, 0.02302628, 0.02895146, -0.06791887, 0.01835322, -0.00629665, -0.07979486, 0.06339773, -0.07810546, 0.09191700, 0.04436360, 0.03425132, -0.00170899, 0.03744962, -0.08361740, -0.07373524, 0.02608561, -0.05596027, -0.07319394, -0.06606419, -0.04833147, -0.08566289, -0.11289570, 0.05434108, -0.03084912, -0.01241745, -0.04370290, 0.05508411, 0.10082266, 0.08337532, 0.01561945, -0.13037863, -0.09006405, 0.05507588, 0.07685952, 0.09277239, -0.04356321, -0.02437092, -0.02120532, -0.03592212, -0.00236390, -0.00247636, 0.05377822, -0.00834012, -0.03311942, 0.01042226, 0.01476517, 0.12065148, -0.01695738, 0.07803311, -0.05746530, 0.11665022, -0.11286806, 0.03258248, -0.01383613, 0.02952696, 0.02358858, -0.09643364, -0.01933100, -0.12410977, 0.03515736, 0.02084549, 0.01508480, 0.07543983, -0.06712443},
  {-0.03503442, 0.00973681, 0.02197424, -0.07536476, 0.01689245, -0.09801862, -0.03705582, 0.06052867, -0.00792540, 0.06947517, -0.24384399, 0.06775329, -0.11492439, -0.02535592, -0.11577538, -0.05590042, -0.06156903, -0.02645637, -0.05938878, 0.04844117, 0.02459413, 0.03769954, 0.10671382, -0.03103486, 0.01910667, 0.03654702, -0.04170860, 0.02708961, -0.05064977, 0.06475073, -0.01946245, -0.04945199, -0.12254500, 0.15632176, 0.06931561, 0.14357258, 0.02075906, 0.05800671, 0.04231004, -0.11312084, -0.11057926, 0.03132912, 0.02442361, 0.12430848, -0.00906330, -0.06343008, 0.05740109, -0.00712282, -0.08244865, -0.01139400, 0.06525055, 0.01620763, 0.14636931, -0.12351704, 0.12109055, 0.07452938, -0.07577372, -0.06957396, 0.21626703, 0.00883640, 0.00054647, 0.01124624, 0.16507415, -0.01965444, 0.09813803, 0.03862990, -0.02679029, 0.03626351, 0.04816566, 0.07855385, -0.00319600, 0.01167006, -0.04899178, 0.03177259, 0.15994266, 0.04907203, 0.14632444, -0.01566440, 0.02774138, 0.02411157, -0.25485441, 0.17305739, 0.10605308, 0.06018726, -0.05010040, -0.00478308, -0.17380805, 0.04484688, -0.16169591, 0.06022693, -0.14038838, -0.01707154, -0.05186911, 0.01015759, -0.14890620, 0.09499919, 0.02489916, -0.07761118, -0.04042735, -0.04658443, 0.01307372, 0.03214075, 0.14791051, 0.02482203, 0.01828755, -0.03396102, -0.03033726, -0.00793363, -0.06829000, 0.03934816, 0.09517990, -0.17137122, 0.08921314, 0.08170521, 0.01974695, 0.09008071, 0.00915787, 0.00855243, -0.06545696, 0.02383456},
  {-0.05692847, -0.04595337, -0.00740199, -0.07366669, -0.05167473, 0.02533500, -0.08371425, -0.03835012, -0.09839850, -0.10775425, -0.12705627, -0.03684200, -0.02321042, 0.14198081, 0.01083621, 0.06649990, 0.10214628, 0.01916928, 0.00099709, -0.10925852, -0.03869418, 0.03506543, -0.00804594, -0.03403743, 0.08368859, 0.04965527, 0.01918615, -0.01284449, -0.04297696, 0.01304483, -0.04047779, 0.02001935, -0.10652141, -0.10118823, -0.06055128, -0.03277610, 0.01965119, -0.08356068, 0.04625970, -0.06015142, -0.10491319, -0.05775785, 0.06551532, -0.04496295, -0.08464350, 0.00365617, -0.07327119, -0.05568353, 0.15656632, -0.03579019, -0.06847606, 0.04424603, 0.03115123, 0.05878992, -0.00141595, 0.05693853, 0.00650531, -0.02481610, -0.01291343, 0.02898162, 0.10190691, 0.03584916, -0.03132187, 0.07835625, -0.05158417, -0.10198786, 0.10090353, 0.05985398, 0.01051354, 0.06675527, 0.01541979, 0.02117912, 0.02243369, -0.00754501, 0.03305175, 0.04482647, 0.08743671, 0.05055628, -0.02755321, 0.04487364, -0.14503105, 0.11731520, -0.08466779, -0.00722259, -0.05370997, 0.09536269, -0.08266506, 0.02719595, -0.33713195, 0.06101521, -0.00734124, 0.11273109, -0.00021617, 0.01781188, -0.07250810, 0.08405332, 0.07852548, -0.04651191, 0.03980587, 0.06299973, 0.06222963, 0.08167608, -0.02386365, -0.12688981, 0.05832038, -0.09661835, 0.07907527, -0.14606422, -0.15459064, 0.06482933, 0.13329157, -0.00836856, 0.00659883, 0.08334868, 0.00744057, 0.06008932, 0.02825583, 0.01188829, 0.06753998, -0.08291622},
  {0.02547369, 0.03256643, -0.17630985, 0.06047563, -0.10639167, -0.02654657, -0.04839734, -0.09724469, -0.11504419, 0.01778670, -0.12233307, -0.01293177, 0.12445225, -0.06962694, 0.00460086, -0.00154608, -0.02446567, 0.09461908, -0.01236939, 0.04423935, -0.02134317, -0.13262320, 0.11501180, -0.00060141, -0.13350119, -0.00151589, 0.00750636, 0.00235462, 0.02252289, -0.09894600, 0.06540919, -0.03829493, -0.08931390, -0.00733726, -0.02810845, 0.06623480, 0.08321559, -0.11383478, 0.02240987, -0.05841346, -0.11836798, -0.08980380, -0.04352453, -0.17370826, -0.14847127, 0.13362981, 0.00031496, -0.13151924, -0.04975692, 0.01390593, 0.23555551, -0.11199138, 0.00658596, 0.09436477, 0.07527842, 0.02477090, -0.10204153, 0.12565568, 0.00530904, -0.05242003, -0.01981600, -0.16575372, 0.04488403, -0.03070096, 0.02613071, 0.14296937, 0.13155635, 0.09241690, -0.14780506, 0.04427956, -0.12285392, -0.16490239, 0.03153659, -0.02566835, -0.06004522, -0.06452699, -0.08734594, 0.05017624, 0.01800590, 0.15435767, 0.07241869, -0.01308929, 0.15491001, 0.12369977, 0.06402824, -0.09099261, -0.13414577, 0.03674036, -0.05812566, 0.17263386, 0.01621996, -0.09489969, -0.05307392, 0.05734124, -0.13117148, -0.08197784, -0.00240325, -0.09608367, -0.08750229, -0.02676936, 0.02149625, -0.02785347, -0.00239950, 0.05016471, 0.14025220, -0.11248138, 0.08047748, -0.09488725, -0.03802316, 0.06874179, -0.07701856, 0.02262413, 0.01379622, 0.07330873, -0.04927778, 0.05055963, 0.05106274, 0.03562705, -0.13929261, 0.13301004},
  {-0.02364784, 0.04266066, 0.06287944, -0.08205111, -0.01842661, -0.05940832, -0.11959722, -0.03168436, -0.04698433, -0.03207446, -0.08063064, 0.04837069, -0.01509386, -0.01609672, 0.06267278, -0.06195115, -0.05213005, 0.00646315, 0.08277443, 0.03365177, -0.05716556, -0.02155880, 0.01240444, -0.03946130, -0.04946122, -0.02402808, -0.06546415, 0.07777075, -0.16956958, 0.02600155, 0.01930056, -0.05119093, 0.01673620, -0.02752032, 0.05769329, -0.06878021, 0.10251866, 0.14866064, -0.10280062, 0.07036556, -0.10188220, 0.09288748, -0.02674859, -0.00039492, 0.11662163, 0.04066428, -0.06060153, -0.02811508, 0.06031702, 0.03914419, -0.05782925, 0.02646460, 0.11053135, -0.06444924, 0.06870347, -0.00537549, -0.10149157, 0.03015414, 0.07636426, -0.00765079, -0.02922733, 0.04906046, 0.02886571, 0.07141583, -0.03024984, 0.00635802, 0.10207931, -0.03474427, 0.02397129, -0.06475724, -0.07878524, 0.06601492, -0.01120202, -0.04758221, -0.05227711, 0.11077567, -0.03891257, -0.04280419, 0.08476927, -0.05779845, -0.09749991, 0.09138890, 0.01273013, 0.05695752, 0.14349996, 0.04660607, -0.16920045, -0.06826956, 0.06452844, 0.01068273, -0.04304067, -0.01747857, -0.02852765, 0.07860322, 0.00074523, -0.11012623, -0.01802869, -0.09945677, 0.03857882, -0.11711343, -0.00819230, 0.07747128, 0.15596846, 0.09422237, -0.02802834, 0.08125870, 0.03927401, -0.05202768, 0.02053913, -0.11652818, 0.07204068, -0.03408872, -0.12748201, -0.06238780, 0.09426426, 0.02862084, -0.07559347, 0.10492758, -0.02201417, 0.13978869},
  {-0.00476481, 0.00745033, 0.05250394, -0.08454053, 0.12335063, 0.07245744, 0.03722607, -0.02961278, 0.00912866, -0.02571693, 0.14180696, -0.01177551, -0.07543196, -0.01415398, 0.06083895, -0.09901977, -0.02948932, -0.00605879, -0.06928381, 0.02241698, 0.05142340, -0.02387320, 0.00161550, -0.04653002, -0.11229377, -0.05972974, -0.11678292, -0.09317615, -0.01380222, 0.06855315, -0.12311497, -0.06669965, 0.04588973, -0.10391481, 0.04567350, -0.05381206, -0.00377388, 0.06373090, -0.01811689, 0.03219636, 0.04135478, 0.08790101, -0.06555551, -0.04284007, -0.04165894, 0.07134746, -0.06723906, 0.05862093, 0.11009344, 0.09627568, 0.07812423, 0.12085353, -0.07498945, 0.04541320, -0.02776858, 0.04121814, 0.02303516, -0.02638024, -0.05847724, 0.07441053, -0.05811293, 0.02439365, 0.04482723, -0.05809960, 0.06802618, 0.09172560, 0.08932916, 0.05512016, 0.01569406, -0.07059483, 0.02111773, -0.06927496, 0.12100395, -0.03186192, -0.14896932, -0.00725516, 0.08960851, -0.11062015, 0.07421224, 0.05770177, 0.19002664, -0.07553942, 0.05428807, -0.07924674, -0.05622217, 0.07984165, -0.06038481, 0.01680451, -0.04286787, -0.02495923, 0.04112618, 0.07073268, -0.07971785, 0.05585734, 0.05544076, 0.03660232, 0.00099337, -0.07588781, 0.02508419, -0.02910081, -0.10217898, -0.07537564, -0.00439589, 0.11569122, -0.00267599, 0.04411314, 0.08243456, -0.14149924, 0.01861094, -0.09646961, -0.07063357, 0.01207632, -0.06424371, -0.04267763, -0.00371072, -0.07123438, 0.07326917, -0.10510474, 0.00051831, 0.02775525},
  {0.02792980, 0.12891157, -0.07076263, -0.04715447, -0.01128633, 0.03014441, 0.13093118, -0.04905630, -0.02504152, -0.04000856, -0.13287409, -0.13805570, 0.10596903, -0.08516868, -0.12027351, 0.05601331, 0.06617086, 0.05386455, 0.05314169, -0.06233115, -0.06537294, -0.08139647, -0.01964622, 0.14248884, -0.01537520, 0.05462033, 0.17182800, 0.06856319, -0.04124911, -0.16379663, 0.01686057, 0.00371672, -0.19377564, -0.02300531, 0.04721106, -0.14542308, -0.10154568, -0.05825794, -0.05185268, 0.11346403, 0.05525981, 0.15845823, 0.12408753, 0.08556434, 0.07294616, 0.08252849, 0.09520711, -0.06805833, -0.03997872, 0.09257584, 0.06128775, -0.03790047, -0.07022928, 0.10612006, 0.12924138, 0.02848143, -0.08775237, -0.07686848, -0.05544509, -0.00203955, 0.02850812, -0.09064149, -0.13164844, 0.08196022, 0.06299914, 0.00825713, -0.04554399, 0.07031477, 0.06445250, 0.00768383, 0.02060133, -0.05607091, -0.01620617, -0.04614230, 0.00980331, 0.15880023, 0.03850387, -0.03561872, -0.08803233, -0.02868234, -0.12551385, 0.10944328, 0.11756326, 0.08368073, -0.00409398, 0.03601542, 0.06481364, -0.00409681, 0.01244746, 0.09487160, -0.02012287, -0.03007618, -0.03809075, -0.09496500, 0.09180054, 0.00797916, -0.06714763, -0.00415820, 0.08560669, 0.01489257, 0.00034225, -0.00928482, 0.03133275, -0.12228063, 0.19134922, 0.04939452, -0.02192645, 0.16657451, -0.07832471, 0.03521541, -0.10868804, 0.12119704, 0.04167720, -0.04180840, 0.07750351, -0.04460428, 0.17624773, -0.09246463, -0.08249205, 0.17113927},
  {0.07399749, -0.02369371, -0.00815259, 0.07651520, 0.06470586, 0.14420830, 0.15500258, -0.07808580, -0.02008495, 0.07475627, 0.06616873, 0.27685845, -0.03307424, -0.16787603, -0.06824952, 0.05312786, -0.14358985, 0.03255806, 0.06928793, 0.06212997, 0.12416526, -0.03564756, -0.04871976, 0.08891597, -0.10248891, 0.06903179, -0.11413693, -0.04947143, -0.01989669, -0.09829925, 0.11101344, 0.02026654, 0.14350180, 0.06437649, 0.04956347, -0.20792282, -0.23543704, -0.02694884, 0.03488654, -0.01803978, 0.04596399, 0.21257211, -0.11168797, -0.03201523, -0.17178133, 0.16161674, 0.07249738, -0.02884337, 0.09380183, -0.00551336, -0.13796665, 0.00409832, -0.10199004, 0.10995825, -0.00609404, -0.01739052, -0.13100073, 0.02032470, -0.02999156, -0.12589961, 0.04443251, -0.04590468, 0.01124006, 0.03241266, 0.11193151, 0.09736045, 0.08357258, -0.06777982, -0.14717646, 0.04280532, 0.06500071, 0.00741162, -0.03375214, -0.03641824, 0.02172294, 0.07979211, -0.04727361, -0.04749004, 0.00785113, 0.01938182, 0.05542652, -0.00163150, -0.00992168, -0.07331397, 0.18405783, 0.07743550, 0.05999871, -0.09395979, 0.15838717, 0.02444232, -0.05302595, -0.04320977, -0.17834997, 0.12511121, -0.11129846, 0.10073406, 0.03402488, 0.08593298, 0.00398644, 0.03950529, -0.04284338, -0.09034956, 0.18657252, 0.13742468, -0.07124574, 0.08198168, 0.16458938, 0.00769217, -0.00285853, 0.07678115, -0.17522383, 0.27018377, -0.09315614, -0.07385696, 0.02074238, 0.09981228, 0.05099743, -0.16911678, 0.14672220, 0.07925608},
  {0.04484302, -0.08882827, -0.06033353, 0.05173904, -0.00265896, -0.07557370, -0.08091161, 0.03485715, 0.06049695, -0.11322817, 0.00923925, -0.04194226, -0.00084087, 0.04376464, 0.08038773, 0.15806140, 0.04879160, -0.01494333, 0.06791352, 0.06432516, 0.02074845, -0.06536750, -0.15353203, -0.09463350, 0.02096840, 0.02120240, -0.08285953, 0.03421326, -0.12291155, 0.04058795, -0.01526147, 0.10990357, 0.13903043, 0.01771212, 0.07872379, -0.01764202, 0.05784032, -0.04814110, 0.11380845, -0.03056718, -0.03469995, -0.16457053, -0.09696700, -0.02127140, 0.04950631, -0.02157545, -0.01440758, -0.11002304, 0.02285850, 0.07710017, 0.03307267, 0.04347402, -0.00024722, -0.04285818, -0.09082379, 0.02000683, -0.01404216, 0.09154565, 0.13438687, 0.11851577, -0.03008377, -0.00902437, -0.00103317, 0.03488313, 0.00731148, -0.01465321, -0.07637984, 0.03170487, 0.01662822, -0.12482022, 0.04541060, 0.10451591, 0.10171511, 0.02253739, 0.07114867, -0.14337735, 0.08036553, -0.04069812, 0.06573296, 0.08146385, -0.01791296, 0.02576381, -0.03486846, 0.03237940, -0.05895508, 0.14202723, -0.09786138, 0.02916997, -0.07744184, 0.09397884, 0.14431517, 0.03821595, -0.04678909, 0.01315860, -0.12343471, 0.04153130, -0.08054494, -0.06701656, -0.03026824, -0.06433545, -0.08255714, -0.10225537, -0.09559374, 0.20620733, -0.06817507, -0.08326496, -0.07761832, -0.02550551, 0.06100070, 0.04410009, 0.02249566, -0.17513581, -0.03976348, -0.08246481, 0.03261984, -0.00765969, -0.03419849, -0.05366080, -0.10216165, 0.02483626},
  {-0.14782153, 0.03118898, -0.11841129, 0.07440024, 0.16362408, -0.02870911, -0.08148303, 0.05366519, 0.07263955, -0.03739303, -0.11781701, 0.04314003, -0.03330017, 0.00221086, -0.01075068, 0.02182543, -0.10383877, -0.07792722, -0.07374620, 0.13403994, 0.03788273, -0.06920791, -0.03258168, 0.19150107, 0.05419169, -0.08799030, 0.06006747, -0.03354556, -0.04514810, 0.06555012, 0.05093810, 0.15489902, 0.03903646, -0.07938809, -0.05940468, -0.07484181, -0.03600058, 0.08609701, -0.11966251, 0.01068829, -0.00152681, 0.14367606, -0.02928325, -0.07076069, -0.18574692, -0.12070329, -0.03646310, -0.00274998, 0.14522405, 0.08335253, 0.11873941, -0.01674953, 0.12589622, -0.01588536, -0.05948047, -0.00912818, 0.04337156, 0.01873088, -0.03840696, -0.16263676, -0.01341967, -0.09855480, 0.06857674, -0.02351587, -0.00527145, 0.07488368, 0.12937753, 0.02293024, -0.10171321, -0.03295550, 0.05033963, -0.00581255, 0.03531713, -0.12239788, -0.06740221, 0.04659835, -0.01017833, -0.03233175, 0.01330885, -0.02092623, 0.04626226, 0.02219930, 0.06542415, 0.03707517, 0.15439720, 0.04621578, 0.11260930, -0.00517112, -0.10230102, -0.12739481, -0.04322378, -0.04438317, -0.18750173, 0.05035054, -0.01161925, 0.08430863, -0.05698944, 0.00413578, -0.05192929, 0.05655451, -0.06715952, -0.11151765, 0.03979946, -0.05696120, -0.06840838, 0.00877726, 0.06369701, -0.10932757, -0.19915679, -0.07647500, -0.01345514, -0.07412145, 0.00898146, -0.00298291, 0.14200775, 0.00963168, 0.06058310, 0.03911076, 0.09607522, 0.00308937},
  {-0.15255614, 0.13768479, 0.00939909, -0.06566870, -0.00272423, -0.13076621, -0.01726431, 0.04496099, 0.03473845, 0.03418320, -0.19969085, -0.03480441, -0.06812551, 0.15364257, 0.05085383, 0.01698697, 0.02022562, -0.17414659, 0.07335953, -0.01694701, 0.13805810, 0.03627390, -0.09019527, -0.05081999, 0.10635395, 0.08269395, 0.04174706, 0.01638371, -0.01645004, -0.05900390, -0.02681372, -0.09062626, 0.07317000, 0.07517177, 0.02847630, 0.00284748, 0.03852474, 0.04558118, -0.09657574, -0.18007421, 0.00724663, -0.00079127, -0.08943234, 0.11969294, 0.11595218, -0.08800053, 0.07819147, 0.09143034, 0.05396275, -0.04431247, -0.04783088, 0.16460636, 0.13124403, -0.03791456, -0.03318367, -0.01583539, 0.00756736, -0.07935086, 0.03980204, -0.04989259, -0.02257245, 0.14425147, -0.06101403, 0.05814895, 0.04973586, -0.10421207, 0.04298849, -0.06098447, 0.10591201, 0.02284186, 0.06304965, -0.05808230, 0.13584584, 0.14385328, -0.11361712, 0.02276050, 0.09925654, 0.06686677, 0.11575382, 0.02334428, -0.19507974, 0.02543349, -0.17927466, -0.09150942, 0.02188264, -0.05947926, 0.08106823, -0.07207563, -0.24183145, -0.04504822, 0.16496141, -0.10535093, 0.03644633, 0.01372690, -0.03222591, 0.05772090, -0.05321205, 0.01313683, -0.10380445, -0.08543117, 0.02134242, 0.09076217, -0.05219922, -0.02609149, 0.15483856, -0.02985915, -0.03155299, -0.08627573, -0.05136991, 0.03951097, 0.04026980, -0.06970182, 0.17494442, 0.06255219, 0.11041893, -0.04333855, -0.05009171, 0.07300003, 0.03006627, -0.10860876},
  {-0.05246169, -0.11264732, 0.02813252, -0.06576379, -0.21328339, -0.06224954, 0.11678337, 0.07766072, 0.15541896, 0.03445121, -0.12803106, -0.00927756, 0.08671726, -0.03472075, -0.02211558, 0.11835592, 0.16336600, -0.11671331, -0.02887106, -0.05686857, -0.04925499, -0.17087029, 0.03389657, -0.06137814, 0.18077166, 0.02332475, -0.13660109, 0.07302811, -0.09800518, 0.02043891, -0.03805768, 0.14189655, 0.06438053, -0.06473434, 0.05518604, 0.18758860, 0.03509219, 0.16357848, -0.09150138, -0.09328313, 0.01223537, 0.07734711, -0.10100117, 0.05114329, 0.03984458, 0.07861471, -0.05011621, -0.04057059, -0.18673179, 0.05480067, -0.03056637, -0.14864780, 0.00329159, -0.18744038, 0.04381114, 0.10318238, 0.05948704, -0.06485963, 0.03709431, 0.07061708, -0.03672076, 0.02186217, 0.04524657, 0.00323133, 0.04187991, -0.14843634, -0.14836173, -0.03465517, 0.07812145, 0.02132604, 0.16803060, 0.03663437, -0.04567520, 0.04411839, 0.28342289, 0.10598732, -0.03765064, -0.05152694, 0.08355862, -0.09475088, -0.23808268, 0.01282317, 0.11103094, -0.00301187, -0.11313754, 0.11165800, -0.02099612, 0.05362689, -0.08061759, -0.02267765, 0.05632693, 0.17666589, -0.05451996, 0.05029561, 0.00060053, -0.01855817, 0.15360947, 0.00121954, 0.04911571, 0.08122402, 0.05122099, 0.04853598, 0.11474263, -0.04322965, 0.02240421, 0.05609409, -0.10356221, 0.07352573, -0.05829319, -0.12354667, -0.03935831, -0.05969248, 0.12704474, -0.09663995, -0.15962876, -0.00444235, -0.05528075, 0.14465760, -0.06315143, 0.01560477},
  {0.16567133, -0.00067040, -0.11959474, -0.10355392, -0.01788821, 0.22099979, -0.08285222, -0.12771581, 0.01529573, -0.03106074, -0.07203428, 0.09192503, 0.04847945, -0.10921609, -0.01660960, 0.06159487, -0.01224597, 0.02573031, -0.09612336, 0.18024951, -0.09001680, -0.03979624, 0.00110781, 0.15152478, -0.08020546, -0.00745256, 0.00919357, -0.06159188, -0.08919709, -0.09630621, -0.04059362, -0.01500905, 0.00706120, -0.11210310, 0.08760883, 0.06316845, -0.09336105, -0.24920098, -0.02091696, 0.10830359, 0.04732271, -0.07051487, 0.03099576, 0.07887092, -0.09488663, 0.07158370, -0.05493918, 0.01435760, 0.03081219, -0.09317481, 0.16141132, -0.05646596, -0.04657385, 0.22025658, 0.01597323, 0.11980290, -0.04079140, 0.11638293, -0.16099191, -0.06079723, 0.03957022, -0.18328992, -0.07774922, -0.02475023, -0.00467984, 0.11835579, 0.17677310, -0.05684133, -0.11790711, -0.03723311, -0.03420809, 0.09553963, -0.01977357, 0.00862749, -0.14560610, 0.01409119, -0.00524702, -0.07535290, 0.10422683, 0.02972351, 0.05084243, 0.00915659, -0.06512285, 0.09832396, 0.03227247, -0.08885642, -0.03261809, -0.05446984, 0.01279680, -0.04946300, 0.06264538, 0.05201152, -0.10095149, 0.10496216, -0.08305830, -0.08077468, 0.00448427, -0.10083417, 0.02051641, -0.04190106, -0.00210534, 0.08121222, 0.03020694, 0.05246625, -0.05325210, -0.07848945, 0.10244440, -0.05896356, 0.07516599, -0.06339739, -0.20669302, 0.26325157, -0.00173881, 0.01185110, 0.06127866, -0.01415510, 0.00521344, -0.10813674, -0.03932511, 0.10205983},
  {0.09244658, -0.05669620, 0.02264709, 0.05970092, 0.14420709, 0.09690548, 0.03977678, -0.07026471, -0.04351263, 0.08297297, 0.04036108, -0.07039250, -0.02712847, 0.07336356, -0.01110855, 0.01406998, 0.06213376, 0.14110938, -0.08432627, 0.10139194, -0.06490709, 0.12070624, 0.02416962, -0.02029100, 0.06826272, 0.00945226, -0.01345845, 0.09293032, -0.02838547, 0.07097083, -0.02964922, 0.02006550, -0.09298053, -0.03374321, -0.12104571, -0.07814864, 0.04254294, -0.00798649, 0.07589315, 0.02076480, -0.10070424, -0.02774193, 0.08426694, 0.05801835, 0.03191361, -0.04293597, 0.06640977, -0.10584054, 0.07253460, 0.06328389, -0.08582409, -0.06749438, -0.06890039, 0.13530307, 0.06113801, -0.05497884, 0.06554533, -0.06559320, -0.10146644, 0.02333619, -0.04536711, 0.04483508, 0.00854544, 0.07020301, -0.02516788, 0.09793801, 0.13156913, -0.02178251, 0.07399283, 0.09549589, -0.02641162, 0.04342216, -0.07114729, -0.13609356, -0.11433224, 0.10251074, 0.02599948, -0.00741235, -0.06357496, -0.03406667, 0.02638237, 0.09322451, 0.04784762, 0.11072782, 0.07744329, -0.08359410, -0.01730816, 0.06388880, -0.23099150, -0.03027349, -0.07289986, 0.12484698, 0.11315300, 0.05075498, -0.01713821, 0.03601522, 0.01099883, 0.01315876, -0.03922459, -0.10313974, 0.06514961, 0.06487674, 0.11328169, -0.01492269, 0.09219988, -0.07650422, -0.09274642, -0.12060809, -0.10656931, 0.00635412, 0.09580181, -0.05094462, -0.04252948, 0.09338163, -0.00517702, 0.05354420, 0.11272317, 0.12261339, 0.05420555, -0.02788047},
  {-0.11437986, -0.12071829, 0.12190508, 0.06670380, -0.04435397, -0.18225442, 0.05094598, -0.07070410, -0.05877374, 0.01960286, 0.07680928, 0.09999190, -0.04692033, -0.01737048, 0.05985599, 0.10193563, -0.12470839, 0.09935007, 0.02414021, 0.15744421, -0.04501389, -0.01992995, -0.10973890, 0.10835260, -0.12799689, -0.05692260, -0.18419446, 0.04416141, -0.06393795, 0.05737305, -0.09322903, -0.01706599, 0.09726295, 0.00672547, 0.13072529, 0.08232907, -0.00924624, -0.10999178, -0.03363345, 0.09951390, 0.03722332, 0.00677170, 0.09446312, -0.02143670, 0.04548077, -0.14795060, -0.05615367, 0.00294768, -0.09084742, -0.01113603, -0.01939299, 0.08991199, 0.03604976, -0.13682587, 0.04632607, -0.05066135, -0.12914681, 0.11736886, 0.03433366, -0.13484758, -0.04029008, -0.00296790, -0.02021648, 0.04328547, -0.03491621, 0.01945817, 0.07792327, -0.03094282, -0.09584142, 0.08102152, 0.07896434, 0.09244673, 0.02282742, -0.03554848, 0.02798695, -0.00756209, -0.00151681, -0.09500991, 0.11552284, 0.08355293, -0.03504423, 0.02964231, 0.08503693, -0.05264313, -0.03962590, -0.17287169, 0.08211260, 0.00850162, 0.09364374, -0.05745950, -0.03516818, -0.03214815, -0.21018101, 0.05441046, 0.01550535, -0.07645013, -0.05495670, -0.11507239, -0.09640876, -0.03087906, -0.13457347, 0.06107198, 0.07777680, 0.02324926, 0.10255044, 0.04960704, 0.02929041, 0.10093564, -0.12477387, -0.02205462, -0.03500435, -0.10763793, -0.02313437, 0.04948342, -0.03063383, -0.08755165, -0.06812172, 0.03201728, 0.12136650, -0.05553733},
  {-0.03927119, -0.10206597, -0.08990924, -0.03780751, 0.01532610, -0.01228276, -0.04939694, 0.01389741, 0.10089203, 0.07910609, -0.10878319, -0.10812028, -0.16126041, -0.08644792, 0.03966405, 0.13899869, 0.05998062, -0.03156875, -0.06654462, 0.00274353, 0.04820844, 0.03768462, 0.07222287, 0.06729630, 0.02860070, 0.07441225, 0.06999592, -0.08306579, -0.08631417, 0.06113937, -0.00874301, 0.06198345, -0.03643684, -0.04990408, 0.04655364, 0.01073693, 0.09637193, 0.03344458, -0.08590317, -0.02306520, -0.11664057, 0.11030488, -0.09933185, -0.07178134, 0.04867379, -0.18424827, -0.07560625, -0.08255564, 0.03350846, -0.04743965, -0.08811986, -0.00126939, -0.02836674, -0.04535002, -0.00443224, 0.07114862, -0.02915246, -0.06555696, 0.06069726, 0.07091239, -0.00788760, 0.08799881, 0.12058916, 0.12954336, 0.15785354, 0.12830606, -0.05024027, 0.07685491, 0.04334207, -0.09571958, 0.10884467, 0.06177970, 0.08563347, -0.07016388, 0.09172801, 0.13077694, -0.05394814, -0.02047547, -0.21623965, -0.07335944, 0.08971789, 0.07502952, 0.07831620, 0.09000515, -0.05376829, 0.06998675, 0.00516081, -0.07455887, 0.13981110, 0.00087288, 0.06085783, 0.08585513, 0.09853013, -0.07566573, -0.07312114, -0.03345576, 0.03137696, 0.02168341, 0.03088791, -0.02247085, 0.02276196, -0.10697137, -0.02987154, 0.00535296, -0.02409054, -0.02003246, 0.04355882, 0.04001480, 0.05484072, 0.06127203, 0.10089386, 0.07706054, 0.02385374, -0.08698852, -0.06155824, -0.06374881, -0.00118277, -0.18944535, -0.09019691, -0.06639656},
  {-0.05272132, 0.02383759, 0.07422949, 0.01149134, 0.03698252, -0.11552823, -0.14015357, -0.04781955, 0.03172821, 0.02751235, 0.05025301, -0.09921264, 0.01751140, 0.04053388, 0.07958461, 0.04078773, 0.00188561, -0.05100566, -0.10625222, -0.08790545, 0.03867700, -0.09115955, -0.02821801, -0.04846442, 0.00405805, -0.10489756, -0.04636370, -0.09035189, 0.05726646, -0.03218889, 0.02410051, 0.09412350, 0.03927641, -0.09944984, -0.02810371, -0.07956181, 0.04805519, 0.06984434, -0.04208700, -0.02104390, -0.03961889, 0.00829467, 0.04208133, -0.04932529, 0.03924694, -0.12663680, 0.01347608, -0.03074245, -0.09254572, 0.07529294, 0.12231397, 0.09301991, 0.13282733, -0.08453863, -0.03841033, -0.10083441, -0.07663507, -0.02205420, -0.02873038, -0.09069504, 0.10021453, 0.04203818, 0.06529035, 0.11860273, 0.00387376, -0.03028258, -0.10254909, 0.11363874, 0.13162878, -0.04536922, 0.07959424, 0.15669401, 0.03688426, -0.08732399, 0.12390710, 0.01918148, -0.06541578, -0.13458215, -0.14839417, -0.03667885, 0.01656078, 0.06034355, -0.03135439, -0.07503694, -0.02732713, 0.00680086, 0.00795611, -0.10353240, 0.07326696, -0.08265074, 0.00802102, 0.13278741, -0.05870661, 0.09574153, 0.06001883, -0.00690307, -0.19589159, -0.01008448, -0.08966822, 0.02336586, -0.06774005, -0.07033141, 0.00854655, 0.09027985, 0.10196837, 0.01779874, 0.06695230, 0.12799613, -0.14772601, -0.10330651, 0.11607304, -0.09881897, -0.04512696, 0.06739897, -0.00113822, 0.05400107, 0.04269807, -0.10550740, 0.08400729, -0.15939309},
  {-0.03093240, 0.03995195, 0.00547463, 0.01652464, 0.07464138, -0.11910248, -0.05234555, 0.05587909, 0.02996624, 0.05750081, 0.01670683, -0.09278893, 0.09327155, 0.05207809, -0.02386789, 0.11005172, -0.04593136, -0.06260891, -0.05205463, -0.06661743, 0.08077811, -0.10975385, -0.02634936, 0.01422207, 0.02763109, 0.00665995, -0.05047376, -0.08710347, -0.10934480, 0.07518716, 0.08862516, 0.12515657, 0.08172465, -0.02075694, 0.05055045, 0.12723050, 0.10208995, 0.03516020, 0.01938646, 0.01198573, 0.05730975, 0.03446513, 0.06555000, -0.04564795, 0.02471467, -0.00072283, 0.04376521, -0.08190129, -0.07205632, 0.00021215, 0.10252155, -0.01298921, 0.07116819, 0.06004427, -0.01645406, 0.08291954, -0.12621427, -0.08476166, 0.01036313, -0.09766424, -0.04484347, 0.07697802, 0.07694119, 0.13378605, -0.05565140, -0.03024339, -0.08320884, 0.01522105, 0.06352247, -0.11012040, -0.06186645, -0.00256068, -0.08809250, 0.02396766, -0.04051523, -0.00912388, -0.05479756, -0.04822702, 0.16956213, -0.03797915, -0.09579170, -0.04960792, 0.07216140, 0.04076553, 0.12623353, -0.04623537, 0.08141589, -0.12735215, -0.11160124, 0.04051086, 0.01931891, 0.01335173, -0.10700481, -0.02396447, -0.03204562, -0.04072790, -0.03220896, -0.02160279, 0.04704870, 0.04777640, -0.02739609, 0.02492436, 0.05492625, 0.02633267, 0.05383799, -0.06714178, 0.01883313, 0.02401232, -0.19514994, -0.01913531, 0.02406136, -0.22784716, -0.11673271, -0.10116536, -0.06411451, -0.05845237, 0.02697026, 0.10600135, -0.04612087, -0.15018186},
  {-0.14210223, -0.04399231, 0.03810820, -0.09707102, 0.11812586, 0.10858483, -0.16650268, -0.10131846, 0.05872318, -0.10142273, 0.00440317, -0.02520242, 0.11159689, 0.08072344, 0.00762170, 0.05312132, 0.06546170, 0.08984756, -0.10374433, 0.05455389, -0.09694836, 0.09864209, 0.08809467, 0.04736447, -0.08394986, -0.12766726, -0.03961615, 0.01689714, 0.03998175, -0.06630021, -0.07399441, -0.10044205, -0.13243175, -0.00980603, -0.11854824, -0.04406232, 0.11936694, -0.04191798, -0.06899515, 0.02799880, 0.02088705, 0.00395394, 0.06000283, 0.05923598, 0.04133608, 0.11240122, -0.08542928, 0.00949210, 0.00857718, 0.00478828, 0.01845801, -0.01319066, -0.05379999, 0.13184993, 0.12670930, 0.04939126, -0.06245754, 0.06695616, 0.00492357, -0.17732961, -0.04496678, 0.02165583, -0.01918704, 0.01099645, -0.01255807, -0.07868166, -0.03465253, 0.11726693, -0.00966410, -0.02141053, 0.02013279, -0.07305992, -0.08396373, 0.06956660, 0.01520287, -0.06195915, -0.00977523, -0.04699525, -0.03404278, 0.05087303, -0.08292176, -0.03173288, 0.03597389, 0.09951323, 0.04054226, 0.08729558, -0.08816204, 0.02183043, -0.01510147, 0.10816590, -0.01289922, 0.01865454, 0.08829306, 0.07211449, -0.18092197, -0.07042044, -0.12241477, -0.02551839, 0.04603018, 0.04604529, 0.05454489, -0.04474507, 0.01332149, -0.09775871, -0.00092679, -0.07974038, 0.09914501, -0.02788607, 0.04992870, -0.10269081, 0.09319902, -0.13013825, -0.04775365, -0.06954300, 0.05990943, 0.07230998, 0.01232641, 0.04115116, 0.10289347, -0.02433110},
  {0.10169063, 0.15406366, 0.13926384, -0.03688150, 0.05015454, 0.01201021, -0.01767911, 0.03405013, -0.09232327, 0.07947905, -0.01052022, -0.07674489, -0.06170491, 0.09477217, 0.13286754, -0.01673884, 0.00065182, 0.08221809, 0.05110561, -0.02547931, 0.02971895, 0.12005139, -0.18335190, 0.04503086, -0.14891382, -0.02969036, -0.01591457, -0.03200707, 0.03004925, 0.03108031, -0.15167956, -0.18920068, 0.06492332, 0.11565979, -0.08696931, -0.09088717, -0.08997046, 0.07061599, 0.08656598, -0.07990836, 0.01842911, 0.03613745, -0.05624430, -0.12121582, -0.04811532, -0.01867291, 0.06580163, -0.09915408, 0.12813015, -0.09724045, 0.14537665, 0.04787868, 0.03433711, -0.06045616, 0.04126401, -0.14520109, -0.05468711, 0.08514901, -0.03619165, -0.09613629, -0.02813342, 0.05045490, 0.04023971, 0.01807030, -0.10629821, 0.04511222, 0.14129171, 0.04062271, -0.00590406, 0.00876442, -0.03586562, -0.09010295, 0.16394348, -0.13858184, -0.06896896, -0.08780505, -0.02984457, -0.08786596, 0.02922140, 0.17792743, 0.02940186, 0.01139238, 0.01529192, 0.01318714, -0.13181295, -0.02113688, -0.11496722, -0.11042733, -0.05397217, -0.05780430, -0.04054510, 0.06442261, -0.00559766, -0.15264484, -0.07566873, -0.05091902, -0.16246682, 0.05177370, -0.10517728, -0.08112253, 0.09347834, 0.01616686, 0.16529730, 0.08050431, -0.08202201, 0.06598184, 0.20314372, -0.04228169, 0.11030971, -0.09465511, -0.05095472, 0.15383625, 0.03932165, 0.00561390, 0.10337157, -0.01879140, 0.08792464, -0.17663109, 0.11198532, 0.06025966},
  {-0.08432911, 0.09233271, -0.02762772, -0.04461255, 0.09672173, 0.00359280, 0.08072788, -0.05849428, 0.07589494, -0.00644839, -0.08009420, 0.04240128, -0.06140718, 0.07569987, 0.03574895, 0.10584252, -0.05835224, 0.05910387, -0.02317469, -0.02654339, 0.01110788, -0.03203746, -0.17815332, 0.01966425, -0.00838370, -0.05334917, 0.11758210, -0.06663732, -0.03080925, 0.00982027, -0.11928980, 0.04096181, -0.09348577, -0.06111518, -0.05162564, 0.10942697, -0.04870489, 0.09481947, 0.03612017, 0.08787867, 0.02438272, 0.05179212, 0.11183137, 0.05531667, -0.05391765, 0.07060378, -0.08446339, 0.04591224, 0.05574955, 0.08231983, 0.05955011, 0.10447621, 0.00281766, 0.09396996, -0.06829209, 0.03287504, -0.12177004, 0.01847625, -0.09779133, 0.01324689, -0.03442273, 0.03282871, 0.04854413, -0.01658945, -0.03664799, -0.03919788, 0.04159328, 0.04398277, 0.08161138, -0.12162231, 0.01977481, -0.03011602, 0.12973477, 0.05902450, -0.05744724, -0.00751073, 0.04738935, -0.01841366, 0.06040170, -0.02721735, -0.05590404, -0.08619510, -0.09447679, 0.10106428, 0.13738756, 0.00524780, 0.03309092, -0.06494452, 0.07848152, 0.09712019, 0.12558208, 0.12391596, 0.01317273, 0.02926904, -0.16897982, -0.02600638, -0.08864459, -0.02802737, 0.00500194, -0.14001967, 0.00168971, 0.04587234, 0.14605555, -0.09699415, 0.05492528, -0.06794560, 0.00610116, -0.04538491, -0.19395067, -0.06401321, -0.00091151, -0.05737670, -0.03378877, -0.02353669, 0.00695438, -0.11138467, -0.07707180, -0.06149125, 0.11104907, -0.15763627},
  {-0.00893729, 0.07088347, 0.04071281, -0.00078338, -0.03760115, -0.06454701, -0.01026532, 0.06243270, -0.02209282, 0.05196997, -0.04599364, 0.11267985, -0.12824450, -0.05775053, -0.02603764, 0.06320024, -0.07474782, 0.11418849, 0.06004275, -0.00517224, 0.07916527, 0.03649655, -0.14393334, 0.15594061, 0.07226755, 0.08092620, 0.05899473, 0.00588199, -0.04622077, 0.02996263, -0.07234474, -0.06836683, 0.10708087, 0.06907232, 0.01351306, 0.11961722, 0.06083456, 0.02142993, 0.03092083, -0.08091554, -0.00616563, -0.04497250, -0.05287628, 0.05230457, 0.04451424, 0.08078331, -0.00740150, 0.07977147, 0.00264531, 0.04843804, 0.00591153, 0.02194534, -0.04390898, 0.00567426, 0.01129020, -0.07780366, 0.04448579, -0.05558494, 0.02786826, -0.08490173, -0.02421358, -0.02327444, 0.06803116, 0.06193781, -0.01667093, 0.09108891, 0.05585769, -0.12800738, -0.10245319, -0.08554489, 0.00484345, -0.02172622, -0.02428081, 0.08914957, 0.04098178, -0.05730043, -0.01192739, 0.04255879, -0.10842291, -0.05819349, -0.02885865, 0.02549035, 0.00467570, -0.05877303, 0.07768662, -0.06825132, 0.04404126, 0.01346619, -0.05316773, -0.12449742, 0.00050306, 0.08104317, -0.05464645, 0.12093746, -0.07495707, -0.08116165, -0.06124044, 0.01088569, 0.00368277, -0.11564118, -0.04275753, -0.03762845, 0.07268893, -0.00307867, -0.13679141, 0.08172905, 0.12814720, -0.02261181, 0.09806344, 0.01252019, -0.07294842, 0.15784870, -0.02346782, 0.00622342, 0.09873322, 0.00287790, 0.05886263, 0.03860414, -0.02393012, -0.02879349},
  {0.03114427, 0.05101340, 0.10107791, 0.04224601, -0.08403905, -0.06129422, 0.02246067, -0.01473978, 0.00183371, -0.05766494, -0.20734258, 0.17881727, -0.13593900, -0.15209199, 0.02517565, -0.05389095, -0.02258326, -0.05831080, -0.08085370, 0.06256264, 0.04194687, -0.08346964, 0.13277960, 0.20871158, 0.10402236, -0.02934664, -0.10316901, -0.06042634, -0.10396159, -0.10654780, -0.07366882, 0.19117391, -0.09206030, -0.00286878, 0.05286488, 0.16979849, -0.05857323, -0.07053980, -0.05990926, 0.03318793, 0.06824953, 0.00567222, -0.09909359, 0.04163829, -0.07802182, -0.04272401, 0.01018786, -0.02235363, -0.05818616, 0.08378034, 0.04591838, -0.20478778, -0.01628505, 0.00989289, 0.05707607, -0.00437350, 0.05979376, -0.13155916, -0.09805904, -0.01958231, -0.02044354, -0.01226086, -0.05565728, -0.07779957, 0.01781818, 0.01497217, 0.02087584, 0.04193052, -0.02111838, 0.06106617, 0.09480958, 0.12609355, -0.00625089, 0.04215272, 0.10114322, 0.01467452, -0.17758301, 0.04076675, -0.04658820, -0.05187891, -0.15558212, -0.00346322, -0.09500238, -0.13223127, 0.12016529, 0.04235523, 0.01243097, 0.02446020, 0.34549016, -0.04951435, 0.05393129, -0.10516325, -0.09140592, 0.17047966, -0.01743549, 0.09214187, 0.10200690, 0.07806578, 0.02439459, 0.02762632, -0.09742425, 0.01027729, 0.08735043, -0.09934019, -0.08536331, -0.04834491, 0.04804664, 0.00247293, 0.02860184, 0.06347677, -0.03033840, -0.05437483, 0.01853481, -0.03273350, -0.01620475, -0.03980250, 0.01330830, -0.30747560, -0.08922099, 0.17256856},
  {-0.10215161, 0.15432723, -0.05152468, 0.00415348, 0.08472362, 0.09638596, 0.00879784, 0.03334375, 0.10168543, 0.03856294, -0.25066459, 0.15058656, -0.08857858, 0.06904120, -0.06754008, 0.06952500, -0.12976672, 0.00590482, 0.05787737, 0.01951962, 0.03658435, 0.10011345, 0.04952873, 0.07003140, -0.05320874, 0.01644259, 0.06202802, 0.07298781, -0.04552440, -0.05513281, -0.14289527, 0.11871640, 0.03182045, 0.13521191, 0.08609056, -0.05764672, 0.08769939, -0.02588092, -0.02486543, 0.05759178, -0.02911671, -0.02065981, -0.03443711, 0.06627379, 0.04804386, -0.01375604, 0.06285986, -0.05594655, -0.05566090, 0.00619769, 0.01237285, -0.07155716, -0.03200933, 0.04333737, 0.00984703, -0.02967170, -0.10117688, 0.09842470, -0.03719829, -0.01267403, 0.14223880, -0.07736740, 0.11384285, -0.02523992, -0.08053820, 0.15017600, -0.04994310, -0.04286386, 0.02680270, 0.07772036, -0.07203548, -0.05605273, -0.00272177, -0.00710754, -0.13468483, 0.01910119, -0.01013538, -0.06587701, 0.06009623, -0.17620642, -0.06210107, 0.04940258, 0.06940844, -0.08076587, 0.13327463, 0.05016878, 0.11572637, -0.08290245, -0.02800502, 0.04762257, 0.00239743, 0.05103858, -0.01861204, 0.05711818, 0.13104092, 0.03395006, 0.07018656, -0.08719126, 0.09389318, -0.03248427, -0.03325041, -0.04379694, 0.04569059, -0.02364677, -0.20994198, 0.00370361, 0.10835749, -0.09670047, -0.14332043, -0.04904844, -0.00927966, 0.06511991, -0.03079236, -0.09742415, 0.09750209, 0.03889297, -0.11372825, -0.22554335, -0.01866393, 0.16184171},
  {-0.06474841, -0.12312657, -0.03303779, 0.03595341, -0.16531417, -0.19207075, -0.04411704, 0.02023403, 0.00474498, -0.08350883, 0.17919007, 0.00201695, 0.05370496, -0.11143609, 0.16653566, 0.06689592, 0.03359186, -0.05889452, -0.03923318, 0.05275181, -0.01697085, -0.08892860, -0.07018714, -0.07704218, -0.10196550, -0.06967446, -0.04370632, 0.05892530, -0.08415329, 0.04729627, -0.07935788, -0.12312983, 0.00066757, 0.02367780, 0.06419505, -0.05257860, 0.09139131, -0.02591310, 0.10937031, -0.00971139, -0.10279333, -0.07543006, -0.01609814, 0.03419176, 0.11164781, -0.03918430, -0.03785430, -0.04604725, -0.01397488, 0.08856498, 0.12160630, 0.11623616, -0.04254712, 0.04080996, 0.12111066, -0.06801175, -0.08428942, -0.03908535, -0.09063654, -0.06364357, -0.04600869, 0.15355119, -0.03801512, 0.04861038, 0.11541317, 0.01548012, -0.01185506, -0.01770126, -0.12001026, 0.05134612, 0.03450520, 0.17796475, -0.01251147, -0.02854825, -0.00990103, -0.01048211, -0.03222036, 0.00901568, -0.05017084, 0.06920445, -0.03384790, -0.09927157, 0.06822673, 0.08393144, 0.01196291, -0.10221618, 0.06314054, -0.01655813, -0.00670784, 0.01643558, 0.06015215, 0.04825349, 0.14831755, 0.04685192, -0.07386377, -0.03137412, -0.11288875, -0.08768871, -0.10964879, 0.07370375, -0.12321100, -0.01764132, -0.03293004, 0.12395284, 0.10126171, 0.03772551, 0.07392539, -0.06622452, 0.11808893, -0.04528328, -0.10247492, -0.12233018, 0.03315677, -0.06356429, 0.10433992, -0.02512565, 0.00647235, -0.11101526, 0.12525870, -0.04835667},
  {-0.09257291, -0.02693185, 0.06202276, -0.07610037, -0.00681629, -0.07637540, -0.04661049, 0.08878747, 0.05302585, 0.04267571, -0.07702876, 0.03329827, 0.06956587, -0.03477966, -0.00426055, 0.03257873, -0.12577833, 0.03692167, -0.11855753, 0.03679695, -0.04497485, -0.05167831, -0.06857397, -0.06823795, 0.03887690, -0.09742767, 0.08756042, -0.08915120, -0.03487075, 0.02754308, -0.13513030, 0.19102237, 0.02146144, -0.06837221, -0.16399243, -0.00999077, 0.11320661, 0.04687406, 0.06961242, 0.19296367, -0.01221793, -0.01910063, -0.00757966, -0.17424676, -0.14262350, -0.08904163, -0.05662272, -0.09192909, 0.02683310, 0.01384982, -0.03714062, -0.09375750, 0.03080662, 0.12852190, 0.03474525, -0.17806914, -0.07864695, 0.07627753, -0.07012585, -0.00947117, 0.05806598, -0.01918649, -0.11919232, 0.16091800, -0.02663820, -0.00578682, -0.18018711, 0.08241890, -0.10735722, -0.07949011, 0.06370732, -0.02658893, 0.07101923, -0.05893742, -0.15633884, 0.03746707, -0.07851815, -0.07577939, 0.14857280, 0.04940159, -0.03469771, 0.04963870, -0.04393275, 0.09358530, 0.06923521, -0.05348837, 0.15562001, -0.09279834, 0.03047920, -0.09243561, -0.12656568, 0.09148897, -0.15458721, -0.06611098, -0.00561933, 0.11145738, 0.05655347, 0.01157026, 0.01663582, -0.05437035, 0.05550297, -0.02015131, -0.07629552, -0.10748425, 0.03491073, 0.03615958, 0.02118417, 0.03813425, 0.07230312, -0.08064257, 0.03210453, 0.05786806, -0.16222374, 0.00895290, 0.09976283, -0.08030685, -0.14367710, -0.01188895, 0.05501791, 0.12359739},
  {-0.14682867, -0.02995345, 0.00447680, -0.00168811, -0.05724905, -0.16415566, -0.26505244, 0.00235162, 0.07898788, 0.03150608, 0.04769939, 0.01872972, -0.04691408, 0.04084256, 0.08743269, -0.06353064, 0.06392562, 0.04303170, -0.06428054, 0.01702694, -0.02400319, -0.04952634, -0.21079384, -0.03458392, -0.03173022, -0.06512934, 0.11366730, -0.07391834, 0.06179114, 0.03504065, 0.02572035, 0.04285876, 0.17409445, -0.02590809, -0.12748724, 0.06397535, 0.09933072, 0.05052790, -0.07120156, -0.12407529, 0.01081961, -0.11062072, -0.01215970, 0.09611599, -0.06537795, -0.02093483, 0.06874517, 0.03573731, 0.11564928, -0.05448798, -0.04271315, -0.07938010, 0.12313727, -0.04622128, 0.06715720, -0.05353285, -0.05785706, -0.06383804, 0.16233730, -0.12029825, -0.15146625, 0.03991086, 0.14236276, 0.11538239, -0.04700824, -0.06328781, 0.03563213, 0.02186651, -0.00689988, 0.02996537, 0.01433873, -0.03252840, 0.01053020, 0.15690218, 0.04956194, -0.04562666, 0.01510103, -0.09269688, 0.10624932, 0.14308524, -0.13591258, 0.08912865, 0.02920960, 0.03437115, 0.02657029, -0.05998002, 0.00167726, 0.02691410, -0.01147899, 0.08362964, 0.01672300, 0.08311491, 0.07289556, -0.05103568, -0.12429496, -0.15838423, -0.02317383, -0.01059170, 0.03652147, -0.02163732, -0.01401329, -0.03263405, 0.00305891, 0.10378820, 0.06742365, -0.11565545, -0.01496936, 0.01571845, -0.00757575, -0.02808586, 0.09433117, -0.14959568, 0.04347438, -0.09738388, -0.00476916, -0.11381544, 0.08142299, 0.03805052, 0.02808239, -0.15275617},
  {-0.02375651, -0.01130731, 0.04628192, 0.03775217, -0.13981974, -0.09895001, 0.04532361, -0.09037667, 0.03419138, 0.01935526, -0.10637199, -0.00927281, 0.11440343, -0.08147491, 0.08271084, 0.00607595, -0.01801142, -0.03523780, 0.06135697, -0.10032773, 0.04796796, -0.06353007, -0.09569487, 0.04479976, 0.02226047, 0.07203746, -0.18425228, 0.05591564, -0.01111297, -0.09529866, -0.03467858, 0.04116920, 0.07285430, -0.03959841, 0.06053777, 0.12915872, 0.16084617, -0.06740613, -0.02194950, -0.12028662, 0.01951465, -0.01402683, -0.02950416, 0.08851562, 0.01541712, 0.09280381, 0.00243752, 0.07737511, 0.05518576, -0.03133440, -0.09914697, -0.29102886, 0.05062708, -0.08772562, -0.03665160, 0.18772310, -0.05166574, -0.06965581, 0.07229275, -0.07257185, 0.09332646, 0.05326926, 0.00830052, -0.13677864, -0.03481086, -0.08348238, -0.05884341, 0.02405872, 0.11817177, -0.00263223, 0.09689187, 0.03057168, -0.03773655, 0.05282155, 0.15808445, -0.05762109, 0.01281349, 0.02218349, 0.11871617, -0.06444959, -0.44347563, -0.02926598, 0.07090906, -0.15967324, 0.08436482, -0.08217965, 0.07982352, -0.03619734, 0.22172932, 0.08075190, 0.09165082, 0.03910667, -0.15938641, -0.08087794, -0.06286585, -0.01684449, 0.10677312, -0.08545992, -0.10965548, -0.06095126, -0.11694706, -0.10970852, -0.02780923, 0.06665192, -0.00596389, 0.05720286, -0.12761462, 0.07415172, -0.17764592, -0.08057470, 0.13107611, -0.04316598, 0.09227566, -0.07487038, -0.10798191, -0.02714582, -0.02200129, -0.03934253, -0.07057638, -0.04686609},
  {-0.12388131, -0.03326744, 0.04409662, -0.05545775, -0.06205962, 0.06112093, -0.00020174, -0.11180469, 0.12048022, -0.13010626, -0.04764710, 0.07128197, 0.05495394, -0.08410247, -0.01264850, 0.12731971, -0.11391278, 0.06515069, 0.00363654, 0.07553653, 0.03771622, -0.06548680, -0.02111762, 0.16735132, -0.04333108, 0.00758593, -0.11629709, -0.07938319, 0.04232221, -0.07879820, 0.05063270, 0.12102485, 0.09112805, 0.02589642, 0.13649237, 0.01594451, -0.08758349, -0.02468605, -0.06945344, -0.05192747, -0.11369313, 0.13050759, 0.06375439, 0.04347957, 0.04451625, 0.09374664, -0.06314957, 0.09573857, -0.01475022, 0.02496232, 0.10108592, 0.10550100, 0.02290283, -0.05957970, 0.04214425, -0.11638456, 0.08556698, -0.03259902, -0.15161130, 0.05403696, -0.10776564, -0.01011207, 0.06067105, -0.00270746, -0.02295613, 0.14080282, -0.07930711, -0.03203007, 0.10388170, -0.00454913, 0.03415084, 0.10781863, -0.04724777, -0.06383631, 0.12999715, 0.06382048, 0.02587658, -0.05378940, -0.00436288, -0.05431283, -0.05181342, 0.02806983, -0.05843781, 0.07647467, 0.00059462, -0.06471981, 0.09992438, -0.01818673, 0.20757601, -0.08917348, 0.11878960, -0.01351867, -0.15324217, 0.07754494, 0.03270631, 0.12672284, 0.05062892, 0.05003366, -0.07522982, -0.04639506, 0.02590376, -0.03518553, 0.10611159, 0.08974352, -0.19072723, -0.12595274, -0.02803421, 0.13366786, 0.06249186, -0.04069585, -0.01369660, -0.02465100, -0.13280129, 0.01787615, -0.07555038, -0.00900128, 0.08078885, -0.28064030, 0.05395509, 0.09400305},
  {-0.10474310, -0.02942556, 0.04631323, -0.07568016, -0.01973191, -0.07083920, -0.05616684, -0.08616176, -0.07767954, -0.06368773, -0.00749123, -0.03799958, 0.01581798, 0.09266385, -0.04888536, -0.05690467, -0.07157640, -0.07234851, 0.09141885, 0.06800611, 0.03509357, 0.05104675, 0.15593846, 0.02013734, 0.06600175, -0.10264897, -0.11784678, 0.05196044, 0.02927431, -0.06883758, -0.10950149, -0.07633901, -0.01920230, -0.00281386, -0.10445007, -0.04423335, -0.01730250, -0.01236541, -0.02127658, -0.01312171, 0.05831321, 0.00458126, -0.02145513, -0.01944951, 0.11355494, 0.02250106, 0.02373741, -0.11397818, 0.06953231, -0.08150113, 0.01943613, 0.09393513, -0.06463705, 0.09055633, 0.01954895, -0.05401794, -0.08291233, -0.03088913, -0.07525385, -0.03092917, -0.05665625, 0.05892395, 0.01299977, -0.01001606, 0.04373593, 0.04019439, 0.07240531, 0.00266991, -0.05070296, -0.03613208, -0.08601449, -0.05398385, -0.06104590, -0.17446765, -0.08929272, -0.09757585, -0.06136838, 0.08143478, -0.03121732, -0.04721383, 0.03243305, -0.05239342, -0.06903423, -0.01166260, 0.02067273, 0.00008358, -0.03304723, -0.09083785, -0.26809382, 0.02180250, 0.00612482, -0.08020356, 0.04566689, -0.10976728, 0.05601153, 0.10536791, 0.04439579, -0.01706197, -0.06052738, 0.01583346, 0.00965446, 0.07972815, -0.12000339, 0.06817105, 0.07764089, -0.02321789, -0.06187561, 0.03898260, 0.03441609, 0.02061814, 0.07605655, -0.00762823, 0.06233022, 0.08276916, -0.08419967, 0.01568063, -0.04909493, 0.06942895, -0.09953715, -0.09514858},
  {0.01811691, -0.09189743, 0.09173757, -0.00773851, -0.03410196, 0.07300513, -0.01981917, -0.04936889, 0.00635719, -0.05978381, -0.05283954, 0.06064219, -0.05013297, -0.05265837, 0.10158429, 0.14750279, -0.02202439, 0.13276263, 0.03484029, 0.00906051, -0.08276407, -0.02303195, 0.04512145, -0.12805064, -0.08073385, -0.02001197, 0.07156946, 0.06653879, -0.10878943, 0.10248219, -0.11677732, -0.05898782, -0.10741928, -0.05357153, 0.00605545, 0.06322303, 0.07180955, 0.14093712, 0.02458367, 0.05210478, -0.05827273, -0.05221391, 0.04503300, -0.00132007, 0.08309895, -0.12430103, -0.09173655, 0.07160611, -0.04747711, -0.04877239, 0.14239870, -0.02856779, -0.03204802, -0.07511837, 0.04958234, -0.00614774, 0.00502516, -0.04196436, 0.18745080, -0.08382192, -0.01758737, 0.04492576, 0.17443222, -0.04592996, -0.16566606, -0.18898915, -0.01378470, 0.10084128, 0.04718677, -0.04519104, 0.12831730, -0.05539700, -0.06024839, 0.08807502, -0.00859692, -0.06025866, 0.00080403, 0.03621869, 0.00555091, -0.01489170, -0.00800336, 0.04773967, 0.06558320, 0.06197010, -0.01769724, -0.12645487, 0.04683674, 0.04040279, 0.08017126, -0.03379004, 0.00528944, -0.14648902, 0.07056741, -0.04680227, -0.06081320, 0.06544991, 0.01649987, -0.09748693, 0.07625297, -0.08678433, 0.00839763, 0.04684342, 0.06812529, 0.11806564, -0.05394039, 0.08867308, -0.04788269, 0.15374526, 0.04710732, -0.00914328, -0.00871687, -0.16955103, -0.00395183, 0.06197762, 0.02416056, -0.08088943, -0.02402933, -0.05266141, -0.08394101, -0.01980846},
  {0.00293304, 0.04037615, -0.09928174, 0.05299860, 0.01790018, 0.07867775, 0.02830864, -0.11886664, 0.03425011, 0.05945411, 0.02103733, -0.11495741, -0.06285423, -0.01794949, 0.00940093, -0.05010881, 0.08701569, 0.02263985, -0.06476941, -0.14756785, 0.11160720, 0.07316617, 0.08399639, -0.12589404, 0.02325686, -0.06520467, 0.03230616, -0.09851422, -0.02159670, 0.07613729, 0.10833878, 0.04423633, -0.06911016, 0.10994951, 0.04663226, 0.09970534, 0.11338858, -0.05928925, 0.02469867, -0.06901573, 0.02554208, -0.00010575, 0.04976474, 0.01692311, 0.13184538, 0.10530247, -0.07983048, -0.07004219, -0.10525893, -0.00170691, -0.07144436, 0.06612857, 0.13712724, -0.00538062, 0.01983402, 0.15973563, -0.12252152, -0.00198604, 0.02535405, 0.10106657, -0.00456503, -0.10925816, 0.13997807, -0.14130268, 0.00636143, -0.06828515, 0.05895936, 0.10230911, -0.10342167, -0.05019841, -0.00209582, -0.06032464, -0.10177596, 0.19027886, -0.04178563, -0.13701624, 0.07336640, -0.01573523, -0.10543945, -0.02530124, 0.10843600, 0.08554713, 0.00078474, -0.00437768, -0.10536769, -0.02424339, -0.04637066, -0.11940028, 0.09061154, 0.02197246, -0.07160164, 0.04450363, -0.02221306, 0.01519139, 0.00821163, 0.09577578, -0.02183223, -0.05405829, -0.07382903, 0.01867532, 0.04512398, -0.08324478, -0.05697966, 0.00884996, -0.22673059, 0.04573121, -0.16372474, 0.06690314, 0.06802268, -0.03509735, 0.20036034, -0.00406505, 0.08342791, -0.04783708, -0.16397089, -0.04245422, 0.11259559, 0.18736242, -0.23449533, -0.02259529},
  {0.05645531, 0.05208950, -0.03297813, -0.08054148, 0.00217914, 0.00109649, -0.02188992, -0.00613032, -0.08304312, -0.04127012, 0.06154065, -0.04677908, 0.00114093, 0.11364961, -0.02435293, -0.01786467, -0.03037669, -0.15110260, -0.04460481, 0.01803651, -0.03481444, 0.05967363, -0.28162098, 0.07296611, 0.02196637, -0.08106028, -0.15226063, 0.07831688, -0.02645240, 0.02908223, 0.03367183, 0.02579126, 0.12006112, -0.09006805, -0.15694290, -0.04146306, 0.05476743, 0.06940789, 0.02601043, 0.10471897, 0.08163689, 0.08555519, 0.16707869, 0.05228171, -0.01123684, -0.03942655, 0.09749901, 0.05848460, 0.08883577, -0.01626093, -0.13152722, 0.07122291, 0.00046122, -0.17543413, 0.05114064, 0.01899184, -0.03389395, -0.07510454, -0.10356448, 0.04368651, -0.12926245, 0.07974034, -0.03358413, -0.08100943, 0.00281399, 0.01749848, 0.04164110, -0.02305269, 0.12564690, 0.05428899, 0.02039880, 0.22188027, -0.00169391, 0.07571241, -0.04495150, 0.12594809, -0.05842032, -0.01285635, 0.04152013, -0.08808966, 0.11898600, -0.12398468, -0.09655793, 0.01528800, 0.00038547, -0.02090455, -0.06625129, -0.00769444, -0.13057558, -0.01203569, 0.06273767, 0.16330276, 0.05521147, 0.07335909, -0.05035615, 0.05666843, -0.18659678, -0.06095656, -0.03223559, -0.14404017, -0.08649174, -0.00327316, 0.04546475, -0.13593297, -0.00147430, -0.04646828, 0.10811435, 0.14409773, -0.16344327, 0.06150430, 0.04356587, -0.00647231, 0.03494420, -0.04337204, 0.15393388, -0.01706399, -0.12760159, 0.06824034, 0.12486605, -0.06270808},
  {0.02084525, 0.07475828, 0.08784720, 0.03397142, 0.07096568, 0.10708518, -0.00386537, -0.08451944, 0.01576239, -0.05828948, -0.29220316, -0.06812129, 0.09544636, -0.04146725, 0.02740262, 0.06293853, 0.01945751, -0.07427586, 0.02941005, -0.02831357, 0.08092552, 0.08324090, -0.07751553, 0.02802609, 0.00127733, 0.02466706, 0.09845901, 0.02300177, 0.03815342, 0.07322895, 0.09255435, 0.07783248, 0.01671734, 0.02910411, -0.03201533, -0.05197768, -0.06459372, 0.05936319, -0.02613010, 0.02101122, 0.00946494, -0.07941587, 0.15627162, -0.09684329, -0.14360292, -0.02333407, 0.14559460, 0.04073860, 0.09337274, -0.07796361, -0.08298882, 0.03483355, -0.07923809, 0.07114527, -0.04231305, 0.05879292, -0.04387164, -0.11075815, 0.10488442, -0.09512395, 0.10806205, 0.03346667, 0.08301898, -0.08232240, -0.25751898, -0.09383988, 0.17119287, -0.00498350, 0.10366903, -0.09265832, 0.13014637, 0.04264225, -0.04424694, -0.13470574, -0.06036226, 0.06947678, 0.04757100, -0.07085109, 0.09304077, 0.11177705, -0.06392305, -0.04649715, 0.03816424, -0.08857949, 0.01728251, -0.23859945, 0.17659703, 0.01891231, -0.11395234, -0.02699488, -0.05974587, -0.01933078, -0.17024228, 0.05790110, -0.18904464, -0.03007668, -0.00120414, -0.01051651, -0.00065970, -0.05499105, -0.03051271, -0.07083488, 0.02391542, 0.03980326, 0.09012692, -0.11088374, 0.12491732, -0.02932316, -0.13177042, 0.03374063, -0.00528692, 0.03735384, -0.00094991, 0.08617438, -0.00010981, -0.06308834, 0.06480703, -0.02667927, 0.12413154, -0.12924038},
  {-0.02598248, 0.03243214, -0.04367736, 0.06283084, -0.03460624, 0.05643564, -0.23674354, 0.01449584, -0.00815744, 0.03223640, 0.06593607, 0.04891984, -0.01423619, -0.17695190, 0.04107251, 0.05315639, -0.04877300, -0.03230556, 0.02065202, -0.05756893, -0.09283926, -0.21982270, 0.20051925, -0.11994144, -0.18912731, -0.09770183, 0.08975233, -0.10007295, -0.13981287, 0.04719626, -0.12424902, -0.10476118, -0.19443871, 0.01020533, -0.05981474, 0.00897736, 0.04075970, 0.04619054, 0.07998446, 0.10028768, 0.01706177, -0.03510764, -0.04778646, -0.09490831, -0.05022745, 0.00734357, -0.02411426, -0.01525467, -0.12871823, 0.00999581, 0.15168937, -0.03769608, -0.12414278, 0.04250021, 0.08479853, -0.08385142, -0.13563819, 0.06438901, 0.08421841, -0.30561441, -0.02003109, 0.02987772, 0.05955647, -0.03722179, 0.02899064, 0.08126225, 0.12948698, -0.00151298, -0.08716401, 0.03104585, 0.13817655, 0.00753013, 0.05802520, -0.18371923, -0.02200601, -0.03380942, -0.07208186, 0.02946387, -0.24182963, 0.02922846, -0.02586307, 0.03678736, 0.07839482, -0.00334790, 0.13497671, -0.05526817, 0.08723566, -0.08354151, -0.12000002, 0.02013160, 0.02484189, -0.04459231, 0.08920513, 0.00492199, -0.05490101, -0.01660361, -0.02203291, 0.05441458, 0.04335692, 0.01511352, 0.02091242, 0.05563230, -0.03154702, 0.08670425, 0.12363237, -0.06367718, 0.13823806, -0.05872263, -0.01738995, 0.05203421, -0.13423917, -0.06626372, -0.03549735, 0.07129431, -0.07923066, 0.09243855, 0.08977317, 0.00533335, -0.02896501, -0.05724181},
  {-0.06838202, -0.01714336, 0.08698255, -0.06765422, 0.13282350, -0.00219905, 0.00813790, 0.08560385, 0.03200604, -0.03992518, 0.16945069, -0.00244820, -0.10482465, -0.15479821, -0.10077166, -0.09698918, 0.07349081, -0.03051320, -0.04800627, 0.03305162, 0.10099904, -0.06223766, -0.13933773, 0.10491876, 0.04292986, 0.09041667, -0.01483987, 0.02879422, 0.08586334, 0.00730219, 0.16963841, -0.08543536, 0.08904623, 0.10464337, -0.02560596, 0.12128298, -0.11108290, -0.01754290, -0.06762382, 0.01804899, -0.04250432, -0.09875250, -0.09488916, 0.11127622, 0.13457097, -0.03687443, 0.14032586, -0.06201974, 0.03594533, 0.06040948, -0.11473095, 0.15166476, 0.01336871, -0.01046737, -0.02255318, 0.02595977, -0.09669046, -0.03459128, 0.07250372, -0.03189852, 0.05366553, -0.12701963, 0.16762415, -0.02452895, -0.03584275, -0.01243053, 0.00172172, -0.02079394, 0.02139889, -0.02381783, 0.13143325, -0.05122501, -0.09580990, 0.07188440, 0.02056752, -0.06764970, 0.07931731, -0.00492740, -0.18418683, -0.05665987, 0.13807352, 0.22265646, -0.08122820, -0.08351638, -0.09608065, 0.09276751, -0.14737394, -0.01707083, -0.03392812, 0.07004430, 0.05433263, -0.13213155, -0.05879829, 0.10900674, -0.05804242, 0.02288454, -0.16707613, -0.07645888, -0.06409865, 0.01889812, 0.09973264, -0.02912768, 0.13853313, 0.03932882, 0.03817289, -0.00082223, 0.01905520, -0.01172473, -0.07787778, 0.07109918, 0.14732839, -0.03905843, -0.10240596, -0.10632803, 0.02196722, 0.02083983, 0.14688434, 0.01413351, 0.05010905, -0.14966634},
  {0.01166091, 0.06579538, -0.02700518, -0.02100345, 0.03086758, 0.00441524, -0.11709252, -0.01257835, -0.01289770, 0.05879152, 0.08490203, -0.02310830, 0.08328731, -0.01484544, -0.00630931, -0.04842453, -0.14938833, -0.06546306, 0.03463430, -0.06177224, 0.11080613, 0.05538592, -0.01560294, 0.05957520, 0.06143120, -0.07333594, 0.09764632, -0.05525472, 0.07926999, 0.05046999, -0.04258760, -0.05861069, 0.12870190, -0.08744421, -0.03606001, -0.01953134, -0.08144766, 0.06713813, 0.02099595, 0.12302142, -0.11640160, -0.05822966, 0.07492957, 0.09207096, -0.10074563, -0.03777042, -0.00908695, 0.03528195, 0.02445681, 0.01261059, 0.09888386, -0.05096959, 0.03027141, 0.06707463, -0.13086039, 0.07610331, -0.00380737, 0.03289389, 0.02906772, -0.08704939, 0.02132688, 0.12152613, 0.04722035, 0.07208893, 0.04570433, 0.07561435, 0.08065036, 0.03212558, 0.08964176, -0.09172178, -0.02027049, 0.13297857, -0.04732906, 0.06373738, 0.04265510, -0.00418319, -0.02653824, -0.05077524, 0.08758100, -0.02705448, 0.00675684, -0.05498943, 0.04715016, 0.04398360, 0.01435611, -0.11203653, -0.01707250, 0.04019763, 0.12300220, -0.06265424, 0.02567173, 0.10532617, 0.02895826, -0.06630445, -0.09571317, -0.14985819, -0.01088399, -0.11249308, -0.05616383, -0.00731363, -0.07833190, -0.00391980, 0.14440846, 0.11829694, -0.05817952, 0.03014238, 0.00350362, 0.05174845, -0.07373368, -0.01059743, -0.09251632, -0.08297285, 0.02515947, -0.11078836, -0.00170661, 0.08050116, -0.01620540, -0.01219570, 0.02625732, -0.16160700},
  {0.06367917, 0.04185348, -0.03018994, -0.05613959, 0.08520482, -0.06379791, 0.04907417, -0.00332406, -0.02095465, -0.05972081, -0.03528416, -0.07015366, -0.12785906, -0.09367155, -0.03005343, -0.01321964, 0.03437151, -0.07130308, -0.03986780, -0.13167568, -0.08185629, -0.04107441, -0.10397511, 0.00912803, -0.02534646, 0.05262559, 0.07150371, -0.06007538, -0.03711704, 0.02201031, -0.11058113, 0.04432337, -0.07097163, -0.04360244, 0.05272469, -0.01589006, -0.01589967, -0.00928718, -0.12287790, 0.04559594, -0.10150043, -0.11374679, 0.06805858, -0.07179615, -0.11122745, 0.01420967, -0.05712751, -0.07941402, -0.05685164, 0.14985903, 0.07257517, -0.06245377, -0.08670375, -0.09679636, 0.08085351, -0.01241338, 0.06049369, 0.03598231, 0.14978963, -0.04909380, 0.06413817, 0.05922138, 0.08554450, 0.04249207, 0.04148129, -0.02808635, -0.09067623, -0.00497025, -0.01416866, -0.02128736, 0.04817339, 0.00119470, -0.06960078, 0.11792270, -0.10763151, 0.09320214, 0.02557670, -0.10324322, 0.00351162, 0.01519177, 0.10275129, 0.09469926, -0.05860475, 0.11225401, 0.11473367, 0.06726313, -0.03420235, 0.06261711, -0.05095104, 0.08996455, -0.07145046, -0.07309672, 0.00496874, -0.05157642, 0.05750062, -0.01021391, -0.06455763, -0.02594638, 0.01032668, -0.05395952, -0.02987450, -0.06251242, -0.04053218, 0.09423499, -0.15365463, -0.08839191, 0.07508160, -0.03219279, 0.06000679, 0.08051157, 0.03668385, 0.06992855, 0.03912514, -0.02703852, -0.05512081, -0.07828811, 0.13227949, -0.11527152, -0.00730187, -0.06087230},
  {-0.02545710, 0.06982207, 0.07824826, -0.05681095, -0.08031385, -0.02559163, 0.10328790, 0.06538709, 0.15021698, -0.11807883, -0.14603066, -0.10006182, 0.04877166, 0.10061642, -0.01654938, -0.10784401, 0.02607716, -0.01469876, 0.03670466, -0.07255331, 0.15801182, 0.02929089, -0.03226500, -0.04586368, 0.17594327, -0.05063400, -0.14065415, -0.00213146, -0.15069030, -0.09140544, -0.00315884, -0.07028425, 0.10397444, 0.01385125, 0.12391527, 0.06516315, 0.06007786, -0.01523055, 0.03819225, -0.13702726, 0.04324850, 0.01457440, -0.10170019, 0.12008121, 0.06907075, 0.06133794, -0.03676682, 0.05503068, -0.04682550, -0.07872386, -0.05467266, -0.05966255, 0.12184758, -0.03120682, 0.02206089, 0.01740432, -0.03698448, 0.09388205, -0.01623530, 0.05815760, 0.04964031, 0.03871685, -0.07095570, -0.07012292, 0.05828623, -0.04361995, -0.03120821, -0.00164659, 0.13412136, -0.05529695, 0.01496311, -0.08252490, -0.05146782, 0.08648239, 0.06084835, -0.14631665, 0.09713808, -0.06462145, 0.12215666, -0.00282250, -0.10779829, -0.08697303, -0.08610407, 0.00095442, 0.06023293, 0.11770132, -0.02974472, -0.04076432, 0.24512050, 0.01964243, 0.08406706, -0.14156610, 0.06686860, 0.07724513, 0.13308366, 0.17326953, 0.06508920, -0.00938546, -0.05556931, 0.00944743, 0.04888699, -0.09600630, -0.02102816, -0.01251420, -0.07365530, -0.05669229, -0.08062626, 0.16571556, 0.00735851, 0.05321295, 0.16091928, -0.11493561, -0.01533274, 0.00024271, 0.02827383, 0.03528671, -0.09597050, -0.13194418, -0.06248899, 0.02924337},
  {-0.11607112, 0.04399209, 0.10719413, 0.07892868, 0.21901815, -0.00568080, -0.05934025, -0.11599065, 0.11690404, -0.11336839, 0.03396349, 0.06680646, -0.05472795, 0.05063526, 0.02569325, -0.08850344, -0.04500769, -0.06044791, -0.05016402, -0.08069672, -0.02035453, 0.12728119, 0.03447508, -0.07411056, 0.00476878, 0.03239388, 0.00526027, 0.04017298, -0.00442733, -0.05105672, -0.03213478, -0.03380310, 0.08470149, -0.07593959, -0.10868090, 0.09464137, 0.05004112, 0.12084325, 0.06682845, -0.01041421, 0.01451208, 0.06214191, 0.01992455, 0.00535476, -0.06803143, -0.08200673, 0.13849927, -0.06202055, 0.00816464, 0.14909631, 0.08300166, -0.10227718, 0.11121915, 0.00865997, 0.07996050, -0.11776377, 0.02257171, 0.02594121, 0.07788804, 0.15633631, 0.06946981, 0.16321795, 0.06004580, -0.01600750, -0.01314790, 0.09729036, 0.02824795, 0.08323643, -0.00020255, -0.09976155, -0.08830173, -0.11984027, 0.07582769, -0.05003148, -0.00114507, -0.01044369, -0.05731846, -0.12011209, 0.10434543, -0.02407529, 0.07906373, -0.00728322, -0.04473032, -0.04021349, 0.09341927, 0.10460640, 0.06959040, -0.04437701, -0.14671336, -0.12722304, 0.08744108, 0.14405243, 0.02498239, -0.11031008, 0.05548026, -0.02764387, 0.07317633, -0.03092664, -0.03078008, -0.13068561, -0.12024237, 0.04592993, 0.05960376, 0.01700009, -0.21663380, 0.06042413, -0.09944619, 0.00707108, -0.09240943, 0.02612525, 0.02481211, -0.04885085, -0.03817947, -0.09273443, 0.09427128, 0.07962786, 0.04693783, -0.03446839, -0.05532611, 0.04022268},
  {0.09205878, -0.10561484, 0.05178464, -0.03871970, -0.14785500, -0.11339008, 0.03047918, -0.08222755, -0.05760577, -0.06534781, 0.04462987, -0.07447568, -0.13389967, -0.16740076, -0.09841125, 0.02561252, 0.11086851, 0.11311464, -0.02984086, 0.05326951, 0.13150468, 0.08036377, -0.05015596, -0.13052648, 0.00248969, -0.03442248, 0.06701440, 0.03476340, -0.03750428, 0.08001727, -0.00948896, -0.04337851, -0.00230395, -0.01146180, 0.06424879, 0.13034053, 0.16621575, 0.07060347, -0.10409812, 0.00673684, -0.08299851, -0.04273114, -0.00215477, -0.03035387, 0.10362633, 0.00691427, 0.02217365, 0.01107336, -0.18695539, 0.12448868, 0.09274888, 0.04446240, -0.05812713, -0.14327256, -0.13016401, 0.05377385, 0.10169015, -0.03898501, 0.05246508, -0.08108564, 0.05139636, -0.03419485, 0.12461951, -0.10265152, 0.02823201, -0.13342281, -0.03484676, -0.06450468, -0.02784261, 0.06270543, 0.00593669, 0.04032695, -0.00046452, 0.02492302, 0.01906249, 0.04278933, 0.12963188, 0.02075692, -0.08108861, -0.00722958, 0.03841854, 0.19862182, -0.11988461, -0.05230006, -0.03636928, 0.06080014, 0.04477110, -0.00466131, 0.11238518, -0.05747129, 0.15598772, -0.06560874, -0.06554861, -0.04203417, -0.11681043, 0.02975657, 0.05004687, -0.11311799, -0.01741841, -0.02252076, -0.05816564, 0.06516650, 0.11613405, 0.02935216, 0.04646183, 0.05081115, 0.02938969, -0.10309522, -0.01431789, 0.02906025, 0.08660287, 0.07942248, 0.08783600, 0.01109613, 0.00137002, 0.07044137, 0.10831107, 0.15224028, -0.08122755, 0.02855697},
  {-0.02030519, -0.09243229, 0.01845406, -0.09618026, 0.18912984, 0.13417412, 0.08981599, 0.09336068, -0.06527723, -0.03737867, -0.12751848, -0.07309692, 0.05865998, 0.08729117, 0.05242968, 0.09209429, -0.06805273, 0.02189252, -0.04130847, 0.00164388, -0.01189061, -0.05390044, 0.11990660, -0.00147380, 0.06534674, 0.05634690, 0.07350957, 0.00017986, -0.11314116, 0.08125118, -0.07548460, 0.08048123, -0.04685073, -0.09960024, -0.21687183, 0.03358966, 0.00139246, -0.10755531, 0.08789934, -0.06500742, -0.06909290, -0.12685607, 0.01767202, -0.15190421, 0.07244994, 0.11802582, -0.00984241, -0.12372954, -0.08112416, -0.12406452, 0.12554562, -0.16468097, 0.08723590, 0.11382545, -0.10565225, -0.00580449, -0.05612174, -0.04337285, -0.13935754, -0.06694495, 0.01463250, 0.00610095, -0.07680516, 0.13327011, -0.22375332, 0.02128162, -0.10421462, 0.08204280, -0.11091010, 0.08158795, -0.03911708, -0.03854071, -0.07237751, 0.04701188, -0.03201545, -0.09228661, -0.07531503, 0.03544208, 0.09578809, -0.01780085, -0.05501046, -0.06047028, -0.06287581, -0.02837255, -0.04680670, 0.02209581, 0.04827691, -0.08590771, -0.23507681, -0.00661681, -0.09598678, 0.06583679, -0.05744159, -0.10488278, 0.06655781, 0.00022092, 0.02376047, -0.05062299, -0.07969602, 0.02177198, -0.01941284, -0.06472630, 0.00984741, -0.06664374, 0.06978771, 0.03499134, -0.06157329, -0.10828595, 0.05475181, -0.05556701, 0.06223737, -0.00117619, -0.00574945, 0.02376134, -0.02875492, -0.08071976, -0.09614614, 0.08060332, -0.04557304, 0.16964740},
  {0.01343231, 0.16063716, -0.01769373, -0.12057701, -0.12373204, 0.00497124, -0.13271514, -0.07591821, -0.06401133, 0.08952852, 0.01451307, -0.03570357, 0.06567696, -0.00985070, 0.04587369, 0.06150850, -0.05499681, -0.01230318, 0.07509360, -0.01573891, -0.05700930, 0.05514409, -0.05676436, 0.13314375, -0.11006735, -0.01812622, -0.13964842, -0.04798780, -0.01105922, -0.01526182, 0.16398984, 0.11433705, -0.06515416, 0.12343656, 0.03430428, 0.04815575, -0.11628000, 0.13344175, -0.10410608, -0.03155936, -0.04065527, -0.03404359, 0.02888429, 0.01268426, 0.03846082, -0.06162859, 0.02351024, 0.03295429, 0.02712961, 0.04908042, 0.07602512, 0.13461252, 0.00691795, 0.07481763, -0.10931704, -0.02982291, 0.02836955, 0.12449067, 0.10261774, -0.01997132, 0.08181379, -0.02225183, 0.01605780, -0.00901236, 0.08739807, -0.02256343, 0.00396918, -0.03793712, 0.00122242, -0.08788318, 0.15929875, -0.03471165, 0.03696479, 0.03298694, 0.07531809, 0.08360498, -0.07839957, -0.03645152, -0.03772890, 0.09213492, 0.08302491, -0.00876823, -0.03457733, 0.06437497, -0.06082272, -0.22409768, 0.00286902, -0.04227171, -0.00018179, -0.03693263, -0.00048027, -0.07987485, -0.02995585, 0.04408562, -0.07990620, -0.04880229, 0.06792665, -0.00008475, 0.06090261, 0.07634654, -0.04407857, 0.01767790, 0.07012580, 0.18811783, 0.07175518, -0.05568631, 0.13990913, -0.00703197, 0.01515241, 0.00006186, -0.17737320, 0.05685882, 0.03824572, 0.03887119, 0.02919231, -0.01485478, 0.02569120, -0.17002779, 0.02912469, -0.23770043},
  {-0.01993744, -0.04738384, 0.07419914, -0.01794974, -0.09338613, -0.03442495, 0.09314526, 0.01925641, 0.01166495, -0.03611650, -0.12179233, -0.04211599, 0.04348305, -0.27293932, -0.00181989, -0.00240106, 0.04811208, 0.13167708, 0.08888587, -0.06443398, 0.04998163, -0.00699187, -0.05788551, 0.02654027, -0.03525284, 0.09095780, -0.07996269, 0.00380259, -0.01577051, -0.05802312, 0.04699065, -0.11253037, 0.05940557, 0.03927924, 0.15127994, 0.15969676, 0.02536703, -0.12307858, 0.03283748, -0.05820457, -0.06918787, -0.14259414, -0.07136945, 0.02692128, -0.00076932, 0.10445032, -0.09917629, 0.08114500, -0.12621674, -0.16399649, 0.04447378, -0.11278919, 0.09218835, -0.07096020, -0.08324333, 0.08258200, 0.04251352, -0.02175233, -0.02460408, 0.00627377, -0.10458075, 0.02597152, 0.12721212, -0.18211816, -0.15393993, -0.01436286, 0.15406363, 0.01016933, 0.09009537, -0.05397447, 0.04943609, 0.06226421, -0.09477343, 0.05579033, 0.23677628, -0.12283403, 0.13008085, -0.13745938, 0.16531146, -0.07937194, -0.12658876, -0.06845523, 0.00076357, -0.10086701, 0.02002646, 0.03963585, 0.16051367, 0.06202849, 0.18739808, -0.10523020, 0.03109371, -0.19228876, -0.02515252, 0.10058798, 0.06405488, -0.11337145, 0.02159994, -0.04615228, -0.10534354, -0.08692585, -0.07466429, 0.07384004, 0.13444158, -0.02877436, 0.08222619, 0.01635446, 0.06923442, 0.14862873, 0.03800294, 0.00670544, -0.06276824, -0.04199329, 0.12994285, -0.01543115, -0.02116209, 0.01113372, 0.09487406, -0.18203570, -0.11380529, 0.09888887},
  {0.03280643, -0.04493168, -0.02468115, -0.00968081, 0.13821740, 0.01462738, -0.12738705, -0.11989641, 0.11447237, 0.05325792, 0.12696186, 0.02010070, -0.05131212, -0.05952888, 0.08838221, -0.07727320, 0.08388776, -0.04339450, 0.02880678, -0.07822236, 0.00040337, 0.04005731, -0.03488945, -0.19495001, 0.14352617, 0.08804543, -0.02328114, -0.05345090, -0.03707649, 0.05453341, 0.03748704, -0.02965986, 0.13848302, 0.00798420, 0.17580912, 0.07715681, 0.17914452, 0.04818900, -0.01376313, -0.08450291, -0.05324312, -0.02860608, -0.01651919, 0.07647716, 0.04857446, -0.05022500, -0.06291127, -0.11055162, -0.01386252, -0.02779447, -0.02591991, -0.14736944, 0.14031038, -0.11030637, 0.01376517, -0.03600424, 0.01514691, -0.05523110, 0.13999073, 0.12448470, -0.08161732, 0.07612541, 0.14688967, 0.05625372, -0.10778123, 0.03718087, -0.10634168, 0.01406972, -0.08382137, -0.04778482, -0.04687260, 0.04484155, 0.03172827, 0.09583832, 0.03442280, -0.10683409, 0.08623269, -0.08146403, -0.05837801, -0.01534696, 0.04095360, 0.15183669, -0.06840026, -0.05379600, -0.04302945, 0.12955144, -0.16859519, -0.00680797, 0.15102324, -0.11040155, 0.06421693, -0.12222614, -0.02423931, -0.12957506, -0.07313655, 0.04632032, 0.02308573, -0.05376624, -0.09516244, -0.10236663, 0.00361399, -0.10013421, -0.02901545, 0.19032040, -0.23624204, 0.03513453, -0.02978274, 0.07288039, 0.03662730, 0.00046002, 0.13271283, 0.02638098, -0.00164583, 0.04452455, 0.06899807, -0.04526180, 0.06437013, -0.10616568, -0.07741837, 0.15495746},
  {-0.10169598, -0.12584692, -0.24906875, 0.04206841, -0.14419821, 0.14635430, -0.12345666, 0.06243001, -0.07655820, 0.03189883, 0.05393240, -0.00141944, 0.21265420, -0.01615830, -0.09818960, 0.00756630, -0.04502106, 0.11202832, -0.06335395, -0.10613816, -0.14762443, -0.14399184, 0.06851772, -0.01170302, -0.20473032, -0.10170382, -0.09946381, -0.08489068, -0.08260783, -0.03989191, -0.02145049, -0.14532062, -0.07723350, -0.09429257, -0.08903801, 0.09021951, -0.14937523, -0.05275020, -0.02185380, 0.04471023, 0.03040170, -0.12673116, -0.07616035, 0.09317131, -0.01627647, 0.01687313, -0.01643631, -0.00980836, -0.07881301, 0.01646720, 0.07456949, 0.03327391, -0.11726151, 0.03972986, -0.05111555, -0.01568511, -0.03401313, 0.07484009, -0.10850672, -0.23810600, -0.08389843, -0.02140250, -0.14289394, -0.01033362, 0.05638056, 0.03789714, -0.02018523, 0.06657209, 0.02152539, -0.09619918, -0.05350827, 0.11418042, -0.11065611, 0.02194275, -0.03134107, -0.06355321, 0.00804323, 0.02694576, 0.03041065, -0.01429982, 0.13467497, -0.12015472, 0.05833483, 0.03682832, 0.13606066, 0.09497392, -0.02364983, -0.11485791, 0.12185635, 0.14235921, -0.05835734, 0.11412501, 0.06223339, 0.06719723, -0.10556110, -0.05603781, 0.03724308, 0.03972165, -0.08309314, -0.00380927, -0.01607351, -0.00580562, -0.02546535, -0.08400621, 0.14758171, 0.03457573, 0.01144098, 0.03332226, 0.10284065, 0.05080061, 0.00248779, -0.11772061, -0.08574959, -0.09316423, -0.18446195, -0.05564430, 0.05262359, 0.06109118, -0.12929749, -0.02569254},
  {0.04203806, 0.01604114, 0.06425975, 0.00666497, 0.15177363, 0.02022393, -0.07668564, 0.07257896, -0.07592851, -0.04130838, 0.07461466, 0.03349665, -0.00503269, -0.20602208, 0.04557507, -0.00107252, -0.11851855, 0.11392888, -0.03835284, 0.03630691, 0.09353190, -0.10328427, 0.03007341, 0.02423734, -0.00759023, -0.02301710, -0.02564286, -0.08224835, 0.01622266, -0.01984895, 0.00823189, 0.09630448, -0.01357451, -0.01226733, 0.04129609, 0.05815447, -0.05377619, 0.05861237, -0.08666273, -0.00850044, -0.03777554, 0.02150661, -0.16577463, -0.05396797, 0.01915186, 0.06420200, -0.00385227, 0.06153366, -0.12242226, -0.01865985, -0.01174235, 0.09074895, 0.13037069, 0.02732498, -0.19464338, -0.01385942, -0.05937270, 0.10270368, 0.04056578, 0.01545463, -0.23101489, -0.15997531, 0.08205478, -0.06290472, -0.16002828, -0.09430346, 0.00100653, -0.06952415, -0.09070386, 0.02854417, 0.06949236, -0.12937249, -0.16709611, 0.09670144, -0.08430448, -0.14343476, 0.08742896, -0.07515798, 0.08663946, 0.04719028, -0.02532454, 0.07600416, 0.03770468, 0.10446415, 0.09104273, 0.06928329, 0.09313656, -0.01046587, 0.18046208, -0.22048101, 0.12285919, -0.14645526, 0.03830859, 0.02680983, -0.01489778, -0.02364911, 0.06512775, 0.02930593, -0.07904624, -0.03311774, -0.09026409, -0.06787010, 0.19111837, 0.18027931, -0.04237369, 0.08984225, 0.00932633, -0.00221255, 0.07240241, -0.04414279, -0.00654170, -0.04701281, -0.13918392, 0.05694447, -0.01626473, 0.04657508, 0.17329656, 0.09190857, -0.17433132, -0.00980675},
  {0.34030041, 0.08370578, 0.03886189, -0.09701560, -0.05850452, -0.12975439, -0.05353670, 0.06650858, 0.05770350, 0.05431966, -0.16677298, -0.04888364, 0.09322893, -0.01350277, 0.04148522, -0.18372591, 0.02643930, -0.00140351, -0.11510829, -0.22524917, 0.22543672, 0.14474861, -0.03516368, -0.17705318, 0.14956342, -0.09807403, 0.04989269, -0.03209716, 0.17721020, -0.10394590, -0.06215164, -0.12234572, -0.00613266, 0.13020435, -0.05843103, -0.10167698, -0.01075936, -0.04219444, 0.00091890, -0.11630543, 0.08009307, 0.08744396, 0.08779810, 0.07413538, 0.21380702, 0.01281786, -0.11237330, 0.04499238, 0.06473321, -0.05075038, -0.19943552, 0.05175629, 0.11358995, -0.10671040, 0.14018798, 0.13426699, 0.02635912, 0.09202711, 0.14210378, 0.17511854, 0.16353898, 0.09723116, 0.13725844, -0.27744395, 0.01946224, -0.09015190, 0.04319252, -0.08977027, -0.01731013, -0.07648344, 0.12250807, 0.08202877, -0.02555726, 0.08616722, -0.20469886, 0.00068350, 0.18538465, -0.00736714, 0.16145542, -0.09086252, -0.13493828, 0.14730947, -0.11918555, -0.07743977, 0.07921465, 0.00926978, -0.25661302, -0.00510956, -0.17680663, -0.05759308, -0.06465398, -0.20376444, 0.11632041, -0.10054031, 0.02898033, 0.09725614, 0.19621046, -0.02273587, 0.07835758, 0.03402385, 0.01504992, -0.09815441, 0.02714520, 0.13842510, -0.12423086, 0.04437052, -0.06762358, 0.12046688, 0.10103729, -0.04635774, -0.04700831, 0.02500491, 0.14137796, -0.01269635, -0.00749379, 0.01437564, 0.07650451, 0.18415640, 0.03970301, -0.01912519},
  {0.04879739, -0.02507344, 0.04523996, 0.02715281, -0.09447086, 0.07420723, -0.00813102, -0.00360515, 0.02567612, -0.00168823, -0.14734899, 0.00792898, -0.02358943, -0.16129108, -0.00243951, -0.05260422, -0.11501822, -0.01356968, -0.11461221, 0.07413094, 0.17852683, -0.05249349, -0.25749198, -0.00364689, -0.14018624, -0.09868293, -0.01242922, -0.06970651, 0.00539452, -0.12949544, 0.00942506, 0.08799617, -0.10728528, -0.05690998, -0.16340357, 0.02383851, -0.10873275, 0.05070474, -0.06718889, -0.05350161, 0.03681687, -0.03227849, 0.08899096, 0.11795729, 0.12617235, 0.05896610, -0.02548520, -0.12425455, 0.12251287, -0.00613777, -0.14557275, -0.03936842, 0.08545337, -0.02151371, -0.11892780, 0.07899831, 0.08354734, -0.00070478, 0.06671093, 0.13104288, -0.02448036, 0.00583553, 0.15190369, -0.12149361, -0.14282343, 0.03179295, -0.02362986, 0.01738548, 0.02043805, -0.00496649, -0.02914191, 0.12885913, -0.07890046, -0.05776894, -0.02463527, -0.14474562, 0.08073456, 0.00156903, 0.07149132, -0.06575236, 0.12188797, -0.01145140, -0.13954967, 0.05711924, 0.10977054, 0.00876769, 0.10344245, -0.06696168, 0.06047771, -0.03086849, -0.00267344, 0.10669152, -0.10387001, -0.07292504, -0.10644673, -0.04089653, -0.04155325, -0.04042873, 0.09639848, 0.02661249, -0.10529901, -0.02347324, 0.01582768, 0.02268979, -0.06476862, -0.00912423, 0.13517839, 0.06291994, 0.04168801, -0.09322509, -0.02721569, 0.02591747, -0.12356143, -0.00207277, 0.09420038, 0.02111750, -0.01022675, 0.04096150, 0.14088038, -0.09228230},
  {0.02397054, 0.04612485, -0.15079591, -0.04013884, -0.01417867, 0.04378479, -0.17398167, -0.04481812, -0.02178943, -0.05697353, 0.03186332, 0.04764085, -0.00109037, -0.29509273, -0.09472913, -0.00561092, 0.10477733, 0.12876964, -0.08094202, 0.00011377, 0.06111082, -0.04501405, 0.06226004, -0.03058881, 0.03783910, -0.09626846, 0.16421023, 0.00251558, 0.07383902, -0.06607017, -0.03241227, 0.00341461, -0.07569394, -0.05133068, 0.04101235, 0.12459043, -0.07389609, 0.21780717, -0.18929338, 0.11399192, -0.02359921, -0.17173825, -0.05267660, -0.12276677, -0.10249574, -0.21309768, -0.00002870, 0.06139734, -0.13966303, 0.06214022, 0.09553604, -0.01201530, 0.05175957, -0.02981047, -0.09381279, 0.22465524, -0.11451280, -0.11964370, 0.15167060, -0.03129268, 0.08435562, -0.17277771, 0.22414351, -0.06285334, -0.28412545, -0.06618775, 0.08369692, 0.09261855, 0.13691443, -0.06875581, 0.07894175, 0.03055698, -0.27782056, 0.09277226, -0.03918098, -0.18329591, 0.05185416, -0.07383201, -0.12255169, 0.01926300, -0.08878861, 0.10732911, -0.13499434, 0.12514600, 0.11988595, -0.12560745, 0.20027176, -0.01636541, 0.03370769, 0.03516912, -0.02480470, -0.02927791, -0.04989453, 0.05613975, -0.18320368, 0.16016895, -0.01548165, 0.05738216, 0.04911803, -0.09724304, -0.11902980, 0.02279290, 0.12108000, 0.05740026, -0.08289453, 0.07262193, 0.01235868, 0.02005533, -0.07773293, -0.01670945, -0.00796318, -0.05530172, 0.02276396, 0.02631212, 0.00883991, -0.09478448, 0.16026129, -0.09677202, -0.15525562, -0.19147123},
  {-0.16769400, -0.02631559, 0.02331912, -0.03732633, -0.15511112, 0.13842943, -0.19795558, 0.04650573, 0.09540769, -0.05464785, -0.13604440, -0.07544225, 0.04511679, -0.15513010, -0.05003238, 0.02087076, 0.09352756, -0.03694431, 0.02524156, -0.04384096, -0.00407013, -0.07842423, 0.15174226, 0.07450554, -0.06746268, -0.04536285, 0.11768201, 0.03365883, -0.05771249, 0.01094486, -0.04003221, 0.17616439, -0.00690363, -0.08892044, -0.00271768, -0.02053819, 0.05596887, 0.07384923, -0.11982783, 0.02712204, 0.02351328, -0.05779018, 0.02047723, -0.07532173, 0.02259749, -0.18091971, 0.05222936, 0.04812481, 0.04048821, 0.13816555, 0.03702468, -0.02398131, -0.00575499, -0.09095974, -0.00544584, 0.10916896, 0.04188395, -0.00344762, 0.01442790, -0.22322464, 0.01990052, -0.11497129, 0.11981414, 0.09734128, -0.10036664, -0.04083677, -0.01264015, 0.14871371, -0.05783347, 0.01471680, 0.07719184, -0.04349135, 0.02152781, 0.10552117, -0.00660271, 0.02022310, 0.14130506, 0.09733908, -0.10173307, 0.00084852, -0.07011943, 0.19172825, -0.13928699, -0.04516895, -0.10101997, -0.07450827, -0.02381281, 0.07488938, 0.12992623, 0.03065509, 0.02421069, 0.04517967, 0.05733720, 0.01200605, -0.14972283, 0.03227998, -0.09358160, 0.01582163, 0.03348963, -0.01939696, 0.05874173, -0.09972238, -0.04146653, 0.07179771, 0.11948179, 0.07240859, -0.08753916, 0.10381655, 0.01353154, 0.06501485, 0.01257858, 0.00326887, 0.11654995, -0.02828476, 0.08692154, -0.07140679, 0.12167341, 0.05611747, -0.08001769, -0.27784920},
  {0.05324825, -0.08920046, 0.01356396, 0.04034414, -0.27511337, 0.11137705, -0.16685228, -0.05357404, -0.01506746, -0.10018548, -0.02813705, -0.08262374, -0.03852987, -0.03563864, -0.10930527, -0.03830958, 0.11090466, 0.02942546, -0.07766697, -0.07910100, 0.09422112, -0.11169779, -0.07102708, -0.12117778, -0.05219833, -0.01684706, 0.10545241, 0.05187815, 0.03750818, -0.04477680, 0.06119344, 0.13181239, 0.02665204, 0.08704411, -0.03582055, 0.15386856, 0.14917590, 0.02203009, -0.12988245, 0.11678855, -0.06482102, -0.13211964, -0.03350209, 0.05294545, -0.04973412, 0.01162171, 0.06915356, -0.05856570, -0.13732512, 0.01148008, -0.02080971, 0.01085600, 0.08247956, -0.00379880, 0.04586646, -0.02791728, 0.17050846, -0.04928864, 0.14718433, -0.02080065, -0.12978141, -0.03941547, -0.03688841, -0.00870415, -0.00443395, -0.04810203, 0.03627801, 0.13557690, 0.10175789, 0.00519242, 0.16269825, -0.03879844, -0.11065084, 0.16117804, -0.22257046, 0.03708537, 0.02211959, 0.01155697, 0.09104734, -0.01213975, 0.02679333, 0.04227899, -0.05309533, 0.04329805, -0.02091086, 0.00648601, -0.01867472, -0.07276789, -0.06328669, -0.10669992, 0.02171334, 0.16944356, 0.08126136, 0.02101183, 0.00377289, 0.11080635, 0.09216028, 0.01098763, -0.10080815, -0.15343496, 0.05680320, 0.03196318, 0.02195885, 0.05731120, 0.01761198, 0.08390111, -0.13685733, 0.06707850, 0.07148676, 0.06071243, 0.13202271, 0.01785471, 0.05679015, -0.09408341, 0.06967986, -0.03507536, 0.02964200, 0.08227108, -0.16520277, -0.13417447},
  {-0.07759641, -0.03115064, 0.03571480, -0.11613514, -0.05949084, 0.11877745, -0.15076312, -0.12371121, 0.10406791, 0.08486409, -0.08383912, -0.02890071, -0.01056659, -0.08623571, 0.13160127, -0.04220945, -0.13956404, 0.04045581, -0.06474624, 0.01261645, 0.06700450, -0.03741882, -0.15710370, 0.07703510, 0.04755111, -0.11035132, -0.08044017, 0.02824238, 0.04706119, -0.05099132, 0.09072516, 0.00359369, 0.05505902, 0.02611339, 0.05482526, 0.01499720, -0.02536737, -0.00168643, 0.00497370, 0.09402557, 0.00683840, 0.04803760, 0.05573025, 0.03314006, 0.12792905, 0.01027035, -0.06922398, 0.04240588, 0.02949391, 0.03594443, 0.06665817, -0.07230134, 0.10775483, -0.00629392, -0.03154382, 0.07949658, -0.01863902, -0.07647876, -0.05687322, -0.07811283, -0.02899933, 0.08674486, 0.06614702, 0.00514900, -0.14457768, -0.11105054, -0.00470032, -0.06519420, 0.02548068, -0.02635975, -0.00005753, 0.13167918, 0.00379377, 0.01971392, 0.08053140, -0.15020818, 0.10900477, -0.04610615, -0.11532526, -0.05766168, 0.00974249, 0.06026790, 0.06866614, 0.12155732, 0.03306487, 0.04628758, 0.16176437, -0.04399785, 0.00652586, -0.04886711, -0.04930016, -0.02017505, 0.04526873, -0.05297808, 0.03351136, 0.11693429, -0.14704463, -0.01368745, -0.02916854, -0.00372350, 0.02681602, 0.03732875, -0.05456834, 0.01302304, -0.01683637, 0.07359790, 0.05161949, -0.00931190, 0.12683813, 0.06889752, 0.04038289, -0.09911137, 0.00016513, -0.06256534, 0.07386663, -0.05387322, 0.08150706, -0.02375682, -0.00467911, 0.07843021},
  {0.12207961, -0.19415474, 0.00814261, 0.07711389, 0.08178681, -0.05296380, -0.06659976, -0.01821411, -0.00503725, 0.02236145, -0.02201718, -0.14383595, 0.05210660, 0.01087182, -0.04301470, -0.01705451, 0.07276720, -0.03679569, -0.09206777, -0.05612952, -0.00001713, -0.05525617, 0.02508725, -0.02030575, -0.03310378, 0.08011427, -0.00031099, -0.00003237, 0.02956202, 0.05987719, 0.04362207, 0.09799136, -0.01141160, -0.02184525, -0.08630376, -0.00661101, 0.08563242, 0.05335407, -0.01979211, -0.05835559, -0.10441495, -0.11184254, -0.01808044, -0.03182713, -0.04997625, 0.00075691, 0.06385942, -0.06508749, -0.11464431, -0.06064637, 0.01740624, -0.14754306, -0.04578214, 0.03566992, 0.10966278, -0.14862233, -0.01108472, 0.04613030, -0.02466909, 0.00831385, 0.08960050, 0.02398985, -0.02786629, -0.03922425, 0.00763292, -0.04346588, -0.09051692, 0.11170257, -0.07577069, 0.06511116, 0.05238669, -0.11356924, 0.06627133, -0.04788439, -0.16365181, -0.07774284, 0.02998980, -0.04882818, 0.15112807, 0.04675528, 0.08669755, -0.13747059, -0.05206671, 0.10683908, 0.05641607, 0.00928412, -0.12863657, 0.01320540, -0.14762533, -0.01271761, -0.17121369, 0.01533506, 0.02211751, -0.04352539, -0.03992598, -0.07800616, 0.06214594, -0.04821276, 0.06963103, -0.00626411, -0.11654569, -0.04365122, -0.02710232, -0.05184259, 0.05255716, 0.01343418, 0.04694608, -0.01263587, 0.09241972, -0.04996001, -0.02560450, -0.00908691, -0.06942052, -0.00868676, 0.07452492, -0.07996689, 0.03228123, 0.11843487, -0.09400494, 0.13495544},
  {0.11398845, -0.02833124, -0.02618952, 0.01616514, 0.04575488, 0.09635171, 0.18528377, 0.05978109, 0.10075612, -0.00154251, -0.00605121, -0.07272572, 0.00681926, 0.14648636, -0.04483519, -0.04457355, -0.07202855, -0.06293916, -0.08360194, 0.04361016, 0.09658822, 0.03406166, -0.17407210, -0.08628708, 0.11699983, -0.10357252, -0.02574927, -0.06539286, 0.03721872, -0.14318886, -0.04818172, 0.09492202, 0.06949802, -0.08268452, 0.03222131, -0.09626476, -0.06029602, 0.00505466, 0.09564859, 0.00073889, -0.06520085, -0.07103406, 0.01203425, 0.03251044, -0.06451847, 0.17069893, 0.01995931, 0.06672066, -0.00989636, -0.06060502, 0.04470552, -0.07556169, 0.07560463, 0.15889820, -0.04913337, -0.08546549, -0.09217270, -0.01965142, -0.11621813, 0.15342818, -0.08186287, 0.03004985, 0.02140214, -0.07812138, 0.05661852, -0.01738821, 0.03935869, -0.09040537, 0.03330192, 0.02733615, -0.14094006, -0.19016205, 0.09441744, 0.04433718, 0.07386899, -0.00525614, 0.02164650, -0.05799611, 0.09325364, -0.15259390, 0.10697329, -0.07154199, -0.00931221, 0.02552516, 0.08796710, -0.03420381, -0.03870201, 0.07364336, 0.03990137, 0.00341045, 0.05063105, -0.00431783, 0.09765341, -0.09690185, 0.12976308, 0.04679063, -0.02901146, -0.08054736, -0.03183769, -0.01205482, 0.04528411, -0.05972618, 0.00314931, 0.07459373, -0.16707683, -0.11117795, 0.04629825, -0.06795187, 0.03855274, 0.00154881, 0.03741474, 0.05049381, -0.11397056, -0.07834959, 0.16998999, -0.00935668, -0.04288538, 0.07809727, 0.04921761, 0.09453115},
  {0.05801617, -0.13675763, 0.06999676, 0.08890863, 0.00176246, 0.00149982, -0.07850326, -0.03363964, -0.12972027, -0.11390990, 0.08158258, -0.12158792, -0.02404167, -0.11109604, 0.09706052, 0.04732538, 0.09126361, -0.08022877, 0.04763971, -0.07447572, -0.11338324, 0.02266999, 0.05801699, -0.02219721, 0.02567161, -0.08280358, 0.09225432, 0.02274133, -0.00107518, -0.12990499, -0.03499363, -0.14035524, -0.03585636, -0.08392508, -0.18065840, -0.04108627, -0.01980955, 0.09854469, 0.07701009, -0.03965834, -0.02876941, -0.03817958, 0.09610207, 0.05458434, 0.01574273, -0.05314470, 0.04766800, 0.06336845, -0.00135071, 0.01375308, 0.07154416, 0.07088642, 0.10507101, 0.11766891, -0.04483364, -0.09174032, -0.04957917, 0.16523331, 0.02211814, 0.15339360, -0.05007511, 0.01082637, -0.00736275, -0.05305749, -0.02139683, 0.06826083, 0.00652234, 0.02339034, -0.09807579, -0.01838822, -0.13541387, 0.00010668, 0.00867995, 0.10591563, -0.08825661, -0.07445148, 0.05102049, -0.10052401, 0.10215472, -0.06007857, 0.05808240, 0.07634859, 0.06666371, -0.07566815, 0.06701075, 0.09198862, -0.06780790, 0.01308028, -0.26384479, -0.01667312, -0.08824647, -0.11060978, -0.02174804, -0.07093818, -0.07725897, -0.04035219, 0.04713254, 0.00594573, -0.07381163, 0.00469390, -0.11530986, -0.08475203, 0.14165424, 0.02537347, 0.02939887, 0.03272574, -0.01632050, 0.05477122, -0.06671033, 0.03505142, 0.03189164, -0.05070259, -0.07775154, -0.10733745, -0.03948930, -0.05345785, -0.08103919, 0.13328227, 0.04081691, 0.09140064},
  {-0.04980114, -0.10932372, -0.19794111, 0.05197512, -0.16257916, 0.06353194, 0.03118153, -0.05319385, -0.04756981, 0.03311489, -0.06312053, -0.14089903, 0.14289144, -0.00243332, 0.07662699, 0.11744985, 0.01846535, 0.07094646, -0.09680699, -0.08369345, -0.04932871, -0.15473144, -0.01726100, 0.10548899, -0.16003861, -0.10797893, -0.08775792, 0.09263978, 0.06551950, -0.06810896, 0.04494482, 0.12393780, 0.06156334, -0.12023630, -0.11090446, 0.07575904, 0.18270515, 0.05438723, -0.05989693, 0.08505011, 0.03333681, -0.06789803, -0.15258783, 0.13804576, 0.06534902, 0.02120632, -0.12288290, -0.02560774, -0.02695239, -0.01770538, 0.07186095, -0.13808253, -0.08306567, 0.05388539, 0.05286135, 0.04717138, 0.01359044, 0.04005858, -0.06776384, 0.07597978, 0.04255750, -0.04955475, 0.07427828, 0.05128948, -0.03990294, -0.01790105, -0.12329311, -0.05405516, -0.04750347, -0.04147779, 0.09690287, -0.08347867, -0.05150721, 0.01549807, -0.05594685, 0.04441495, 0.08736934, -0.09491306, -0.13092650, -0.14076902, 0.06362972, 0.09720266, 0.06864618, 0.10161415, 0.06034534, 0.01128135, 0.05885290, 0.00162532, -0.16103214, 0.13455530, -0.00895051, 0.02918866, 0.00780703, 0.13854498, 0.00205155, 0.02984857, 0.10806314, -0.04978793, -0.08241252, -0.02750292, 0.07126551, 0.09612183, 0.08237732, 0.21519850, -0.03528227, -0.00760293, 0.09552163, 0.00908683, 0.09641016, -0.11952516, 0.00449592, -0.07411430, -0.11170795, -0.04775016, -0.16345453, -0.00224696, 0.05827805, 0.00143802, -0.12368400, 0.00706740},
  {-0.04320714, -0.13698836, -0.00575766, 0.08475173, -0.13968040, 0.13221580, 0.10025029, 0.07882003, -0.01811647, 0.08278516, -0.05222150, 0.02781667, -0.09399495, -0.06978109, 0.06130456, -0.03998056, 0.01609691, 0.08547208, -0.02265519, -0.01063386, 0.04655438, -0.17899205, 0.19261697, 0.10106743, -0.16354471, -0.03655582, -0.14544772, -0.06056405, 0.04183591, -0.07435676, -0.02123684, -0.18069957, 0.04411699, 0.06227817, 0.06055913, 0.13567916, 0.07824755, -0.10068044, 0.05965858, 0.06465951, 0.05014915, -0.05260107, -0.11114849, -0.01776537, 0.04606182, -0.08314915, 0.01907250, 0.02337929, -0.17601240, 0.06058256, -0.07253222, -0.10359333, -0.06329919, -0.02172816, 0.07609621, 0.04014107, 0.07099364, 0.10558654, -0.01399188, 0.04605408, -0.04031283, -0.05702218, 0.08349237, -0.00386696, -0.05850013, -0.01509622, -0.03386237, 0.00160531, 0.05091417, 0.04982207, 0.15627414, 0.13929492, -0.07311682, 0.06506599, 0.10621683, -0.07651131, 0.01657835, -0.10339995, -0.12268857, 0.08813804, -0.03625392, 0.07352595, 0.08166425, -0.00698775, 0.03334487, 0.15337187, -0.03016885, -0.03038134, 0.10404833, -0.08673698, -0.03678530, -0.01733761, -0.03868176, -0.08359773, -0.15748867, 0.00897521, 0.01633982, 0.00932461, -0.04699828, 0.08508220, -0.12817349, -0.04186276, 0.14838064, -0.09676050, 0.02490851, -0.05113772, 0.09204008, -0.03531521, 0.08327885, -0.00533473, -0.17608024, -0.10362703, -0.09301335, 0.01736622, 0.01241800, -0.08971377, 0.10040054, 0.09010452, -0.03197282, 0.00466316},
  {-0.00306972, 0.02633888, 0.00849585, -0.10093491, -0.17118736, -0.04657418, -0.23151131, 0.04038430, 0.06068966, 0.07241878, 0.04105522, -0.08356681, -0.08637316, -0.12905163, -0.02081798, 0.02487913, 0.05725024, -0.05993558, -0.01599802, -0.08473254, -0.01468971, -0.09043804, 0.07395788, -0.05931522, -0.05859808, 0.09679706, 0.01149902, 0.02867195, -0.02682374, 0.01967936, 0.12040035, 0.16921331, 0.08820120, -0.04605217, -0.07411402, 0.17988156, 0.06555110, 0.04049050, -0.14885364, 0.11600988, -0.05395300, -0.03868527, 0.01611040, -0.01821380, 0.03831633, -0.05289293, -0.10487473, 0.02745874, -0.04433699, 0.03391561, 0.17276144, 0.06851873, -0.15810743, -0.04812620, -0.07360567, 0.09382284, 0.00388013, 0.04954884, -0.02781847, 0.07593451, 0.03670375, -0.08005939, 0.17820153, 0.15008320, 0.05506638, 0.01026772, -0.04855786, 0.04768422, -0.04812108, 0.02551468, 0.13211153, 0.03721249, -0.04775523, 0.16484760, -0.14424433, -0.10445498, -0.02725102, 0.09932716, -0.06329579, -0.13198732, -0.01785237, 0.02071031, -0.04319178, 0.08111069, 0.09741933, -0.04863884, 0.12991032, 0.01608405, -0.11022927, 0.01736370, -0.00963090, 0.04189298, -0.06963689, 0.01719166, -0.09791636, 0.13478194, -0.04672897, 0.05404445, -0.04879494, 0.00561293, 0.04175403, -0.04154856, -0.15391110, 0.11342406, -0.02472121, 0.04979439, -0.07764547, 0.00970377, 0.00678035, -0.05625617, -0.01118850, -0.00684270, 0.01753132, -0.03388915, 0.02770149, -0.02603657, 0.07777512, -0.02566297, -0.00676319, -0.06882953},
  {-0.02447781, -0.02978849, 0.00219002, -0.07468418, 0.07717156, 0.18904555, -0.03782007, 0.04034416, 0.00211604, -0.12615402, -0.03618808, 0.00977672, -0.06910776, -0.24371852, 0.22890100, 0.21603654, -0.14942479, 0.09125187, 0.05323026, 0.11190654, 0.18509963, -0.18460770, 0.03234401, 0.02317259, 0.08869819, -0.11617889, -0.01773198, -0.01497027, -0.09661160, 0.04387224, 0.00526934, 0.01550019, -0.19624171, 0.07446934, 0.14273204, 0.20783165, 0.04566951, 0.20129137, 0.19227390, 0.15950082, -0.06240879, -0.17788664, -0.09781653, -0.22058713, -0.12837765, 0.04334139, -0.11043834, -0.09357398, -0.14370801, -0.04267466, 0.06726635, -0.06060890, 0.16284475, 0.01666966, 0.01782152, 0.03434784, -0.10610526, 0.18997751, 0.15178402, -0.07984987, -0.13854200, -0.07775922, 0.14745422, -0.00198398, -0.37924862, -0.19976309, 0.18194208, 0.25365216, 0.11863317, -0.04590995, 0.01967379, -0.13028532, -0.17752831, -0.10553706, 0.02238372, -0.29670411, -0.05688204, -0.11703210, 0.07900338, -0.06048559, -0.12311431, -0.12957841, 0.05889382, 0.15195994, 0.25084704, 0.04095371, 0.19715358, 0.01509928, 0.01809560, -0.13259803, -0.06732863, -0.27658746, -0.19292641, -0.10522980, -0.00108795, 0.05240904, 0.05499506, 0.07564737, -0.01914103, -0.02157862, -0.10414571, 0.09829726, 0.34956259, 0.07021673, -0.13510592, 0.07311008, 0.01598777, -0.07791985, 0.07119384, 0.03739977, -0.07182848, -0.12336461, 0.02609812, -0.03181476, 0.06988572, 0.02338800, 0.14363353, -0.11451717, -0.12231589, -0.04294397},
  {0.09863790, -0.00223649, -0.02484852, -0.09744937, -0.10277322, 0.02998622, -0.02144549, -0.08585928, 0.01342808, 0.06085360, 0.01842057, -0.12428065, -0.03536890, -0.01814462, 0.03652719, -0.10093785, 0.02901543, -0.06867214, 0.03464320, -0.07289059, -0.00104135, -0.04251196, 0.01888614, -0.03649924, 0.12498967, -0.10830097, -0.14075220, 0.01530794, 0.05454861, 0.08846048, 0.05042455, 0.11146663, -0.06539617, -0.02654575, -0.24598098, -0.05596737, 0.02275024, 0.11053972, 0.03617934, -0.14134704, 0.06019627, 0.14609744, -0.05777152, -0.04250729, 0.06328245, 0.09426503, -0.07220215, -0.02367158, -0.04211250, -0.06927304, -0.05200547, -0.09687634, 0.00054823, 0.01819587, -0.08057116, -0.01521542, 0.05691463, 0.03448797, -0.02617660, 0.05365162, 0.00250778, 0.01120747, 0.07547627, -0.01908499, 0.00372622, -0.06958766, -0.14908753, -0.05448650, -0.06761087, 0.08005688, -0.06958197, 0.02971918, 0.00343362, 0.07893737, -0.05784920, -0.10030847, 0.04523566, -0.03883220, 0.02712138, -0.07658347, -0.04357086, -0.06504269, -0.06704777, -0.05081710, -0.02066122, 0.00281542, 0.00397067, -0.02648035, -0.07815851, -0.02694314, -0.00219114, -0.07355253, -0.09519351, -0.03128351, 0.01637603, 0.15857564, 0.11617711, -0.03945134, -0.08525597, -0.14024045, 0.06100860, -0.10903366, 0.08778549, -0.07348011, -0.06049786, 0.05836734, -0.02634148, 0.14502917, 0.10409066, 0.01613369, 0.05438858, -0.00796597, 0.05687799, -0.09996566, 0.01735635, 0.06683137, -0.11369634, -0.03021134, 0.06847312, 0.09448839},
  {0.03636039, 0.06567555, 0.06897745, 0.03614298, 0.08202341, -0.04440340, -0.06560904, -0.01394693, 0.11604144, 0.07332812, -0.07329763, 0.13360193, -0.04331170, -0.05414607, 0.19169073, -0.01118462, 0.00101101, -0.10064717, 0.01530600, -0.02389212, -0.05982137, 0.11378952, -0.04486647, -0.01324491, 0.03895987, -0.00398206, -0.08490322, 0.03659237, -0.15475948, -0.03732140, -0.11516841, 0.01649621, -0.07300685, 0.08880650, 0.02703042, -0.03679328, 0.01399404, 0.11971577, 0.13180947, -0.11906558, -0.05961835, -0.04462158, -0.01914185, -0.05231482, -0.05350883, 0.02453873, 0.02984235, 0.06849029, -0.09305265, -0.05106019, -0.09131894, -0.06066117, -0.06101998, -0.04302654, -0.06529985, -0.11032999, -0.14475802, -0.06322578, -0.04236952, 0.02141170, 0.10813051, -0.01359443, -0.07224896, -0.11134174, -0.02644086, -0.12668923, -0.00468013, -0.01104220, 0.06467196, 0.03989226, -0.02430742, -0.03231500, 0.00503562, -0.04129485, -0.01244394, -0.06544927, -0.04080113, 0.02985478, -0.09696487, 0.05684678, 0.08609363, -0.09724076, -0.04480567, -0.06781722, -0.11461424, 0.02972059, -0.29612628, 0.01644783, -0.02539389, -0.13791701, 0.08268435, 0.09533350, -0.00859287, 0.01917841, 0.11334202, 0.11847918, -0.12051040, -0.10709571, -0.06044921, -0.12665451, 0.05895445, 0.02868438, 0.02791157, 0.09491292, -0.09187029, -0.00464827, 0.09253296, 0.05971009, 0.00195045, -0.01065803, -0.05923618, 0.08241465, -0.07447405, 0.01699810, -0.04752894, -0.08239080, 0.06056748, -0.03017417, 0.09511206, 0.05318110},
  {-0.10651304, -0.16312271, 0.01559143, -0.09265897, 0.09906317, -0.03945409, -0.02907489, -0.07153995, -0.01013977, -0.08812044, -0.01875326, -0.10445399, -0.00438219, -0.08332253, 0.02886898, -0.01017338, 0.02117161, 0.04818372, -0.10172419, 0.00648898, -0.03619850, 0.00470445, 0.03470986, -0.01254208, -0.11579304, -0.03365675, 0.02569595, 0.08657814, 0.04054075, -0.02495607, -0.11933170, 0.11481506, -0.00985517, -0.11450420, -0.01150733, -0.04454630, -0.08053354, -0.08394238, -0.10026289, -0.00277568, -0.07958180, 0.04512982, -0.06286792, 0.02895465, -0.04840481, -0.07225101, -0.02551628, 0.05347967, -0.03516413, 0.01035575, 0.06582386, -0.16770738, 0.05705191, 0.05054449, -0.11967696, 0.13478978, -0.08885346, 0.16351686, -0.12093551, 0.02460432, -0.01618636, 0.03568697, -0.05603881, -0.03361626, 0.10550511, -0.03272339, 0.07003190, -0.01097835, -0.03737617, 0.04970922, -0.07317215, -0.06430709, 0.12829241, 0.01140680, 0.01549220, 0.10226034, 0.08217568, -0.10445101, 0.05254098, 0.01823850, -0.07003362, -0.04162588, -0.08259539, -0.12821214, 0.05665174, -0.05197987, 0.10619751, 0.02773643, -0.19122709, -0.01845618, -0.02527224, 0.09945919, 0.04939680, -0.05009956, 0.00720724, -0.14329877, 0.10474637, -0.03618529, -0.10631095, 0.05712134, 0.03380664, 0.00157298, 0.08032256, 0.00489563, -0.02967800, 0.05414198, -0.03066382, -0.03183024, -0.16926530, -0.07486399, 0.13304041, -0.06564940, 0.00436281, -0.06758751, -0.07332317, -0.10604594, -0.06301226, -0.06683699, 0.05389496, 0.02049600},
  {0.03561796, -0.11055769, -0.06432795, 0.04027462, 0.06170881, 0.01767467, 0.03738382, -0.08101134, -0.15027879, -0.05703096, -0.12532890, 0.14199607, -0.10087390, -0.11226214, -0.10083938, 0.01385740, -0.11036525, 0.13444868, 0.02785493, 0.16231786, -0.04781542, -0.07186085, 0.05007834, 0.19254424, 0.09465557, -0.11717151, 0.03297184, 0.06234822, -0.14057754, -0.08331032, 0.03016906, 0.15253848, -0.01398721, -0.04325749, 0.10206106, -0.07820561, 0.00447443, 0.12290787, 0.03159139, 0.11735002, -0.01089201, -0.04385575, -0.10258153, 0.16496679, -0.19898988, -0.04439753, -0.09542441, 0.05110971, -0.02964287, 0.05584239, 0.00173590, -0.08139407, 0.04324589, 0.00660424, -0.01877129, 0.09266735, -0.08177301, 0.11258256, -0.11903595, 0.06730443, -0.00668508, -0.13023414, 0.05083184, -0.03173893, -0.02873045, -0.00452691, 0.02433108, 0.03214988, -0.01183931, 0.05967008, -0.02028619, 0.12087238, 0.07754180, -0.10108814, -0.25922453, -0.05232250, 0.07357469, 0.05958683, -0.10588209, -0.08812280, 0.11161110, -0.03580831, 0.09262577, -0.01495741, 0.21740362, 0.09765273, -0.18483204, -0.03990014, 0.16214186, -0.15927868, 0.18310224, 0.11502700, -0.11117911, 0.07227768, -0.04545728, 0.03291063, 0.06041396, -0.04528950, -0.04685847, 0.04358131, -0.08214945, -0.00283009, 0.01402954, 0.04628479, -0.17045100, 0.06766096, 0.07417731, -0.15828401, 0.11372685, -0.07696150, -0.05889200, 0.13960508, -0.02371274, 0.00916515, -0.06667189, -0.06966096, -0.14486979, -0.13764790, -0.05687668, 0.00403702},
  {-0.07543597, -0.01916672, 0.04239168, 0.02075073, -0.12289490, 0.03096086, 0.01071372, 0.06548553, -0.04723484, -0.07137381, -0.12439317, 0.01812680, 0.09329795, -0.05503909, -0.07737148, -0.00097568, 0.19486147, -0.12692684, 0.01963623, -0.13785137, 0.04207744, -0.05917029, -0.03661599, 0.04667604, -0.03563100, -0.05754192, 0.07497758, 0.06120537, 0.03275768, -0.00408870, 0.00194874, -0.00606998, -0.03568705, -0.10788824, 0.13126588, -0.04576173, 0.03955615, -0.01058307, -0.03237425, 0.00789068, -0.01874225, -0.04933538, 0.05870444, 0.05942662, -0.06476945, -0.18672909, -0.11660001, 0.01013968, -0.07784567, 0.05583748, -0.05542378, 0.08137643, -0.01092400, -0.12378631, 0.04594820, -0.06291288, 0.02664513, 0.05829567, 0.03742667, -0.09801833, -0.09276458, 0.01379202, -0.09703021, -0.08442686, -0.01904898, -0.04705127, -0.06732707, 0.09261864, 0.12639883, -0.02549920, 0.16861123, 0.10133354, 0.04046945, 0.12174676, 0.13336352, 0.02493189, 0.08865266, -0.04881923, -0.09024841, 0.01666836, -0.00893288, 0.01682495, 0.07346694, -0.01951749, -0.04398736, -0.00717591, -0.05482053, -0.04374094, -0.00235591, 0.01986003, -0.15836884, 0.06935762, 0.01464613, -0.00959957, -0.01309086, -0.09198305, 0.08274352, -0.03884921, -0.08997370, 0.06580245, -0.12272279, -0.09310468, -0.00076830, -0.01266123, -0.00935911, 0.07846808, -0.07295866, 0.00250908, -0.15802859, -0.04610751, 0.15049519, -0.02279183, 0.00532754, 0.04721605, -0.11291450, -0.01192784, -0.00446247, 0.00970841, -0.05222911, 0.12949350},
  {-0.15254833, -0.02561104, -0.04325156, -0.00118652, -0.03683782, 0.02713598, 0.15382393, 0.04216837, 0.02397706, 0.01464455, -0.14895904, -0.04229641, 0.09148091, 0.13107103, 0.06298835, -0.15207751, 0.06223485, 0.05269209, -0.04221717, -0.05660080, 0.00940571, 0.09095483, 0.05777996, 0.08297440, 0.11218484, -0.05910359, -0.04501733, -0.04284718, -0.10285931, 0.07598411, -0.08088447, 0.06903528, 0.15772772, 0.00305806, -0.06992117, 0.00031230, -0.00757997, 0.08163212, 0.01106509, -0.04536380, -0.02494733, 0.00842377, -0.01378602, 0.05058491, -0.06946062, 0.04504893, -0.02436860, -0.07559025, -0.01978561, 0.02724534, -0.05900943, 0.03768736, -0.04524373, 0.00978020, -0.08127464, 0.05402144, 0.02879925, -0.09094647, -0.04704398, 0.02167709, 0.01796014, 0.08427276, -0.07426537, -0.07820414, 0.07352392, -0.05193587, -0.00778082, -0.07348791, 0.13127592, 0.02680289, 0.06433575, 0.07225500, -0.09932617, -0.05520305, 0.06319410, 0.16026822, 0.03274974, 0.04117462, 0.04385846, 0.02644733, -0.13480568, 0.16260432, 0.07949973, -0.16325779, 0.00899454, -0.03215344, -0.00418312, -0.07736990, -0.19846372, -0.00947786, -0.06688201, 0.00182765, -0.10016466, -0.06642583, -0.06481995, 0.00828010, 0.04740990, -0.02378825, -0.08000050, -0.14752173, 0.00594013, 0.05666288, 0.10920445, -0.23567431, 0.03480178, -0.00402638, -0.01793329, -0.08251497, 0.01100808, -0.10816677, 0.08292757, -0.00023682, -0.06890415, 0.03387000, 0.03967199, -0.05090423, -0.14118491, -0.00031952, 0.12015465, -0.12932599},
  {-0.23990574, -0.14102454, 0.09260458, -0.05158788, -0.09461834, -0.02101867, 0.23422615, 0.00726569, 0.00682509, 0.03712680, -0.22333020, 0.09671953, 0.01717795, 0.03257703, 0.01851090, 0.08845842, -0.04967001, 0.09331192, -0.06507082, -0.02234617, -0.14517325, 0.06043017, -0.04491507, 0.09924919, -0.06082815, 0.01086508, -0.18430433, -0.04453775, -0.03675078, 0.01375443, -0.11367733, 0.04728673, 0.06542967, 0.00629910, -0.23301834, -0.01511104, 0.03105525, 0.12493072, 0.10329967, -0.05940000, 0.03152429, 0.06249394, -0.04888839, 0.16225143, -0.09124260, 0.09008978, -0.15742131, -0.08506125, 0.08599766, 0.16420992, -0.06445548, -0.21897659, -0.19572911, 0.04405896, 0.10159630, 0.14524439, -0.05137173, 0.16336462, -0.17925192, 0.15267874, 0.03533872, -0.00555830, -0.20419738, -0.07357213, 0.08263180, -0.05169928, 0.00165697, 0.02066530, -0.00794919, -0.01223524, -0.04072878, 0.07862808, -0.06926857, -0.02451580, 0.18900697, 0.07192688, -0.27632454, -0.02996072, 0.00082740, -0.13189231, -0.12794171, -0.00375280, 0.02569317, 0.08060507, -0.02990546, 0.04017727, -0.23948045, -0.09610914, -0.12410911, -0.08932957, 0.04019855, 0.20932397, 0.06601774, 0.00900416, 0.13988854, 0.06532950, 0.03436694, -0.09804270, 0.09046275, -0.12062436, -0.11290365, -0.07299165, -0.16415957, -0.15406443, -0.13490975, 0.03428247, 0.00111899, 0.03902894, -0.03517042, 0.06931803, 0.08467539, 0.04861466, 0.01032753, -0.06722513, 0.01870106, 0.05066978, -0.00863490, 0.03955393, -0.00472186, 0.00898482},
  {-0.07832630, -0.24168126, -0.07095108, -0.02242365, -0.11122231, 0.12783867, 0.05849462, 0.05437344, -0.10687022, 0.03864242, 0.02276953, 0.03488210, 0.02073725, -0.12354941, -0.02242695, 0.12662810, 0.17546152, -0.00420093, -0.07338964, -0.00187999, -0.02860362, -0.14139253, -0.07797641, 0.00068460, 0.08918228, -0.01663707, -0.12843320, -0.06092387, 0.07181459, -0.09488680, -0.02839918, -0.05272604, 0.08068050, -0.02627489, -0.12557669, 0.12580138, 0.08514546, 0.04920913, 0.17666118, -0.00928475, -0.08637473, -0.12476339, -0.03389432, 0.10169749, 0.04577111, 0.05253817, -0.13235798, -0.06932581, 0.05709811, 0.09817302, 0.03100927, -0.05338474, -0.05908356, -0.07799883, 0.00220324, -0.03643708, 0.07755297, 0.04697625, -0.02299906, 0.10660306, -0.08123291, 0.05451524, -0.07013517, -0.08478718, 0.09822807, -0.13526295, 0.05633716, 0.01181210, -0.05195015, 0.08301589, 0.06682922, 0.05617822, -0.09472888, 0.05115897, -0.00061532, -0.02590205, 0.01000100, 0.09907968, 0.03888967, 0.07026670, -0.18547431, 0.00515611, 0.03743669, -0.05993278, -0.04264821, 0.10118777, -0.08335230, -0.08889391, -0.07606933, -0.08287744, -0.12110806, -0.01609615, -0.03675481, -0.07400717, 0.01401771, -0.06555840, 0.05828201, 0.06549095, 0.06354118, -0.02375646, -0.04664437, -0.00712839, -0.02418937, -0.02098799, -0.06685846, 0.05266928, 0.01913987, -0.08070785, -0.11982541, 0.05305920, -0.04701051, -0.06297804, -0.05091216, 0.01659571, 0.00625283, -0.05964561, -0.04284855, -0.00045919, 0.10121455, 0.04272762},
  {-0.06543168, 0.00200280, 0.02174671, -0.06331326, -0.02392857, -0.00054966, 0.13026455, 0.07841134, -0.11408555, 0.02476375, -0.07712154, 0.01554245, -0.04960449, 0.14965092, 0.07707699, -0.05173633, -0.00770036, -0.03555239, 0.04179918, -0.03093892, -0.03612011, 0.04633259, 0.02021283, -0.04555888, -0.12129941, -0.01275475, 0.03328992, 0.01784341, 0.05076686, -0.02783306, -0.03538986, 0.12504557, 0.12201244, 0.03127410, -0.15044177, 0.06637666, -0.09983163, -0.07034836, -0.06076081, -0.05697697, -0.03394133, 0.04234875, 0.06267229, -0.07510956, -0.01879000, -0.05667441, 0.01536675, 0.07592228, 0.02246404, 0.05416492, -0.05986694, -0.07188372, 0.02220440, 0.07243751, -0.09070411, 0.09665456, 0.06639042, 0.11402204, -0.15753211, 0.14488959, -0.02369166, 0.00424945, -0.04318684, 0.11350208, -0.08529697, 0.05107678, 0.10097940, 0.10898808, -0.07734016, 0.05144576, -0.00685336, -0.04362979, 0.07056657, 0.00586272, 0.00868742, 0.10489172, -0.00156009, 0.03552000, 0.06444561, -0.04666700, -0.05446254, -0.04553238, -0.02774929, 0.05632086, 0.13119920, -0.08695006, 0.16510688, -0.10517122, 0.06379997, -0.04295240, -0.01672859, 0.01433751, -0.08781590, -0.03308960, 0.06103594, 0.00943500, 0.06946608, 0.02549222, 0.08033098, 0.03285687, 0.01544398, -0.07809915, -0.07520410, -0.10931636, -0.02623175, -0.09568188, -0.02862290, -0.01439497, -0.06140133, 0.02263431, 0.15168788, 0.03722994, -0.01002706, 0.02997526, -0.05336148, -0.06142698, -0.01147802, -0.01998188, -0.08313019, -0.02759861},
  {-0.00316063, 0.07400774, -0.10818408, 0.02759481, 0.14235674, 0.01976709, 0.07235222, -0.05326018, -0.08918224, 0.07245622, -0.06986474, 0.06286971, -0.06584713, 0.06652595, 0.07453738, 0.01500144, -0.10766732, 0.06513594, 0.00410373, 0.06565253, 0.06888074, 0.03039112, 0.11678972, 0.15296386, -0.00121698, 0.01907387, -0.04819285, -0.01619637, -0.13353311, -0.01530538, -0.09816786, 0.02518287, 0.06459543, -0.12854719, 0.05919448, -0.01616185, 0.10244834, 0.07999935, 0.07499687, -0.03695382, 0.03500558, -0.00789278, -0.03980132, 0.04029107, -0.13241468, -0.04447276, -0.04450189, 0.00683838, 0.01032936, -0.03068824, 0.02655050, -0.01965773, 0.04796988, 0.10477123, 0.01485047, -0.04756908, -0.02172821, -0.00228281, -0.07633910, -0.00397085, -0.07671111, 0.00508795, -0.11255891, 0.10105632, -0.06203115, 0.07756415, 0.01409618, -0.00065132, -0.01435006, -0.08435531, -0.14144719, -0.07704370, -0.01107268, -0.01683303, -0.01364682, -0.00396544, 0.06174040, 0.03654728, -0.07983191, 0.07859864, 0.01534097, -0.02072744, -0.09276606, 0.08220059, 0.04894984, 0.05857037, -0.09045832, 0.06052529, -0.01640484, -0.07198416, -0.06746978, 0.05184592, 0.05463259, 0.02388192, -0.08556612, -0.02962792, 0.02394358, -0.02091072, 0.01793551, 0.01190366, 0.07475749, -0.05521538, 0.05707926, -0.03174517, -0.08425532, -0.09308837, 0.09350443, -0.11020058, 0.06192215, -0.06522186, 0.09349020, 0.00961353, -0.05308805, -0.03126251, -0.02746722, -0.04356190, 0.07593803, -0.02783157, 0.01804386, 0.00614262},
  {0.11331806, -0.19853488, -0.02853424, 0.09980770, -0.27752569, -0.25895238, -0.17792660, -0.08312558, 0.11283343, 0.05061173, -0.14710622, -0.21298501, 0.04026482, -0.01172580, -0.11213872, -0.01935324, 0.12357825, -0.01697426, -0.00406439, -0.18204038, -0.06293774, 0.00920094, 0.01029401, -0.22831720, 0.01083016, 0.09128259, 0.05243476, 0.09269940, -0.03766190, 0.05282517, 0.14169885, 0.10216603, 0.01882197, 0.07638097, -0.04446591, 0.09134007, 0.13088360, -0.03497153, -0.05576228, 0.00779699, 0.07038882, -0.01971371, 0.09608236, 0.02636960, 0.03969537, -0.15141542, 0.03586221, -0.05717882, -0.15730159, 0.11825166, 0.23440747, -0.02147346, -0.24091378, -0.40156984, 0.25355518, 0.01888603, 0.04515792, -0.27198499, 0.11218696, -0.07932239, 0.01540883, -0.00069872, 0.12295504, 0.08904101, 0.03988786, -0.09838186, -0.15360746, 0.10310870, 0.10502934, -0.00676633, 0.02285175, 0.15015537, -0.21772303, 0.17690231, 0.06493149, 0.14075643, -0.00999033, -0.13279481, -0.05091076, 0.04440594, -0.36662501, 0.20995554, -0.04358547, 0.22012076, -0.12458389, -0.04632326, 0.02279514, -0.09176525, -0.14176919, 0.24327013, -0.01379941, 0.14585528, 0.01637322, 0.02227553, 0.00829025, -0.03655536, 0.02466174, -0.10640845, -0.06227035, 0.08628539, 0.02115248, -0.11229143, 0.03323755, 0.11003069, 0.08935238, -0.06026758, -0.30023557, 0.08795948, -0.20505089, -0.00729010, 0.18165092, -0.32345274, 0.36230087, 0.02365505, -0.11049271, -0.10638788, 0.15370509, 0.13028620, -0.03796802, 0.08016901},
  {0.03195817, 0.02934952, 0.04008940, -0.07930337, -0.12136238, 0.07308044, -0.06956165, 0.05324294, -0.07394443, 0.06438465, -0.12818795, -0.06293971, 0.08470365, -0.03389950, -0.12844054, -0.05917776, -0.05769002, 0.06655949, -0.06357358, 0.07522587, -0.04524423, -0.01293388, 0.04922843, -0.07252716, 0.02160434, 0.00809866, -0.00241030, -0.06964409, -0.10439613, -0.00960878, 0.05850538, -0.02977711, 0.00755665, -0.06399722, -0.09178244, -0.02570485, -0.07119755, -0.08281069, 0.00420648, -0.03823172, -0.00980116, -0.09913144, -0.08133465, 0.03400411, 0.11049104, -0.06375884, 0.04619100, -0.10415063, -0.03616246, 0.06902173, 0.14408645, -0.08202600, -0.12848453, 0.01820257, -0.05792746, 0.03463109, 0.08096784, 0.02240738, -0.05419540, -0.01833487, -0.09804899, -0.07300705, 0.07583704, 0.04472261, 0.03177214, 0.04015996, 0.08547118, -0.06981201, 0.04413088, -0.02523744, 0.04396088, -0.09029607, -0.04614583, 0.09231275, 0.02644294, 0.04133093, 0.02749282, 0.00947857, -0.10824477, -0.01933963, -0.08759170, 0.04726405, -0.05229279, -0.03150505, -0.03221496, -0.05459774, -0.07420443, 0.05330751, 0.10032470, -0.09247182, -0.01775495, 0.11674771, -0.08752571, 0.12810852, 0.06770124, -0.02023933, 0.07020934, 0.10157489, 0.05756915, -0.05881501, -0.02289337, -0.04247054, -0.03425741, 0.09734436, 0.03379264, 0.01754387, -0.07383168, -0.06793661, 0.00799220, -0.01397349, 0.12293786, -0.04927281, 0.00626864, -0.03945679, 0.02555235, 0.11021344, -0.02880414, -0.01440067, 0.06420009, -0.01836564},
  {-0.10443080, -0.01163411, 0.05792227, -0.12055399, 0.04508075, -0.05523990, 0.11305513, -0.03922582, -0.17608818, 0.05363448, -0.22036466, -0.06219019, 0.05956536, 0.13070583, 0.04117698, 0.01368831, -0.02553685, 0.03103583, -0.03262973, 0.06559038, -0.01828893, 0.06483589, 0.12489214, 0.06499702, -0.10800406, -0.08560461, -0.11792701, 0.02480318, -0.07218061, 0.06300165, -0.00168509, 0.00492154, 0.13881131, -0.12741812, -0.11252361, 0.01486002, -0.01549016, 0.02686636, 0.12400734, 0.13095635, 0.04379890, -0.02207159, 0.08906583, 0.01183100, -0.00731274, 0.02703462, 0.06746151, 0.01326978, 0.14635837, 0.13571349, -0.02163942, -0.08544338, -0.08212203, -0.00058150, 0.03130526, 0.01006180, -0.03747768, 0.01732943, -0.20321210, 0.12973136, -0.08680967, 0.03613512, -0.09265614, 0.08176385, -0.01629606, -0.01627786, -0.05296923, -0.04738615, 0.04426368, -0.07141830, 0.01587753, 0.10235254, 0.05872862, -0.03899185, -0.18960963, 0.00134833, -0.08536050, -0.10200524, 0.00915086, 0.09248258, 0.00916262, -0.00437720, 0.06281702, 0.11832274, 0.11339248, -0.12409998, 0.04123351, -0.07632960, 0.03162322, -0.02806600, -0.05644364, 0.04116578, 0.02897225, 0.02687073, 0.08571274, -0.00874072, 0.08931261, -0.03041234, 0.03985659, -0.11996051, -0.10190711, 0.00311241, 0.05302959, -0.06965073, -0.15942743, -0.10590907, 0.04120642, -0.16129239, -0.12337885, 0.10108427, 0.00067730, 0.07259109, -0.12384845, -0.03873860, 0.06908977, 0.09997074, -0.07875682, -0.12756631, 0.11042706, 0.00897197},
  {0.03177451, 0.12784328, -0.04419659, -0.10785845, -0.06353474, -0.05049909, -0.01683535, -0.10545090, 0.15826707, -0.00105363, 0.03244072, 0.00648322, -0.09613751, 0.11818703, -0.07099834, -0.01624192, 0.09198824, -0.03807526, -0.10105344, -0.01587741, 0.05702279, 0.05736956, 0.06944684, -0.05956309, 0.01113143, 0.09971489, -0.07575154, -0.07862455, 0.02707059, -0.11009319, -0.14298341, -0.03790615, 0.10638632, -0.01116710, -0.01044613, -0.01993741, -0.02771157, -0.08092307, -0.05620280, 0.06096061, 0.07505720, 0.15384430, 0.06188111, -0.08879963, -0.03757274, -0.07025614, 0.08825407, -0.00803816, -0.06951903, 0.00616512, 0.01139684, 0.10791701, -0.08868085, -0.20265786, 0.03904723, -0.04723096, -0.00415654, -0.10971940, -0.00138926, 0.02346633, -0.00846871, -0.04595746, -0.00451128, -0.06655326, 0.15829255, 0.00407759, -0.09830274, 0.04562109, 0.06657292, -0.06522851, -0.05750805, -0.02133902, -0.10202332, 0.08710483, 0.03906362, -0.04270356, -0.07341754, -0.08644088, -0.09625756, 0.05130376, -0.14267023, 0.00846262, -0.05079732, -0.07415430, -0.05711777, 0.03700409, 0.06039361, 0.06688760, 0.16587962, 0.10403308, -0.10617981, -0.10750643, 0.03069415, -0.06687481, 0.02458328, -0.01065191, 0.15209840, 0.07610382, 0.08981465, -0.12317947, 0.03999973, 0.01480687, -0.07163451, -0.02333097, 0.13254321, -0.01410513, -0.18150598, 0.01894822, 0.06270926, 0.09309851, 0.03810362, -0.02453343, 0.08195685, -0.07797311, -0.11785050, -0.10111239, 0.04739387, -0.07984043, 0.10000018, -0.01641713},
  {-0.19393006, -0.22659019, -0.10087403, 0.04536347, 0.03636513, 0.04289767, 0.00564644, 0.07925072, -0.08965020, -0.10039649, -0.16913094, -0.03621536, 0.03312091, 0.25665838, -0.00570696, -0.04376788, 0.15803796, -0.11275987, -0.02419232, -0.16915287, -0.05705824, 0.07133093, 0.02702998, 0.07613286, -0.01319909, 0.06177115, 0.03360654, 0.04782283, -0.00998592, 0.07056464, -0.15800670, -0.06703936, 0.01616991, -0.11217708, -0.17784563, 0.06099854, 0.04683784, -0.05508388, 0.09504534, 0.07449741, -0.00035296, 0.02693846, 0.10310622, -0.03677810, 0.02147471, -0.09460689, 0.03226594, -0.02089356, 0.08177683, 0.04418501, 0.06566135, -0.17723426, -0.21003743, -0.02314877, 0.11610268, 0.05889575, -0.03986686, -0.13204844, -0.10543300, 0.08532929, 0.05455644, -0.06584773, -0.15801676, 0.05046492, 0.03144937, 0.03259449, 0.01194861, 0.09991602, 0.08884242, 0.09099278, 0.08478646, -0.04256614, 0.07547226, 0.08797985, 0.17169955, 0.23063628, -0.11607239, -0.04127420, -0.00662107, 0.04446493, -0.07956696, -0.05584561, 0.06987359, 0.01556812, -0.00359154, 0.04628300, -0.11102060, 0.00971993, -0.06705210, 0.07876047, 0.02364408, 0.05819827, 0.08922973, -0.12203226, -0.09382063, 0.02453949, 0.10155152, -0.05557228, 0.02335313, -0.10904392, -0.06700686, -0.10631968, 0.09355631, -0.23929751, 0.06027770, -0.04519511, -0.16429307, -0.02323147, -0.01701709, -0.03901378, 0.10165779, -0.04717827, 0.01893224, -0.08321397, 0.05913850, 0.05175032, -0.04013583, 0.07667518, 0.13333057, -0.08381111},
  {-0.15991111, 0.00713067, 0.05489570, 0.02604333, -0.12811966, 0.02270188, -0.00732801, -0.02529433, -0.07692100, -0.07265215, -0.09488978, 0.00223358, 0.08223058, 0.16990192, -0.12349974, -0.09662872, 0.07846507, -0.10077005, -0.12201701, 0.09958003, -0.12010419, -0.05034803, -0.00317550, -0.05179091, 0.02150820, -0.05156560, -0.07358854, -0.00004698, 0.05209227, -0.12902261, 0.08497988, 0.11573543, 0.13032399, -0.03223573, -0.20279142, 0.04275703, -0.01360699, -0.05822403, -0.09079939, 0.01244011, -0.04871546, 0.04673234, -0.08974233, -0.03179745, 0.14809096, 0.00990500, -0.07823176, 0.02966900, 0.06169968, 0.13130495, -0.01711992, -0.01471123, 0.04780763, -0.04690570, 0.01442354, -0.04354282, -0.10561483, 0.01942456, 0.02214364, 0.09296921, -0.06262735, -0.02297281, -0.07545528, -0.00803223, 0.09158215, -0.08890430, -0.03926400, -0.11846525, -0.11787693, 0.01277738, 0.01408397, -0.04116889, 0.05295004, -0.06045886, -0.06324314, 0.01245759, 0.14094880, -0.12599091, -0.01435165, 0.05778784, -0.04953668, -0.02125221, 0.00768925, -0.05282987, 0.13151354, -0.06910750, 0.16115582, 0.04074265, -0.08789685, -0.04032969, -0.07708517, 0.08211767, -0.15372020, 0.06590451, 0.02840619, -0.02585017, -0.00654710, 0.07273568, 0.02699589, 0.02458750, -0.03273535, -0.00852153, 0.03289051, -0.00314836, 0.12638098, -0.06967931, -0.09083273, -0.06787769, 0.00997598, 0.01118708, 0.09141507, -0.13728371, -0.11308511, 0.05730446, -0.13292858, 0.03139120, 0.07605211, 0.02862548, -0.07662392, -0.07092974},
  {-0.01489353, 0.16154709, 0.06201283, 0.05348624, 0.01935609, 0.06830347, -0.06869953, 0.02633753, 0.09053761, 0.03767343, -0.09728242, 0.15067773, -0.04723572, -0.19856086, -0.03481546, -0.18463168, -0.15876165, 0.03925741, 0.05207126, -0.11289466, 0.01794033, 0.09018360, 0.18467785, 0.17011674, 0.09437430, 0.04222973, 0.07610960, 0.01491492, 0.03980005, 0.00338668, 0.02763003, -0.01713963, -0.08904013, 0.04962398, 0.14939308, -0.07972824, 0.11656582, 0.11089792, -0.07672588, 0.04426875, 0.06156661, 0.03939474, 0.05216461, 0.00337712, -0.00395707, -0.02054997, 0.08500310, 0.05493616, -0.07522284, 0.07455347, 0.00553784, -0.09802628, -0.10696134, 0.11367298, -0.05943220, 0.11313134, 0.02788975, -0.06731655, 0.05275180, -0.03108129, -0.09868278, -0.00690360, -0.02834875, -0.03939699, -0.11845516, 0.10260279, 0.08074614, -0.04249933, -0.03769556, -0.00566394, -0.03578125, 0.01921413, -0.14165395, -0.01814435, 0.00107292, -0.09138138, 0.07048993, -0.04014245, -0.08019197, -0.03457222, -0.18330899, 0.04111554, 0.08954751, -0.15154983, 0.08746836, -0.03561189, -0.12037902, -0.05533230, 0.13998447, -0.07947814, 0.00977615, -0.12704363, 0.06249616, -0.00317115, -0.05493825, 0.03250454, 0.05722819, -0.11116781, -0.02438537, 0.05189745, -0.12908858, -0.05058355, 0.00167624, 0.08766801, -0.12894589, -0.08291876, -0.03010063, 0.11304603, -0.09740316, -0.06153337, 0.02041692, -0.07254489, -0.00113183, 0.03200588, -0.04284740, -0.01320361, 0.00516559, 0.01747356, -0.04983843, 0.08006395},
  {0.08238341, 0.02983806, 0.09252364, 0.03841188, -0.11291767, 0.00045011, 0.05438490, 0.08790064, 0.03443458, -0.04441394, -0.00335106, -0.10920617, 0.00202379, 0.09324536, 0.05912828, -0.05918993, 0.08252531, -0.04545836, -0.06559782, 0.00219692, -0.13032092, -0.00456801, -0.01954250, -0.05821186, 0.15468508, 0.04928544, -0.08022312, -0.06640434, -0.04969722, 0.04159076, -0.07766875, -0.09617557, 0.06108947, 0.06569252, 0.06715372, -0.01401756, -0.01138346, -0.02059402, 0.08909258, -0.00952827, -0.01881584, 0.10343172, 0.07340138, 0.04119043, 0.00265030, 0.06215326, 0.02392222, -0.07382873, 0.04659940, -0.04334957, -0.02111557, -0.00734779, -0.07518414, 0.02111808, 0.08051745, 0.13920186, 0.03288461, -0.17956647, 0.00391588, 0.08776764, 0.10950682, 0.07373073, 0.08307707, -0.14216910, 0.18899524, -0.06147275, -0.06369385, 0.10389775, 0.03893139, -0.08143871, 0.12981960, 0.08200239, 0.01990015, 0.01201542, 0.19264027, 0.15863375, -0.08377391, 0.07624172, 0.01172464, 0.04258249, -0.00501874, -0.02162786, 0.16819051, 0.03940876, -0.21664211, 0.07985535, -0.45988038, 0.02485736, 0.01023149, 0.07096303, 0.01426951, -0.04827184, 0.14105397, -0.12956151, 0.02513602, -0.01616202, -0.15205565, -0.06059102, 0.08417223, -0.00844351, -0.09562881, -0.09724666, 0.00218667, -0.05577100, 0.15367456, -0.09826944, -0.13377292, 0.20192865, 0.03306505, -0.03761642, 0.04351806, -0.11144330, 0.24132836, 0.09596951, 0.03394402, -0.00788076, -0.07652397, -0.00275080, 0.12315259, 0.16142341},
  {-0.11650641, -0.05661989, -0.12241679, -0.01438001, 0.08690729, 0.06105193, 0.08789624, -0.07647306, 0.06151574, -0.03852515, 0.03070644, 0.15035103, -0.08750644, -0.05553143, -0.12955242, -0.04210245, -0.12068704, 0.04588477, 0.04973979, 0.11073735, 0.02990836, 0.02204010, 0.02257235, 0.02969933, -0.03862159, 0.01572559, -0.02593220, 0.02886881, -0.11733689, -0.03432699, -0.06389826, 0.06196779, 0.03079759, -0.06919039, 0.09201238, -0.06727350, 0.03244915, -0.09432621, 0.08331713, 0.05900668, -0.10988132, -0.08964901, 0.04616277, 0.04375794, -0.02925163, 0.08637845, -0.09771986, -0.11483812, 0.05737815, -0.04353682, 0.05455118, -0.04727913, 0.02067101, 0.09409313, -0.08312533, -0.04402730, -0.06637559, 0.11206495, 0.09572866, 0.11466997, -0.06729370, 0.05990788, -0.00366397, 0.06829545, -0.05551395, 0.10022070, 0.05821567, -0.08573474, -0.04434485, -0.10169923, 0.04393776, -0.02557799, -0.03888913, -0.10824625, -0.17321037, -0.05401173, -0.09820885, -0.05879064, 0.07985441, -0.05032682, 0.02572689, -0.04747512, -0.15595575, -0.05703275, 0.05997874, -0.00241086, 0.05918005, -0.04971600, -0.00464429, 0.00354859, 0.00337861, 0.01241509, 0.04030129, 0.00875907, -0.03830579, 0.00187366, -0.02001103, 0.09531532, 0.00013517, -0.02785318, -0.02436253, 0.03748443, -0.01555498, 0.14026055, -0.00400010, 0.01569783, 0.13952109, -0.08032953, 0.02526095, 0.08489903, 0.09848673, 0.07205182, -0.06628889, -0.00636876, -0.05136702, -0.02341452, 0.02836234, 0.04119710, -0.10537626, -0.02162648},
  {-0.03384866, 0.03373886, 0.02474889, -0.06007800, -0.03342671, 0.00141241, 0.07822848, 0.06304836, -0.06053746, -0.09596798, -0.14664297, 0.25146770, -0.19834509, -0.17213334, -0.08755025, -0.10800282, -0.02998727, 0.02420727, 0.03049858, 0.02902027, 0.04056037, -0.04226317, 0.13876502, 0.07408763, 0.04246084, -0.06115432, 0.04105519, 0.09352061, 0.02886613, 0.00364980, -0.15427299, 0.12952276, -0.02499516, 0.05736779, 0.20499785, 0.08599331, -0.06940231, 0.05317235, 0.07287402, 0.12133844, -0.04119436, 0.07868848, -0.11984043, -0.00052102, -0.00937873, 0.02554140, -0.10873152, -0.11895507, -0.05552824, 0.06970573, -0.14973980, 0.01894163, 0.19122258, -0.06847457, -0.03637683, -0.04210886, -0.12841594, 0.06485093, -0.02054874, 0.04779813, 0.08863897, 0.01528551, 0.11345389, -0.02834935, 0.13388930, 0.07146086, 0.11121790, -0.13786921, 0.06070473, -0.02305931, 0.14450033, 0.07904013, -0.07048096, -0.11404607, -0.07205211, -0.02938984, 0.03056272, -0.06722561, -0.08760551, 0.04525091, 0.10950405, -0.04193284, 0.02391081, -0.11198043, -0.05853845, 0.03597987, -0.20287181, -0.00435490, 0.05951775, -0.07119290, 0.17200471, -0.09588189, -0.16062972, -0.06978843, -0.04829009, 0.01427712, -0.01147108, -0.12399482, -0.07106209, -0.01031933, -0.10248824, -0.11312787, 0.05193417, -0.08833059, -0.29166475, -0.07541852, 0.07489206, 0.03087884, -0.03037106, -0.08934765, -0.13178387, 0.15239188, -0.06288240, 0.01269977, 0.07055970, -0.01465826, -0.05520954, -0.25679767, 0.07202832, 0.03883203},
  {-0.14288870, 0.09007157, 0.12121106, -0.06029480, -0.01296755, 0.04716557, 0.03714605, -0.01015595, 0.02953117, -0.09446141, -0.12814103, -0.06772941, 0.08225551, 0.17609225, 0.04169678, -0.07371175, 0.16424686, -0.13872451, 0.02475982, -0.09220923, 0.02510837, 0.05496175, -0.04818116, 0.01937979, 0.03399089, 0.06342081, -0.04922180, -0.02260144, -0.08017471, 0.04782864, 0.07384109, -0.08265510, -0.09712629, 0.05480745, 0.09442654, -0.00437325, -0.07215973, 0.09818073, 0.00379463, -0.09043032, -0.07357799, 0.03946257, 0.13324429, 0.11057608, 0.07128422, 0.04435205, -0.02862060, 0.04194844, 0.12701708, 0.09095538, -0.10123726, -0.11097867, -0.01292291, 0.03220941, 0.01488233, 0.01220337, -0.06931067, -0.05646772, 0.05023529, 0.07993026, 0.12922426, -0.03557463, 0.03671495, -0.07128020, -0.03387911, -0.09668959, 0.12334707, -0.01241043, 0.09320321, -0.10556485, -0.07290006, 0.04443508, -0.05061954, 0.06398043, -0.13360757, 0.01999715, 0.06097150, 0.00837151, 0.03535930, -0.11573363, -0.13704114, 0.12740588, 0.00834185, -0.03296880, 0.02439149, 0.03825608, 0.10449030, 0.08509657, -0.15479007, 0.18093014, -0.07445434, -0.01041417, -0.08963890, 0.10883997, -0.22328582, -0.04717571, 0.10409681, 0.06930991, 0.04413775, -0.08375553, -0.03448822, -0.06600609, -0.03855009, 0.08048780, -0.03233368, 0.03255763, 0.07361992, -0.09621819, -0.04859605, -0.05553550, 0.17434324, 0.05756406, 0.07956253, -0.09495401, 0.03122254, -0.05766731, 0.06453378, -0.00862786, -0.05541284, 0.02827944},
  {-0.13771395, 0.15451045, 0.10673346, -0.00484587, -0.06005038, 0.07331135, 0.12725928, -0.01075346, 0.00889716, -0.08553170, -0.08460169, -0.07380974, -0.01226447, -0.05631821, 0.02170196, -0.17734239, 0.07975487, -0.00065064, 0.05000282, 0.01011537, 0.05392987, -0.02050649, -0.04265438, -0.02092914, 0.15357585, 0.02870800, 0.03680389, -0.01816081, 0.03663276, 0.03279189, -0.05676281, 0.08677597, 0.06021380, -0.05885391, -0.03889400, -0.15225248, 0.02273250, -0.03827820, 0.04909074, -0.14435276, -0.09100419, 0.12951669, 0.06466802, -0.03531903, -0.06503436, -0.09161383, -0.06448657, -0.10356772, 0.08208337, 0.06993718, -0.09507760, 0.08291164, 0.02773490, -0.10497106, -0.05002237, 0.11616089, 0.02854817, -0.03208723, 0.07371273, 0.05869335, 0.16859135, 0.00388645, -0.11717146, -0.13821214, -0.01376689, 0.03596214, -0.02696470, -0.03852694, -0.01069654, -0.11058217, -0.06451645, -0.05400436, 0.09645365, 0.07228886, 0.05659292, 0.04285750, 0.06634409, 0.06682816, -0.02181218, 0.01645891, -0.26997322, 0.18961051, -0.08640592, -0.15482002, -0.02908497, 0.04481610, 0.12035851, -0.10707199, -0.22121747, -0.07219558, 0.07732093, 0.02629201, -0.07534999, -0.06436110, -0.09392765, 0.11489931, 0.02796615, -0.03491011, 0.04600361, -0.14978060, 0.07549614, 0.01730753, 0.01202353, -0.17661013, 0.07422984, -0.08617413, -0.10075191, -0.10440636, -0.00982123, -0.07758977, 0.11780369, -0.02823870, 0.06311981, -0.00264849, 0.05788650, -0.12041523, -0.01116001, 0.11595169, 0.04326004, 0.01314934},
  {-0.10596268, -0.18521762, 0.00484284, -0.09185689, -0.06191501, -0.00134505, 0.09503262, 0.08604201, 0.01168864, 0.00339826, 0.12263624, 0.02209534, 0.07463509, 0.08313525, 0.00237644, 0.06101678, -0.02720227, -0.01061108, 0.08457498, 0.01802799, 0.01835069, 0.11316693, 0.08812404, 0.10644522, -0.20397553, 0.08140144, -0.12596612, -0.11919903, -0.04306874, 0.05663734, -0.09435721, -0.01754325, -0.06931662, -0.17381318, -0.16229719, -0.03763488, 0.00494713, -0.00841240, 0.06660420, -0.03217470, 0.08459568, -0.01104955, 0.13375603, -0.09564410, -0.06446274, -0.02401459, -0.06383287, 0.04583900, 0.06229492, -0.02493534, 0.06778011, -0.07075756, -0.12540016, 0.03337817, 0.04342807, 0.06552549, -0.04883303, 0.07191306, -0.08972279, 0.06290527, 0.07497173, -0.01928931, -0.27490762, 0.14704348, 0.04546588, -0.05606238, 0.07898972, 0.07256106, -0.06698405, -0.05178411, -0.01508264, 0.05432692, 0.07841612, -0.02728882, -0.03876751, 0.07590482, 0.00454044, -0.05200547, -0.10387702, 0.04117595, 0.01244712, -0.05474271, 0.11854666, 0.11800145, 0.08904544, -0.09687935, -0.05085097, 0.00681261, -0.05024133, 0.12099586, 0.04882468, 0.14851777, 0.00902338, 0.08356042, -0.14269550, 0.07385431, -0.00801890, -0.03267972, -0.00384932, -0.09654488, 0.07325106, 0.04651736, 0.06108776, -0.01578539, 0.08109296, -0.06769924, -0.03358130, -0.01914217, -0.01826436, 0.01293455, -0.02053706, 0.06990683, 0.05088009, -0.07068003, 0.12654664, -0.08607195, -0.09714396, 0.03955460, 0.21060359, -0.05139862},
  {0.04835226, 0.06375483, -0.12376869, 0.08761432, -0.01117726, 0.11580665, -0.09433687, 0.00659360, 0.12421536, -0.01249643, -0.00934864, 0.12144143, -0.16424717, 0.07587679, -0.13676828, 0.00209362, 0.09934446, 0.12659946, 0.03995577, -0.17910847, 0.05154497, -0.13106610, 0.08248237, -0.02920039, -0.00710304, -0.01359717, -0.10265475, 0.06824536, -0.04298948, -0.01742803, -0.10934738, -0.04775020, 0.05570450, 0.04514832, -0.07879671, 0.03063387, 0.11092569, -0.04858346, -0.14898860, -0.02189634, 0.00685120, 0.12681246, -0.00988162, -0.00847808, -0.05604123, 0.00448427, -0.10141541, 0.00114449, -0.02724937, -0.05243932, -0.01413348, -0.14833616, 0.08925097, -0.03700389, -0.10608493, -0.01939014, 0.05641262, -0.15510325, 0.03857686, -0.06657988, -0.11962195, 0.05701313, 0.10652976, -0.01443667, 0.09899452, 0.04321121, -0.04868305, -0.03528125, 0.17149812, 0.05493240, 0.11330532, 0.08057770, 0.01800402, 0.15102196, 0.07974783, 0.00852420, 0.12455062, -0.07486094, 0.16237320, 0.06304478, 0.02433635, 0.04227705, 0.03053872, 0.02196621, 0.02228017, 0.05711371, -0.01979805, -0.01857858, 0.09851708, 0.02965197, 0.04774725, 0.00253857, -0.04745980, 0.11372211, -0.04073021, 0.03874119, 0.11752921, 0.00675197, -0.03895641, -0.00471753, -0.03973422, -0.02167746, -0.05041250, 0.04335357, -0.09292254, -0.01337356, -0.04241956, 0.02883516, 0.12500902, -0.04158559, -0.00278355, -0.06759614, 0.07119629, 0.01332853, -0.18462846, 0.07849915, 0.02944169, 0.01655052, 0.04805028, 0.11051255},
  {-0.07436963, -0.04528363, -0.05128760, -0.04030415, 0.09954503, -0.04094253, 0.01735402, 0.00974190, 0.03182995, -0.07761067, -0.11585490, -0.12230261, 0.08369717, -0.00000054, 0.04561812, -0.01039368, -0.06795722, -0.00754721, 0.01581794, -0.01760441, -0.08192632, -0.03814032, -0.05791596, -0.04830148, 0.02841467, -0.00793994, -0.08407077, -0.04334317, -0.08871567, 0.02143761, -0.13644123, -0.02761966, -0.02917627, -0.06746639, 0.07401359, -0.06710777, 0.03621920, -0.06453659, -0.01773429, 0.09253004, -0.01010245, 0.05524023, -0.06068091, 0.08377895, -0.04772672, -0.05831588, -0.00666796, -0.05783885, -0.02801700, -0.10750803, 0.11529192, -0.03276464, -0.03786355, 0.00714754, 0.11907795, -0.00633253, 0.01177232, 0.09311166, 0.12530747, 0.08961369, 0.09555122, 0.11821634, 0.01443443, -0.11312576, -0.00644659, 0.03585985, 0.01698382, -0.01031260, 0.09020659, -0.10292076, -0.08001848, -0.12569687, -0.01487557, -0.09371299, -0.02090380, -0.00757304, 0.03614665, 0.09154879, 0.05450278, 0.07421186, -0.03445739, -0.04773403, 0.08468955, -0.10999150, 0.08741280, 0.08026992, -0.00574805, -0.08874619, -0.14025529, 0.05032906, -0.03362460, -0.06735358, 0.02234574, -0.03110402, -0.11143246, 0.08345380, 0.01011199, -0.06277430, -0.11076095, -0.10482643, 0.00798676, -0.02738599, 0.00668105, 0.02081520, -0.07375970, -0.00456940, 0.00254583, 0.07142860, 0.01864327, -0.08889974, 0.12422542, -0.11731917, -0.00008062, -0.03372225, -0.00638135, -0.04602452, 0.11405843, 0.01051627, 0.02152018, -0.02937783},
  {0.01130221, 0.00388402, -0.04380921, -0.04691331, 0.06101118, 0.10428289, -0.08619739, -0.10991292, -0.09558877, -0.07696031, -0.11398461, -0.01413996, -0.08881193, 0.02611092, 0.01807079, 0.00850715, -0.03263732, 0.03214325, -0.03952352, 0.04242080, 0.08050992, 0.05960914, 0.09490208, -0.02596503, -0.02353582, -0.05327200, 0.03926190, -0.00741943, -0.01177903, 0.03809239, -0.05522320, -0.07730157, -0.08358739, 0.07141897, -0.01950490, 0.00671752, 0.01979191, -0.07405141, 0.03194496, -0.04503585, -0.05625680, 0.04909300, -0.01827004, 0.06828713, -0.01221652, -0.01633754, -0.03050115, 0.04595767, -0.00885529, -0.05735024, -0.07059623, 0.01302946, 0.05863862, 0.14448066, 0.05732071, 0.05332741, -0.08910891, 0.12474149, 0.09430796, 0.10351248, 0.02179969, 0.03435436, -0.04412667, 0.07575466, 0.04241457, 0.12295499, -0.00225643, -0.00119375, 0.07700773, -0.09908035, -0.03059407, -0.09870277, -0.03212436, -0.11950461, -0.00416702, -0.03816404, -0.01957733, 0.07956902, -0.15348361, 0.08244804, 0.19966093, -0.12130021, 0.06109644, -0.01901175, -0.00129597, -0.05903600, -0.16866685, -0.02897748, 0.07085010, 0.00455530, -0.06627613, 0.03327385, -0.05243142, -0.00401417, 0.10267829, 0.05875839, -0.14183277, -0.05611590, -0.03592690, 0.04456171, -0.11411864, -0.09392463, 0.13197406, -0.10604572, -0.10488354, -0.11171626, 0.12758268, 0.07161026, 0.08816599, 0.06640869, -0.13015492, 0.12117853, -0.13634442, -0.10437620, 0.05842073, 0.06258646, -0.07471354, -0.12936507, 0.02106871, -0.10064734},
  {0.12150173, -0.07294458, -0.02884046, 0.04386038, -0.21134983, -0.19078445, -0.15784715, 0.08527526, 0.17312789, -0.10164249, -0.21752214, -0.09307959, 0.17322971, 0.04877400, -0.13581964, 0.02185769, 0.00949985, 0.03712491, -0.10045223, -0.27218527, -0.04904249, 0.05987066, -0.00925124, -0.15417808, 0.11258129, -0.07556941, -0.16127329, -0.00400048, 0.02418854, -0.04168794, -0.01101996, 0.11947078, 0.02922822, 0.03754893, 0.06023905, 0.11731318, 0.13043950, -0.07550627, 0.00082591, -0.10755245, 0.03844697, -0.12522361, -0.05921751, -0.16453740, 0.16152285, -0.29359043, 0.08532385, 0.05669405, -0.20203952, 0.00494075, 0.15429997, -0.30215698, -0.19925258, -0.21523108, 0.27149716, -0.02166553, 0.02558376, -0.09473883, 0.05578192, 0.00138262, 0.17776304, -0.18428962, 0.01405513, 0.10936306, 0.06889971, -0.10948741, -0.02809451, 0.16435407, -0.00800932, -0.03022037, -0.06336529, -0.00837241, -0.14969723, 0.18372609, -0.07814158, 0.03572663, 0.02347965, -0.02268384, 0.01275277, -0.00496794, -0.27168947, 0.01681243, 0.06187867, 0.15729111, 0.09992573, 0.12253823, 0.21573532, -0.03032796, 0.09739143, 0.14032345, -0.06221604, -0.06655581, 0.06645831, -0.01638865, -0.04627313, 0.01006516, 0.06561594, 0.01931081, 0.04405660, 0.06855363, -0.12146104, -0.09304368, 0.03425528, 0.10344160, 0.21720049, -0.01044404, -0.31735659, 0.13143410, -0.06972894, 0.00796880, 0.07103407, -0.29298559, 0.24090129, -0.05174802, -0.06094924, -0.04330995, 0.11462569, 0.12393407, -0.22150142, 0.18066798},
  {-0.05135518, 0.04158892, 0.03386768, -0.00134342, 0.02380011, 0.02691133, 0.02145252, 0.07553893, 0.05905937, -0.11485030, 0.12017683, -0.01867453, -0.00267282, -0.02967945, -0.03044108, 0.01468738, 0.12569329, 0.13214828, -0.07726546, -0.12884662, 0.10091956, -0.02426561, 0.03513499, 0.01403412, 0.07749818, 0.08590022, -0.07633083, 0.01578507, -0.02706240, 0.03429437, -0.12917726, 0.09584392, 0.12783295, 0.06102510, 0.18995100, 0.00741755, 0.04007755, -0.10613336, -0.05419904, 0.04553760, -0.07802361, 0.04569771, -0.01237669, 0.00099672, 0.07609905, -0.03207650, 0.03736919, -0.01324447, 0.01923121, 0.13789795, -0.01834266, 0.09812367, 0.04063433, -0.04306221, 0.01912772, -0.02731687, -0.00147491, -0.02747678, -0.03406482, 0.07517537, -0.06029120, 0.02782302, -0.00801994, -0.08650279, 0.02925427, -0.01431764, 0.11858481, 0.09684306, 0.00983681, 0.01434701, 0.09334520, -0.00635154, 0.08183108, 0.10643230, 0.08043505, -0.07589023, 0.07238158, 0.08601359, -0.04228470, -0.01198318, -0.09526646, 0.00060912, -0.08517949, 0.06070056, -0.01723433, -0.00825194, 0.04573804, -0.12614261, 0.10719648, -0.07889186, 0.04200694, -0.00449002, -0.01856193, 0.12814038, 0.11945865, 0.08072093, 0.13985007, -0.05937631, 0.01375743, -0.12923263, 0.08390449, -0.08085674, 0.16148864, 0.10806926, -0.00125063, -0.06131750, -0.05066817, -0.03538335, -0.01744310, -0.06889094, -0.01277192, 0.01871019, 0.02450179, -0.07871930, -0.12761062, 0.06599161, 0.05667013, -0.15728898, 0.03440107, 0.02925674},
  {0.10649014, -0.03132267, -0.17613415, -0.07940498, 0.06782909, 0.12047025, 0.05793751, -0.04797500, -0.20962514, -0.10391994, -0.08027191, 0.02333673, 0.12206338, -0.07338238, -0.03438839, 0.07373403, -0.11740582, 0.03847659, -0.07130418, 0.18549304, 0.07996157, -0.01881452, -0.03185165, 0.10542709, -0.14536917, 0.02039750, 0.01383288, -0.00119448, -0.06421257, 0.00462234, -0.16027665, -0.05198721, 0.03759833, -0.09755933, 0.00805122, -0.11056512, 0.14034824, 0.00838322, 0.11752544, 0.06305015, -0.10167385, -0.05995430, 0.02016143, 0.02691432, -0.04111118, 0.18777652, -0.10201909, -0.06261441, 0.09389953, 0.03502444, -0.05343778, 0.10015765, -0.04745801, 0.11592477, -0.03012929, 0.09814243, -0.13471952, 0.10595526, 0.14129676, -0.08452774, -0.03502109, -0.00419624, 0.08230803, 0.12549214, -0.13547598, 0.10019939, 0.05999785, 0.01114668, 0.02268440, 0.02579948, -0.18194008, 0.02280426, 0.11976889, -0.00669932, -0.24604270, -0.12604357, 0.02649819, -0.09115808, 0.06316949, -0.01998614, 0.19148719, -0.15356900, 0.01845282, 0.06693462, 0.18012314, 0.10639031, 0.12930061, -0.10694832, -0.07829075, 0.02455879, -0.04633467, -0.03390884, -0.01248710, -0.11497456, -0.15166362, 0.04121898, -0.11110546, -0.10123263, 0.06576741, 0.03379440, -0.06890809, 0.01872440, 0.05758075, 0.06807272, 0.02719470, -0.08430494, -0.03824791, -0.14797798, -0.00569845, 0.08767348, 0.02834409, 0.08741616, -0.17476895, 0.02777645, -0.03068104, -0.08413189, -0.02580524, 0.14219676, 0.08056355, -0.00995295},
  {-0.10499374, -0.13685298, -0.03507726, 0.01232509, -0.03547759, 0.08676135, 0.13067727, -0.08583504, -0.06333538, 0.09680918, -0.17280529, -0.07225141, 0.05336104, 0.14566955, -0.05948116, -0.09146305, 0.02851507, 0.14916095, 0.06924571, -0.02514773, -0.01614358, -0.01198956, 0.03442581, -0.10419298, 0.02753607, -0.08513308, -0.02295253, 0.00224615, -0.08583454, -0.13816689, -0.06646630, -0.03456140, -0.02342108, 0.00181506, -0.14821067, -0.07945424, 0.11454207, -0.06243335, 0.13042475, 0.09726542, -0.07538280, -0.06777228, 0.00895336, -0.11067256, 0.02856269, -0.07961282, 0.01176570, 0.02522467, 0.06577009, -0.02527741, 0.13017550, -0.07920580, 0.01207775, -0.00157825, 0.13505012, 0.06886441, -0.08285420, 0.01621735, 0.04564987, -0.10604782, 0.05688746, 0.07207743, -0.13802667, 0.00906710, -0.09711436, -0.06655250, -0.15140712, -0.03455717, -0.11119734, -0.04050040, -0.08381511, 0.05354644, -0.01890208, -0.00843935, 0.04901758, -0.09156699, 0.00812028, 0.09926582, -0.01212728, -0.04663240, 0.05461507, 0.01093270, -0.02630597, 0.10946654, -0.07541220, -0.08136137, -0.07341250, -0.06799860, -0.04652909, -0.04390296, -0.10300229, 0.01032102, 0.02934666, -0.06901205, 0.02779896, 0.00543319, -0.01024758, -0.12264834, 0.05518826, -0.07553817, -0.09130289, -0.06808019, 0.00566782, -0.10318659, -0.02086398, -0.06422516, -0.09930786, 0.09839673, 0.13571763, -0.09754375, 0.10089643, -0.06380975, 0.06459560, -0.07324524, 0.10124543, 0.00242503, -0.06703064, -0.05018802, -0.03174559, 0.00065778},
  {-0.11574098, -0.02287456, -0.11767573, -0.04796772, -0.11809684, -0.01299277, 0.01865485, -0.03424492, 0.04649397, -0.02458987, -0.12711041, -0.07350581, -0.01524253, 0.13203219, 0.08023035, -0.09661710, 0.12917095, 0.00495846, -0.07296472, 0.02703658, -0.00369634, 0.03244175, 0.13912512, -0.08213889, 0.01886347, -0.01403292, 0.03297832, 0.06836364, -0.05534599, 0.05950393, 0.01194106, -0.03988090, -0.02000072, -0.25089777, -0.13168275, 0.03372849, 0.07798898, -0.01258860, 0.08220248, 0.01004338, -0.04436687, -0.04404234, -0.02124336, -0.01661547, 0.04466159, 0.03825492, 0.00995576, 0.02053881, -0.05025405, -0.06056475, -0.03714624, -0.06016614, -0.01836753, -0.05400212, 0.03156364, 0.06142280, -0.04940666, -0.05184715, -0.06788602, 0.12181887, -0.08976748, 0.00142127, -0.17711622, -0.06563068, -0.05228448, 0.02935627, -0.11882984, -0.07921392, -0.00313211, -0.08300836, 0.05300779, 0.03014865, 0.10024763, 0.02027612, -0.04372049, 0.19432580, 0.03997045, -0.02559497, 0.03379681, -0.06099080, -0.01341319, -0.00037773, 0.06918956, -0.01531582, 0.05747990, -0.00733902, -0.01456368, -0.02385862, -0.06443644, 0.07045732, 0.05254138, 0.12757879, -0.07575939, -0.06586988, -0.03484672, -0.01042296, -0.04540123, 0.03492476, -0.05987692, 0.01235506, 0.04279065, 0.08253118, -0.08558843, -0.02019360, 0.10999421, 0.02223162, -0.05741316, -0.11466562, -0.04496545, -0.09539022, 0.13188010, -0.08694611, 0.05103131, 0.00619708, -0.01343789, -0.01201526, 0.01348780, 0.12058830, 0.12399115, -0.15394358},
  {-0.25403672, -0.15076980, -0.00518751, -0.01794103, -0.08727877, -0.10589084, 0.09378584, -0.06269158, -0.14401485, -0.07297731, 0.06011384, 0.00618175, 0.06789679, 0.05540674, -0.12591916, 0.10949573, 0.05099114, 0.05968506, -0.01732221, 0.12614101, -0.11934477, 0.06075234, 0.01256744, 0.09791841, -0.10922232, 0.00690642, -0.13846892, -0.07616606, -0.04339831, -0.07446247, 0.08004055, -0.02201764, -0.10658944, -0.15019792, -0.20982127, 0.01204485, -0.05957808, -0.03354625, -0.10507562, -0.04877937, -0.09283175, -0.03645808, 0.03666811, -0.03452674, 0.05951858, -0.07804606, -0.07947675, 0.07084731, 0.12955554, 0.01165638, 0.14425755, -0.00092344, -0.08326320, -0.06899685, -0.04058440, 0.07134613, -0.13530211, 0.02131263, -0.13716969, 0.09019256, 0.02916034, 0.08986782, -0.10733436, 0.05015440, -0.00723445, 0.08040088, 0.08097207, 0.02743960, -0.19253176, -0.11252558, 0.05711990, 0.07231921, -0.03840106, -0.06356550, 0.07028053, 0.04417032, -0.02557367, -0.10208579, 0.06818025, 0.09160441, -0.08087001, -0.06167647, -0.02576720, -0.01285631, 0.18895802, -0.03630176, 0.16173065, -0.11447183, -0.30805537, 0.08234363, -0.12994695, 0.15779676, -0.14526425, 0.10276629, -0.02203838, -0.10673310, 0.15902242, 0.07607506, -0.02053443, -0.06086618, -0.11870748, -0.03291959, 0.03680442, 0.00387069, 0.07876532, -0.01462110, -0.04884106, -0.15896361, -0.02785947, -0.04808145, -0.02247338, -0.09468376, -0.02481230, -0.09597055, -0.11041858, -0.09840396, 0.03106445, -0.09141409, 0.08418354, -0.03314957},
  {-0.02845443, 0.06636781, -0.01641498, 0.05350371, 0.07546467, 0.14050366, -0.04231092, 0.10230545, 0.09646604, -0.10751111, -0.13298647, 0.11218686, -0.16583866, 0.02449437, 0.03206599, -0.03653524, 0.04247767, 0.11071633, -0.02332383, -0.11259411, 0.07452106, -0.05146439, 0.09316521, 0.03514158, 0.02618140, -0.10733502, -0.02919294, 0.01403413, -0.10283624, -0.03282370, -0.02818382, 0.13225733, -0.06930732, 0.14860524, 0.20499715, 0.02017966, -0.09979991, 0.06337466, 0.03543647, 0.08377451, 0.00055271, -0.06409599, 0.00725115, 0.05528274, -0.04536576, 0.11589035, -0.12883544, -0.05354906, -0.07454854, 0.06033629, 0.12089058, -0.10075452, 0.05256920, -0.06596515, 0.06864604, 0.09981030, -0.04284294, -0.03936637, 0.14311872, -0.02071491, 0.10729989, -0.10248373, -0.03486934, -0.03236189, 0.03016352, -0.06097905, 0.00471886, -0.05839372, 0.01179259, -0.05939671, -0.03249013, 0.02757245, -0.06445634, -0.03271705, -0.05764087, -0.08102962, 0.06443616, -0.04831999, 0.02403561, -0.03216750, 0.07133174, -0.04564861, -0.11337711, -0.09337024, 0.01266914, 0.12916531, -0.04365580, -0.00467703, 0.17757164, 0.00566154, 0.02828485, -0.16088113, -0.00179682, 0.00871564, 0.13636492, 0.08719592, 0.14887440, 0.01465621, -0.09685398, -0.06411616, -0.02214469, -0.00052770, -0.06040828, 0.11839571, -0.07345852, 0.07462391, -0.10736102, -0.05877016, 0.17632526, 0.00295317, 0.04567835, 0.07140025, 0.00420091, 0.03284855, -0.13378644, -0.03445650, 0.01463853, -0.08624006, -0.16341126, 0.03713447},
  {-0.13124281, -0.03864045, -0.06302485, -0.02816897, -0.03579718, -0.03309071, 0.19926707, -0.10011861, 0.01398961, 0.08633055, 0.02485529, -0.11792277, 0.24043989, 0.25289503, -0.02261133, -0.10230745, 0.07673551, -0.08238278, -0.09575252, 0.04029512, -0.22818044, 0.06250682, -0.19916327, -0.03334969, -0.21591052, -0.07328328, -0.02897060, -0.07942376, 0.04371059, -0.05579571, -0.01087391, 0.01519908, -0.00588026, -0.09835030, -0.27093592, -0.01719380, 0.04945164, -0.05467933, 0.02661894, 0.00892110, -0.07204174, -0.02616077, 0.07759551, -0.05757231, -0.10497209, -0.02527710, -0.05175600, -0.04047781, 0.06832734, -0.07238168, -0.01012981, -0.10658907, -0.18442412, 0.04968527, 0.05938297, -0.00753965, 0.02065521, 0.02553519, -0.15104288, 0.16630551, -0.04311582, 0.11556213, -0.11425458, 0.13574463, 0.08257604, -0.07532400, -0.10111251, -0.05787878, -0.01800023, 0.02738862, -0.14517555, 0.05216560, 0.03309249, 0.15175547, 0.00773154, 0.09824957, -0.08254879, -0.06334783, -0.07002071, 0.08464827, 0.05172355, -0.16658060, 0.14334452, -0.05554872, -0.17151402, 0.06377641, -0.27635443, -0.00187013, -0.12936100, 0.08576439, -0.10200182, 0.33380073, 0.05723323, -0.06575850, -0.17749026, -0.07857216, -0.16554260, -0.02201844, 0.06963952, -0.07977708, 0.03688862, -0.11773418, -0.11573222, 0.02728861, 0.04256450, -0.01164876, 0.01249204, 0.07418706, -0.02015780, -0.04370955, 0.12109465, 0.05985170, 0.07227719, 0.02243927, 0.07168663, -0.02949910, -0.20101248, 0.06917452, -0.06328762, 0.03445024},
  {-0.04007448, -0.14748973, -0.10094295, 0.04347644, -0.01344670, -0.01452195, -0.02322312, 0.05964229, -0.00089963, -0.05395828, 0.07117635, -0.10337064, -0.11190481, -0.08366821, 0.10771993, 0.00015708, -0.07290715, 0.04760892, 0.06447049, -0.04000423, 0.10200053, -0.02760793, 0.11804461, -0.05619717, -0.14864635, 0.04448207, -0.00365723, -0.10277975, -0.16417286, -0.08278799, -0.19618975, -0.12258790, 0.04392435, -0.08903068, -0.08285773, 0.07729545, 0.04261654, 0.05435642, 0.07764968, 0.11636762, -0.03421891, -0.03288213, -0.04987025, -0.04561383, -0.01711038, -0.06121529, -0.15694107, -0.05153537, 0.03419078, 0.04081348, -0.02862609, 0.14640233, -0.04562225, 0.02951541, -0.14526562, -0.06802998, 0.05550119, -0.03480670, -0.05495243, -0.10993343, -0.17333594, -0.06473610, 0.03896638, -0.02436569, 0.04342015, -0.02379262, 0.01963558, -0.03328015, 0.04826821, -0.06244302, 0.14250948, 0.03930929, 0.08029595, -0.05572587, 0.06181379, 0.12998083, -0.13847375, 0.05376921, 0.03769270, 0.11943227, 0.18460120, 0.03796914, 0.14094274, 0.08181812, -0.04379184, 0.03948966, -0.04588814, -0.06917013, 0.04207504, -0.11429909, -0.00030308, 0.01744261, -0.07085699, 0.12645935, -0.01656645, 0.01324124, -0.02453283, 0.03425878, -0.04092755, -0.11181961, -0.00507702, -0.08095006, 0.10456696, 0.04079763, -0.03679272, 0.01592038, 0.16240861, 0.01391544, 0.12160745, -0.00730840, 0.01248510, 0.09675526, -0.06481093, -0.07465447, 0.05174917, -0.02239418, 0.07062435, -0.11237782, -0.10920192, 0.05671074},
  {0.04173587, 0.13987069, 0.04084810, 0.01693774, 0.05548194, 0.06549795, -0.08003062, 0.07959557, 0.15796807, -0.03253730, 0.03622426, 0.04784539, -0.20272042, 0.05416238, -0.05050304, -0.09688938, 0.02365313, 0.08760671, 0.01398472, 0.01591738, 0.10586392, -0.00911808, -0.08460681, -0.11072445, 0.07049198, -0.10294563, 0.09069670, -0.07683911, -0.05344729, -0.04434513, 0.00925766, -0.05011965, -0.05407245, 0.08716002, 0.08867014, -0.01509396, 0.10037500, 0.14836967, -0.05430754, -0.01767412, -0.01616308, 0.02015310, -0.02328091, -0.01850389, 0.06675723, -0.09484142, -0.04333133, 0.04487421, -0.09514425, 0.10616565, 0.05794816, 0.06755342, -0.03270648, -0.00759419, 0.03670526, 0.11322950, -0.11486217, -0.14109957, 0.07106995, -0.02477791, 0.12496268, 0.00908701, 0.16302392, -0.13390493, 0.13997382, -0.12538387, -0.00589806, -0.03404816, 0.06911398, -0.04270170, 0.17531395, -0.04154281, -0.04665460, 0.13481325, 0.05148328, 0.00356254, -0.04025142, 0.04584054, -0.05802413, -0.07215968, 0.03996746, 0.16761629, -0.05703177, -0.15197538, -0.09917592, 0.16212402, -0.20804858, 0.00922859, 0.07360064, -0.12282668, -0.08913980, -0.03788009, 0.06626892, 0.04976782, -0.04484525, 0.11477252, -0.16988845, -0.07336697, 0.10508829, -0.08060200, 0.06311843, 0.06203964, 0.07656745, -0.06070046, -0.10398187, 0.01263130, 0.02465712, 0.01663189, 0.00376199, -0.00739723, 0.09765846, -0.09674636, 0.05435907, 0.09013914, -0.05637162, 0.06097290, 0.10222377, -0.11852959, -0.08263159, -0.01394387},
  {-0.14438838, -0.07194995, 0.00815162, 0.00065541, 0.10080241, -0.08623213, -0.02202095, 0.06339027, 0.01347890, 0.07273443, 0.01083756, 0.00471929, 0.10461637, 0.08677705, 0.00536993, 0.07165242, 0.07847201, -0.15774992, 0.02600477, 0.08253611, -0.01827845, 0.13552238, -0.04375263, 0.08430734, -0.03794971, -0.12421989, -0.04055697, 0.01724987, -0.13384797, -0.06955706, -0.14439039, 0.05505966, 0.07620645, 0.08094078, -0.07153955, 0.01446977, 0.12442880, -0.00863736, 0.06592825, -0.04249791, -0.06330270, -0.02168356, 0.07842892, 0.00926702, -0.05848260, -0.00281596, -0.04604362, 0.01421755, 0.09015287, -0.07201442, 0.01411428, 0.06211761, 0.02688682, -0.06508248, -0.12875694, 0.03835721, -0.14999130, 0.09757409, 0.07115278, -0.02216584, 0.05263010, 0.10368732, 0.12206642, 0.01147927, -0.21065122, 0.09035615, 0.01282838, 0.01742433, -0.08987825, -0.10029425, -0.01068702, -0.07546718, -0.06331885, 0.05166761, -0.14835809, 0.06391083, 0.06390252, 0.07621182, 0.08533631, -0.03519633, -0.15424033, -0.00438917, 0.00278974, 0.02052903, 0.05864708, -0.13828513, 0.08092088, 0.02989067, -0.17136331, -0.01149332, 0.06870598, 0.06788893, -0.12811257, -0.02518061, -0.10605778, 0.04261986, 0.03200522, -0.03753988, 0.08800902, 0.07902192, -0.10894667, 0.08607263, 0.07305858, 0.11209289, -0.08609216, -0.07680514, -0.04960957, -0.07121658, -0.00468630, 0.06278437, -0.09192832, -0.09674118, -0.00797176, -0.05238061, 0.02368050, 0.00685936, 0.07616007, -0.06451186, 0.03543391, -0.18060233},
  {-0.06098175, -0.10358036, -0.14737615, 0.07257533, 0.02018494, 0.09358335, -0.02463106, -0.03774146, -0.05689590, -0.10251427, -0.19403809, 0.04615317, 0.00864370, -0.04408427, -0.05832731, 0.08321960, 0.04720842, 0.05582254, -0.08936358, -0.02604190, -0.02177479, -0.13768986, 0.06115142, 0.02291622, 0.10282696, -0.03653320, -0.13018461, 0.08700102, 0.04496611, -0.13608988, -0.18797456, -0.02698053, -0.00349865, -0.03498903, -0.09596489, -0.09105296, -0.00944107, 0.07794996, 0.03699713, 0.02310068, -0.13565287, -0.00244303, -0.00456680, 0.09085487, 0.13100602, -0.07231411, -0.10197492, -0.05339589, 0.05461117, 0.06652904, -0.02596290, -0.07304456, 0.00820956, 0.08123742, -0.05146804, 0.08016462, -0.01078112, 0.05112452, 0.01532265, -0.12179583, -0.03160076, 0.08811667, -0.11783914, -0.01768578, -0.06622201, 0.07210343, 0.02439457, -0.04564084, 0.05741082, 0.06917285, -0.01123816, 0.06401378, 0.04119597, -0.05227042, 0.07771677, -0.05211413, 0.03583553, -0.10107382, -0.06217251, 0.14671229, -0.19839163, -0.04875160, -0.01910048, 0.04857626, -0.00675865, -0.03716210, -0.10578625, 0.04919445, -0.22355504, 0.10501225, 0.06876066, -0.07864112, 0.08804042, 0.12964019, -0.08886822, 0.08893292, 0.04062855, -0.04894900, -0.05854141, 0.07752414, -0.03638193, -0.09484594, -0.02573090, -0.07442468, 0.16423367, 0.10166708, -0.09461348, -0.14949749, 0.03385492, 0.09252405, 0.01993338, -0.09740151, 0.09107637, -0.03636342, -0.08659539, 0.00006784, 0.00017243, 0.03719942, -0.11987847, -0.03171241},
  {-0.09436057, -0.10196710, -0.10539676, 0.03816697, 0.15406327, 0.07556124, 0.09860934, 0.06745733, -0.02494098, -0.09062143, -0.14496367, 0.00834251, 0.11806843, 0.09461027, -0.00309189, 0.01377603, 0.02338695, -0.01451340, -0.07464425, -0.00270101, 0.06137510, -0.08208862, 0.21001804, -0.06350971, -0.10326966, 0.09545854, -0.12971875, -0.03780534, -0.11732205, -0.00170827, -0.12874974, -0.03168755, 0.09283198, -0.02043730, -0.03887265, -0.11853323, -0.00729406, -0.15024117, 0.01414703, -0.08309518, 0.05891261, 0.11697160, 0.04072380, 0.08926103, 0.01556604, 0.06519199, 0.00890113, -0.07697784, 0.12413047, -0.12855697, -0.09704752, 0.03029348, 0.12864643, 0.17629883, -0.10427533, 0.08397619, -0.05682606, 0.06175292, 0.04133915, -0.02369700, -0.04575419, 0.01147806, -0.13597314, 0.16083077, -0.00771052, 0.03776426, 0.08521766, 0.05350954, 0.10419609, 0.06016205, 0.04508983, 0.02572668, 0.06102775, -0.04910830, 0.06178149, 0.11587749, -0.00669807, -0.01347071, -0.20163094, 0.03320238, 0.04091664, -0.03882089, 0.03799500, -0.10425927, -0.05940541, -0.02895337, -0.04005645, -0.07654632, 0.10207156, 0.16103515, 0.05360927, 0.06424037, 0.10835472, 0.02715761, -0.22949220, 0.20176807, -0.10515229, -0.01712144, -0.06386319, -0.07594511, 0.02947577, 0.06150835, -0.16986875, -0.08564424, 0.10250600, -0.08166321, -0.05474402, -0.01081031, 0.03798493, -0.02400577, -0.02672355, 0.07748505, -0.09640434, -0.00418369, 0.05390219, 0.07643528, 0.03250042, 0.16596057, 0.09158192, 0.11035056},
  {-0.00311072, 0.22903438, -0.05290395, -0.02884095, 0.05655883, -0.02641046, -0.12530155, -0.12356528, 0.07898360, 0.01042689, -0.08277477, 0.17840117, -0.08911238, 0.00219251, -0.05591782, 0.06302841, 0.05724724, 0.04499145, -0.11408135, -0.01004874, 0.00776268, 0.04400318, 0.15948734, -0.01861937, -0.08225280, 0.01609605, -0.00172446, 0.04869288, -0.00927124, -0.10769571, -0.12099845, 0.00923336, -0.01245903, -0.06815276, 0.00446796, -0.05403410, -0.12312822, 0.06771393, 0.13924491, -0.04147138, 0.05302265, 0.12813520, -0.07091530, 0.09348579, 0.02312483, -0.09631472, 0.08700303, 0.10670224, -0.09244521, -0.06565249, -0.13759919, 0.16947564, 0.16538283, -0.03538803, -0.12819470, -0.00688122, -0.00100110, -0.03995169, 0.08126862, -0.04970196, -0.05661715, 0.03984004, 0.11058930, -0.05238441, 0.04957738, -0.03799523, 0.16262195, 0.10737082, 0.00844663, -0.09544523, 0.15392815, 0.02095355, 0.03455440, -0.08030535, 0.04217754, 0.01615047, 0.16627625, -0.08206233, -0.11629702, 0.05581863, 0.08886827, -0.04608250, 0.00732232, -0.10683547, -0.03562497, -0.09412828, -0.08199726, 0.02703868, -0.06263445, -0.03836975, -0.05395534, 0.01915698, -0.06220189, -0.08121070, -0.05923054, -0.11049017, -0.14982410, -0.04078921, -0.05730345, -0.08726036, 0.02949882, -0.00585848, 0.06442523, -0.00645092, 0.02530111, 0.06347040, 0.16314743, 0.11523743, 0.10383067, 0.01270530, -0.06191878, 0.05559498, 0.02601048, -0.00060473, 0.09250430, 0.07310506, 0.02774689, 0.06817593, 0.05918844, -0.00074471},
  {0.09071258, -0.01502796, -0.09540046, 0.07198671, 0.01202415, 0.03178346, 0.07989176, 0.06059737, -0.08300964, 0.08419295, -0.07986311, -0.11411735, 0.11792450, -0.01305393, 0.08327375, 0.08638393, 0.04677455, 0.00950231, 0.06438901, -0.00117278, -0.08346542, -0.04856671, 0.14980741, -0.12792835, 0.03038955, 0.07934528, 0.05762464, -0.02966055, 0.01882518, -0.05162267, -0.17316866, 0.06491046, 0.03950033, 0.03894085, 0.07637174, -0.00464909, 0.08033437, 0.07432775, -0.00314632, 0.01276470, 0.04344831, -0.04965523, -0.00074729, 0.04084375, 0.01505017, -0.00991091, 0.12093356, -0.09368783, 0.00473317, -0.01202123, -0.05813127, 0.02154306, -0.00351446, -0.08156513, 0.11097819, -0.03241816, -0.16243011, 0.09627476, -0.05705338, -0.00506814, 0.07476241, 0.02360223, 0.06419861, 0.01425502, 0.06091099, 0.00660836, -0.04701877, -0.03503718, -0.08847199, -0.10700092, 0.03415545, 0.08544010, 0.05906753, -0.02039269, -0.11350334, 0.04145046, 0.00531156, -0.08618924, 0.00357981, -0.00344017, 0.02789513, -0.04187563, 0.04904584, -0.03750683, 0.10954367, 0.02696752, -0.04587040, 0.06266707, -0.14678080, 0.12271294, -0.08828560, -0.06259734, 0.00741394, 0.01202209, -0.16213575, -0.08135676, -0.09763877, -0.01447981, -0.06626406, -0.07066938, -0.12870415, -0.12213491, -0.06837761, 0.03233666, 0.04010367, -0.06532814, 0.07665620, -0.01418310, 0.02917427, 0.07334177, -0.08069863, 0.02449006, 0.01283963, 0.09900764, -0.01049158, 0.08909477, 0.05951545, 0.05491938, -0.04338346, -0.09213735},
  {0.10950141, 0.11751946, 0.06472385, -0.03618184, 0.01614407, -0.08447448, -0.11199387, 0.00831480, 0.09016658, 0.06118752, 0.07570624, 0.02511719, -0.05637003, 0.01953219, 0.04960847, 0.00923571, -0.00102729, 0.05849110, -0.06772208, -0.02389326, -0.00597444, -0.05852544, 0.06010393, -0.06324731, 0.13147168, -0.10605364, -0.07586644, -0.08345018, -0.10966660, 0.01036308, 0.00449583, 0.01994517, 0.11349127, 0.04043851, -0.04642748, -0.02864782, 0.03323835, -0.03254390, -0.05630997, -0.06419902, 0.07378533, -0.07087982, 0.03952053, 0.04536583, 0.09054200, -0.04057298, -0.04154526, -0.11810059, -0.02595578, 0.07912568, -0.02244820, 0.05814775, -0.04991866, -0.04423359, 0.03958129, -0.02427149, -0.07554135, -0.07945193, -0.01044173, -0.02685261, -0.00875586, -0.03009367, -0.00897781, -0.00315780, 0.08192964, 0.03705825, 0.04764779, -0.08603207, 0.09601502, -0.09963006, 0.05657628, 0.08834133, 0.04992959, 0.00590578, -0.07024805, 0.05567150, -0.08997428, -0.01729707, -0.06512151, 0.04890206, 0.09818585, 0.03090386, 0.09099577, -0.00396363, -0.01730650, 0.00863775, -0.05559439, -0.09636547, -0.06515036, 0.01936726, 0.09323766, 0.05575705, 0.09273604, -0.08418915, -0.10745584, 0.07843348, -0.09405767, -0.03129210, 0.10006341, -0.09677325, 0.08582009, 0.06430166, -0.03324522, -0.04524846, -0.08199573, 0.05637258, -0.08025441, -0.04374047, -0.02835588, -0.07375073, 0.11760362, 0.00300777, 0.04797262, -0.06158180, -0.08051331, -0.11092956, 0.10885692, -0.00460007, 0.00289767, -0.08503974},
  {0.14723931, 0.04475150, -0.02737492, 0.07504740, 0.04419667, 0.03631436, -0.06552307, 0.03391841, 0.00870875, 0.05587341, -0.14505039, -0.07413130, -0.05124638, 0.12436907, 0.02096137, 0.01938590, -0.05255584, -0.03305500, -0.09454501, -0.00596726, -0.09852148, 0.10603667, -0.21045482, 0.02297528, 0.05107976, -0.03863622, -0.11924776, 0.01631342, 0.04712467, 0.09995632, -0.11937065, 0.05945830, -0.01956579, 0.15171842, 0.17221317, 0.12624995, 0.12459497, -0.09522822, -0.02609965, 0.01660974, -0.12991777, 0.10479712, 0.02662264, -0.11646493, 0.17301488, -0.01071693, 0.02349008, -0.00359979, 0.06629997, -0.12801601, 0.18267424, -0.19684254, 0.04586981, -0.08481231, -0.03373397, -0.01058393, 0.08717038, 0.06348272, 0.08856928, 0.12685055, 0.02343654, -0.08862875, 0.04844580, 0.00302491, -0.01942182, -0.17310549, -0.06184607, 0.07952256, 0.04934447, -0.05300359, -0.05663804, 0.00194045, 0.00990270, 0.14166613, -0.09325130, -0.02000451, -0.07974263, 0.01524660, 0.07713188, -0.06703678, -0.11826199, 0.03655588, -0.16154899, 0.10125904, 0.09395689, -0.07274251, 0.14333680, -0.00334052, -0.04688437, 0.04920705, -0.08978011, -0.06155511, 0.04340477, -0.09939239, 0.14135905, -0.07253447, 0.02135620, -0.00041440, -0.07797360, -0.05967687, -0.04869626, 0.02490032, 0.14057647, 0.06565602, -0.01062679, 0.00473608, -0.08855505, -0.13428926, 0.00547742, 0.05364020, 0.12025430, 0.02833493, 0.03999741, 0.01947343, -0.11978986, 0.01397762, 0.00984241, -0.08573767, -0.06686643, 0.19070064},
  {-0.09543964, 0.00239331, 0.09613433, -0.05536113, 0.02029163, -0.05373313, 0.10631216, -0.01595867, 0.16209175, 0.08634804, -0.07737442, -0.10885660, -0.03168517, 0.01723466, 0.10018173, 0.03126101, 0.15934846, 0.08059098, 0.06696423, -0.11924240, 0.07785668, 0.02351915, 0.04169507, -0.10534042, 0.04548041, -0.02442492, 0.03123706, -0.05205556, -0.11948296, -0.07914036, -0.05175335, -0.06706597, -0.04418761, 0.00563079, -0.00487367, 0.00877128, 0.07413606, 0.01635894, -0.05372057, -0.08047207, -0.04797863, 0.08422799, 0.19750671, 0.09840197, -0.05907219, 0.04367332, 0.10908791, -0.08772871, 0.02580741, -0.05234136, 0.02205621, -0.18172589, 0.04102995, -0.06763090, 0.06975883, 0.01045099, -0.14056563, -0.10786854, 0.01002864, 0.06361540, 0.13805699, 0.04955278, -0.10393823, -0.07917836, 0.05669497, 0.03485087, -0.00234143, 0.06563377, -0.00485593, 0.08229362, 0.01676116, -0.03233148, -0.04882861, 0.11867289, 0.10555249, -0.03528858, 0.00957321, -0.08300925, -0.12900491, -0.11664214, 0.07595410, -0.01137175, -0.00382464, 0.01445469, -0.11540610, 0.08697934, 0.04683716, 0.01313430, -0.00894970, -0.07481911, 0.07806539, 0.07833908, 0.12563182, -0.10048096, -0.01509469, 0.04518772, -0.02339116, 0.01516329, -0.05357675, -0.13533661, -0.01873991, 0.02337229, -0.04914029, 0.03377930, 0.10595753, 0.06580803, -0.15207297, 0.00050870, 0.02628909, 0.03815088, 0.02291570, -0.12015892, -0.01134823, 0.07057732, 0.11870971, -0.01480606, 0.00953001, 0.01492623, -0.10175182, 0.03215498},
  {0.06093225, -0.01783912, -0.14248842, -0.08759780, 0.05023948, -0.06930007, -0.05249952, -0.06982389, -0.13592364, -0.11710671, 0.15843070, 0.01410223, -0.00885212, 0.04896618, 0.06403450, 0.08730074, -0.04640539, 0.02613683, 0.02240832, 0.05910809, -0.11400367, -0.09892754, 0.09269129, 0.05615919, -0.16514044, -0.03303929, 0.02505874, -0.05967112, 0.01116130, 0.00334613, -0.10366563, -0.08023590, -0.08260185, -0.10597092, -0.07969032, -0.05001390, -0.06983820, 0.03222876, 0.07612396, 0.00880979, -0.11695928, -0.08274110, -0.07070726, -0.03834279, 0.07274207, 0.07947545, -0.08462869, 0.02589507, -0.00916709, 0.14234124, -0.06960079, 0.17229831, -0.01265746, 0.00354587, -0.13946168, -0.08185989, -0.02872794, 0.12397105, 0.00583385, 0.05957573, -0.12946293, 0.12415620, -0.05742004, -0.01813946, 0.05536767, -0.00920097, -0.01108177, -0.07130363, 0.07674945, 0.06609972, 0.02230047, -0.03938422, 0.13476966, -0.14742893, 0.03955145, 0.04873941, -0.09067054, 0.01106761, -0.17933434, 0.16329016, 0.10802589, -0.09634815, 0.09707888, -0.09222736, -0.06852730, -0.00857855, -0.07614228, -0.01993336, 0.04384681, 0.00492132, 0.00484033, 0.05919458, 0.03952112, 0.03083625, -0.04347971, -0.05018067, -0.09713984, -0.08995718, 0.00105486, -0.00569623, -0.03444653, 0.07458963, 0.02382380, 0.01488124, 0.02856925, 0.06267112, 0.04735349, -0.12163182, 0.02814453, -0.01896299, -0.03640665, 0.10167166, -0.07861131, 0.01728315, 0.09210464, 0.05106188, 0.02705392, -0.08953196, 0.04731138, -0.04127536},
  {-0.07879175, -0.26109564, -0.13887598, 0.06069176, 0.05117329, 0.07125316, 0.07124152, -0.02672905, 0.03326398, -0.03456251, 0.02114286, -0.20252058, -0.02216204, 0.04414071, -0.00684968, 0.09539118, 0.07000595, -0.02761859, -0.08209899, -0.01814725, -0.10514712, -0.10104651, 0.07677422, -0.12941533, -0.12720297, -0.05371445, 0.01554625, 0.04199189, -0.14814408, 0.03139979, -0.07728965, 0.05480737, -0.09263193, -0.16716319, -0.11763671, -0.00275813, -0.00431232, -0.05781706, 0.00967945, 0.09983137, -0.07819387, 0.09127405, 0.03718218, -0.01922205, 0.03261087, 0.06734323, -0.08089940, -0.10487445, -0.06551336, -0.09206810, 0.19601282, -0.15575135, -0.09824276, -0.04136705, -0.01505298, -0.03745962, 0.03925122, -0.04466357, 0.02803413, 0.08092285, 0.02586786, -0.01972666, -0.13311492, 0.07922995, 0.02505253, -0.05869027, -0.03487893, -0.01214960, 0.06217207, 0.07664562, -0.14948857, -0.01170532, 0.09702026, 0.05854229, 0.09223385, 0.21000323, -0.06426381, 0.02651894, -0.12546949, 0.02335616, 0.05381849, -0.12950850, 0.12001394, 0.15362076, -0.05942566, -0.04634003, -0.13253540, 0.04544961, -0.32344157, 0.14847401, -0.07603295, 0.23928849, 0.12635124, -0.12358670, -0.01328644, 0.12416045, 0.03543989, 0.06617225, -0.03173745, 0.04818596, 0.01395718, -0.08413157, 0.01400266, 0.05940054, 0.03393457, -0.09384815, 0.00545983, 0.17643782, 0.00797753, -0.08887712, 0.14046311, 0.01169325, -0.04845422, 0.02022878, -0.03980283, 0.04817122, -0.04293616, 0.13927665, 0.06333122, -0.13467389},
  {0.05818927, 0.00158585, -0.06911259, -0.04063175, 0.00016864, 0.12666614, -0.05305989, 0.01406623, 0.00411042, -0.11269055, -0.09588198, 0.04289542, 0.02599352, -0.06050768, 0.06270818, 0.13694286, -0.02687617, -0.05828216, -0.07911035, -0.05043199, -0.05256049, -0.01104119, 0.16268721, 0.12153433, -0.12801795, -0.02523831, -0.05362191, 0.08284355, -0.10447550, -0.12742165, -0.17730309, 0.04163940, -0.09388363, -0.18363671, -0.04899216, -0.00278162, -0.06945015, -0.06887387, 0.06215910, 0.12410451, -0.08170629, -0.05980710, -0.00983018, 0.06037676, 0.05641552, 0.12416627, -0.01427291, -0.04730738, -0.00434952, -0.01892974, 0.13346936, 0.02998071, 0.01064213, 0.05928326, -0.03336068, -0.02630530, -0.01083444, 0.14847018, -0.07992633, -0.12842348, 0.01000578, -0.03999602, -0.06735206, 0.10947433, -0.16189556, 0.08943366, -0.02595236, 0.07711761, 0.02351499, -0.04519348, 0.03494406, -0.03581313, 0.08070309, -0.15380707, -0.07138544, -0.03753946, 0.04007250, 0.00166759, -0.15254989, -0.04489011, 0.05110475, -0.14755315, 0.05135220, 0.03454965, 0.01166539, -0.01020686, -0.06728908, -0.02634769, 0.12499607, 0.09092778, 0.06182978, -0.11105015, 0.00706395, 0.08641144, -0.07945863, 0.07380432, 0.01250227, -0.01153752, 0.03457574, 0.00669047, 0.09817901, 0.04423905, 0.03214859, 0.14944248, 0.06706188, 0.00757205, 0.12130623, -0.07105859, 0.06698070, 0.04376033, 0.05743676, 0.07506225, 0.00461831, 0.02961009, 0.01753666, 0.04864639, 0.02841883, -0.00129461, -0.12934434, -0.11449235},
  {-0.16161105, -0.04674404, 0.01795901, 0.03691698, 0.03873581, 0.03064691, 0.08978406, 0.01214321, -0.05111980, 0.04997436, 0.02260267, 0.09266701, 0.00324439, 0.12796207, -0.06429056, -0.05254096, 0.00879416, -0.02291526, -0.07664663, -0.09996508, -0.05919893, -0.03467160, -0.07527904, 0.03024564, -0.05568219, 0.08414536, -0.04296205, 0.00852589, 0.08303571, -0.13904530, -0.01774488, 0.04083864, -0.16416316, -0.02718189, -0.18233751, -0.05331239, 0.14292441, 0.08885526, 0.08352616, -0.06399105, 0.01856040, -0.04008516, 0.00423842, 0.08421472, -0.04920073, -0.12413854, 0.01046202, -0.11771479, -0.06019984, -0.08559407, 0.11316518, -0.10379319, -0.14315255, 0.01135880, -0.09312113, 0.05072669, -0.09999868, 0.03897502, 0.01164716, -0.03225205, -0.09278748, 0.07714955, -0.10673142, 0.07376958, -0.03006702, -0.02791591, 0.03463504, -0.05121849, -0.05659251, 0.00939380, -0.01072238, 0.07081792, 0.00043797, -0.10715694, 0.00317312, 0.17165028, -0.05125325, -0.06157302, -0.02426467, 0.08607550, -0.01714452, -0.06802368, -0.03012790, 0.14822996, -0.04811346, 0.05156592, 0.23037919, 0.06107243, -0.06596541, 0.05133026, -0.05535202, 0.05853157, 0.05150794, -0.01686779, -0.09225429, -0.02134813, 0.13445419, 0.05378021, -0.07720710, -0.03178300, -0.10836681, -0.02735267, 0.11281480, 0.04090908, 0.08251633, -0.03969713, -0.03329074, 0.01188565, -0.07306790, 0.05598880, 0.05393117, -0.14533859, -0.11477576, -0.08918124, 0.02414521, 0.02620043, 0.00703017, 0.09350226, 0.01561737, 0.03000854},
  {-0.07039512, 0.06578519, 0.12085333, 0.08874297, 0.05573416, 0.02406854, -0.05889018, -0.09568786, -0.00543183, -0.03259525, 0.07017016, -0.09817671, -0.11039723, -0.01049534, 0.02811936, 0.02185994, 0.16863823, 0.01811253, -0.02603325, -0.14256810, 0.09037193, -0.00546756, 0.05838313, 0.03482566, -0.06675427, -0.10962231, 0.04378170, 0.05754405, -0.16171694, -0.08986574, -0.01957338, -0.01852307, 0.03731701, -0.04842047, 0.04602156, 0.05675009, -0.05057885, -0.08486093, 0.00148765, 0.05850888, 0.06336540, 0.06463251, 0.06710841, -0.01233042, 0.13993578, 0.08226038, 0.12739895, 0.04562643, 0.05317565, -0.10676879, 0.05541461, -0.09076044, 0.02254669, -0.00999215, 0.03659068, 0.10825390, 0.00330433, -0.05228696, 0.04747106, 0.10845763, -0.04433006, 0.01981123, -0.02696485, -0.02504317, 0.06268913, -0.12638503, 0.06938292, 0.07150500, 0.14443988, -0.02293954, 0.06741616, 0.05231766, -0.05417948, 0.14252539, 0.08269672, 0.08723913, 0.10625227, 0.04028291, -0.11286993, -0.07700319, 0.04956526, 0.09785115, -0.04260560, -0.04850576, -0.12351744, -0.00727377, -0.19219516, 0.00507795, -0.09496981, 0.04103579, 0.03460167, -0.07349797, 0.15271047, -0.04323558, -0.03676517, -0.02582981, -0.13424259, -0.04291357, 0.01824880, -0.09346465, 0.09053402, -0.02779285, 0.03962759, 0.01614145, -0.11197589, -0.02344620, 0.07007482, 0.04990874, -0.02003164, 0.03836010, 0.00092108, 0.01062775, 0.17229299, -0.11122510, 0.02958594, -0.03682871, -0.01487057, 0.08509897, 0.02906584, 0.00124234},
  {0.11351141, -0.05532439, -0.11554056, -0.04833453, 0.00275557, 0.03596313, 0.02183416, 0.02087649, -0.17852284, -0.01954765, -0.03994312, -0.06576484, 0.11443204, 0.12743303, -0.08183967, -0.11849210, -0.01321242, -0.01688770, 0.01371911, -0.06344300, -0.05862832, 0.06942771, 0.06007462, 0.07517940, -0.12710978, -0.01041976, 0.07508073, -0.07468060, -0.05357555, -0.02083006, 0.13304628, 0.07687920, 0.04959058, -0.05621581, -0.18264705, -0.23476438, -0.10329485, -0.19183789, 0.11559794, -0.06486027, 0.01758572, -0.08266617, 0.10704432, -0.00432596, -0.03406370, 0.07459424, -0.11513779, -0.10475470, 0.15055998, -0.15685269, -0.08268896, -0.17823699, -0.09837358, 0.14780298, 0.03327595, 0.03693983, 0.11447705, 0.04287958, -0.30676883, 0.12428214, 0.08709794, -0.06784599, -0.08746132, 0.05828231, -0.03918235, 0.17123963, -0.03378828, -0.06748369, -0.01555682, 0.07722644, -0.15697835, 0.04599278, 0.15076350, -0.02911438, -0.30354762, 0.03777824, -0.02226568, 0.06873284, -0.02917021, 0.07868518, 0.18831606, -0.13990459, 0.10152359, 0.02584248, 0.04127012, 0.01303959, -0.17757823, -0.00133777, -0.02878307, 0.20360541, -0.08913621, 0.33625814, 0.12430620, -0.09491185, -0.00422212, 0.01376004, -0.15243906, 0.04719306, 0.00134047, -0.06928897, 0.00494974, 0.07461303, -0.33370665, -0.03951919, 0.09732731, 0.07094258, 0.14334056, -0.10119826, -0.06638794, -0.08859610, 0.03805814, -0.03037237, 0.03238044, -0.07457030, -0.10977269, -0.07271903, -0.15540433, -0.08286095, -0.06093541, 0.08616501},
  {0.09737607, -0.24200641, -0.10745108, 0.00756108, 0.11744937, -0.04654152, -0.09596447, -0.08725864, 0.03941155, -0.11223598, 0.12306842, 0.04837827, -0.01179038, 0.07824206, 0.03452663, 0.11677552, 0.01520658, 0.01453570, 0.02828560, 0.02204311, -0.04913252, 0.05448015, -0.04333628, 0.01628966, -0.09700406, 0.04543027, -0.10056339, -0.00165914, -0.13716374, -0.03932042, 0.01168895, -0.10264086, -0.02817681, -0.12614612, -0.08183005, -0.04057381, 0.14633498, -0.02781392, -0.05040209, 0.02746813, 0.05338727, -0.06352397, 0.09716983, -0.15021223, -0.01190271, -0.09005600, 0.01358381, -0.05594909, -0.07600057, -0.00911426, -0.00663415, -0.01312888, 0.08494157, 0.12562948, 0.03402197, 0.09826718, -0.06126849, -0.00956487, 0.09046371, 0.01534902, -0.00520687, -0.02733886, -0.04522093, 0.02498281, -0.00467264, 0.03802630, -0.05352606, 0.03164730, -0.05122089, 0.00155249, 0.07357904, -0.04544067, 0.00785891, -0.06526224, -0.03434741, 0.09016110, -0.03379201, 0.03365337, -0.04285167, 0.04812793, 0.12344674, 0.05057736, 0.01382366, 0.12892777, -0.01547578, 0.06485511, 0.09672903, 0.02075048, -0.09336203, -0.02404743, 0.02318040, -0.01777479, 0.02411238, -0.13509367, -0.11312378, -0.11452513, 0.05783790, -0.13170680, 0.03584371, -0.05932101, -0.09655755, -0.07254259, 0.02539663, -0.06105106, 0.03203529, -0.04987078, 0.06172171, -0.09901342, -0.01297770, 0.08977748, 0.09726414, -0.02720202, -0.01905885, -0.04292383, -0.07810679, -0.10192088, -0.05233280, 0.11056708, -0.06212681, -0.11285643},
  {0.11950504, 0.01592511, 0.20958774, 0.00373837, -0.25510949, -0.02678009, -0.25274077, -0.10876870, 0.15120351, 0.07009373, 0.07435741, -0.05401974, -0.04150008, 0.08919858, 0.09206207, -0.16914508, 0.14539297, -0.00218098, 0.00785490, -0.19392425, 0.08808759, 0.02967644, -0.19196278, -0.15219207, 0.28363428, -0.09231670, 0.09885310, -0.10001389, -0.02478762, -0.10727461, 0.07030156, -0.00811781, 0.04175303, 0.17682102, 0.00448239, 0.14923434, 0.08988971, 0.05781382, -0.16400212, -0.08550618, -0.07330824, -0.09022480, 0.06395763, 0.16603282, 0.16363865, -0.22368646, 0.13956121, -0.09809069, -0.06730177, -0.06190997, -0.13495822, -0.04772594, -0.00751462, -0.20616719, 0.09584783, 0.13554634, -0.07280100, -0.14640333, 0.19403845, 0.04696269, 0.11248429, 0.15654615, 0.12729013, -0.08887745, 0.10064654, -0.20281854, -0.04408643, 0.12416811, 0.09799489, -0.08148041, 0.20252503, 0.15687002, -0.15087107, 0.10701908, -0.00114091, -0.03861801, 0.12288858, -0.07307132, -0.06994335, -0.22053540, 0.06249429, 0.22722001, -0.05096807, -0.15964565, -0.08775055, -0.02145401, -0.44190162, 0.05418649, 0.02358677, -0.05320689, 0.02061215, 0.03202191, 0.02150467, -0.11405113, -0.21424820, 0.12595436, 0.01171458, 0.09031781, -0.09738784, 0.00180670, -0.04325989, -0.06526994, -0.01793993, -0.03985397, -0.12688680, 0.07282561, -0.07420100, 0.08891492, -0.01571409, -0.04087419, 0.07451406, -0.08061583, 0.11272092, 0.07474920, 0.14355761, 0.06674978, 0.10156283, 0.18251410, -0.12128023, -0.03097883},
  {0.00576120, -0.11031422, 0.11228315, -0.00651009, 0.06368992, 0.05911184, -0.08969226, -0.05482961, 0.03890942, -0.10197572, 0.05928929, 0.05229222, -0.04968978, 0.00677840, 0.03155162, -0.03598034, -0.10154000, -0.08322871, 0.02628106, 0.05007454, 0.02282416, -0.09710622, -0.10051543, -0.06407572, -0.09799673, -0.09861886, -0.05476485, 0.00902240, -0.09888387, 0.02516326, 0.00368620, -0.07201320, -0.04507847, 0.11955243, 0.06358529, -0.08009581, -0.06107952, 0.04858622, 0.02906230, 0.04051613, -0.10416595, -0.11747769, -0.02623334, 0.02482818, 0.02509083, 0.00832053, -0.03024117, 0.03371070, -0.00950769, 0.03304434, -0.11131992, 0.08720139, -0.05551593, 0.01712936, -0.01721124, 0.07305073, -0.09256896, -0.02951977, 0.16107340, -0.05531662, -0.03227747, 0.14655042, -0.01552846, -0.01294034, -0.09536016, 0.07372908, 0.10514102, 0.05572252, 0.02449168, -0.02238179, 0.02570298, 0.15964451, -0.02995403, 0.03759528, 0.08744735, 0.02355463, 0.06596686, -0.04482520, 0.08411294, 0.09325560, -0.01866610, 0.06623302, 0.06810872, -0.04373013, 0.05572275, -0.07915343, -0.02264790, -0.06831659, -0.13493350, -0.15931186, 0.00092773, -0.07565020, -0.16084999, 0.04956737, -0.06213990, -0.19107813, -0.03157375, -0.04305105, 0.06385024, 0.01725669, 0.06155569, -0.07085210, 0.04264973, 0.03629950, -0.00460086, 0.04415854, 0.10555638, -0.02470916, -0.05058556, -0.01768816, 0.01230348, 0.04952877, 0.10815017, 0.03813820, 0.06669946, 0.08441761, 0.06903666, -0.17467158, 0.09513272, -0.03448691},
  {-0.12785135, -0.02481247, -0.04823251, -0.02215941, -0.09497640, 0.00243355, -0.10132291, -0.02995545, -0.01186391, -0.10058704, -0.13195974, 0.14878970, 0.06739371, -0.12266808, -0.04863099, 0.12240731, -0.05023211, 0.18325676, 0.02468972, 0.09563827, 0.09100425, -0.26417956, 0.27079114, 0.12582485, -0.05842282, 0.04572235, -0.18114881, -0.08884251, -0.02096801, -0.07394592, -0.18668921, -0.08397140, 0.00884359, 0.01491176, 0.07943347, 0.11893564, -0.03775462, 0.07185026, 0.09707224, 0.08613556, 0.02035006, 0.09579778, -0.08674577, 0.02124472, 0.08373328, 0.00206859, -0.08651119, 0.03496408, -0.12251137, 0.08254176, -0.10885223, 0.14139825, -0.10896244, -0.10280506, -0.04004796, -0.03363212, 0.03008586, 0.04526006, 0.06361759, -0.14439090, -0.07358903, 0.03559576, 0.03620946, -0.14790969, 0.07578248, 0.00434401, 0.01138379, 0.00498310, 0.15087520, 0.06603862, 0.16453037, 0.12552620, -0.03976004, -0.11907525, 0.13056974, 0.03524301, 0.00653914, -0.04659096, -0.16597934, 0.08293251, -0.09309290, 0.00022816, 0.00956382, -0.04362845, -0.06177452, -0.04140236, 0.02789771, 0.03548726, 0.03775226, -0.05120053, -0.01967392, 0.03343448, -0.01684025, 0.10815486, -0.18014942, -0.02326510, 0.14843303, -0.10378005, 0.02092066, 0.02084894, 0.06137605, -0.11247184, 0.07330756, -0.06126520, 0.09893875, 0.06158769, 0.12465741, -0.09325168, 0.07560501, 0.09470982, -0.20325080, -0.06000097, -0.05388549, 0.09981482, -0.08144893, 0.04573001, 0.13909730, -0.00025820, 0.06299562, 0.02234512},
  {0.04191750, -0.07079487, -0.02561284, 0.03247959, 0.09766672, -0.04435112, -0.11108949, 0.01717779, -0.12574923, 0.01035437, 0.15573049, 0.09010915, 0.02037787, -0.04028760, -0.05044613, 0.03255622, -0.00765908, 0.11340549, 0.09229826, -0.05508365, -0.07859374, -0.04201043, 0.19685586, 0.13909636, 0.12613562, -0.10402660, -0.00203545, 0.08353709, -0.04130142, 0.04119666, -0.13906816, -0.03778358, 0.06556429, -0.08779906, -0.08711513, 0.06541828, -0.14996575, 0.02061030, -0.06803654, -0.00648068, -0.06706721, -0.00756205, -0.12612502, 0.05939004, -0.04684414, -0.03346356, -0.14821045, 0.05994958, -0.07127044, 0.03897243, -0.08126795, -0.02511173, -0.03292304, -0.03804672, -0.16124991, 0.16352931, -0.05042564, 0.01670725, -0.13705891, -0.15085278, -0.10425657, -0.11582980, -0.09023199, 0.14094663, 0.08954684, 0.14946954, -0.05662758, -0.12120350, 0.00231803, 0.03279620, 0.15072264, 0.03478275, 0.15742192, 0.05453683, 0.09976939, -0.10435972, -0.00530160, -0.10909089, -0.16674258, 0.09096907, 0.01576592, -0.02688347, -0.09257837, 0.02599606, 0.04846983, 0.13429588, -0.08136977, 0.01892357, 0.05025292, 0.06277256, 0.09450351, 0.10669713, 0.07822132, 0.06784980, -0.08915643, -0.01117922, -0.04031389, -0.00786338, -0.08244283, 0.03966911, -0.10926163, -0.11794858, -0.15574582, 0.00014571, -0.00189698, 0.03459324, -0.02378476, 0.05884398, 0.09949717, -0.04160539, -0.13954011, -0.04066856, 0.01283633, 0.09123685, -0.16570251, 0.05500775, -0.02028559, 0.04787443, 0.01974913, -0.13691002},
  {-0.05963024, 0.24699537, -0.02643018, -0.01459348, -0.16806048, -0.17614594, -0.11295129, -0.07128988, 0.00039481, -0.09907496, 0.02611727, 0.16713551, -0.25754109, -0.00135098, -0.12247121, -0.15030341, 0.03167487, 0.02173433, -0.00030069, -0.09233738, 0.08574834, -0.05880148, -0.15349624, 0.00912698, 0.17323330, 0.00678242, 0.16122812, -0.08416005, 0.08593886, 0.03328550, 0.00469411, -0.00376731, -0.00142024, 0.03342678, 0.10899180, 0.02452471, -0.06719660, 0.16578263, -0.03694885, -0.05661475, 0.03761125, 0.07624825, -0.08972133, 0.08965463, 0.07878855, -0.21290833, 0.02960400, 0.08447693, -0.03136741, -0.02022463, -0.25272468, 0.28035367, -0.08860909, -0.14246465, -0.09574097, 0.08529461, -0.02581493, -0.17394240, 0.02038135, -0.04310289, 0.13665244, -0.13557562, 0.07503791, -0.15946035, 0.17534004, -0.11741118, 0.10697995, 0.00059524, 0.08568548, -0.10575947, 0.27076373, -0.02962099, 0.00330166, 0.09453496, 0.04925556, 0.00175258, 0.10546208, -0.06548423, -0.21438177, -0.02329822, 0.11713180, 0.12825106, -0.12206313, -0.14643529, -0.14629549, 0.08433845, -0.15138482, 0.08137657, -0.01842808, -0.08600260, 0.06772393, -0.07030266, -0.15235929, 0.14596446, -0.07320666, -0.09628393, -0.02181507, -0.11059441, 0.08402234, -0.02188359, 0.02414401, -0.06532091, 0.09720296, -0.04050511, -0.07846760, -0.10130290, 0.00909385, -0.04827237, -0.07375647, 0.05272669, -0.06603869, 0.00729787, 0.06798924, 0.03771304, -0.09099590, -0.11780947, -0.11952937, 0.00821071, 0.11730421, -0.17590570},
  {-0.08260341, -0.05315045, 0.00280713, -0.03941010, -0.02507654, 0.06554681, -0.06797415, 0.03637539, 0.08214493, 0.05877603, 0.09449875, 0.05053592, -0.00972114, -0.09372845, 0.05558934, -0.02063029, -0.08094917, 0.11494277, -0.11795753, 0.08204089, 0.05708636, 0.05772465, 0.12857942, 0.10175946, -0.02959367, 0.07267217, 0.02321254, -0.06392779, -0.06303509, -0.06064805, -0.05796595, -0.02940892, 0.01740580, -0.03110899, -0.01482101, 0.05737213, 0.14141376, -0.11440866, -0.03601497, 0.10603680, 0.07348765, -0.10470559, 0.01894990, 0.08082796, -0.08291712, 0.05219886, 0.11692213, 0.03382559, 0.08050299, -0.06679320, -0.07119453, -0.02667910, -0.00016183, -0.00780930, 0.09953957, 0.09055895, -0.07916089, 0.05444882, 0.11992340, 0.02442740, 0.08812572, -0.04491258, 0.10925548, 0.00730147, -0.09564338, -0.09760393, 0.02781262, 0.06712127, 0.09555826, 0.02775816, 0.08772070, -0.01032694, 0.10634363, -0.01376782, -0.02348983, -0.03603920, -0.02737700, 0.04150927, 0.02959242, 0.10794792, 0.15037535, -0.05042504, 0.04030421, 0.01527626, 0.06418388, -0.01098564, 0.03658186, -0.05717278, -0.13380021, 0.09504770, -0.10852340, 0.02741598, 0.10009700, -0.09220872, -0.02460589, 0.05073499, 0.03008240, -0.04135574, -0.09487101, -0.11508214, -0.11645581, -0.05431084, 0.02530524, 0.06383022, -0.01032287, 0.04694134, -0.01731860, 0.06668918, 0.01091168, -0.10275131, -0.03998954, -0.02443234, -0.08292469, 0.06743449, -0.04598199, -0.06740870, 0.06049109, -0.09811353, 0.07898285, -0.00183098},
  {0.12854020, -0.13697144, 0.02213740, 0.01071863, 0.00616137, 0.06910713, -0.14553188, -0.10171764, 0.10345937, 0.04041060, -0.06264237, 0.03361972, -0.10068819, 0.06521704, 0.08433885, -0.10880262, -0.06004942, 0.09266378, -0.09837812, -0.11456765, 0.06290077, -0.02858322, -0.02780847, -0.02051043, 0.07789490, 0.06693143, -0.08776599, 0.01775438, -0.07311015, -0.06137677, -0.07356805, -0.05031797, -0.01175978, -0.08643153, -0.04606735, -0.09086522, 0.02722514, 0.06909335, 0.05563672, 0.04966063, 0.03899547, 0.08581190, 0.11622012, -0.01156446, 0.05321738, 0.07718571, 0.01753986, -0.07987227, 0.05582921, 0.02287252, 0.08943994, 0.08482519, -0.05860166, -0.04495542, 0.11155901, -0.04521960, 0.02974463, 0.01871570, 0.09878234, 0.10065633, -0.03445842, 0.13202640, 0.04307632, -0.00231953, 0.08889656, -0.01714184, 0.05042205, 0.06247015, -0.09681182, -0.01876832, 0.09764054, 0.02595347, -0.01980584, 0.13811791, -0.08712123, -0.01182311, -0.00644833, -0.05396767, -0.14312957, -0.03479704, 0.16653803, -0.00658910, -0.04682609, 0.11634013, -0.01625978, 0.02043030, -0.09561283, -0.09681717, -0.04380412, -0.07956515, -0.00172947, 0.06945345, 0.02092748, 0.03152636, 0.01687759, 0.06674403, 0.03693236, -0.02006312, 0.02241066, -0.09324138, -0.10111210, -0.07116310, 0.08853422, 0.00568200, -0.06820548, -0.02071533, -0.05324672, 0.01786579, 0.04548956, -0.06948923, 0.12636657, -0.07415999, 0.01236970, -0.08854850, 0.09093385, 0.08984452, -0.12803537, 0.13494314, -0.02953479, -0.22216931},
  {0.03514943, 0.15832932, 0.06318153, -0.02128254, 0.03486443, -0.09375148, 0.07248210, -0.02553705, 0.16272131, 0.01487133, 0.09314194, 0.03285757, 0.00485630, 0.13482045, -0.00481879, -0.06755432, 0.09283362, 0.08941527, -0.03522993, 0.01916017, 0.12883012, 0.12000211, -0.13948490, -0.05602268, 0.02602239, -0.03693666, -0.08398469, -0.05225548, 0.02816584, -0.04170180, 0.05539485, 0.04427219, 0.06499869, 0.07261594, 0.07156383, -0.00035003, 0.04260965, 0.12126654, 0.06120965, -0.03937685, -0.00158559, 0.10322336, -0.04566292, 0.03312610, -0.01970737, 0.07141124, -0.04974889, -0.02345057, -0.02066130, -0.14654677, -0.10221910, -0.09285531, -0.03426625, 0.14454052, -0.02978375, 0.02016644, -0.10743009, 0.12379679, 0.10569951, 0.01925675, 0.06322868, -0.02707830, 0.08596420, 0.03899996, -0.02355916, -0.18802270, -0.06177349, 0.00751964, 0.17649560, -0.03454950, -0.07343098, 0.01477870, -0.01704966, 0.17358541, 0.02486215, 0.02064234, -0.01849811, 0.06144094, 0.03913731, 0.01676454, 0.04685807, 0.07630715, -0.07080791, -0.04786203, -0.08943266, -0.04310952, 0.01887889, -0.11225432, -0.01225193, -0.15924686, -0.09324574, -0.04216740, -0.00179073, -0.03672558, 0.11594641, 0.07738861, 0.08406143, 0.06829407, 0.02213557, 0.00116329, -0.00262223, 0.03179122, -0.00797630, 0.11042728, -0.10948547, -0.01772097, 0.01072959, 0.06929454, 0.07493792, -0.01063373, 0.15092914, 0.02496776, -0.05609630, -0.08741352, 0.08575223, 0.01888944, 0.11429914, 0.07614286, 0.00205997, 0.02413739},
  {0.03775599, -0.06255171, -0.06458290, 0.02329265, 0.00177836, 0.03574986, 0.09952744, 0.07861286, 0.02923758, 0.02863169, -0.05010003, -0.08193278, 0.00015270, 0.12391875, 0.05823543, -0.03497326, -0.09818557, -0.09308907, -0.01202226, 0.02000566, -0.05675254, -0.01637354, -0.07043415, 0.00654528, 0.07351179, 0.08853737, -0.11138130, -0.09228091, -0.10238984, 0.01161615, -0.00763786, -0.07982821, 0.02468443, -0.04271542, -0.12961508, 0.06518581, 0.09946244, -0.06327815, 0.08740947, 0.04970282, 0.06131018, -0.07028018, 0.18902947, -0.06371851, -0.08099455, 0.10872771, -0.03604633, -0.14091869, 0.00988544, -0.13207401, -0.02297992, 0.02006700, -0.06840548, 0.09733065, -0.00182302, -0.05300383, -0.12501793, 0.00133702, -0.05503630, 0.03961397, 0.10380325, -0.00525152, -0.00339874, 0.18309397, 0.04651954, 0.00971248, 0.03945825, 0.08290642, -0.01703152, -0.03504743, -0.00214818, -0.07812646, 0.14130740, 0.00857087, 0.00243233, 0.15358275, -0.12054065, 0.03501528, -0.18650261, 0.09227729, -0.01038975, -0.14317514, 0.12552601, 0.09654032, -0.13803595, -0.06423680, -0.15668134, -0.10369946, -0.11488800, 0.06822114, -0.04457299, 0.11175955, 0.13874972, -0.14505726, -0.13374533, 0.08808775, -0.04127948, -0.07849149, 0.01246359, 0.02516834, 0.04765033, 0.04636018, -0.05573655, -0.06521252, -0.04783449, -0.11368862, 0.00674620, 0.00988050, 0.01919282, -0.08269246, 0.02993958, -0.07824662, -0.02381264, 0.01889932, -0.00113869, 0.04315669, -0.15761183, -0.03370301, -0.03066285, -0.09774117},
  {0.14263645, -0.04245415, -0.11981783, -0.01024637, -0.10810777, -0.08094994, -0.20991541, -0.10999648, 0.06974380, 0.00325693, 0.15649056, 0.06850923, -0.06937800, 0.09060317, -0.10170698, 0.04899380, 0.08845028, 0.00259296, 0.00110793, -0.04659737, -0.09091199, -0.02975496, 0.04228723, -0.07886215, -0.03298181, -0.01638146, -0.07177861, -0.00880914, -0.08794682, 0.03265690, -0.11194536, -0.02652400, 0.01847695, -0.04548173, 0.07572300, -0.03344434, 0.05316401, -0.03198686, -0.03121758, 0.05830995, 0.01743914, -0.03495408, 0.01517732, 0.10687355, 0.00719134, -0.07522988, -0.06959031, -0.04048809, -0.04195396, 0.15595329, -0.13579099, 0.11611639, -0.01483183, -0.11455078, 0.02376278, 0.08935449, 0.03960705, -0.02193769, 0.06939371, -0.07734738, 0.06007911, -0.05431210, 0.01184755, 0.09965477, -0.03786413, -0.03181018, -0.01641717, -0.05889273, -0.12643704, -0.11386607, 0.13916945, 0.17300151, -0.04854949, 0.07265808, -0.15438007, -0.08011021, -0.01607038, -0.04760671, -0.00420948, -0.02534250, 0.05582878, 0.18892337, -0.05809237, 0.04085005, 0.00913935, 0.04422664, -0.08477683, -0.04233231, -0.08795567, -0.00655881, -0.01603307, 0.10096581, -0.06618604, 0.02408743, -0.14988030, 0.09148044, 0.00791926, -0.10412136, -0.09658336, 0.07323477, 0.01536725, 0.01246835, -0.04074963, 0.09860732, -0.05367783, -0.03537736, 0.01757003, -0.01215875, -0.02773277, -0.05646932, 0.13208228, -0.02080948, -0.02269509, -0.05962088, -0.16741782, -0.01948786, 0.08623940, -0.06433991, 0.02255761, -0.03635085},
  {-0.07834565, -0.08342136, 0.00297308, 0.08915006, 0.07431461, 0.04037840, 0.04348650, 0.05287751, 0.04751548, -0.00454159, 0.06095519, -0.12977503, 0.22981761, 0.06350227, 0.11071441, 0.04376233, -0.02081562, -0.14539455, 0.02141128, -0.03973008, -0.10353403, 0.08936856, 0.22506547, 0.09179528, -0.15617517, 0.00107303, 0.01448575, -0.00217712, 0.04786120, 0.04329729, -0.06415296, -0.05398391, -0.12839130, -0.16709386, -0.21930665, -0.12451290, 0.14358592, -0.11766662, -0.05658245, -0.02055049, -0.11606537, 0.06190509, 0.20576662, 0.12720865, -0.14447284, -0.00286242, 0.15411176, -0.01159266, -0.00530757, -0.01455664, 0.02474586, -0.04351639, -0.06799048, 0.05631631, 0.07523741, -0.04405474, -0.07099421, -0.02180634, -0.24334003, -0.01303024, 0.17578706, -0.05069955, -0.19305962, 0.05994613, 0.07553268, -0.06376345, -0.06396426, 0.06163659, -0.02294188, -0.05834439, -0.11132678, 0.01658926, 0.03273587, -0.08519350, -0.14274317, 0.09670465, -0.06279559, -0.01720846, -0.00432931, -0.06190733, -0.02741465, -0.23646624, 0.03239975, 0.09564935, -0.07444602, -0.06738111, -0.21830684, -0.06053193, -0.05529546, 0.21441755, -0.04986426, 0.26057044, 0.14725439, 0.00837378, -0.14422087, -0.00568005, -0.01965795, -0.05281591, -0.01012549, -0.07237976, -0.02635617, -0.00781611, -0.04908093, -0.09482485, 0.16350773, 0.05907267, 0.05410118, 0.11169741, -0.12741402, -0.01436331, -0.09800963, 0.05402075, -0.11662936, 0.09742323, 0.04234711, -0.02304601, -0.08012524, 0.02220923, 0.01299734, -0.07093261},
  {-0.07479899, 0.04323551, -0.14111407, 0.03827236, 0.05070145, 0.01323364, -0.09857739, 0.02514824, -0.17182741, -0.04037131, -0.02177026, 0.14364596, 0.06052911, -0.13625549, 0.00243043, -0.05632310, -0.02670422, 0.07745884, 0.09207071, -0.05654888, 0.14347477, -0.08231555, 0.10267920, 0.08774509, 0.07547176, -0.00067237, 0.04094074, 0.04072929, -0.04863970, -0.10043465, 0.02072364, -0.01335222, -0.09011740, -0.06077874, 0.06539121, 0.10321166, -0.16007340, 0.15343337, -0.08693838, 0.08833158, 0.05908186, -0.16391411, -0.10377730, 0.16723879, 0.13280939, -0.08064564, -0.10253036, 0.10773475, -0.08382061, 0.22163247, -0.18675633, 0.04983328, 0.07001414, 0.02515168, -0.09353791, -0.00465201, -0.02418313, 0.03852228, -0.05581833, -0.03054259, -0.20600091, 0.08730039, -0.05965372, -0.03096188, 0.00327844, 0.13708389, 0.02886096, -0.03496274, 0.06996693, 0.05487024, 0.12022702, -0.01148408, -0.05938321, 0.00196031, 0.07553969, 0.03904304, -0.03656333, -0.00556206, -0.21412408, 0.08642262, 0.10965430, 0.05862124, 0.00646385, -0.07744267, 0.01005072, 0.02997531, -0.10584673, 0.07486524, 0.00789786, -0.10535867, 0.10709625, -0.08906349, -0.04231543, -0.00220347, -0.13213322, -0.03121283, -0.03377008, -0.01221920, -0.02623826, -0.08687320, -0.09623559, 0.04645304, -0.07213614, 0.09276075, 0.04887478, -0.10029826, 0.04277276, 0.01214832, 0.09873852, -0.10382006, -0.00636249, -0.07409117, -0.09678371, -0.04887540, -0.15335582, 0.08940724, 0.13415310, -0.12211889, -0.10159380, -0.05206386},
  {-0.18952596, -0.10736054, -0.02542449, 0.05016504, 0.00555873, 0.03673398, -0.00384045, -0.01071723, -0.06714375, -0.03848680, -0.05646497, -0.01877516, 0.08675920, -0.06980898, -0.03546590, 0.05604516, 0.08756512, 0.00801857, 0.00929074, -0.02626737, -0.14571470, -0.08125760, 0.00919377, -0.03710330, -0.19456437, -0.07894858, -0.10143009, -0.07097969, -0.13117562, -0.09856925, -0.09763280, -0.12847459, -0.13473548, -0.00846382, 0.00826910, 0.00583893, -0.04771246, -0.12838425, 0.14946486, -0.03867482, -0.03899564, 0.03484479, -0.04605583, 0.00184707, -0.02631859, 0.07513675, -0.04267862, -0.09954667, 0.11136923, -0.14814824, 0.05289852, 0.06080974, -0.06938480, 0.05190315, 0.02956953, -0.00729597, -0.00172565, -0.02327238, -0.05987429, 0.01230054, -0.07776894, 0.05219216, 0.00207581, 0.02996703, -0.02705164, 0.04170782, 0.00288257, -0.04023409, -0.09300315, -0.00387837, -0.13509378, -0.03701155, -0.03939804, -0.04130260, -0.00937078, 0.05943834, 0.02931954, 0.00757789, -0.00624158, 0.07182556, -0.04755490, -0.07545998, 0.04086595, 0.04036515, -0.06351051, -0.04261186, 0.09661127, 0.01835558, -0.18442011, 0.00544356, 0.01377164, -0.00688041, 0.06912761, 0.07146592, -0.00372080, 0.04417379, 0.16080044, -0.09465833, 0.04732331, -0.00526961, -0.03161006, 0.04009603, -0.00493042, 0.07551967, 0.10086453, -0.06669456, 0.14454927, -0.02965853, 0.11546131, -0.10933120, 0.05350908, -0.10926756, 0.06321327, -0.10258844, -0.04343734, 0.03389077, 0.11068925, 0.11116657, -0.02113840, 0.04658329},
  {0.02387336, -0.08351449, 0.04412081, 0.00610407, -0.09300289, -0.15204740, -0.16814068, -0.08533216, 0.07309546, 0.01124417, 0.09303863, -0.01072074, -0.01168053, 0.21649000, 0.10356325, -0.05636682, 0.14159365, -0.03523275, -0.05801403, -0.10059679, -0.18030542, 0.13655625, -0.14291416, -0.05801728, -0.06786273, -0.09370837, 0.09480534, -0.04019965, -0.00576243, -0.07955631, 0.09593471, 0.07855377, 0.09947249, -0.11134994, -0.12783812, 0.04623056, 0.06490866, 0.08397751, 0.10139805, -0.14532089, -0.02506066, -0.07002396, 0.14826457, 0.09881517, 0.08541808, -0.01054916, 0.02119779, 0.06864034, 0.12858063, -0.08187396, 0.00631791, 0.09586600, -0.05565203, -0.03750981, 0.14690427, 0.01540546, -0.12463643, -0.11169606, 0.12535189, 0.14529803, 0.16656613, 0.12703195, 0.04345088, 0.06000789, 0.03290897, -0.04486766, -0.12587307, 0.02662505, 0.02872623, -0.11634064, 0.05526472, -0.07929012, 0.08235063, 0.11390503, -0.13137510, 0.17162655, 0.06658266, -0.04737336, -0.22958946, 0.03918273, 0.00832977, -0.07647840, 0.05361450, 0.02627379, -0.07005507, -0.05852570, -0.25705850, 0.01329564, -0.18540213, 0.02648157, -0.11194827, 0.09656945, 0.00777120, 0.02821019, -0.10780299, -0.08166162, -0.01135867, -0.12350745, -0.08512908, 0.04074563, 0.06193015, -0.03694313, 0.03585912, 0.05754973, -0.03078767, -0.02532420, 0.02839652, -0.06779668, 0.08675872, 0.01472628, 0.15444386, -0.07545635, 0.11722349, 0.02959312, 0.06893899, 0.01737622, -0.04667508, 0.02394931, 0.06784220, -0.10518806},
  {0.01756801, -0.24115145, -0.23210314, 0.02636717, 0.10044391, 0.17149730, -0.21937440, -0.00987545, 0.07696581, -0.00873566, -0.04007244, -0.00595233, 0.15159464, 0.01263930, -0.09887119, 0.27782404, -0.03474392, 0.02858666, 0.08785362, -0.03900111, 0.11542747, -0.26261234, 0.15663381, 0.15787068, 0.10617789, -0.05805719, -0.16270214, -0.09851664, -0.07745823, -0.06174456, -0.02226023, 0.27079538, 0.07533992, -0.19026490, -0.32079208, 0.22106029, 0.04184373, 0.17355922, -0.06889492, 0.28691363, -0.05351144, -0.28436938, -0.08226569, 0.20476332, 0.04015731, 0.10307003, -0.20548350, -0.03910786, -0.19967279, -0.07920748, 0.10190326, -0.21638843, -0.13119036, 0.07385711, -0.10925686, 0.17770544, -0.09146789, 0.05647087, -0.07112048, -0.04565375, -0.21076857, -0.11985810, -0.15695022, 0.21502201, -0.01192074, 0.10879344, -0.04427185, -0.07239285, 0.06666362, -0.05707687, -0.01316022, -0.00824900, -0.13437752, -0.04043543, -0.23109053, -0.01606007, -0.13219406, -0.08158527, 0.01451922, 0.14132628, 0.15755408, -0.19692051, -0.07450055, 0.15197116, 0.11198784, 0.12590270, 0.03340374, -0.02142941, 0.01845941, 0.15842818, 0.13205852, 0.24414317, 0.07441691, 0.13981147, 0.03949916, 0.11529477, 0.02163658, -0.10489709, 0.08952224, 0.08638127, -0.02447825, 0.04371863, -0.38537815, 0.08665573, -0.12959433, -0.03137880, 0.01253023, -0.00522769, 0.04558808, 0.03074956, 0.06854428, -0.19811563, -0.14455763, -0.08883414, -0.21538156, -0.01419743, 0.08236796, 0.13497935, -0.21329129, -0.01206124},
  {-0.04642409, -0.11418065, 0.02387593, -0.07169924, -0.15118447, 0.09383132, -0.06727713, -0.03724808, -0.08836923, -0.05765871, -0.00601327, 0.03806461, 0.06489303, -0.08474299, -0.03179111, 0.06493594, 0.01491736, -0.01533328, -0.01509497, -0.07510935, -0.10771761, -0.13364610, 0.18668181, 0.04527350, -0.01760181, -0.02364730, 0.00689723, 0.08914916, -0.01183363, 0.03291276, -0.01585479, -0.06939385, -0.06042447, -0.05752425, -0.09671421, 0.01787514, 0.08171221, 0.05738502, 0.03330726, 0.06200943, -0.01320143, -0.10498135, 0.01763709, 0.17609484, 0.09952950, -0.02031460, -0.07859983, -0.01466715, -0.03041580, 0.09195766, -0.17326176, -0.09345296, -0.10177995, -0.02287536, 0.02939249, -0.05002588, 0.11204544, -0.05232770, -0.02471214, 0.09184682, -0.07092308, 0.02306331, 0.08808774, 0.00679309, -0.12720847, 0.03160965, -0.08650275, -0.04794432, -0.06651326, -0.05523610, 0.01203719, 0.07178582, 0.06075054, -0.10080241, 0.05012797, -0.08965641, 0.12374563, 0.04886678, -0.20650706, 0.06677900, -0.04948569, -0.05941986, 0.00812834, -0.02036167, 0.02729934, 0.11904883, 0.03839709, 0.05671284, 0.12380262, 0.03862043, 0.12031361, 0.00518709, 0.02987435, 0.04624365, -0.04906642, -0.01904279, 0.00475406, -0.00829390, -0.04251317, 0.07809924, -0.06455544, 0.01714056, -0.07641710, -0.06472641, -0.02973973, 0.10334770, 0.07020012, 0.08676213, -0.02891274, -0.09650590, -0.00768334, -0.02942091, -0.01276830, 0.04203331, -0.14513794, -0.12661926, -0.06937756, 0.05608851, -0.01911546, -0.20686789},
  {-0.01166511, 0.10050976, 0.04170877, -0.02558742, -0.23907505, -0.09040608, -0.07820807, -0.06279090, 0.22198841, -0.09292033, 0.07790755, -0.08297037, -0.05289380, 0.02890446, -0.12984844, -0.25658822, 0.02606846, -0.19748756, -0.10727292, -0.17139199, -0.03511063, -0.04936426, -0.22378124, -0.09422176, 0.03484213, -0.09382395, 0.09204447, 0.07182766, 0.16526031, -0.03835157, -0.10113271, 0.23596102, -0.02625068, -0.00823585, -0.10796286, -0.17027710, 0.17742920, -0.03374800, -0.03254956, 0.05572119, -0.09177362, 0.08156517, 0.23639935, 0.17315184, -0.03400682, -0.12315110, -0.05389940, 0.04716456, -0.01469887, 0.02935205, -0.13346715, 0.06168581, 0.01329258, -0.17528807, 0.07885374, 0.18860908, 0.15259865, -0.07009577, 0.04221283, -0.09809692, -0.03418914, -0.01184072, -0.08374452, 0.00930200, -0.07416287, -0.06311144, -0.04683996, -0.06346989, 0.10520311, -0.10613842, 0.17407514, 0.12476071, 0.04295719, -0.02982488, -0.01684832, 0.04424998, 0.14983831, 0.00639853, 0.07174359, -0.22562714, -0.00993184, 0.12082608, 0.04760285, 0.07844876, -0.02409947, 0.02880617, -0.26221824, 0.00725126, -0.18743651, -0.00790561, -0.02207497, 0.28255379, 0.01602712, 0.15568642, 0.02790639, 0.04468466, 0.00445529, -0.10065494, -0.02623131, -0.09179989, -0.05732755, 0.07261700, -0.08106613, 0.08435506, -0.03823660, 0.09195199, 0.03610953, 0.19426851, -0.10887215, -0.00786166, 0.17383079, 0.03635007, 0.14807621, -0.04235502, -0.01362236, 0.02978821, -0.07227062, 0.05486896, 0.10083971, -0.19355860},
  {-0.11648475, -0.15769054, -0.04058231, -0.01554121, -0.13505965, 0.13004975, -0.04149073, -0.04315725, -0.04409341, 0.00921312, 0.03495785, 0.05671644, -0.05691798, -0.06855482, 0.03928934, 0.00669020, -0.01482077, 0.17943068, -0.09739795, 0.12034805, 0.11878557, -0.12764673, -0.02729483, 0.05861458, -0.12298275, -0.00214732, -0.08426768, -0.02324375, 0.00129193, -0.06847129, -0.07494062, 0.06127293, -0.13637306, -0.09303290, -0.05693610, 0.08387529, -0.02310553, 0.17033023, 0.01793562, -0.03122471, 0.06203540, -0.11776116, -0.09750756, -0.02108529, 0.04811027, 0.10788513, -0.20247559, 0.06808891, -0.17923330, 0.18152240, 0.02892284, -0.08236211, -0.11203454, 0.00317683, -0.10529017, 0.11268427, 0.00116757, 0.04280767, 0.06357756, -0.10110216, -0.20287935, -0.00014760, 0.15876620, -0.00707862, -0.13748111, 0.06586582, 0.02379558, -0.14644310, 0.14040010, -0.09888325, -0.03434246, -0.05376192, -0.12562087, -0.02514110, 0.04886191, -0.05290163, 0.02821667, -0.01862532, -0.15387264, 0.01566595, -0.04041849, -0.04844581, 0.04560942, 0.11127570, -0.01001159, 0.02937382, 0.17059807, -0.03214177, 0.03736369, -0.05605888, 0.04651447, -0.02469304, 0.07190541, 0.09474745, -0.08538108, 0.03264483, 0.09409046, 0.05493645, 0.06137226, 0.03443760, -0.07815146, 0.06546703, 0.08651225, 0.02366418, 0.05358227, 0.10302240, 0.18149878, -0.10762118, 0.02013000, -0.11023702, 0.02899040, 0.02854178, -0.00269746, 0.02590905, 0.07589061, 0.06723156, 0.01006872, 0.03317662, -0.14203671, -0.05364573},
  {-0.05165497, -0.03684859, -0.12974651, -0.01136663, -0.05436458, 0.17835994, -0.07741247, 0.09499077, -0.03379407, 0.04247136, 0.07019188, 0.04329623, -0.10178345, -0.22107962, -0.11544482, 0.15146399, -0.06788014, 0.08021804, 0.01460720, 0.06146243, 0.16338864, -0.26000309, 0.30499336, 0.16784808, -0.07992397, 0.04182308, 0.00611544, -0.09405803, 0.05345890, -0.10841170, -0.11706261, 0.01755225, -0.09275056, -0.02971022, 0.00381535, 0.17390132, 0.01803638, 0.13645695, -0.05691857, 0.18715227, 0.06009815, -0.06820183, -0.08101213, 0.04949030, -0.10711080, -0.12339640, -0.06050102, -0.03356780, -0.02979350, 0.04109912, 0.03553502, 0.06765027, -0.09301778, -0.01823577, -0.18234362, 0.06756780, 0.08092327, 0.10942922, 0.02048772, -0.23956087, -0.13129632, 0.00048907, 0.09679075, 0.02385371, 0.00101408, 0.07431930, 0.08092382, -0.03992077, -0.01736365, 0.01998819, 0.13089907, 0.11517473, -0.12891638, -0.08050337, -0.04995671, -0.01641287, -0.04940692, 0.00415735, -0.19289692, -0.05434114, 0.10994633, 0.14689106, -0.13632458, 0.07213202, 0.07696434, -0.02463053, -0.00455302, -0.05236630, 0.19449531, 0.00511389, -0.00573812, 0.03667450, 0.02351068, -0.04706366, -0.17476277, -0.01347154, 0.09819493, 0.06916817, -0.06013249, 0.05667907, -0.03148017, -0.03204507, -0.08680493, 0.08967503, 0.00752181, 0.09791876, 0.08533119, -0.13234736, 0.01266515, -0.04980437, 0.03787682, -0.06362184, -0.05418568, -0.09471343, -0.15384932, 0.04693214, 0.05537208, 0.10610629, -0.00626423, -0.18484585},
  {0.05778659, -0.15485328, -0.15942636, -0.10696733, -0.11584697, 0.08910555, -0.10316975, -0.06843615, 0.08187783, -0.06533965, 0.03594446, -0.02007735, -0.12646103, -0.01310561, 0.05980074, 0.08257522, -0.09244151, 0.02162466, -0.02841139, -0.05273977, 0.10444460, -0.28148535, 0.05022138, -0.02490084, 0.06323517, 0.00646680, -0.03224520, -0.10367842, 0.03242153, 0.00162062, -0.13349532, 0.08248334, 0.12688641, -0.01478505, 0.04905018, 0.16031986, 0.13959609, -0.02220065, 0.11431038, 0.02604307, 0.06080698, -0.15847912, -0.13993624, 0.07620789, -0.03698113, -0.15339427, -0.04004848, 0.03225928, -0.12338876, 0.17154796, -0.08217037, 0.08314538, 0.01156305, -0.15384629, 0.04118572, 0.00386620, -0.05200155, 0.01584426, -0.11587785, -0.02057669, 0.00925979, -0.07111163, -0.08221070, 0.05500653, -0.06080240, 0.02565776, -0.09994687, -0.09346540, 0.06426924, -0.10629162, 0.06807534, 0.18389605, -0.04920664, -0.05734475, -0.02993462, 0.07962111, 0.10592717, 0.01687900, 0.04966819, 0.08764470, 0.15099449, -0.04677001, -0.07098017, -0.00231674, 0.05274062, 0.13281976, -0.03172481, 0.01387790, 0.08431498, 0.04092685, 0.11580706, 0.18511008, 0.11290763, 0.14397459, -0.15283816, 0.04303959, -0.04698401, 0.01948164, -0.10995023, -0.01479086, -0.09000958, -0.11100730, -0.02845978, -0.05814057, 0.11601274, -0.04836607, -0.04988564, -0.10302462, -0.05094189, 0.03440268, -0.05068852, 0.01133807, -0.02184952, -0.07914694, -0.16298641, -0.05817007, 0.06848985, 0.16555978, -0.13154861, -0.13776948},
  {0.00467155, 0.02575253, 0.08706068, -0.07358740, -0.11422004, -0.06293358, -0.21359524, -0.11622125, 0.19655661, -0.08818823, 0.12774071, 0.06671593, -0.15417442, 0.03058278, -0.23153542, -0.21086532, 0.00802942, -0.04604769, 0.08314516, -0.03222695, 0.10027761, -0.07438015, -0.17991611, 0.08762845, 0.03630264, -0.10395483, -0.07243164, 0.02567696, 0.13628384, -0.10509202, -0.07437176, 0.04535666, 0.00253978, 0.06272493, -0.05558795, -0.09319909, -0.05543378, -0.08864605, -0.13504292, 0.02779976, 0.07268183, 0.15615585, 0.08052658, 0.17017220, -0.02100578, -0.16273184, -0.02417146, -0.08648250, 0.08402669, 0.09979609, -0.10462806, -0.13068458, -0.06610087, -0.20268218, 0.00107130, 0.01967458, 0.09793139, -0.09680129, 0.01396861, -0.02673343, -0.01864233, 0.09452859, -0.00762714, 0.05919636, -0.07429917, -0.13688041, -0.00897574, 0.05077336, 0.14857936, -0.04521063, 0.17807743, -0.01018026, -0.06578062, 0.13548368, 0.04272017, 0.06076794, 0.11253255, -0.01081157, 0.03180116, -0.15419355, -0.00098679, 0.23122999, -0.02074202, -0.08383087, -0.03385280, -0.03120961, -0.14588141, 0.01160536, 0.00244234, -0.02671861, 0.17369290, -0.01569223, -0.14604190, 0.16294752, 0.04581951, -0.01036464, 0.02222490, 0.04454667, -0.11661562, -0.01993339, -0.09225249, -0.11942372, -0.02523250, 0.07928625, -0.11770322, -0.01133762, -0.04003578, 0.17730707, -0.08851381, -0.00544268, 0.17111427, 0.08334877, 0.14984046, -0.04192542, -0.10167748, 0.07626316, 0.01548067, 0.11593429, 0.10653014, -0.14903447},
  {-0.03326430, 0.01710460, 0.06763941, 0.05598294, -0.07537507, 0.07431646, -0.10868701, -0.11594227, -0.06192302, -0.10371818, 0.00898421, -0.10233627, -0.04003833, -0.09463467, 0.03388890, -0.01782954, -0.00068539, 0.07801609, -0.08797042, -0.13501848, -0.11663757, 0.06389003, -0.05942496, 0.06782908, 0.00255204, -0.09274047, 0.05234304, 0.01451878, -0.07504631, -0.10695207, -0.16472583, 0.10982463, -0.10180052, 0.05372037, -0.05643568, -0.03948484, 0.06151615, -0.04701946, 0.02089116, -0.08541992, 0.07135494, -0.09569142, -0.00236457, -0.05316042, -0.05214985, -0.12744729, -0.01480292, -0.12158927, -0.14249849, 0.10321262, 0.11315818, -0.09803192, 0.02829117, -0.02319168, -0.05573788, 0.05392672, -0.05463443, 0.06251710, 0.05224698, 0.01432378, 0.03784150, -0.02043675, 0.02601977, -0.05937875, -0.01030972, 0.01338757, -0.08260213, 0.08676623, 0.02445998, -0.09896341, 0.12248941, 0.05308150, 0.04956325, 0.00989920, -0.10818157, -0.04168682, 0.04354093, -0.08961091, -0.20456970, -0.10313828, -0.01176269, -0.00409889, -0.08544543, 0.12312459, -0.05584925, -0.01162133, 0.07193410, 0.04425126, 0.06391114, -0.05420199, -0.08943996, -0.07986941, 0.05413425, -0.00246355, -0.01441702, -0.03484375, 0.08035282, -0.07710212, 0.07137513, 0.08874380, -0.06605651, 0.06790362, 0.01376173, 0.07648207, 0.13282461, -0.02546933, 0.03194927, -0.06056549, 0.09565175, 0.07630841, 0.11855608, -0.07824462, 0.08072346, -0.00445001, -0.03064562, -0.09232461, 0.15805039, 0.06708162, 0.08240543, -0.18803996},
  {0.20070380, 0.09196658, -0.03650138, -0.06312125, -0.02156289, -0.01930894, -0.11590419, 0.02791993, -0.10238995, -0.01495170, -0.12227289, -0.01405768, 0.07383762, 0.15018629, 0.04442621, -0.09689250, 0.02081611, 0.01617196, -0.03356107, -0.07054971, -0.13444431, 0.08716340, -0.12981731, 0.03802532, -0.20524776, -0.10406704, 0.06571262, -0.08699415, -0.02029455, -0.00754588, -0.03854693, -0.01250450, -0.04218428, 0.00764687, -0.11428473, -0.07779236, 0.05810267, -0.01983776, 0.00235820, -0.09159810, 0.02569685, 0.06801189, 0.05489949, 0.13099441, 0.04724250, 0.06455757, 0.00510831, -0.09874815, -0.00511436, -0.00076215, -0.10248814, -0.10854514, -0.08254062, 0.01482903, -0.02477567, -0.01161041, 0.04310240, 0.01171918, -0.05827348, 0.00031407, 0.07148365, 0.02488219, -0.11768703, 0.10702384, -0.01855203, 0.00380001, 0.00114062, 0.05800963, 0.00001388, -0.05835745, 0.04535419, 0.00417273, 0.02065691, -0.05224777, -0.15529315, -0.01637744, -0.02604930, 0.02630597, -0.10100646, -0.11543027, 0.00222360, -0.06561103, -0.01742588, 0.05123320, 0.02935923, -0.06144070, -0.23246111, -0.11189555, -0.14739449, 0.01843336, -0.04099862, 0.19453397, 0.14155975, 0.08804854, 0.12251224, -0.09270272, -0.01201440, 0.01374510, -0.10016856, 0.02174597, 0.05255683, 0.03603965, -0.12145690, 0.04804321, 0.12432468, -0.03792713, 0.10216174, 0.01691825, -0.11152384, 0.03325658, -0.02411782, -0.02036515, 0.11153977, -0.07078665, -0.05190413, 0.01353351, -0.06095134, 0.07181259, 0.05389563, -0.07768418},
  {0.14105597, -0.14211319, 0.07482965, -0.00871474, 0.17795129, 0.07787436, 0.13062951, 0.04427060, -0.05778758, -0.01038702, -0.05577987, -0.10549705, -0.00049782, -0.00575545, 0.14704432, -0.10233016, 0.04436095, -0.10960652, -0.07465681, 0.05172710, -0.02886710, 0.08435757, -0.09821188, -0.11474874, -0.05660606, 0.03043255, -0.08170170, 0.02643443, 0.09319618, -0.08723547, 0.13525605, -0.20680575, 0.02536035, -0.08238653, 0.03720667, 0.05570512, 0.07684851, -0.06442640, 0.03025660, -0.02850532, -0.09559992, 0.00612189, 0.02077425, -0.10369170, -0.05657883, 0.03722494, 0.14902951, 0.06307074, 0.14916316, -0.00693311, -0.04489223, 0.03066555, 0.12657619, 0.08593589, -0.00533959, -0.05860246, 0.02360951, 0.01915389, 0.13651368, 0.12257048, -0.03402640, 0.14043026, 0.12617145, -0.03384767, -0.15374160, -0.03714567, 0.08892321, 0.11503953, -0.11454464, -0.01401951, -0.10230401, 0.10105620, -0.04881475, 0.04254545, -0.06736873, -0.06167652, 0.08601893, -0.03176722, -0.02209470, -0.06660374, -0.03877781, -0.13307630, 0.02165577, 0.05144060, -0.07286552, -0.10905635, 0.11285309, 0.04880472, -0.15474603, -0.17016990, -0.10299085, 0.05812772, -0.01724656, -0.18146828, 0.04680357, -0.16764297, -0.10963380, 0.05836394, 0.06290936, -0.14172004, -0.08662542, -0.00880845, 0.10474053, 0.12353414, -0.09422754, 0.06573735, 0.11157452, -0.09623745, 0.10930803, -0.03083524, 0.03850228, -0.07748535, -0.02370620, 0.06959742, 0.15995389, 0.03100925, 0.01890175, 0.08106057, 0.05066705, 0.04635502},
  {0.13726261, -0.08435535, -0.12765780, 0.04639922, 0.00013450, -0.00043683, -0.00503706, -0.06779372, -0.12396760, 0.05504158, -0.15825738, 0.08052713, -0.01511305, 0.12342530, 0.00153705, 0.01994158, -0.01810277, -0.06763652, 0.02390376, 0.06870099, -0.13332359, -0.08794288, 0.12510818, 0.10174484, -0.08702415, 0.05617822, -0.09351128, 0.05140310, 0.11334443, -0.10414518, -0.11309946, 0.07662372, -0.11489209, -0.11255170, -0.17998417, -0.16171195, -0.10049597, -0.10120752, 0.01997213, 0.02329159, -0.03601798, 0.05335126, 0.04743728, 0.02653608, 0.08405050, 0.00769531, -0.09125853, 0.08269774, 0.06216051, 0.04524961, -0.14215460, 0.10597536, -0.06607903, -0.05559667, 0.10242473, -0.11705080, 0.04150320, 0.12116244, -0.02184522, -0.03824713, 0.02169597, 0.01990493, -0.10354629, -0.01243177, 0.03208928, -0.04272267, -0.00897866, -0.11103705, 0.00493625, 0.07012842, -0.07582278, 0.13733634, 0.05393091, -0.01884823, 0.02157157, 0.08713108, 0.07467645, -0.00071369, 0.06293605, -0.07199259, 0.03618550, -0.05894919, -0.09041805, -0.00685347, 0.03434851, -0.08026426, -0.10593484, -0.07309363, -0.04145145, -0.03440995, 0.02441660, 0.06453767, 0.16887981, -0.12145837, -0.07745969, 0.03154735, 0.06048635, 0.02736620, -0.06827635, -0.06770575, -0.10934543, -0.06174048, 0.03800088, -0.08387467, 0.13239436, -0.01031176, 0.00836408, -0.02404732, 0.02606915, -0.00345571, 0.06181420, 0.11285975, -0.10235970, -0.05107727, 0.04886525, -0.01931027, -0.02904977, 0.08371926, 0.00751090, -0.11146966},
  {-0.05151851, -0.12183818, 0.00447008, 0.05646914, -0.27868271, -0.05477440, -0.06319299, 0.04095756, 0.16463499, -0.04098580, -0.12216730, 0.08458356, -0.02264291, -0.08938003, -0.20591334, -0.17488755, 0.02062124, -0.04460163, -0.07292467, -0.10062320, 0.08797770, -0.09841704, 0.09369870, 0.00784509, 0.03066322, -0.06397244, -0.01000681, 0.05431267, -0.16639982, 0.05602679, 0.02104559, 0.14755654, 0.06828753, -0.08312572, -0.01912543, -0.04175706, 0.16000907, -0.03618761, -0.00528610, -0.07972059, 0.01575565, -0.04105804, 0.04736082, 0.21122083, -0.03746429, -0.02857620, -0.10237052, -0.02274322, 0.01288734, -0.00424507, -0.02329115, -0.21694498, -0.07709378, -0.03858195, -0.13748600, 0.12792119, 0.09372512, -0.00050415, 0.08594354, -0.05597082, -0.04036581, 0.01958680, -0.10143204, 0.09028699, 0.04190437, -0.02158542, -0.00768333, -0.05075257, 0.03620048, 0.08760963, 0.11875712, 0.03488418, -0.10498138, 0.17506936, -0.01937160, 0.15200581, 0.05437620, -0.08350395, -0.07745117, 0.03985043, 0.19743530, 0.04417938, -0.00526249, 0.11620810, -0.05070031, 0.11901802, 0.03398855, -0.03409230, 0.06504145, 0.09372494, 0.01188278, 0.11540177, 0.08533565, 0.07735959, 0.03309808, 0.21008693, -0.01461896, -0.02935703, 0.01639177, -0.12622049, 0.00094431, -0.01735557, -0.13743840, 0.02985212, -0.10250927, -0.06664361, -0.09365601, 0.03065845, -0.02096336, -0.02569497, 0.19333619, 0.01303053, 0.00385467, -0.04565854, -0.16737454, -0.11617647, -0.05553778, 0.14548750, -0.08961726, -0.25995708},
  {0.11426242, -0.15152428, -0.02423093, 0.07272027, -0.12542441, 0.10650123, -0.05148359, -0.03163320, 0.04079251, -0.09934940, -0.07547733, -0.01338319, 0.11840972, 0.00345763, 0.15626019, 0.07444306, 0.05903264, -0.15395133, -0.00591945, -0.07358327, -0.09534577, 0.03779984, 0.19384187, -0.10562662, -0.15476850, 0.04631565, -0.13010031, -0.01395800, -0.05737287, -0.03688458, -0.02861626, -0.08537646, 0.11840412, -0.19533089, -0.10609192, -0.02951162, 0.01031561, -0.17118062, 0.12722641, 0.02376016, -0.02611272, -0.10401752, 0.15050715, 0.09343253, -0.08750553, -0.06985439, 0.02888744, -0.10031171, 0.00171258, -0.05287325, 0.09142789, -0.08249480, -0.24973567, -0.01574447, 0.00997909, -0.11943183, -0.09588337, -0.06970605, -0.11707722, -0.10852244, 0.11795437, 0.10641352, -0.25988883, 0.04247991, 0.02671438, 0.12297963, -0.05458165, 0.00259679, -0.00011087, -0.05588728, -0.11323876, 0.11730848, 0.12481385, -0.01390959, 0.03724945, 0.10371628, 0.00167480, -0.04310633, 0.01992440, 0.06151190, 0.09331145, -0.12340289, -0.04002309, -0.00427228, 0.07600272, -0.05448727, -0.06051352, -0.09197496, 0.06474166, 0.07539438, -0.05117147, 0.29865578, 0.07994345, 0.05035176, -0.03941181, 0.12291570, -0.08225790, 0.01007920, 0.06852289, -0.02311016, -0.03445177, 0.01891557, -0.07309497, -0.05334067, 0.09785771, 0.09290782, 0.07691918, 0.07250865, 0.19317421, -0.00752022, -0.02770193, 0.05885941, 0.02518713, -0.05256330, -0.03969755, 0.06499323, 0.00363011, -0.00484752, 0.06958117, 0.13052666},
  {-0.08085769, -0.15251820, 0.01082301, -0.09349012, -0.03767509, 0.13546239, -0.12028887, 0.08578324, 0.05945849, 0.06821101, 0.10871008, -0.00396334, -0.06545915, -0.10756608, -0.01190724, -0.05105668, 0.01841395, 0.02860892, -0.05441547, 0.05894942, 0.10663321, -0.03080419, -0.11389989, 0.14858364, -0.07510955, 0.08698717, 0.01494472, -0.04490436, 0.07759135, -0.11642224, -0.03293902, 0.14148298, -0.07400057, -0.04884074, -0.13424388, 0.00847591, -0.00998797, -0.05324373, 0.01534887, 0.13834842, 0.07878581, -0.02953468, 0.07861031, -0.00754100, -0.01560370, -0.04358926, -0.19500996, 0.06937306, 0.00971473, 0.19147155, -0.05948877, -0.04116052, -0.08931807, -0.12603706, -0.16430186, 0.08239914, -0.07110859, 0.04846429, 0.02873575, -0.02254637, -0.12051508, -0.05527849, 0.22070260, 0.12020865, 0.09969857, 0.03723511, -0.03111161, 0.04568758, 0.07937665, 0.00338582, 0.01122553, 0.07016578, -0.04295214, 0.06016807, -0.09480064, -0.07950126, 0.13805459, 0.03216467, 0.00515011, -0.03228053, 0.28711295, 0.04830128, -0.16471225, 0.05419675, 0.02284129, -0.11134139, -0.02863074, 0.02638936, 0.10272061, -0.13038431, 0.04631063, 0.08388145, -0.11105186, 0.03627609, -0.09263941, 0.04837167, 0.04216005, 0.02232407, 0.02349884, -0.09324322, 0.06949478, -0.09831667, 0.09970630, 0.01204285, -0.06402351, -0.05711097, 0.07362141, -0.02653934, -0.02562233, -0.10474192, 0.15351804, 0.02568341, -0.11806189, 0.01579255, 0.00117479, 0.07110785, -0.01827289, 0.15688410, -0.03857889, -0.18939166},
  {0.02017635, -0.02978679, -0.12669109, -0.08847360, 0.01272351, 0.04238582, 0.04346969, 0.05044057, -0.22336578, -0.03403026, 0.04419713, 0.01816581, 0.05332222, -0.06844539, -0.06677085, 0.04950385, 0.05217405, 0.10017148, 0.08213417, -0.03456595, 0.02421729, -0.13087992, 0.08342125, -0.01461171, -0.17976397, -0.06545778, -0.12237564, -0.10371184, -0.04200508, 0.07961927, -0.04201670, 0.00835446, -0.15183659, -0.02979496, 0.05569506, 0.14794368, -0.00991868, -0.02760920, -0.02813292, 0.14544095, -0.00690741, -0.13496640, -0.04061839, -0.05204606, 0.04148889, -0.00243372, -0.04162895, -0.04159920, -0.16237926, -0.05218123, -0.00179620, -0.02275122, -0.08141108, 0.09498569, -0.02605580, 0.02496059, -0.00111264, 0.01537268, 0.19272482, -0.11181217, -0.08864973, -0.13693720, 0.21885361, -0.07106233, -0.12007428, -0.05493952, 0.00101736, -0.05950782, -0.10643967, 0.00664809, -0.06151346, 0.04178360, -0.13963623, -0.00137748, -0.06326941, -0.02166418, 0.08220661, -0.04097274, -0.16893414, -0.05817327, 0.04898618, 0.06553981, -0.01594565, -0.04168963, -0.00618515, 0.04984493, 0.01500143, -0.09228890, -0.16073024, 0.04287476, -0.06286693, -0.03998681, 0.17542206, 0.04592846, 0.03115543, -0.08690588, 0.25158316, -0.01466223, 0.03725681, -0.03926021, -0.06371222, -0.11720455, 0.14565389, 0.12011942, -0.08221425, -0.02649308, 0.05740622, 0.02362074, 0.11767833, -0.08373166, 0.02542214, -0.08228087, -0.14185591, -0.02078180, 0.03078124, 0.01144881, 0.07463507, 0.09090857, 0.02155187, -0.11678296},
  {0.11224005, -0.15236659, -0.12823939, -0.09567604, -0.07212686, -0.10753043, -0.03431562, 0.01226866, -0.03891448, -0.05296322, 0.03951861, -0.11304954, 0.15499799, 0.03400468, 0.04902049, -0.02308339, -0.08131535, 0.04918738, 0.06426200, 0.00467698, -0.15905456, -0.00052250, -0.00372604, 0.06647562, -0.22247519, -0.12348920, 0.08380231, 0.01990794, 0.08807179, 0.03696339, -0.04057376, 0.03855630, 0.03634687, -0.06171295, -0.10200750, -0.08278144, 0.03787583, -0.15255508, 0.05268595, -0.07245581, -0.11823101, -0.03996392, 0.16495958, 0.10312405, -0.08956981, 0.02006956, -0.10799284, -0.00073183, 0.05539932, 0.00052541, -0.15861477, -0.05996898, 0.02626499, 0.05988414, -0.02757366, -0.15220904, 0.12840039, 0.09698710, -0.03612619, -0.00791761, 0.12980172, 0.16206412, -0.10407389, -0.02266720, -0.03212906, -0.06694823, 0.03487967, -0.04041653, -0.04128367, -0.06100014, -0.02270127, 0.00734934, 0.07935816, 0.08975377, -0.00725535, 0.22393970, 0.10793837, 0.03050388, -0.08138786, 0.00086568, -0.05934843, -0.13544787, 0.11084494, 0.10038340, 0.06202053, -0.00000063, -0.29289290, -0.05073515, -0.11181756, 0.03274371, -0.02666649, 0.06263081, -0.03836992, 0.10541917, -0.03414167, -0.05144040, -0.00115709, 0.08260202, -0.07925534, -0.06210814, -0.14357457, 0.08931778, 0.04705339, 0.02663889, 0.04337507, -0.02914221, 0.10610933, 0.06860121, 0.05141853, 0.01054846, -0.03721768, 0.04914711, 0.03035841, -0.04613838, 0.09386526, -0.02996264, 0.00584628, 0.01411409, 0.03484807, -0.19083714},
};
# 12 "lenet_proj/lenet_top.cpp" 2
# 1 "C:\\Users\\Baron\\Desktop\\EE_297_Repo\\EE_297\\ML_PATH_EE297\\EE297_env\\projects\\weights\\fc1_biases.h" 1


float fc1_biases[120] = {0.02352625, 0.01285473, -0.00728021, -0.01023100, 0.01287730, 0.01467800, 0.02840758, -0.02090105, -0.00806152, -0.00912173, -0.00087810, 0.01367249, 0.03710873, 0.01175339, -0.00238593, 0.00314057, 0.00368283, 0.01385264, -0.01458868, 0.02410781, -0.00117347, 0.03930040, -0.02846916, 0.04664639, -0.01801556, -0.00682023, -0.01958062, -0.01013348, -0.01606201, -0.01481044, -0.02626074, 0.01859060, -0.00566632, -0.01851976, -0.01339039, 0.00274251, -0.00978956, -0.02162540, 0.00265584, 0.00298691, -0.01303945, 0.01903430, 0.01378591, 0.03581534, 0.03950972, 0.03423347, 0.00902363, -0.01585227, 0.03132607, -0.00245381, 0.00705796, 0.03382731, 0.00011894, 0.04935864, -0.02167026, 0.00919785, -0.02972532, 0.04134713, -0.00736424, 0.04556046, 0.01462409, -0.01155865, 0.00186673, 0.03176828, 0.02055706, 0.03346804, 0.03627883, -0.01845845, 0.01078534, -0.02682890, -0.01684383, 0.02634219, 0.03067884, 0.00749093, -0.00392655, 0.04982638, -0.00384081, -0.01146170, -0.02237911, 0.02716490, 0.04766401, 0.03590594, 0.02335297, 0.02654901, 0.02809612, 0.01494076, -0.02020283, -0.01544391, -0.00549167, 0.03564280, 0.01900794, 0.03787411, 0.03362254, 0.01651750, -0.03585582, -0.01279022, -0.01533834, -0.03351558, -0.00147631, -0.02087953, -0.02603868, -0.01725885, 0.03916347, 0.00905130, -0.00546393, -0.01543460, 0.05235507, -0.02347262, 0.01345653, -0.02285765, 0.01238710, 0.04764673, -0.00832988, -0.00622272, -0.00654006, -0.00260436, 0.02170644, 0.00195296, -0.00486919, 0.02765585};
# 13 "lenet_proj/lenet_top.cpp" 2

# 1 "C:\\Users\\Baron\\Desktop\\EE_297_Repo\\EE_297\\ML_PATH_EE297\\EE297_env\\projects\\weights\\fc2_weights.h" 1


float fc2_weights[120][84] = {
  {0.16710466, 0.16998547, -0.12493069, -0.15668744, -0.09903888, -0.00059556, 0.04300193, 0.04731333, 0.06577365, 0.18580803, -0.19120333, 0.21548137, 0.08137359, -0.11469103, -0.04114935, -0.10990667, 0.09808587, 0.24478769, 0.00246039, 0.21867932, 0.10166717, 0.04733013, -0.22515427, -0.10515078, 0.20950292, 0.27851206, -0.10957175, -0.08060150, -0.09965370, -0.23259644, -0.19254419, -0.01788632, -0.17410935, -0.15910070, -0.20773216, -0.09232638, -0.27661863, 0.19531344, 0.03483028, 0.19318645, 0.24316590, -0.11387965, -0.26777521, 0.00350537, 0.05122240, 0.00499594, -0.06166423, -0.19226480, 0.17455237, -0.24106330, -0.20431826, -0.05709929, 0.00996966, 0.11053949, -0.09836909, -0.03865978, -0.11327449, 0.24238753, 0.17215492, 0.02944481, 0.15133992, -0.12361848, -0.09452941, 0.00339015, -0.06159985, -0.10198203, 0.07139647, 0.11602789, 0.12743032, -0.02128299, 0.20918663, -0.11414091, 0.02750603, -0.21035060, 0.24002370, -0.06033460, 0.22966385, 0.05057313, -0.25645959, 0.20724614, 0.07126404, 0.12574683, 0.11622145, 0.09572065},
  {0.05815303, 0.08714862, -0.02259954, 0.11801666, -0.02085472, -0.23679474, -0.01591827, -0.15727219, -0.05295826, -0.18774544, 0.18387286, 0.18477754, -0.28893980, -0.13429646, 0.09571710, -0.13198373, 0.00640629, 0.14929067, 0.18153517, -0.09351149, -0.22926185, 0.10866822, 0.13035984, 0.05314022, 0.08551526, 0.15907273, -0.04072897, 0.04866861, 0.16534558, -0.19527638, -0.06679789, 0.17800732, -0.07165180, -0.00324244, 0.14043933, 0.13690221, -0.03106364, 0.15626822, -0.16447161, 0.08063035, 0.13428310, 0.04928439, -0.02967423, -0.15709339, 0.07201925, 0.09373850, -0.15617666, -0.00123044, 0.07368790, -0.09703342, 0.19331984, -0.24033268, 0.02741237, 0.04093432, -0.03381817, -0.03824876, -0.10616836, -0.00508105, -0.21768169, -0.09073538, 0.25685129, -0.04760204, -0.23139463, 0.07071606, 0.13372612, 0.05732023, -0.13315879, 0.19840401, -0.14150156, -0.01274082, -0.05193536, -0.11086214, 0.05087323, -0.03904348, -0.17022699, 0.03702892, -0.07051446, 0.09642383, -0.02311070, -0.14962730, 0.01361900, 0.14360930, -0.02908359, 0.10373390},
  {0.17278180, 0.10562636, 0.05961509, 0.00739307, 0.06094260, 0.04316432, -0.15238540, -0.07391012, -0.10664799, -0.01528561, 0.00630622, 0.09516677, 0.06543591, 0.01145933, 0.11596303, 0.02578533, -0.19399583, 0.18903054, -0.10011344, -0.14612098, -0.03585267, -0.14226618, -0.00291027, -0.12644073, 0.09212185, -0.03074372, 0.03466620, -0.11501672, 0.13126805, -0.07970119, 0.13032995, 0.14997981, 0.12457360, 0.01940977, -0.13141024, 0.18636556, 0.12122396, 0.03673353, -0.17415465, 0.16374497, 0.08758017, -0.12076999, 0.08088768, 0.01393595, 0.00412874, 0.05205096, -0.09786452, 0.09214111, -0.00161929, -0.03435093, -0.12510107, 0.04028717, 0.08239499, -0.06671465, -0.14226699, 0.04464827, -0.18353152, 0.10746416, -0.07524478, -0.11332810, 0.13186678, 0.06384104, 0.09029988, 0.13172498, -0.05013824, -0.26291835, -0.16045363, 0.07646595, 0.03234684, 0.07199016, -0.12715569, -0.06479768, 0.17600483, -0.10839733, -0.19576837, -0.12086450, -0.15091053, -0.06449395, -0.09742320, 0.07659446, -0.02816649, 0.15097144, 0.13686277, -0.15916590},
  {0.14361268, 0.02563559, 0.03008992, 0.12816483, -0.06574384, -0.13715249, -0.09264174, 0.16683483, 0.11999366, 0.11992373, -0.10432956, 0.02237449, 0.08728547, -0.08100296, 0.11388536, -0.01142666, -0.03146002, 0.00097938, -0.05815068, 0.00962269, 0.12910663, 0.08596666, -0.10207845, 0.05227901, 0.10251448, 0.04719713, -0.00373795, 0.06830893, -0.12793790, -0.12885720, 0.09265532, -0.10162921, 0.05283489, -0.09148154, 0.14218935, -0.08236693, -0.06712942, 0.10523785, 0.15070398, 0.17116243, 0.06259082, -0.02344227, 0.00617937, 0.06497101, 0.14520581, 0.10458404, 0.02586642, 0.01491024, 0.01331536, 0.05539208, 0.07105270, -0.05601010, 0.09905986, -0.03623261, 0.07878889, -0.02335598, -0.16399936, -0.02417646, -0.13319615, 0.03023894, -0.11409273, -0.08022324, 0.07814182, -0.00175332, -0.05793211, -0.13246903, -0.05105332, 0.14731878, -0.09567042, 0.05800726, -0.07292034, -0.12849149, 0.08026199, 0.13677166, -0.10824431, -0.10059349, 0.01511253, 0.14667036, -0.09150094, -0.01497371, -0.07616322, -0.11355186, 0.07070538, -0.15050820},
  {0.09489921, 0.08398898, 0.04701985, 0.05027097, 0.20497636, -0.13539590, -0.11585679, 0.14899690, -0.00568490, -0.07023621, 0.16451402, -0.02232592, -0.13748863, 0.04867640, 0.18790357, -0.11777935, 0.04322201, -0.04017784, 0.05176556, -0.08550888, 0.14582548, 0.06726730, 0.12029915, 0.00378890, 0.16465211, 0.10281004, 0.14353263, -0.22117777, 0.18227689, -0.12047594, -0.01742725, 0.16242872, 0.09271374, 0.03051109, 0.10196546, 0.09687714, 0.13022274, -0.23453018, -0.14649488, -0.03081375, -0.03606047, 0.08337839, 0.19702241, -0.12180553, -0.18611617, 0.01821429, 0.07915214, 0.01406912, -0.07094922, -0.09809167, -0.11607039, 0.19888653, 0.10036799, 0.04144383, 0.21348669, 0.13191319, -0.12029904, 0.05628082, 0.14751112, 0.16712369, -0.01493237, -0.05369674, -0.17626441, -0.03201196, -0.08736711, 0.00245720, 0.07905836, 0.09763470, -0.15114976, 0.02354041, 0.11585019, 0.16358872, 0.16358761, -0.15913485, 0.00821973, -0.07345810, -0.14910100, 0.08048749, -0.19218950, -0.04728287, 0.13119331, 0.02944824, 0.00643306, 0.01299100},
  {0.07024200, -0.07283539, -0.00978769, -0.22390389, 0.17484890, -0.18344525, 0.09629805, 0.04946064, -0.09370241, -0.01973989, 0.15812913, -0.05228824, -0.00703844, -0.14050740, -0.01723916, -0.03060837, 0.09885807, -0.21865013, 0.20330521, 0.03548377, 0.28308856, -0.10219042, -0.00216221, -0.09646983, 0.01904657, 0.10749624, 0.15976237, -0.05000261, -0.01967117, 0.12661377, -0.10659673, 0.21197687, 0.06662671, 0.17981319, -0.22622743, -0.01952082, -0.23031233, 0.10622039, -0.01114082, 0.02306977, 0.13184388, 0.01173291, 0.03208727, -0.08917927, -0.13798608, -0.29980797, -0.07763585, -0.26098874, 0.07170300, 0.10895922, 0.18003805, 0.23276921, 0.17088085, 0.00752509, 0.03809141, -0.13199939, 0.07564377, -0.02255318, 0.02156294, 0.04480211, -0.10832693, 0.05868518, -0.20532320, 0.04140946, 0.01181256, -0.09055979, -0.12201221, 0.06428802, -0.06791679, 0.02474283, 0.04466309, 0.01225122, 0.19196637, -0.18345812, 0.09858329, -0.05669660, 0.24869204, 0.09894113, 0.05389152, -0.12007737, 0.14971881, 0.12071493, -0.15213390, -0.13858686},
  {0.08621264, -0.28652325, 0.11475865, 0.07879068, -0.15983079, 0.04652942, -0.05213656, 0.20742171, 0.05266680, 0.21630324, 0.10833186, 0.13962127, -0.09818873, -0.15123828, 0.11453947, -0.00674920, -0.05577048, -0.04812073, 0.07210436, 0.03024754, 0.06296823, -0.06139624, -0.15711793, -0.18854097, -0.08197971, 0.06031427, -0.07356199, 0.01854167, 0.11543748, -0.07231104, 0.18580937, -0.15782297, 0.11521779, 0.03230797, -0.16018395, -0.24915303, 0.01440594, 0.04985535, -0.03346406, 0.08775169, 0.07909039, -0.01379285, 0.17136657, -0.07999579, 0.06058396, 0.01992480, -0.00180609, 0.03902998, -0.00523319, -0.09731270, -0.11586965, -0.01042068, 0.00813092, -0.09351309, 0.00661512, -0.02211721, -0.09726339, 0.23128220, 0.04397427, -0.11344882, -0.12259931, -0.15227075, 0.23708449, -0.18113910, -0.26060170, -0.33222920, -0.15411611, -0.15008755, -0.05239114, 0.11242209, -0.20778993, -0.13114209, 0.23878159, 0.11575518, 0.12020168, 0.02901020, -0.05102847, 0.05244619, -0.16647232, 0.06720060, -0.12182192, 0.08446375, 0.23601706, 0.04691152},
  {-0.09504981, -0.08879401, -0.09766915, -0.05690339, 0.03311709, 0.14977418, -0.02366632, -0.14411980, 0.02595085, 0.09323522, -0.10477427, -0.07723291, 0.01102424, -0.14107472, 0.13400939, -0.04252319, 0.04164726, -0.02741427, 0.04733659, -0.05648029, -0.10552870, 0.11593545, -0.15426853, -0.07119536, 0.11523537, 0.02279374, -0.10836747, -0.11767009, -0.05292474, 0.08852783, 0.15892760, 0.08520753, 0.16083260, 0.10211577, 0.12482555, 0.15097260, 0.14665577, -0.13104594, 0.13628651, 0.08301694, 0.15993573, 0.05765679, -0.04723381, 0.13666113, 0.15511097, -0.15038013, 0.02758984, -0.13745521, 0.01538420, -0.01829859, 0.06012798, -0.17253672, 0.08940789, 0.11153241, -0.08827070, 0.16288839, 0.14206715, -0.05726903, 0.04510933, -0.04061729, -0.12200046, 0.11877890, -0.15936039, 0.05936859, 0.14637437, 0.11704372, -0.06253202, 0.10350491, -0.14326338, 0.07213761, 0.09755051, -0.13963000, -0.13848446, 0.06587073, -0.05605011, 0.00313068, -0.09996755, -0.07333240, 0.03009966, -0.05136484, 0.13331726, -0.10697288, -0.15214126, -0.11346807},
  {0.19040059, 0.13795970, -0.08171190, -0.04334275, 0.13783924, -0.10667473, 0.09830627, -0.14704770, -0.07574702, -0.06493848, -0.04788272, -0.08790834, -0.12867606, -0.15906836, -0.17431773, 0.08164755, 0.00711508, 0.08152873, -0.09369573, 0.00169147, 0.08988980, 0.11334722, 0.17721485, 0.10779237, 0.14850332, 0.05315939, 0.09103800, -0.06989690, -0.08816308, 0.06838543, -0.13457355, 0.10846812, -0.11249541, 0.09816513, 0.24627598, 0.09005012, 0.12203619, -0.14662810, -0.10897909, -0.04786868, 0.08599778, 0.08657440, -0.04986826, 0.02977645, 0.05485639, 0.15540402, -0.10532126, 0.15355244, -0.00778985, -0.04495195, 0.17199688, -0.13743325, 0.04328969, -0.00693732, -0.14513204, 0.04601937, -0.07501113, -0.22275312, 0.05416514, -0.09534381, 0.00274627, -0.10375389, 0.11865441, 0.11492162, 0.15868530, 0.10016062, -0.05150534, -0.01821844, -0.04530658, -0.01578791, 0.20270148, 0.14001344, 0.12035961, -0.11354440, -0.23238727, -0.06359904, -0.10016176, 0.04446786, 0.14124312, 0.11286034, 0.10265696, 0.06899711, 0.15901750, 0.10641041},
  {-0.08192310, -0.16231495, 0.05735112, 0.12122230, -0.05760841, -0.11588080, -0.10456347, -0.14836980, -0.08896855, -0.02682765, -0.08863723, 0.06439111, 0.04560610, -0.11931350, -0.08010965, -0.02933136, -0.02825869, -0.10497452, -0.14506538, -0.15575507, 0.10611052, 0.04277351, -0.11302945, 0.15836927, 0.09017645, 0.14387700, 0.01273761, 0.08363724, 0.09496933, 0.16427077, 0.02547440, -0.11295967, -0.07557913, 0.11344583, -0.11518084, 0.12133286, 0.00216290, 0.00620117, -0.10972865, -0.10239512, -0.00398564, 0.07148280, 0.08745372, 0.03311999, -0.10395896, -0.04634465, -0.13981207, 0.15108879, -0.00799790, -0.08408415, 0.06650333, -0.09608406, -0.11679170, -0.03547952, -0.06917403, -0.01833820, 0.09390901, -0.09760928, -0.14377694, -0.01287395, 0.13104849, 0.00801712, 0.02871866, 0.14702822, -0.01867244, -0.02436403, 0.08065029, 0.04861420, -0.01586318, -0.12021689, -0.11198874, -0.02373500, 0.15424733, -0.05905920, -0.01256221, 0.05246792, 0.05141399, 0.12129743, 0.08847523, 0.11152331, 0.02405208, -0.03023892, -0.11359215, 0.01706370},
  {-0.20090963, -0.42972365, 0.24344751, -0.11708499, -0.06053079, -0.05463902, -0.04305580, 0.12463683, 0.19844930, 0.22104222, -0.00668157, 0.13318889, 0.50910515, -0.04584220, 0.03856878, 0.03168833, 0.01020071, 0.05921032, -0.15212215, -0.16021536, 0.13238704, -0.03586591, 0.02121877, -0.23110470, -0.00101835, -0.13707773, -0.15661922, 0.09117671, 0.12247566, 0.10552692, -0.14562078, -0.02510081, -0.13478640, 0.03400623, 0.09987324, -0.18377620, -0.03266712, 0.17272282, -0.07133240, 0.00142296, -0.14682364, -0.13248447, -0.01519298, -0.16384627, 0.13196234, 0.10589804, 0.24707751, 0.06872890, 0.03207415, -0.13693590, -0.18735300, 0.01916258, 0.09144836, 0.03876679, -0.14832331, -0.22364074, 0.21337038, -0.05869758, 0.23297507, -0.11550711, -0.31743234, -0.16727373, 0.03422043, 0.00611422, -0.11850094, 0.00948603, 0.04824290, 0.17380787, 0.11345234, 0.04620449, -0.10607142, -0.20023316, 0.26154053, 0.21240556, 0.13277587, -0.13558252, -0.14801213, -0.10274734, -0.04720834, -0.05902281, -0.15658003, 0.22746474, 0.08677244, 0.06270561},
  {0.20542631, -0.03486154, 0.17205836, 0.20901959, 0.20209177, -0.09260574, -0.03435004, -0.12693572, 0.00232320, -0.11019713, 0.09356537, -0.11123089, 0.14671175, -0.10131904, -0.03353659, -0.01430527, -0.06093752, -0.26462135, -0.13227707, -0.13530733, 0.17469330, 0.14218549, -0.07276393, 0.07097212, -0.10496415, -0.01912488, 0.10875832, -0.24208924, 0.13495843, -0.17479102, -0.01175177, 0.17573203, -0.01019730, -0.12486751, -0.10347887, 0.12955587, 0.02664094, -0.00830918, -0.19014452, 0.02838700, 0.07354164, -0.17421876, 0.10628083, -0.02347814, -0.03705794, -0.05569110, -0.06071432, -0.09500358, 0.20073180, 0.08804572, -0.12632218, 0.01707530, 0.01645773, -0.12396912, -0.00517146, -0.14850846, 0.12276663, 0.07216296, -0.13645260, -0.14780898, -0.08313571, -0.09517425, 0.01288746, -0.02524333, 0.09844439, 0.15580031, 0.13663992, 0.17076617, -0.22044212, 0.03347712, -0.09087277, -0.25780669, -0.04057524, 0.20008525, -0.13701718, -0.07039455, 0.12680225, -0.09602897, 0.06443604, -0.05815924, -0.05458641, 0.15822840, 0.05257273, 0.00277537},
  {-0.11725075, 0.02626925, 0.02756417, 0.11594547, -0.16192938, 0.10138457, -0.15235326, 0.15296999, -0.02364424, -0.03643896, -0.14446677, -0.22599372, -0.10656984, 0.07004385, 0.20214777, 0.16039960, 0.15365125, -0.05035274, -0.07818699, -0.04189448, 0.13340798, -0.08113918, -0.09439918, -0.01416200, 0.21096222, 0.06462461, 0.07877982, 0.01821302, -0.05659474, 0.16829740, 0.04789050, -0.12560298, -0.07980634, -0.11527655, -0.17927918, -0.19534102, 0.00111435, -0.11945340, -0.17964837, 0.18999702, 0.17547056, 0.19991669, 0.11249579, 0.06361017, -0.15808807, -0.24287130, -0.06487443, -0.05078668, -0.15231588, -0.07587440, 0.13934685, 0.24991788, -0.14256564, 0.05157762, 0.17479254, 0.08559709, -0.10986144, -0.10903247, -0.08257295, -0.11096023, -0.02283094, 0.10717975, 0.16904430, 0.01009865, -0.18120678, -0.18554059, -0.05713885, 0.11213508, 0.11889581, 0.05549240, 0.00970706, 0.05615631, -0.15578488, 0.11415159, 0.05572763, 0.14365624, 0.18149279, 0.19729209, -0.02311606, 0.04923578, -0.00400791, -0.10259011, 0.14249632, 0.08529717},
  {-0.12279627, -0.09771977, 0.05672501, -0.04697867, -0.09508628, 0.18870713, -0.17094132, 0.00141362, -0.14385033, 0.07449892, 0.02256081, -0.03156217, -0.14400017, 0.00207335, 0.11311610, 0.01444644, -0.08415945, 0.22019845, -0.15510906, 0.13338482, -0.11856874, -0.08858014, 0.12900469, 0.23295416, -0.15561607, -0.03014038, 0.06391146, -0.09408400, -0.16451961, -0.09520917, 0.00720317, 0.08212022, 0.06408369, -0.22561666, 0.03244665, 0.11456800, -0.09224888, -0.17635395, 0.09879582, 0.14258873, -0.03283198, 0.05717018, 0.16413587, -0.14142676, -0.02964843, 0.07149458, -0.13962443, 0.27831650, -0.20233984, 0.04123445, -0.02126957, -0.00097775, 0.14680429, -0.12199669, -0.01010882, 0.16855541, -0.06547519, -0.10005842, -0.05194547, -0.00568746, 0.05246812, -0.14681993, 0.09972943, 0.09123168, 0.18681984, 0.00127463, -0.07306521, 0.09806600, -0.10516560, 0.17954277, -0.01669100, 0.16520080, 0.12202272, 0.04016542, 0.06318895, -0.16237094, 0.13093150, 0.15113914, 0.18905868, -0.09674404, 0.05607316, -0.27176252, 0.11199251, 0.00210575},
  {0.18180656, -0.13978446, -0.14679128, 0.13902058, 0.02043957, -0.10289614, 0.06380688, 0.07810114, -0.03077978, 0.09837507, -0.13923052, 0.03082572, -0.10564037, -0.18965326, 0.18349020, 0.09206659, -0.18430279, -0.00839137, 0.07108274, 0.13045269, 0.06536674, 0.11146622, -0.15965164, -0.03785833, -0.15079705, 0.17661792, 0.15191951, -0.13002284, 0.06317021, 0.08547143, -0.05411033, 0.11813325, 0.05251214, 0.03945626, -0.07038812, -0.06215415, 0.09859865, -0.06438880, 0.15149163, 0.04232318, 0.09142622, -0.07236392, 0.14261048, 0.06802050, -0.17357513, 0.03008788, 0.02471190, 0.20607968, 0.12422463, 0.05499524, -0.07521088, 0.12337403, -0.16727519, -0.07633770, 0.05205071, 0.16174331, 0.09152438, 0.10185278, 0.20947458, -0.04200453, -0.08961068, -0.13757072, 0.01116606, 0.12803769, 0.10437068, 0.11761088, -0.13959110, -0.09897278, -0.06357344, -0.13354443, 0.14142549, -0.01946428, -0.10859206, -0.01073471, -0.04614130, 0.00141068, 0.03424577, 0.07498058, -0.11553019, 0.11739474, -0.02282156, -0.02576040, 0.16002446, 0.10882898},
  {0.06460726, 0.03211863, -0.09166154, 0.19880390, -0.06774390, 0.15927666, 0.05242601, 0.07937481, 0.14997084, 0.19617021, 0.08046197, -0.12188014, -0.04193411, 0.12666772, 0.22944589, 0.08177563, -0.09116372, 0.07972641, 0.17588659, -0.14323804, 0.19954295, 0.06646144, 0.13821527, -0.15263225, -0.13503070, 0.22608888, 0.02589978, -0.03094693, -0.14967717, 0.22859268, 0.11522163, 0.11873892, 0.22001745, 0.07652206, -0.09609853, -0.17548978, 0.13852279, 0.05678982, -0.05741871, -0.03445855, 0.21727373, -0.05482050, 0.04085462, -0.16781281, -0.11390606, 0.01344053, 0.08347478, 0.02220080, -0.02561256, 0.17464909, -0.16872253, -0.06792087, -0.18352358, 0.06668790, 0.01115191, 0.04729899, 0.10617554, -0.03150536, -0.03914170, -0.01574957, -0.06846576, -0.11444514, -0.01689420, 0.08589932, -0.32490930, 0.04623531, -0.07509208, -0.07075990, -0.21150631, -0.12161590, -0.04364958, 0.02561924, -0.05289440, -0.02786880, -0.05677296, -0.02814594, -0.24318546, -0.07381018, -0.04928229, 0.16402303, -0.20444067, -0.07972003, -0.11646741, -0.18912566},
  {-0.08719501, -0.08907082, -0.20058194, 0.08086467, -0.07352512, -0.16366945, 0.01664574, -0.13532522, 0.11562920, 0.17873080, -0.00633584, 0.07086895, -0.02478633, -0.13771465, -0.11071720, -0.22251333, 0.16202840, -0.05393966, -0.22379778, -0.06016203, -0.02298535, -0.01200909, 0.10103273, 0.08130581, 0.12623566, -0.20189551, -0.12134313, 0.08854491, 0.07105774, -0.04607236, -0.07599123, -0.08709972, 0.07995535, 0.18986183, -0.06282048, 0.10903727, -0.07191969, 0.21612038, -0.08101059, 0.18604131, -0.08457247, 0.04562408, -0.00486169, 0.12548205, -0.09186345, -0.19767809, 0.05082334, 0.10763177, -0.18047979, -0.16218853, -0.07584003, -0.18264596, 0.21525739, -0.17589813, -0.12805445, 0.15490749, -0.09715233, 0.12301194, 0.09648752, 0.05825714, -0.13919576, 0.00013631, -0.01015786, 0.24116899, -0.02418667, 0.07845198, -0.03642334, 0.01929368, 0.05159135, -0.07953295, -0.01424587, 0.11706433, 0.21978317, -0.08985811, -0.02149076, -0.20829563, -0.14676394, 0.14216660, -0.13830359, 0.13937430, 0.08087318, 0.11572891, -0.08579932, 0.05721689},
  {-0.06402884, 0.08190056, 0.13552822, -0.21716414, -0.12985101, 0.16429259, -0.05893593, 0.14349906, 0.21421483, 0.09092849, 0.06770971, 0.03293374, 0.22357987, 0.09934421, 0.03962805, -0.06688951, -0.05844449, -0.13697276, 0.14961801, -0.06310557, 0.15346697, 0.02803108, -0.07129014, -0.10405754, 0.20441847, 0.01675737, 0.07688527, -0.09626961, -0.07898667, 0.14991538, -0.04200964, -0.14650998, -0.19498207, 0.14249104, -0.18080275, 0.14018254, -0.29291466, 0.12021326, 0.05076173, -0.01401168, 0.15775646, -0.00998109, -0.01311547, -0.09157875, -0.02415827, -0.21896432, 0.14902680, -0.08953478, 0.04610742, -0.16297705, -0.18057217, 0.00228590, 0.09187876, 0.06753334, 0.12692966, -0.16677234, 0.08801814, -0.10561088, 0.12002555, 0.00756659, -0.17891036, -0.06061252, 0.06165381, 0.14027637, 0.15873149, 0.20685792, -0.15683639, 0.15224852, -0.19520292, -0.02533248, 0.07985122, -0.04463262, 0.21414068, 0.14200442, -0.06255776, 0.01810298, 0.14175513, 0.00823466, -0.06841803, 0.14843118, 0.05347378, 0.13967797, -0.20757008, -0.17337221},
  {0.03309721, -0.13617380, 0.09505807, 0.15207662, -0.04630344, 0.05579542, 0.07756802, -0.17276792, -0.15014698, 0.06067250, -0.06915615, -0.08792176, -0.04258073, -0.12856847, 0.08033163, -0.12110087, 0.08179070, -0.12166056, 0.12635873, -0.03991695, 0.04923443, 0.16250697, -0.11044166, -0.05836689, 0.07048275, -0.15046386, 0.03287288, -0.02028223, 0.03410343, 0.01657945, -0.06900109, -0.10223172, -0.08046447, 0.05767472, -0.04717634, 0.07538085, -0.13193387, -0.05904845, 0.10351699, -0.10482186, 0.11794571, -0.10274540, -0.15714024, 0.16756780, 0.08801939, 0.10734493, -0.05395686, -0.01516447, -0.14359434, -0.10791351, -0.18460013, 0.04380583, 0.05209604, 0.00806423, -0.17456464, 0.13709950, -0.12146059, 0.11996119, -0.10661401, -0.06941752, 0.01619659, -0.10435285, -0.04527608, 0.18002757, -0.08337121, 0.16135885, 0.09557025, -0.10891869, 0.05603797, 0.06061988, 0.02211614, -0.16213544, -0.09953877, -0.03141234, 0.10291424, 0.07728315, 0.06048708, -0.07252020, -0.04024785, -0.06034375, 0.15925729, -0.08243079, 0.16358919, 0.08384489},
  {-0.00750839, 0.12897372, -0.09930300, -0.00457898, 0.11349425, -0.09919906, 0.07687841, -0.02378476, 0.16503139, -0.11489275, 0.11958783, 0.07106317, 0.07959894, -0.06844237, 0.19513400, 0.10891911, 0.10039015, 0.11757433, 0.00642266, 0.01932451, 0.05653213, 0.16858430, 0.19582123, -0.01510990, -0.33685356, -0.01396426, 0.12489630, -0.23663726, 0.00036233, 0.02476181, -0.20494039, -0.03015570, 0.06112895, 0.17898931, -0.06153434, -0.09127972, -0.01960647, -0.13870189, 0.00406070, -0.11184232, 0.21337870, -0.11090140, -0.20932472, 0.15510018, 0.06067947, 0.01263437, 0.02833061, 0.02824262, -0.04142006, 0.12298056, 0.06243768, 0.12894846, 0.11397649, -0.13852157, -0.03814174, 0.03686636, 0.09465613, -0.12032847, -0.24533042, -0.01517701, -0.13192599, -0.06149133, -0.10762195, -0.22730953, 0.07741425, 0.22872436, -0.17535168, -0.17998396, 0.05732807, -0.07101747, 0.04598134, 0.12521106, 0.19068475, 0.14110579, 0.07498018, 0.08552890, 0.07627533, -0.10400563, -0.23861307, -0.06881480, -0.13583489, 0.03020547, -0.19327219, -0.04302090},
  {0.18819201, -0.02885495, 0.13502528, -0.11452362, 0.15675279, -0.09140947, -0.16289559, 0.14177477, 0.15762401, -0.08432055, 0.13164626, 0.02688644, 0.14615738, -0.16131152, -0.17140317, 0.08774898, -0.08037050, -0.14328724, -0.02522382, 0.01471253, -0.01403986, 0.11055771, 0.00794727, 0.10618714, 0.16494854, 0.04244735, -0.13367578, -0.19095851, 0.16802201, 0.15129417, -0.16688299, 0.17767942, 0.03751118, 0.10337273, -0.09768131, 0.14731386, 0.10673979, 0.12329969, -0.07552594, -0.16678764, -0.03653549, 0.08461689, -0.11037961, 0.03033407, 0.03669355, 0.09230488, -0.15618840, 0.15934122, 0.12018775, -0.16888852, -0.00223560, 0.04057429, -0.04409924, -0.06993566, -0.00776215, 0.15086839, 0.05429346, -0.10485026, -0.09489065, 0.03318796, 0.17710620, -0.16208708, 0.12702797, -0.06449364, -0.09712125, 0.06712519, 0.02841707, -0.07006054, 0.08420890, -0.11302035, 0.01253800, 0.09519666, 0.03583101, 0.18618977, -0.17981531, 0.07620402, 0.16750441, 0.12564628, 0.02070531, 0.03059474, 0.19729817, 0.09728070, -0.09371738, -0.11533275},
  {0.02708319, -0.14840463, -0.18347576, 0.18928348, 0.12389856, 0.12554285, -0.16411063, -0.01925064, 0.01914754, -0.13781941, 0.14114559, 0.06528799, 0.14526108, 0.14661761, 0.02524980, -0.01622983, 0.15635465, -0.03256945, -0.15620656, 0.17314219, -0.08497722, -0.00422526, -0.10897399, 0.14226952, 0.13128310, -0.17727789, 0.15582474, 0.07681999, 0.14850451, -0.06083158, -0.06339584, 0.16869006, 0.07455452, 0.14259371, 0.08565029, -0.14088559, -0.21897747, -0.16082290, -0.14548965, 0.11225326, 0.10382156, -0.07139377, 0.15572028, -0.01724685, -0.01937341, 0.02331712, 0.01992411, 0.10302019, 0.13034192, -0.12811251, 0.06891244, 0.14572814, 0.07402375, -0.18062076, -0.09909650, -0.09234543, -0.02170998, 0.03393212, -0.02922803, 0.18375424, 0.14221475, 0.03704303, 0.04545154, -0.07611135, 0.17953523, 0.05812241, -0.06292833, -0.08741481, 0.07286627, 0.02787761, -0.13735749, 0.08150262, -0.00148351, -0.05029085, 0.20371458, 0.18316063, 0.15018807, 0.10100128, -0.10618223, -0.02004540, 0.17910950, 0.13768581, -0.01837518, 0.10496067},
  {-0.21388540, 0.18349272, 0.11534435, -0.17816694, 0.03632947, -0.13850030, -0.00415063, 0.16308972, 0.08701000, 0.25708079, -0.12654369, -0.19586958, 0.03004936, 0.01401706, -0.17150389, 0.21927494, 0.16655709, 0.04046791, -0.00406765, -0.13058494, 0.18923661, -0.18264680, 0.03709342, 0.01991424, -0.11541341, 0.20110801, -0.21372505, 0.09887383, -0.26391095, 0.10058562, -0.07886761, 0.03667955, 0.07751086, 0.19866790, -0.04948199, 0.02063513, -0.23956256, 0.29064104, 0.30424288, 0.26485589, 0.03259644, -0.01117649, -0.15832162, 0.09536553, -0.16101666, -0.29490918, -0.10739738, -0.28253469, -0.00073537, -0.01021801, -0.21830349, 0.11531556, 0.19503552, -0.10808089, -0.04088239, 0.01066253, -0.04347029, 0.10970493, 0.06975970, 0.32972142, -0.01883861, -0.17187630, 0.01064733, 0.10697656, -0.09557732, 0.01544550, -0.11138804, -0.16448519, -0.07391442, -0.01887433, -0.23425297, -0.09391196, -0.19638649, 0.08605072, 0.07511905, -0.02994094, -0.03636222, -0.05414628, -0.09620197, 0.26345176, -0.13987572, 0.16079722, -0.11162836, -0.12409662},
  {0.14243548, -0.03142203, 0.16084978, 0.01294718, 0.20310725, -0.06252585, -0.01175511, -0.05412035, 0.21454665, -0.13392566, 0.24020615, 0.12718377, -0.06858383, 0.10779402, 0.09328524, 0.12423353, -0.17114986, -0.19167003, 0.06169822, -0.05524039, 0.04248212, 0.12852654, -0.08921468, 0.15226588, -0.39981076, -0.14415571, -0.01525996, -0.14747573, 0.13739319, -0.01058573, -0.02295284, -0.00120097, -0.07796628, -0.00108877, 0.16554409, 0.09258413, 0.01390090, 0.17942092, -0.14694797, 0.03365222, -0.19538265, -0.11680956, 0.00826065, -0.17240919, 0.14798567, 0.08337905, 0.13607934, 0.21518289, 0.02949586, 0.06960730, -0.07830511, 0.11300214, 0.01195838, -0.15302667, 0.05585753, -0.23359117, 0.08917852, -0.10930565, -0.10254915, -0.10907352, -0.10926712, 0.16885413, -0.11458319, -0.19056413, 0.05117362, -0.05160989, 0.12380073, -0.00521380, 0.07908516, 0.19489314, 0.01431723, -0.23206900, -0.14987333, 0.22906008, 0.03627813, 0.17874503, -0.08534444, -0.08781728, 0.03240238, 0.18085916, -0.17632657, -0.07516114, 0.05949461, 0.04098898},
  {0.09991024, 0.01277349, -0.08224082, 0.24313205, -0.02613438, -0.26733047, 0.11800580, -0.12266981, 0.08632711, 0.02715567, -0.09161558, -0.14428081, -0.12486292, -0.10681543, -0.11280101, 0.04171754, -0.07486468, -0.19941455, -0.07401901, -0.14913860, -0.07418457, 0.13589720, 0.00408778, 0.10747712, 0.25676307, -0.05421904, -0.06046133, -0.10315982, 0.03944512, -0.00874928, -0.02005683, 0.11436132, 0.04357639, 0.05756768, 0.13965583, 0.24019967, -0.02475784, -0.04024646, 0.04391799, -0.02523282, 0.06087293, 0.00053682, -0.03105909, -0.06921883, -0.06666155, -0.00750159, 0.00780772, -0.12358829, 0.12984902, 0.01434714, -0.04535646, -0.06636460, 0.16399902, 0.08715436, 0.06256513, 0.21316217, -0.18472822, -0.03544054, 0.14251134, 0.01556596, 0.25987706, 0.04932148, -0.06966469, -0.08908994, -0.10687111, 0.03844940, -0.00203439, 0.29083705, 0.04103589, -0.00773542, -0.01197925, -0.07900300, -0.18203489, 0.07365789, 0.06949557, -0.04719304, -0.15829833, -0.22077966, -0.09491657, 0.14547536, 0.11839735, 0.07040438, 0.23529543, 0.01942514},
  {0.00612297, 0.04047041, -0.11364812, -0.07480150, -0.00908546, 0.07304786, 0.01452889, 0.14485289, -0.13277598, 0.03772347, -0.03387735, 0.13511927, -0.02890824, 0.11489211, -0.05928759, 0.01985332, 0.01278805, 0.16380982, 0.09102008, 0.12847821, 0.09017645, -0.01346850, 0.15847257, -0.09327579, 0.09566478, 0.09801524, 0.07048898, -0.10384668, -0.15277870, -0.03047545, 0.03389975, -0.14774881, 0.14544603, 0.12997492, 0.12470649, 0.07183716, 0.09598960, 0.14751291, -0.00710413, -0.09626862, 0.06556172, 0.09725873, 0.14063868, -0.08624396, 0.07076490, 0.04108487, -0.07848758, 0.07194926, 0.06932481, 0.01663478, 0.00798325, 0.10168888, -0.05591778, 0.03066596, 0.16548927, 0.00494771, -0.15080564, -0.00825233, 0.13773912, -0.01999782, 0.11658330, 0.07196306, 0.15079084, 0.12820014, -0.10303354, 0.03390381, -0.03217798, -0.11798035, -0.00735392, 0.08524326, 0.16250823, -0.00086424, -0.03996098, 0.06877206, 0.11308514, 0.13748378, 0.08893748, 0.11863589, 0.01760595, 0.04137079, -0.02967043, -0.14786632, -0.11789233, -0.16437271},
  {0.01266798, 0.22405212, -0.17865996, 0.08866708, -0.03074926, -0.31598252, 0.09774584, 0.03039540, -0.11789018, -0.06915905, 0.19407901, -0.13244843, 0.03173357, -0.13524640, 0.00691368, 0.10172486, -0.16916259, 0.13904914, 0.09641726, 0.15586878, 0.14565240, 0.23950985, -0.05768499, 0.18275397, -0.10981218, 0.18003187, -0.13619928, 0.10550731, -0.12336657, -0.17316243, -0.04234906, 0.06395195, -0.10778499, -0.12952988, 0.09274784, 0.07970671, -0.01549122, 0.06159422, 0.09423504, -0.10027516, 0.10727545, -0.08168302, -0.00957333, 0.02056008, -0.03862032, -0.05031854, -0.05062336, 0.03231198, 0.16393048, -0.04511164, 0.08692101, -0.21483506, -0.16074173, -0.10560453, 0.00327850, 0.04204248, 0.11892114, -0.10444961, -0.12752488, -0.08719596, 0.02904134, 0.03898776, -0.16990303, 0.01554674, -0.03785023, -0.07641479, -0.07910218, 0.14347553, -0.11765183, 0.03970660, 0.06364732, 0.00159910, -0.11928169, 0.04872295, -0.01955696, 0.12954977, 0.03328583, 0.19088338, 0.06136532, -0.04264765, 0.03339073, -0.01434703, 0.04504194, -0.11051427},
  {0.05927196, -0.12150805, -0.13656922, 0.01238619, 0.10428317, 0.03933585, -0.13865624, -0.06879091, -0.15849015, 0.13758291, 0.05606304, -0.00223624, 0.02409529, -0.09443476, 0.12756303, -0.12180967, -0.08548445, 0.03856414, -0.07182838, -0.05232890, -0.11255468, -0.10144323, 0.17322439, 0.05394733, 0.15806755, -0.04703702, 0.00966558, 0.04098577, 0.06571586, 0.01290077, -0.07679696, -0.13385673, -0.11896510, -0.15252070, 0.15335906, -0.10846716, 0.12680107, -0.13024183, 0.07354292, 0.07193538, -0.00943971, -0.07512842, 0.01407859, 0.07360657, -0.07118380, 0.07102034, -0.15581870, 0.03795735, 0.14356183, -0.11717270, 0.04794877, -0.09979584, 0.05919264, 0.16051693, -0.05074419, -0.13722114, -0.15626685, 0.02148713, 0.08342886, -0.14306673, -0.08292963, 0.05489120, 0.01260534, -0.04934876, -0.04606980, -0.13087693, 0.14320433, -0.06838693, -0.15610644, -0.12340845, 0.16776988, 0.13740496, -0.09819145, 0.14252238, -0.09622043, -0.12685132, 0.04269301, -0.02432405, -0.06800240, 0.13918424, 0.15873010, -0.10850342, 0.00039135, -0.04399155},
  {0.02388155, 0.25891262, 0.18583930, -0.08888183, -0.10386673, -0.10700778, 0.06083470, -0.13343054, -0.05961619, -0.09098691, 0.14036547, 0.14879920, -0.05397711, -0.09721396, -0.18432866, 0.13010658, -0.14001435, -0.00779565, 0.12408523, 0.13647741, 0.00743485, 0.08286680, -0.08977724, -0.09425255, -0.04065729, 0.08306812, 0.08571262, -0.02557777, -0.13090733, -0.08602369, 0.07624902, 0.01164006, 0.02474236, 0.00189480, 0.08298683, 0.00999570, -0.16033155, 0.22196147, 0.16494630, 0.02162452, 0.09522577, 0.20002083, 0.02448429, -0.14646173, 0.06049924, 0.06255825, 0.17507401, -0.12136231, 0.15061250, -0.16035864, -0.11529844, -0.09076479, -0.04163483, -0.07324340, 0.01088548, -0.07062502, 0.04749958, 0.02087830, 0.11683044, 0.05615068, 0.12258407, 0.12029485, -0.08820384, 0.02667633, 0.00162068, -0.08965509, 0.01715197, 0.05851452, -0.12848601, -0.14643508, -0.06029001, 0.12281623, -0.15573129, -0.03933427, 0.07640517, 0.11651972, -0.00190073, -0.01532706, -0.01506681, -0.13015001, -0.04183400, 0.15194638, 0.07845257, 0.13420299},
  {-0.14616200, -0.14133134, -0.07973488, 0.13466106, 0.08275505, -0.14363302, 0.02437911, 0.14940505, -0.02895250, -0.14528677, 0.10988317, 0.14907207, 0.05823234, 0.03193647, -0.11262868, 0.10008207, 0.13955605, -0.05770706, 0.09753414, -0.07394869, -0.09088036, -0.12906231, -0.12139737, -0.11582074, 0.03327822, -0.02050502, 0.14622039, 0.11677784, 0.14891367, 0.09094809, 0.02131829, 0.11809310, -0.10516486, -0.11679155, -0.00272261, 0.07602940, -0.16593058, -0.18132812, 0.02624791, 0.15867500, 0.09531003, 0.05418663, 0.14890760, 0.02179132, -0.12335713, -0.11770672, 0.08022150, 0.09073550, 0.02863500, -0.04952703, 0.15378839, 0.16022262, -0.14641720, 0.06430586, 0.16045524, -0.09494710, 0.06537565, 0.16792578, 0.08005442, -0.02200714, 0.04149276, -0.12132683, -0.09912350, -0.12239931, -0.12970896, 0.10682493, -0.09427670, -0.07679524, 0.09037906, 0.10880421, 0.02916289, 0.06026346, -0.15986617, 0.06326129, 0.00267541, 0.15651736, 0.00387164, -0.05741524, -0.07738864, 0.13891526, 0.01533439, 0.11634342, -0.10097580, -0.07398920},
  {0.09521355, -0.12058985, 0.15341112, 0.08240366, -0.08789981, 0.03731194, 0.02894654, -0.08811129, -0.03793436, 0.15076597, 0.07366934, -0.12299010, 0.19822486, 0.15047632, -0.10849155, -0.00105563, 0.00400174, 0.11660790, 0.12730323, 0.04083052, 0.10487045, 0.02137249, 0.13607733, -0.06745371, 0.12007528, 0.15547048, 0.09691855, 0.10520411, -0.10253664, 0.03105295, -0.02441709, -0.05785302, -0.08113988, -0.07813531, 0.15554011, -0.10428339, 0.06560345, 0.10514316, -0.15616637, -0.12580620, 0.17381266, 0.21385777, -0.15791404, 0.05034275, 0.10018794, 0.09785328, -0.12238172, -0.11691906, 0.03021958, -0.06231348, -0.02298543, 0.11136408, 0.13595392, 0.11800341, 0.07209638, -0.11863337, -0.20184025, 0.16955893, -0.12638080, 0.07355854, 0.02739418, -0.12686338, 0.00393907, 0.02265955, 0.16027541, -0.03500048, 0.00386825, -0.01652746, -0.18023494, 0.07830530, -0.06056706, 0.14933087, 0.06652281, 0.07367001, -0.10586645, 0.14929432, 0.08469500, 0.03792297, 0.06157669, -0.01667373, -0.15388240, 0.13486530, -0.11347532, 0.03256544},
  {0.12876080, -0.16502334, 0.15414770, 0.15966976, 0.00299410, 0.01679309, -0.13323639, -0.12792151, -0.09890054, 0.05546795, 0.16736232, -0.11843070, -0.11914783, -0.03382783, 0.09162666, 0.07552376, 0.02763664, -0.09860530, -0.07017022, -0.04784438, -0.15553123, -0.06524467, -0.11883548, -0.00737998, -0.15243198, -0.02132923, -0.17515364, 0.07451966, 0.11262453, 0.17487569, -0.09869250, 0.19702603, 0.10963546, -0.01893103, 0.04052829, 0.19491096, 0.08573645, -0.05021398, 0.17048971, -0.01031873, -0.13441145, -0.02956877, 0.23669973, -0.14058462, -0.04446204, 0.15892991, 0.04475691, 0.03055643, -0.19876978, 0.14272061, 0.16881756, -0.06757063, -0.01978268, 0.07086165, 0.00644952, 0.16495852, 0.13468844, -0.06316221, -0.16048801, -0.09899928, 0.18644878, -0.02686337, -0.12436908, -0.10450310, -0.18061203, -0.08559179, 0.11955479, 0.19441259, -0.01745013, 0.14201809, -0.09407154, 0.06890061, -0.10976243, 0.18440983, -0.08898407, 0.05502242, -0.02943164, 0.01390306, 0.12586713, 0.16665517, -0.11162360, -0.02955986, -0.04127701, -0.24846280},
  {-0.20896278, -0.17960541, -0.04854136, -0.11554445, 0.01937670, -0.19382975, -0.14399627, 0.06889556, -0.14624207, 0.02026589, -0.22996514, 0.24224573, 0.03138240, -0.02367043, -0.07260153, 0.05708543, -0.08244178, 0.04466613, -0.23538789, 0.01062721, -0.19629960, -0.03241517, 0.23382926, -0.09429307, 0.26148981, -0.16820654, 0.30506772, -0.12028284, 0.05991756, -0.02495583, 0.17452230, -0.26002815, -0.03045772, -0.13071066, 0.15321720, 0.24261211, 0.00048495, -0.21643414, 0.05705190, -0.11665079, -0.13065110, -0.03876758, 0.13787018, -0.04187879, 0.01420029, 0.17779189, -0.18125956, 0.09212041, 0.02229200, -0.01164123, -0.06949111, 0.10892446, 0.00943780, -0.05609147, 0.08741908, 0.08534278, 0.26659358, 0.20964089, -0.14667182, -0.21226282, 0.33161491, -0.12814498, -0.03831953, 0.02035419, 0.07304591, -0.18725756, -0.05645050, 0.24923868, 0.08159629, -0.14247422, -0.07903870, 0.25814778, 0.06515732, 0.01626535, 0.16302049, -0.09734694, -0.19279347, 0.19327742, 0.00309772, -0.18583049, -0.00799608, 0.18114738, 0.12828021, 0.11306211},
  {0.18594980, 0.06330062, 0.03510031, 0.02206116, -0.14624824, -0.00533994, -0.09996802, -0.15994212, -0.07580257, 0.13638300, -0.15543379, -0.15961124, -0.21429768, -0.00974022, 0.01229691, 0.00662996, -0.14042114, -0.08300061, -0.00616939, 0.06800336, 0.19982657, 0.20076020, -0.05758229, 0.09323160, -0.07352728, -0.04457360, 0.13485515, -0.11576433, 0.12786746, 0.00478242, -0.03260053, -0.04812124, 0.10825439, 0.06954280, -0.09507135, 0.18649134, 0.16059770, -0.02054246, -0.19060227, 0.12954186, 0.03914759, 0.00133364, 0.10584293, -0.16579138, -0.01032026, 0.03543804, -0.08878697, 0.07054659, -0.08129044, -0.15551199, -0.13482897, -0.16814683, 0.17677273, -0.08688949, -0.12332565, 0.22836682, -0.15567940, 0.14507569, 0.06662507, -0.05282762, 0.07300742, 0.11598378, -0.08127274, -0.12651278, -0.02573734, -0.09649553, -0.06245708, 0.15711233, 0.02353932, 0.08737968, 0.01262928, 0.18503892, 0.01970657, 0.08580136, 0.02021686, -0.00525606, -0.14275193, -0.06884708, -0.02353073, 0.18459119, -0.14758228, 0.16707136, -0.03985485, -0.17123161},
  {-0.06407520, -0.04569742, 0.02255630, -0.12138082, 0.05887613, -0.14133815, -0.08669621, -0.12747420, 0.08705311, -0.10410956, -0.14104292, 0.14199398, 0.05072166, -0.02845906, -0.04612777, 0.14040537, -0.02721364, 0.11093102, -0.14052361, 0.03483772, 0.04804635, 0.15697470, -0.09251030, 0.06793718, 0.07567786, 0.16900878, -0.15466471, 0.06583147, -0.04546332, 0.09121189, 0.03713453, -0.09121016, -0.03394900, -0.04912962, 0.01755441, 0.15096830, 0.19891752, 0.10645861, -0.14959641, -0.00632210, -0.02104769, 0.04185888, -0.17210965, 0.10356536, 0.06305774, 0.14653464, 0.28698641, -0.19712760, -0.20333031, -0.12350280, -0.18427263, 0.07890008, -0.11696235, -0.19284149, -0.10807878, -0.00894991, 0.04145750, 0.25242996, 0.12541330, 0.16409436, 0.25614062, 0.01661140, -0.02499864, -0.13541828, 0.15701723, -0.10189998, -0.04744319, 0.11131498, 0.14896576, -0.05335486, -0.00496428, 0.09061471, -0.05443322, -0.01927574, 0.00221015, -0.00638945, -0.03750987, -0.14659861, -0.03228477, 0.02330925, -0.13677992, 0.29490420, 0.17335390, 0.11277443},
  {-0.09865728, -0.01793766, 0.10182140, 0.11790110, -0.10688696, 0.03072449, -0.06673671, 0.05052168, -0.03999181, 0.15232348, 0.00392427, 0.03752736, 0.09777667, 0.08614015, 0.01807271, 0.15790230, -0.03187614, -0.08957484, 0.11496444, 0.04802480, 0.10575060, -0.11476278, -0.25486368, -0.23154770, 0.07307144, 0.08108454, -0.13772352, -0.02448222, -0.07225508, 0.20701739, -0.00109975, 0.13176934, 0.15909368, 0.06558035, -0.06791660, 0.20863543, 0.12664858, 0.06204157, 0.20208965, -0.07638262, 0.01819620, -0.02728990, -0.10154393, -0.17145728, -0.08231365, 0.14503643, 0.11999582, 0.00159196, 0.08186383, -0.03038572, -0.14450963, -0.06627307, -0.08884341, 0.02732329, 0.04203307, 0.06940530, 0.19584082, 0.23719199, -0.13895722, 0.08476161, 0.11874504, -0.06174187, 0.04402600, 0.12399285, -0.13350971, 0.07076135, 0.03064335, -0.08340649, 0.09700643, -0.05761958, 0.07901448, 0.15412439, -0.01395453, 0.12019949, -0.10706642, -0.01375736, -0.00522589, -0.13435262, -0.12830694, 0.14273851, -0.03292612, 0.14986371, 0.12660111, -0.11908796},
  {-0.09144804, -0.30933753, 0.07020672, 0.15835477, 0.12037007, -0.05043054, -0.19286174, 0.11464446, -0.10108340, 0.00290457, 0.10365088, 0.01133318, 0.14027241, 0.04620950, -0.01656305, 0.01296123, -0.18362413, -0.02484036, -0.09949524, 0.08716707, 0.16205801, -0.09597629, 0.03030887, -0.14693080, 0.10835752, 0.13370159, -0.12874436, 0.14354090, 0.09206684, 0.07229704, 0.05656819, 0.08825707, -0.10305747, -0.07539649, -0.04821617, 0.19340757, 0.14361665, -0.10936020, 0.26299766, 0.13060579, 0.01760516, -0.16560172, 0.05107354, 0.05439384, -0.01302436, -0.09495106, 0.20855792, 0.00726050, -0.05674201, 0.09215675, -0.03686797, 0.02389277, -0.11597792, 0.10060178, 0.04054505, -0.01045145, 0.02124759, 0.14502624, 0.28069308, 0.10619743, -0.12427174, -0.16356225, 0.17561503, 0.12812948, 0.17390040, -0.15652156, 0.04312881, 0.16600621, -0.02833779, -0.22728135, 0.09591315, -0.03472594, 0.16132709, -0.07661656, -0.00655886, -0.19277726, 0.10204600, -0.18985537, 0.06619719, 0.12622555, -0.05579026, -0.12676857, 0.18741329, -0.15655547},
  {0.06548049, 0.06965542, 0.19546235, 0.19793333, 0.22850654, -0.10921530, -0.11662237, 0.09634825, 0.14293307, -0.17035885, -0.06759493, 0.09701261, 0.02965200, -0.07945199, -0.05928437, 0.22672987, -0.29993606, -0.12735300, 0.13669962, 0.14429441, -0.28148070, 0.07249232, -0.10504745, -0.11979932, -0.16688630, -0.11606931, 0.00517285, -0.08078164, -0.07619351, -0.15525091, -0.07458448, 0.23623113, -0.07359252, -0.01551026, 0.04691550, 0.21706983, 0.06561296, -0.12067295, 0.07503831, 0.06539967, 0.06888963, -0.14665103, 0.09300095, -0.19047780, 0.04925469, -0.03239031, -0.20071162, 0.03825994, 0.04331832, -0.05839107, -0.09894803, 0.00361586, -0.06004979, -0.14099969, -0.09292075, 0.01401020, -0.03376837, -0.08239103, 0.18189447, 0.10734592, 0.03952321, 0.09626760, 0.13974537, -0.01362730, -0.09624514, 0.12657090, -0.14517213, -0.05086706, -0.15932930, 0.16822374, -0.03965738, 0.05668054, -0.23115791, 0.05970402, -0.10069676, -0.02645708, -0.11876636, -0.25165352, -0.07428993, -0.10765389, -0.05160439, 0.20139010, -0.05196217, -0.22419669},
  {0.18877743, -0.01871954, -0.11073622, 0.01021818, 0.16015857, -0.05105845, -0.20795114, -0.03522136, 0.17481743, 0.17442220, 0.00264812, 0.18930253, 0.12767190, 0.05821466, 0.07915806, -0.01316651, -0.05329312, 0.14749116, -0.01583825, 0.11266974, -0.03341242, -0.18280631, -0.10282674, -0.00261609, -0.10725224, 0.14758264, 0.03131030, -0.13609408, -0.07754426, -0.00674490, -0.00889353, -0.09594536, -0.01003573, -0.14322366, -0.31191003, -0.16460367, -0.02236240, 0.07056850, 0.19464250, -0.12125211, -0.01444085, -0.01837038, 0.09069963, -0.13569710, -0.09383899, -0.27667442, 0.02259877, -0.08029819, -0.16613610, 0.01108164, 0.00355199, 0.03968909, -0.17790695, -0.13242848, 0.05299382, 0.07237265, 0.06906602, 0.17947160, 0.13953558, 0.14576878, -0.13405834, -0.09308098, -0.05250054, -0.15514986, -0.12523854, -0.16349253, -0.02166399, -0.12525901, 0.14487042, -0.03743248, -0.04603187, -0.16127749, 0.01867671, -0.16888271, -0.03437451, 0.11777277, -0.03649141, 0.10213935, 0.02107130, 0.09511860, 0.14829502, -0.00311656, 0.15491791, 0.02764091},
  {0.15902616, -0.12773098, 0.10468020, 0.08140603, 0.10875028, 0.20245273, 0.06867348, -0.05328506, 0.17958261, -0.01527000, 0.05693727, -0.16561382, -0.00997038, -0.11330935, 0.00587697, 0.08470894, 0.02518464, -0.11633684, 0.21123026, 0.15603802, 0.17251915, 0.13281591, -0.11697988, 0.12440116, 0.09261226, 0.20539625, 0.03884603, -0.01865771, 0.07776070, 0.11468016, 0.00161873, 0.13851391, 0.06557529, 0.03219365, -0.01042609, -0.06208019, 0.08850965, -0.07569513, 0.18013053, 0.06712075, -0.12442838, -0.15003142, 0.10951412, 0.07003980, 0.08520438, -0.20255782, -0.16461316, -0.12598039, 0.08204677, 0.03014225, -0.18717399, -0.10915505, 0.04433711, -0.07045519, 0.01082417, -0.08441008, 0.02077693, 0.01935002, 0.10969844, -0.06449889, 0.07544270, 0.13441230, 0.08007201, 0.01450788, -0.02099331, 0.13632490, 0.06708649, -0.02066291, 0.11535527, 0.14634094, -0.17864013, 0.06198831, 0.05729802, -0.07617179, 0.10496000, -0.08978426, -0.02485254, -0.01074401, -0.24293102, 0.01632944, -0.18974529, 0.07935661, -0.18320176, 0.05455187},
  {-0.10370558, -0.05960894, 0.01527860, -0.08103728, -0.15656504, 0.00902194, -0.10411793, -0.04437194, 0.03517669, 0.11486632, -0.09687526, 0.08819459, 0.03525207, 0.00837854, 0.05217811, 0.13953887, -0.07576337, -0.06765705, -0.04112466, -0.00572213, -0.08823558, 0.10044377, 0.05762533, 0.06957809, -0.01067296, 0.06682528, -0.15701441, -0.06809568, -0.05930840, 0.05893275, -0.15544452, -0.05425341, -0.04923117, -0.03228961, -0.02484929, 0.18899581, 0.16058749, -0.10833289, 0.04069856, 0.11015537, 0.04711008, -0.13735043, -0.13624030, -0.10428897, -0.07958242, 0.02574902, 0.07933693, -0.11799472, -0.08098296, 0.17928031, -0.06530997, 0.04571650, -0.12417862, 0.11632084, -0.13701999, -0.09524982, -0.09312452, -0.07596190, -0.08882555, 0.09161202, 0.18182860, 0.09944661, 0.06996082, -0.03555346, -0.07759233, 0.06634289, 0.15612701, -0.06418435, 0.13904840, -0.00023374, 0.11046930, 0.12686089, 0.13723812, -0.15992843, 0.05383295, -0.00097250, 0.00064858, 0.05294703, -0.10177866, -0.16378435, 0.11275023, 0.17585842, -0.05804145, 0.00320954},
  {0.02400619, -0.04500810, -0.04143853, 0.15205310, 0.19899391, -0.13769254, -0.08005328, -0.09342422, -0.15924905, -0.21408662, 0.06384258, 0.12414089, -0.07071994, -0.05698022, -0.16185921, -0.05621175, 0.00951024, 0.01445906, -0.14194639, 0.14125849, 0.13919452, 0.21123303, -0.01765833, 0.10671741, 0.04588939, -0.12616499, 0.02012366, -0.14062029, 0.05588464, -0.08723933, -0.20211798, -0.02188628, -0.12821083, -0.03680811, 0.12583618, 0.14243521, 0.08376462, 0.12091811, -0.10888643, 0.15905577, -0.17507201, 0.08035459, 0.04715043, -0.03864106, 0.10821503, -0.00827661, -0.23854195, 0.03229807, -0.17435442, 0.13156763, -0.06527772, 0.01854464, -0.03043815, 0.12645641, -0.06084582, 0.15285093, 0.01362569, -0.03270717, -0.12625547, -0.13446389, 0.07017661, -0.17104055, 0.05969184, 0.18526584, 0.03174546, 0.04686292, -0.06681091, -0.11907119, 0.02908208, 0.02367243, -0.06430794, 0.07400574, -0.04047215, 0.08266529, -0.16588578, -0.06660504, -0.09983203, 0.06324383, -0.01031875, -0.12733628, -0.07855066, -0.13183773, -0.00917795, 0.05351690},
  {0.08344296, -0.00794716, -0.06901016, 0.10560037, -0.12054095, 0.15472263, -0.05196599, -0.13110796, 0.05511663, -0.13781808, 0.02614849, 0.05267529, 0.00375592, 0.09388168, 0.20513144, -0.07652381, -0.13977981, 0.06315730, 0.01680285, 0.15564552, -0.20060308, 0.00684629, -0.13394184, 0.14499511, 0.01763109, -0.15220749, 0.17054234, 0.09819309, 0.00748950, 0.05872364, -0.28283471, 0.11630351, -0.02871248, -0.16173893, 0.12051142, 0.15482396, -0.14032459, -0.05433834, 0.05889857, 0.01598953, -0.07517313, -0.01184493, 0.14347246, -0.17946939, -0.03914585, -0.07507431, -0.02278746, 0.10554229, -0.12051053, -0.13496584, 0.00596504, -0.00616443, -0.04996668, 0.06227922, 0.15151025, 0.18234839, -0.08522233, -0.11912822, -0.00019098, 0.11475734, -0.08325427, 0.04234040, 0.02931818, 0.06107355, 0.09137209, 0.01232694, 0.01096505, -0.10568767, -0.18833126, 0.02065042, 0.13880719, 0.05447486, -0.08864252, -0.04748629, -0.05068831, 0.00486310, 0.06738618, 0.08242043, -0.00310902, 0.01395098, 0.05912812, -0.01560369, -0.11839299, -0.16482288},
  {0.14384697, 0.21648513, 0.12598723, 0.13927607, 0.15328626, 0.14076751, 0.08564898, -0.02313890, 0.10263278, -0.04637916, 0.00621952, -0.10943700, 0.08528393, 0.09747417, 0.02960931, 0.01022634, 0.07299002, -0.01295840, -0.10538573, -0.04689305, 0.05325785, 0.18614785, -0.11578461, 0.08179633, -0.14808764, -0.06178946, -0.04580989, -0.07583773, -0.10245796, -0.12309474, -0.06103026, -0.01693433, -0.07411816, -0.05335408, -0.03239839, 0.18050590, 0.02690607, 0.04625413, -0.04998997, 0.06054846, -0.05656435, 0.02458894, 0.12466341, -0.05473720, -0.19470581, 0.10266484, -0.10650173, 0.05375922, 0.18193188, -0.10532285, 0.16875012, 0.09965491, 0.07777524, -0.03545937, 0.05503720, -0.10862920, 0.01191254, -0.00774145, 0.13447365, 0.04883551, 0.03145054, -0.15158182, 0.15100956, -0.06524237, 0.21140440, 0.02061705, -0.08934053, 0.10724622, -0.14760648, 0.07785206, 0.02265030, -0.20955899, -0.10948192, 0.17241602, -0.09829687, -0.04671159, 0.05215245, 0.01846096, 0.03607086, -0.09939121, 0.07626636, 0.20918497, 0.18675724, 0.03291899},
  {-0.02238306, 0.22910371, 0.10492190, 0.02888148, -0.06723156, 0.04843352, 0.05789285, 0.12509181, -0.06418663, 0.07600292, -0.17106172, 0.10424358, 0.17507637, -0.05339381, -0.16928840, 0.04133929, -0.03313122, -0.00021587, 0.06989199, -0.04471545, 0.02977262, -0.08655951, -0.08201481, 0.10771944, 0.24224173, 0.04611023, -0.07004937, 0.00519696, -0.04291750, 0.12239168, -0.05176206, -0.14896481, -0.09512108, -0.10620686, 0.08443733, 0.16560125, 0.01017772, 0.14255327, 0.01972304, 0.17417265, 0.14519762, 0.14036050, 0.02858656, -0.07833777, -0.11045928, 0.14720275, -0.02473095, 0.09418703, -0.07466796, -0.13582282, 0.13656622, -0.11539196, 0.16055952, -0.07141353, 0.14057229, 0.09085506, 0.19980372, 0.17202206, 0.06033367, -0.06007599, 0.04852559, -0.02641366, -0.01445718, -0.09419487, -0.03701999, 0.12877804, 0.12048049, 0.08414002, 0.11944541, -0.02010229, 0.15314056, 0.14093627, 0.02841148, 0.08472539, 0.05503120, -0.08042993, 0.04589529, 0.15981613, -0.08363187, -0.14996959, 0.13648847, 0.16990116, 0.17588787, -0.11058684},
  {-0.24076235, 0.15260293, 0.01080607, -0.13698520, 0.14888421, -0.31155333, -0.07907119, 0.15732554, -0.00546172, 0.11341856, 0.01104646, 0.15796144, 0.14454560, 0.07812493, -0.14207785, -0.14025983, -0.04060873, 0.14052550, -0.00506234, 0.12199600, 0.00389975, -0.06819472, 0.04707953, 0.08134731, 0.05402646, 0.04667841, 0.20262751, -0.01179431, 0.14773573, -0.08453114, 0.02496917, -0.21615767, 0.00695888, 0.18429078, 0.13551185, -0.02156096, -0.00430728, 0.07935423, -0.31308162, -0.16275133, 0.04569368, 0.20917223, -0.07142656, -0.12658355, -0.19880602, -0.05606092, -0.09436186, -0.21449924, 0.06316885, -0.00257234, 0.06475596, -0.04490969, -0.19119856, -0.09702519, 0.24926513, 0.16286050, 0.13942684, 0.10699460, -0.01003809, -0.20445488, 0.07131483, 0.00888135, -0.15341868, -0.11727596, -0.14514387, -0.21649909, -0.01376395, -0.11112052, 0.07101557, 0.16917388, 0.10350452, -0.01782952, -0.00577406, 0.16215450, -0.05599075, -0.05205559, 0.14130855, 0.00131513, 0.15851820, -0.24814732, 0.17359933, 0.18066448, -0.01772345, -0.02302326},
  {0.16518968, -0.10685764, -0.12034718, 0.11263181, 0.00825904, -0.01149841, -0.14253780, -0.04117322, 0.09943319, -0.04167792, -0.09161208, -0.15370338, 0.02520251, 0.01001053, 0.01947124, -0.07268222, -0.13600875, 0.08710759, 0.02378809, 0.09617970, 0.09831981, 0.14888714, 0.15715095, -0.08128747, 0.21199691, -0.07423834, 0.18941903, 0.08711474, -0.10078402, -0.06058309, -0.08440383, 0.10783993, -0.09281883, -0.13725521, 0.05861137, -0.00928633, -0.16353628, -0.01798941, 0.15337461, 0.16523105, 0.17310357, 0.21550685, 0.05732437, -0.01292244, 0.08307406, 0.13349274, -0.04656751, -0.02104217, -0.17325212, -0.00688742, -0.00178992, -0.03439005, -0.16721055, -0.03976488, 0.04628788, 0.16264646, 0.01374692, -0.16859835, -0.13752025, 0.02912866, 0.06919784, 0.08550639, -0.19591250, 0.02927982, -0.16493940, -0.17680171, 0.13086371, -0.04137847, 0.08385588, -0.11759464, -0.05286349, 0.03846159, 0.02792719, -0.16083884, 0.10107467, 0.18784675, -0.10430925, 0.08760478, -0.15250097, -0.05972116, -0.09228431, 0.05016316, -0.02930283, -0.14566860},
  {0.07735565, -0.16721134, -0.11770785, -0.11392472, -0.12457608, -0.14513397, -0.01161005, -0.17524071, 0.10934725, -0.11421198, 0.02518855, 0.10964166, -0.02714753, -0.08867468, 0.01270310, 0.05482942, -0.13295493, -0.01942819, -0.10933503, 0.12175851, -0.04389702, -0.00744897, 0.00840411, -0.08735981, 0.07324042, 0.10890502, 0.04638833, -0.08314118, -0.14168337, 0.07382588, -0.05305087, -0.07368759, -0.05814698, 0.02642158, -0.00724576, -0.12227627, -0.03771554, 0.09527624, -0.01376117, 0.05055285, -0.18057902, -0.14244179, -0.17345373, -0.03500863, -0.14291944, 0.18694292, -0.09808393, -0.11497654, -0.12600450, 0.00236818, 0.16379012, 0.01540093, 0.02301641, 0.03088639, 0.14012787, 0.10474466, -0.06662827, -0.08597872, -0.15905054, 0.08866602, 0.18516952, -0.04271801, -0.08505506, 0.18532924, 0.14164092, 0.14525123, 0.09835573, 0.13296282, -0.06914046, -0.11479607, -0.03420321, -0.10892938, 0.01975420, -0.14634258, -0.16815265, -0.03231131, 0.14783089, -0.15019274, 0.10721968, -0.11843088, 0.15006903, 0.12670487, 0.15645379, -0.13234442},
  {-0.04827392, -0.01222198, 0.12705918, 0.17913914, 0.08149647, -0.05805052, 0.00220982, 0.08599693, -0.09599050, -0.05716691, 0.11249974, 0.14683677, -0.00803329, -0.17389376, 0.10330684, -0.10685994, -0.08507102, 0.03760169, 0.04370195, -0.00457872, 0.02730165, -0.04440568, 0.05645605, 0.20168966, -0.08976127, -0.15588924, 0.09251226, 0.01022384, 0.19233026, -0.20493443, -0.21702611, 0.08346544, 0.02417401, 0.10908749, 0.04547493, 0.12491587, -0.07544424, -0.21164028, -0.18099344, 0.17664677, -0.03262478, -0.14468092, -0.10352041, -0.02791649, -0.13895005, 0.10479181, 0.03950165, -0.03194913, -0.04211739, 0.15279554, 0.17713273, 0.15812616, -0.01020050, -0.03312117, 0.11784319, -0.00480515, -0.10986664, 0.02330920, 0.03152270, 0.16434717, -0.06103720, -0.09112009, 0.01757647, 0.15301339, 0.05950298, 0.00405671, -0.11134514, 0.07860242, 0.01600599, -0.02075368, -0.06756624, -0.08573417, 0.13381396, -0.00260105, 0.14687242, 0.16091195, -0.03110538, 0.11007075, -0.20106521, -0.17241755, 0.09314642, -0.19465804, -0.01657536, -0.00357297},
  {-0.00287034, 0.01824504, 0.30916828, -0.15786101, -0.02812737, -0.12593488, -0.10334516, 0.05545972, 0.05564530, -0.08656547, -0.05981024, 0.12250721, -0.13044991, -0.10304926, -0.07411510, 0.19499069, 0.04272471, -0.06311801, -0.10256373, -0.10847441, -0.03238505, -0.05230062, -0.07053293, 0.21811491, -0.17285486, -0.01495939, 0.08233723, -0.08597305, 0.04813747, -0.03084783, -0.01497702, 0.18190841, -0.19523972, 0.06605289, -0.11190014, 0.02831424, 0.03293005, 0.07117236, 0.16758151, -0.25939500, -0.15141316, -0.18344176, 0.05888474, -0.14574888, 0.00771097, -0.05671905, 0.11790815, 0.09042355, -0.06024361, -0.14427167, -0.06685973, 0.07015546, -0.02367236, -0.03335431, 0.08378711, -0.12314866, 0.06229891, -0.19682784, -0.14001635, -0.11049093, 0.14075261, 0.11144799, -0.06280199, 0.01124024, -0.01836450, 0.13436399, -0.09757635, 0.05825862, 0.04353846, 0.12830132, 0.11154525, -0.02344159, -0.05093083, 0.14766049, 0.24003972, 0.18363659, -0.04031506, 0.03705413, 0.03581914, 0.20326638, 0.00816883, -0.09653807, -0.14479712, -0.07760066},
  {-0.08517622, -0.14539768, 0.08095405, -0.13510199, -0.05474897, 0.14611657, -0.13082378, 0.15881751, 0.16535182, 0.20652886, -0.07376328, -0.13713072, 0.16705070, 0.00388743, 0.18358272, -0.02365002, 0.27576289, 0.10526639, -0.13315985, 0.10975812, -0.05490180, -0.07464525, 0.21037824, 0.14423510, -0.10676286, 0.05092289, 0.04382529, -0.05620180, 0.06849551, -0.02596698, -0.25371403, 0.15986949, 0.21651253, -0.12738238, -0.28320250, -0.15066737, -0.09781988, 0.16379368, 0.18315458, 0.06169214, 0.13991205, -0.08702904, 0.12796795, 0.00735566, -0.19164851, -0.01874058, -0.10008108, 0.07624984, 0.01676919, 0.08493580, 0.05577131, 0.07109738, 0.01283558, -0.17835291, -0.08810343, 0.09844864, 0.16695805, -0.09788958, 0.09588755, 0.21468908, 0.09704516, 0.00362057, -0.22127134, 0.12916982, 0.18315850, 0.18797660, -0.02829447, -0.21658286, -0.02777047, -0.06087206, -0.06822419, 0.03625293, 0.14589295, -0.18313418, -0.10813608, 0.02625255, -0.17513269, 0.10448075, -0.17011443, -0.01822645, -0.14709495, 0.07315481, -0.19932260, -0.08783086},
  {0.03963572, 0.11362118, 0.05094671, 0.06262356, 0.17603604, -0.02830044, -0.14147811, 0.01709746, 0.18218945, -0.11145734, 0.06651388, 0.20128591, 0.23605829, -0.00566308, -0.03872412, -0.11332138, -0.22409381, 0.23432198, -0.13659489, 0.07513311, -0.07287740, 0.23912413, 0.10083260, -0.07850336, -0.06945649, 0.12415927, -0.04864180, -0.03449968, 0.07358866, -0.02960858, -0.12929115, 0.04968409, -0.07574633, 0.12553196, 0.10072846, -0.19265702, -0.18980485, 0.15743491, -0.25943378, -0.06533644, -0.10503576, -0.01059625, -0.21940280, 0.09819982, -0.02093720, 0.00721428, -0.17734854, -0.04719257, -0.04561521, -0.10109787, -0.25349712, 0.03282433, -0.08884507, 0.03835851, -0.07876669, -0.21727909, 0.01075021, 0.11717676, -0.07842685, -0.15752186, -0.12816232, 0.15315622, -0.05887849, -0.04447458, -0.19109611, 0.24789193, -0.09039418, 0.08722477, -0.13572782, -0.02582605, 0.14927299, -0.00858383, 0.10892331, 0.20697261, 0.01519511, -0.00640759, -0.01534093, 0.19392930, -0.17686106, -0.11314156, -0.03708831, -0.02493015, 0.07222686, -0.12421356},
  {0.07713546, 0.19245768, 0.08494982, -0.10521282, -0.07218124, -0.16077842, 0.14538507, 0.12127075, 0.09820316, 0.09798862, -0.09766632, -0.03236680, 0.05786365, -0.03324877, -0.12461484, -0.01369708, -0.12608816, -0.10072272, -0.02466372, 0.02870075, -0.08135599, 0.11891539, 0.13138357, 0.01795775, 0.06702044, 0.18271783, -0.03151735, 0.07232621, 0.15022312, -0.09955390, 0.03758340, -0.15981947, -0.03022937, 0.14891471, -0.12488099, -0.02158962, 0.18959792, 0.15446198, 0.12330892, -0.13084824, -0.07883593, 0.00255060, -0.22709516, -0.09658326, 0.13808466, 0.10280410, 0.16096114, -0.14875419, -0.22045748, -0.17950164, -0.10200342, 0.06395573, -0.26068845, -0.07868209, 0.18868460, 0.00192661, -0.09155569, -0.03408840, -0.04208241, -0.22171563, 0.15596202, -0.08493761, -0.05987586, 0.07834215, 0.15316011, 0.06805719, -0.02157681, -0.03269607, -0.12271663, -0.07521258, 0.15317674, 0.03279021, 0.01318844, -0.05108799, -0.05865120, -0.06494179, 0.16127788, -0.05743138, -0.09982035, -0.20921108, 0.24812341, -0.07450484, 0.00382318, -0.03889618},
  {-0.09426092, -0.07328305, 0.01367385, 0.17165628, 0.14671081, -0.14253481, -0.17256038, -0.01779842, 0.06354403, 0.00233497, 0.08805936, 0.09399008, 0.14011581, 0.04670706, -0.04338751, -0.07532815, -0.10729607, -0.09328810, -0.08079311, 0.00820649, -0.00941818, -0.05839367, 0.12018201, -0.04211818, 0.09714631, 0.16677544, 0.19584246, 0.00119381, 0.06183519, -0.10058322, 0.06600492, 0.10877811, -0.12978159, 0.01659703, -0.02473296, -0.08929785, -0.06762982, -0.00979280, -0.04403483, -0.03707250, 0.11895750, 0.19679645, 0.22004460, -0.09719298, -0.19581537, -0.19877820, 0.07515459, -0.01165217, -0.09824944, 0.01743273, 0.14961953, 0.06143280, -0.15142320, 0.03535334, 0.20084146, 0.12259986, 0.04595486, 0.07422366, 0.01566227, 0.03512128, -0.01234017, -0.04530362, -0.01353832, 0.08026317, -0.05234641, -0.13397847, -0.14803556, -0.15181288, 0.08358054, 0.12752376, 0.12682037, 0.03941465, 0.06070358, -0.02583732, 0.12996882, -0.00103441, 0.12449556, -0.00403446, -0.11371513, -0.11146498, 0.06327093, -0.05201471, -0.11331197, -0.16405186},
  {0.14918664, -0.11445244, -0.04982505, 0.05570085, -0.10251938, 0.09079038, -0.06885997, 0.05917696, -0.01125158, 0.02361644, -0.12569378, -0.11673484, -0.00346555, -0.16812617, 0.15634283, 0.03211946, 0.06818628, 0.03764571, -0.05762923, 0.03269914, -0.09666808, 0.09456173, -0.01474457, 0.02987082, 0.02421161, 0.16114631, 0.05835031, 0.12427859, -0.03524270, -0.12784603, -0.11368027, -0.07374060, -0.01806789, -0.03500532, -0.18908693, -0.17462581, -0.00611284, 0.03972567, -0.07638793, 0.04228298, 0.14003484, 0.09499023, 0.14778000, -0.06249186, 0.03595613, 0.09813295, 0.00451270, 0.10457902, -0.14250332, 0.18041278, 0.12400627, -0.18467313, 0.08418412, -0.11894139, -0.04825594, 0.13426602, -0.06744725, 0.10906012, 0.11263668, 0.08932199, 0.02147644, 0.07342938, 0.07293055, 0.10777788, 0.03170097, -0.04896186, -0.13543417, -0.12041491, 0.19259113, -0.10050950, -0.09091263, -0.04600535, 0.04510662, -0.07730658, -0.15168723, 0.16264188, -0.15100007, -0.07297629, -0.12696840, 0.09688579, -0.10884898, -0.10167345, 0.07254232, -0.15499310},
  {0.11795502, -0.13773064, 0.22568411, -0.01171038, 0.08893377, 0.14873873, 0.05435991, -0.01958404, -0.03209998, -0.19023287, 0.19091779, 0.05939204, 0.18588188, -0.07290972, -0.07627176, 0.11613052, 0.05418829, -0.19863018, -0.01994456, -0.03053942, -0.08169400, -0.03689835, -0.09686510, -0.06076996, -0.16503453, 0.11159296, -0.02219636, 0.12903072, 0.18066266, 0.09711060, 0.02398106, 0.01568604, 0.15561979, 0.07379933, 0.20452052, 0.08821015, -0.00545912, 0.04235817, -0.18545657, -0.13863882, 0.03034198, -0.01597624, -0.07049007, 0.05603836, -0.13738605, -0.17950304, -0.17991039, 0.10199691, -0.00742770, 0.12625588, 0.19064683, -0.05761208, -0.14130290, -0.13386838, 0.05780800, -0.09678364, -0.12537169, 0.04444912, 0.02097942, -0.02567992, 0.20983046, -0.05756846, -0.05573802, -0.08477432, 0.25579560, 0.20746714, 0.00386389, 0.08181043, -0.23327059, 0.15526228, 0.05684354, 0.00690218, 0.27752435, -0.07510588, -0.08643006, 0.12682827, -0.05495443, -0.20224731, 0.22065525, 0.03844536, 0.10286186, 0.23245399, -0.04422048, -0.17392059},
  {-0.19413252, 0.18635306, 0.05850743, -0.03737557, -0.17219466, -0.16622525, 0.17841645, 0.08695377, 0.08326954, -0.12765104, -0.15804520, 0.01673336, -0.05329697, 0.14211643, -0.06992171, 0.13796468, 0.03727320, 0.01071216, 0.02708023, 0.02949605, -0.06632753, -0.10045269, -0.00166516, -0.15564092, 0.04235763, 0.05605689, -0.04949637, -0.03420787, 0.16484548, 0.16663696, -0.16996452, 0.04374294, 0.02490417, -0.01836863, 0.00870510, -0.05395246, 0.05222844, 0.05861742, -0.09074529, 0.04005131, 0.02028180, 0.01187992, -0.12959491, -0.15630910, -0.07670992, 0.00080593, -0.00266484, -0.23394793, -0.08451136, -0.10403433, 0.24290150, -0.05493449, -0.07581348, -0.06660561, -0.15711501, 0.13426897, 0.02387438, 0.00946995, 0.13400452, 0.15985905, -0.08767717, -0.00740822, -0.02812807, 0.03123654, -0.09132103, 0.04861144, -0.11620354, -0.08643053, 0.06757162, 0.06176870, -0.08495479, 0.15710463, 0.05320317, -0.04491573, 0.08359890, 0.04898263, 0.09940463, 0.00310321, 0.12110600, 0.17673261, -0.01548175, 0.10016885, -0.10093929, -0.12442936},
  {-0.01596740, -0.10728120, 0.06016288, -0.10469366, 0.09912110, -0.29854259, -0.16747251, 0.17319427, 0.02008961, 0.01314567, 0.13531898, 0.12525971, 0.12075115, -0.14682737, -0.07215897, 0.11530489, -0.11741145, 0.03429761, 0.07733472, 0.03980272, -0.19900143, -0.07776701, 0.11427442, -0.15545790, -0.09814489, 0.02493236, -0.01234818, -0.11056162, 0.02948227, 0.14603631, 0.03998971, 0.07670253, 0.12713049, 0.08964420, -0.25876942, -0.11981368, -0.12738226, -0.15924290, 0.02272093, -0.05417772, -0.01504019, 0.03221930, -0.16953194, -0.01069004, -0.09252083, 0.01184845, 0.04694884, -0.11702787, -0.03587351, 0.07395681, 0.03890428, 0.21219438, -0.11411017, -0.14323777, 0.12952255, -0.08827525, -0.00082802, 0.12829298, 0.23194920, -0.01672157, -0.06642196, 0.09193185, 0.03656745, 0.10515879, -0.13416341, -0.00857266, 0.09382265, 0.10386720, -0.15837337, 0.16082984, 0.16058688, 0.12021746, 0.00330442, 0.13497061, 0.22351480, -0.06600366, 0.18652548, -0.03090375, 0.03379562, -0.10027205, 0.05689775, -0.04525727, -0.01444609, 0.12895797},
  {-0.02049249, 0.13226274, 0.11884590, -0.12345713, -0.03625618, -0.11888443, -0.12643158, 0.08982963, 0.09980149, 0.01142586, 0.02688352, 0.07896607, 0.19759578, 0.02654193, -0.25751814, -0.04253366, -0.03182751, -0.22772852, -0.01129964, -0.11347251, 0.13626367, -0.03223809, -0.20404376, -0.16214059, 0.07247059, 0.06044545, -0.09390303, 0.06925195, 0.17320637, -0.15918446, 0.10400791, 0.06975023, 0.06668725, 0.20845708, 0.00903434, 0.22451386, -0.11222707, 0.06300076, 0.07630425, 0.03660664, 0.02616236, 0.11905409, -0.15103181, -0.17607658, 0.02647021, 0.07661463, 0.01075203, -0.00490507, 0.21515854, 0.04500401, 0.08915078, 0.09867765, 0.03833048, -0.17840989, -0.04935681, -0.03770966, -0.01659186, 0.17030860, 0.00886512, 0.13750708, 0.12020686, -0.08268178, -0.06129985, 0.03496714, -0.03673924, -0.07137621, -0.13162272, 0.03651467, -0.20229757, -0.18394542, 0.15147136, -0.18372583, 0.17246367, -0.13901564, 0.02427595, 0.00355428, 0.09208011, -0.25103414, -0.03731965, 0.18517414, 0.18399520, 0.14687543, 0.18998793, 0.07350393},
  {0.04564459, -0.17764680, -0.00251392, 0.16565053, 0.08799415, 0.08557754, 0.02586059, 0.00603340, -0.07960914, 0.20244943, -0.08533474, -0.00325613, 0.16840497, -0.11858148, 0.16984715, -0.03358952, 0.09280827, 0.12345324, -0.03317177, -0.15636629, -0.10625640, -0.05917066, -0.18620978, 0.08094348, 0.23538093, 0.11638784, 0.04891650, -0.20861256, 0.10904660, -0.29404652, 0.01728237, -0.05072122, 0.16273671, -0.17706148, 0.06104904, 0.09456015, 0.08345171, -0.01118879, -0.15423743, 0.14448458, -0.02600846, -0.07971184, 0.30766499, 0.14798008, 0.02930256, 0.16770925, -0.01966572, 0.21865247, -0.18102403, -0.07607906, 0.15823901, 0.01069607, -0.02742195, 0.11414608, -0.10508238, -0.03455473, -0.06395552, -0.13814007, 0.22340603, -0.07322199, -0.13768333, -0.16880508, 0.07405545, -0.12265545, -0.10846393, -0.30247965, -0.09773188, -0.03125295, -0.16672170, 0.20367347, -0.10347887, -0.02709017, 0.22274545, 0.16126624, 0.21405229, -0.06658369, 0.12506203, -0.01171937, -0.17264742, 0.02878657, -0.14299981, 0.05533081, 0.23414420, 0.03633503},
  {0.10548286, -0.13292074, -0.16774534, 0.01647607, -0.09099916, 0.06746940, -0.07694587, -0.05767993, -0.05512413, -0.06925524, 0.13433030, 0.07091311, -0.19824252, 0.03182146, 0.05344638, -0.19507687, -0.02355892, -0.07275034, 0.08575155, 0.17595316, 0.04793600, -0.02251777, 0.12249704, -0.12381335, -0.03388214, 0.05356644, 0.05033061, 0.13729487, -0.02443784, -0.06436209, -0.14811622, -0.05580103, -0.19285348, 0.10097663, -0.10944656, -0.13838190, 0.08353119, 0.10284359, -0.05254791, 0.11397040, -0.15087657, 0.09020854, 0.05005836, -0.13606074, -0.14880481, -0.14127138, -0.03960245, 0.00664754, 0.17013364, -0.10911522, -0.01286205, -0.01351680, 0.02457931, 0.05670948, 0.15526991, 0.10050578, -0.25192031, 0.03203482, -0.02446603, -0.01849945, 0.20064557, 0.12444016, -0.03782525, 0.14495732, -0.19228967, -0.19767210, -0.16370027, 0.17496246, -0.09098519, 0.10560323, -0.22726953, 0.11509354, -0.11385848, -0.09317879, 0.13929199, 0.17206053, -0.17332442, 0.18470733, 0.02909083, 0.06949341, -0.12300526, -0.16474377, 0.12706740, -0.09075798},
  {0.02274645, 0.16731486, -0.05178862, -0.04518156, 0.08075645, 0.07255743, 0.06926087, 0.20706676, -0.12777580, 0.02803356, 0.09571347, 0.12150177, 0.07450341, -0.17028612, -0.00032988, 0.13224527, -0.04910702, 0.25263679, 0.02607782, 0.19804965, -0.10284260, -0.12649727, 0.10391531, 0.04850885, 0.14253013, 0.10372713, 0.07543893, -0.14903389, -0.01195366, -0.21226831, 0.13485879, -0.11755882, -0.03030737, 0.06408409, -0.03936826, 0.21100470, -0.09067767, -0.22270539, 0.07631450, -0.10978556, -0.17301051, -0.19343859, 0.05918080, 0.00103600, 0.09010661, 0.11800472, 0.01189706, 0.17452805, -0.09716949, -0.10212710, -0.06312338, -0.11267785, -0.04394463, 0.04828194, -0.14326376, -0.06703781, -0.12648839, -0.19754982, 0.10986487, -0.15771168, -0.06056264, -0.07258154, -0.09285746, 0.20356762, 0.02429852, -0.04213890, -0.08696070, -0.03222669, 0.01453617, 0.11882437, 0.10773167, 0.18473861, -0.16384351, -0.05817806, -0.00250229, -0.10461228, 0.19156736, 0.04083243, -0.24650984, 0.00275720, 0.11347192, 0.05075908, 0.15725340, 0.02579108},
  {0.03200075, -0.02449156, 0.10133801, -0.16078225, 0.05326227, -0.15884395, -0.16112928, 0.17183475, 0.25888941, -0.01224263, -0.05499392, 0.09326802, 0.21830580, 0.07787225, -0.11209497, -0.15942416, 0.07144399, -0.03607688, 0.23470089, 0.02671889, 0.21577266, 0.01489678, -0.08069417, 0.16064139, -0.20807289, 0.19798075, -0.01642583, -0.07872164, 0.06441790, -0.04749415, -0.09033390, 0.22715625, -0.09549753, 0.27089977, -0.07730737, -0.05266051, -0.04996409, 0.26769075, 0.02592147, -0.05411995, 0.03208400, 0.07859847, -0.30725947, -0.09848098, -0.02727002, -0.18994612, 0.05940948, -0.35566443, -0.16711779, -0.20350577, 0.01676010, -0.03271064, -0.31699467, 0.11900476, -0.12473254, -0.11755443, 0.16606784, -0.08146907, 0.09203301, 0.15858664, 0.09145179, 0.04714864, -0.17500815, -0.02901689, 0.11497786, 0.22316924, 0.14697032, 0.00978789, -0.02421712, -0.10575284, 0.29541016, 0.03276245, -0.10886636, -0.05780331, 0.05226845, -0.10902542, -0.05010766, -0.29648522, 0.04300988, 0.02023666, -0.14481775, 0.04439776, -0.18620676, -0.14394304},
  {0.11534370, -0.15323950, 0.10970692, 0.16785906, -0.06428668, -0.02526921, -0.14940999, 0.09817626, 0.09115458, 0.17830729, 0.04768969, -0.03837340, -0.15808977, -0.09256967, 0.08785763, 0.19528896, -0.01729137, 0.02028030, 0.10765163, -0.06691024, -0.12844115, 0.13430630, 0.16185167, 0.17282425, -0.08269984, 0.08969542, 0.16590124, 0.10691173, -0.10448354, 0.17996295, -0.13308236, 0.07238249, 0.05660314, -0.15147489, 0.12045754, 0.07253891, 0.06989805, 0.12216546, -0.00872581, 0.01753948, -0.03593403, 0.15662847, 0.15004840, -0.15053898, 0.11869950, 0.00724354, 0.14963377, 0.08147641, 0.00657881, 0.12757292, 0.16008011, -0.01444192, 0.09124143, -0.07413306, 0.08965486, 0.04391920, 0.07196473, -0.16795152, 0.14518361, 0.08090931, -0.09676427, -0.10455982, 0.05892761, -0.07493080, -0.05300593, 0.03775146, -0.13784701, -0.05428397, -0.10708270, 0.03117165, -0.04481311, 0.16380346, -0.14468184, 0.05616456, -0.14689104, 0.19207919, -0.10009307, -0.04864823, -0.19865763, -0.11942845, 0.02576447, -0.19172269, 0.07473277, -0.08668242},
  {-0.15024568, -0.15449017, 0.07711015, 0.12858269, 0.00822273, -0.06944216, 0.03343144, -0.21320337, 0.16223648, -0.05289689, -0.05660696, 0.00432230, -0.11224303, -0.18209191, -0.09623709, -0.08751067, 0.03485765, 0.13371862, -0.12320464, -0.18534918, 0.00976581, -0.09894612, 0.06647127, 0.00487771, 0.09201081, -0.15955384, 0.14238483, 0.02095843, 0.04472246, -0.13438351, 0.12275159, -0.20941345, -0.11292939, -0.09483062, -0.14899583, -0.26992261, -0.21373233, 0.08911607, 0.12531403, 0.20943551, -0.09675913, -0.03111436, -0.10535012, -0.05604123, 0.07158170, -0.00143533, -0.09905145, 0.04937286, 0.10312065, 0.14111957, 0.05213835, -0.23200729, 0.16521657, -0.15789615, -0.09155785, -0.04760294, -0.00001791, 0.20641443, -0.10605859, 0.16809477, -0.01312891, 0.02211884, 0.12330102, 0.12759247, -0.29420489, 0.01020973, -0.06210799, -0.05168070, -0.18236043, 0.19350813, -0.31505647, -0.00683700, -0.09854045, 0.04336941, 0.00351136, 0.15656687, -0.23995325, -0.00278036, -0.08944684, -0.06125057, -0.02341177, 0.13774915, 0.00142242, 0.09964421},
  {0.02242697, -0.01408429, 0.07643984, -0.02138021, 0.06206886, -0.16661146, -0.15163709, 0.01726911, -0.10366541, 0.06355955, 0.07755388, 0.05316429, -0.07678492, -0.14577743, 0.16807222, 0.18190511, 0.18498874, 0.07707241, -0.06542288, -0.22300422, 0.23069435, 0.12812944, 0.17899552, -0.09101112, -0.06491316, 0.10270946, 0.16991030, -0.11697002, -0.08481474, -0.08339801, -0.03373874, -0.01009183, 0.10176340, 0.10099182, -0.08057885, -0.16633318, 0.01969892, 0.13916419, -0.16578859, 0.01358911, 0.09134123, -0.12289956, 0.14358705, 0.05950269, -0.20211503, -0.02536582, -0.06245642, -0.03678036, 0.08280040, 0.11372279, -0.00486339, -0.08275148, 0.13331258, -0.10310142, 0.16913439, -0.15813135, 0.18804945, 0.03303503, -0.13581629, 0.07148619, -0.16865534, 0.05840938, 0.09534086, 0.02234289, -0.09261800, 0.03222616, 0.01410074, 0.13280965, -0.11070562, -0.00238614, -0.12253497, -0.08284523, -0.00369013, 0.25271112, -0.06908543, 0.02788782, 0.03682089, 0.20344356, -0.14520814, -0.12526542, -0.04715516, 0.13575216, -0.18265483, -0.11462045},
  {-0.01254544, 0.06950255, 0.07333328, -0.01468473, 0.05832352, 0.04023466, -0.01637491, -0.09681845, 0.05499215, 0.00492733, 0.20111355, -0.09806991, -0.15711679, -0.13014999, -0.05103042, 0.08617681, 0.10581093, 0.10004035, -0.09871783, 0.12505715, 0.10521440, 0.16087997, 0.07987286, 0.17753321, -0.09248652, 0.13734040, 0.05667611, -0.14526692, 0.10193095, -0.07155596, -0.10425469, -0.07557664, -0.04654222, 0.18132123, 0.03684068, 0.07581978, -0.14678878, 0.01793795, 0.09623305, 0.12107118, 0.16704564, -0.05867011, -0.08665664, 0.04539925, -0.03597208, -0.08837516, -0.05916989, 0.09357983, -0.00933865, -0.13730824, 0.14136107, 0.23355359, 0.13082425, 0.12388222, 0.15430807, -0.07246696, -0.02600541, 0.18722694, -0.12712295, 0.07095619, -0.09358010, -0.19144051, 0.03235303, -0.01576190, 0.00388438, 0.15836671, -0.07943547, -0.13638936, -0.16842708, -0.02619709, 0.03058508, -0.10264722, 0.21133511, -0.12077726, 0.10745524, 0.18503314, 0.05634762, 0.10481998, -0.01809452, 0.13267085, 0.19919328, 0.09118649, 0.08240537, 0.12432749},
  {0.24141639, -0.07044086, -0.22522227, 0.19932990, 0.13368979, -0.07365099, -0.11036055, -0.08167226, 0.09752552, 0.19362275, -0.01278437, -0.20417856, -0.14345698, -0.00000022, 0.11795449, -0.05753159, 0.17121434, 0.13977681, -0.06392995, 0.08871175, 0.06270243, -0.12986641, -0.13513488, 0.15465441, 0.01407812, 0.01227243, -0.18350726, 0.16864951, -0.08301952, 0.09878466, -0.17548081, 0.18488616, 0.16473590, 0.08460718, 0.00377339, -0.02264327, -0.18824923, 0.18768375, 0.12617792, 0.17814715, -0.05160239, -0.01231876, 0.03941446, -0.12738295, -0.12304176, -0.05242734, -0.10332654, -0.03546954, -0.19791682, 0.14828965, 0.12463266, 0.02813791, -0.03632698, -0.13944574, 0.03890974, 0.10377619, -0.20880939, 0.00974338, 0.05115823, 0.18508448, 0.10009059, -0.17651422, -0.10470418, 0.02837981, 0.03806086, 0.13591667, -0.01906169, 0.04967266, 0.10394602, -0.08828223, -0.12197852, 0.12469476, 0.11088761, -0.13655457, -0.09394967, 0.01523881, -0.06499844, -0.13517331, 0.01677733, -0.04990972, -0.02419457, 0.15066478, -0.07156591, -0.19085704},
  {0.03508959, 0.05058570, -0.03844708, -0.04554516, -0.02109287, -0.00934017, 0.08657446, 0.01717055, 0.03366080, -0.07597516, 0.03327995, -0.12192447, 0.04262803, 0.09966316, -0.12182198, -0.03931003, 0.07011119, -0.31609663, 0.11290370, 0.26025608, 0.02245196, 0.17108643, -0.11018451, 0.28005245, 0.04116739, -0.13821973, 0.12708782, -0.04322089, 0.09121664, -0.09271106, 0.03472985, 0.08580487, 0.01139584, -0.02244896, 0.19098698, 0.20320298, -0.13742949, 0.15551315, -0.16680145, -0.13073500, -0.14669856, -0.01955919, 0.07440455, -0.07921827, -0.14628264, -0.04542228, -0.15619683, -0.09231911, 0.03703836, -0.23348732, 0.23831238, 0.10276619, 0.01725349, -0.01381975, -0.01806887, -0.17409161, 0.04372747, -0.00244720, -0.17379880, -0.02709700, -0.09166694, 0.12493719, 0.12469569, 0.06627962, -0.00960177, -0.05971368, -0.15982449, -0.17046027, -0.07581543, 0.02256284, 0.17318203, -0.04608357, 0.16035111, -0.09329328, 0.16266541, 0.00308896, 0.06546146, -0.04725548, -0.22772172, 0.03310503, 0.10874733, 0.05779508, -0.04084056, 0.16134560},
  {0.06308673, -0.05613044, -0.07371859, 0.04674308, 0.04868730, 0.12133981, 0.06319167, -0.17278664, 0.09687247, -0.01231563, -0.05722786, -0.04939860, 0.01457863, -0.12205864, -0.08462452, 0.05429933, -0.02702961, 0.02808168, 0.08190456, 0.04427271, -0.15989868, 0.13154151, -0.14748491, 0.04000048, -0.16634741, 0.07084995, -0.03775579, 0.15489832, 0.13161995, -0.05803333, 0.16350003, -0.09378561, 0.16610552, -0.13112697, -0.01457289, 0.14084968, -0.15921728, -0.06742296, 0.15676579, -0.05624088, 0.08018159, 0.16479750, 0.01077009, 0.16109945, 0.01684363, -0.01096420, -0.15418850, 0.09393159, -0.10877922, 0.15493400, -0.14039551, -0.02822801, -0.05780428, 0.11032648, -0.13053127, 0.08171558, 0.16932149, 0.01903145, 0.05429548, 0.04708347, 0.04530996, 0.00532715, -0.13676438, -0.04893198, -0.03262586, -0.12402860, 0.12165155, 0.14799912, 0.11340509, 0.03786794, 0.10842647, -0.09922277, -0.03849563, -0.16754206, -0.02058309, -0.12147484, 0.03753910, -0.01740722, -0.02609800, -0.07112508, -0.09512021, -0.03447164, -0.14329576, -0.01788133},
  {0.22897094, -0.06494277, 0.13692398, 0.01240806, 0.04342547, 0.01200916, 0.03200646, -0.12841032, -0.02022769, 0.12870917, 0.10980208, 0.21369706, -0.08654959, -0.05178394, -0.11391865, 0.10613024, -0.09046499, 0.07409582, 0.10395784, 0.06732223, 0.17377567, 0.15795057, -0.23169915, -0.12985840, 0.00176854, 0.17722774, -0.04633363, 0.19443443, -0.07636458, -0.00022048, -0.10208041, 0.17175113, -0.13211846, 0.15291102, -0.15678719, -0.09435260, 0.08950132, 0.00625236, -0.00568760, -0.04873650, -0.13973942, -0.12835295, -0.03192447, -0.15115027, -0.18328005, 0.11117381, 0.16070344, 0.08781344, 0.04154814, 0.04951262, 0.10882006, 0.07203453, 0.10492665, -0.17752855, -0.12004898, -0.15913010, 0.22069161, 0.16927899, 0.01127606, 0.10485239, 0.04615751, -0.12335340, 0.19091661, 0.13902903, 0.12314932, 0.09315608, -0.13419083, -0.04096618, 0.12884390, -0.12357418, -0.06591830, -0.13704026, 0.01789858, -0.04380265, 0.10078423, 0.12909080, 0.06774133, -0.15060398, 0.06880747, 0.09861420, -0.00939766, 0.01772907, 0.10992686, -0.18522318},
  {0.04420306, -0.03981851, 0.06592750, -0.07530835, -0.05523778, 0.10561292, -0.02185464, -0.20201053, 0.22276793, -0.00019777, 0.04423636, 0.18141118, -0.01088314, -0.07351545, 0.06418166, 0.25235227, -0.14131638, 0.10760377, 0.19027179, 0.20398332, -0.09297223, -0.11211932, 0.01309950, -0.09052419, 0.00916868, 0.05197589, -0.23564328, -0.14051248, 0.00054455, -0.08788811, -0.03525985, 0.11816273, 0.01794710, 0.14392135, 0.02090009, -0.01108904, -0.12019962, -0.16330536, 0.11825570, -0.22337444, -0.23152469, -0.25651997, 0.04710354, -0.11140213, -0.05376162, -0.03217890, -0.05256964, 0.07699054, -0.09049308, -0.04724494, -0.01802810, -0.07772437, 0.00097127, -0.09064555, -0.02534885, 0.05487975, 0.15694192, -0.18515298, -0.08298865, -0.21968609, -0.14588651, -0.12252093, 0.10194134, 0.11158654, 0.20271498, 0.10139121, -0.02065770, -0.26157477, -0.15503313, -0.01771882, 0.13558571, -0.23357221, 0.14248508, 0.13152957, -0.15569600, -0.06328043, 0.17074360, -0.10493995, 0.00307318, 0.17461509, 0.08603783, 0.13587455, 0.05042392, 0.08647466},
  {-0.01459392, 0.02944955, -0.18518431, -0.10006057, -0.06210140, -0.03011224, -0.01533322, 0.07938674, -0.17529382, -0.00778503, -0.10594346, 0.10620045, 0.05715852, -0.12928905, 0.19345815, 0.14685199, 0.16648276, 0.25058395, -0.19386713, 0.13955326, 0.06912327, -0.14085576, 0.00170597, 0.03350085, -0.29125825, 0.02396576, 0.09883081, -0.27314976, -0.04349255, -0.01842958, -0.19942737, 0.00685629, -0.00542554, -0.00583383, 0.09266732, -0.10837878, -0.17222768, -0.17498992, -0.14796221, -0.09781836, 0.00395691, 0.05010763, -0.05863674, -0.13550685, 0.09412422, 0.14570180, 0.07681832, 0.21432713, -0.01727450, -0.12721229, 0.04153376, 0.03364859, -0.07732180, -0.18074343, -0.01836582, -0.15399076, 0.20858870, -0.19810523, -0.07330003, -0.09283869, 0.11452653, -0.05594508, -0.03740874, 0.02255445, -0.02023129, -0.03843238, 0.08012001, 0.04622741, -0.05299804, -0.12433320, -0.00069339, -0.03959463, 0.06773062, 0.03181605, 0.01867985, -0.06214949, 0.13850065, 0.17667550, 0.16214851, -0.10045700, 0.17425451, -0.16127031, 0.11099768, 0.01701889},
  {-0.15676379, -0.13093510, 0.00758974, 0.02650036, -0.18261169, -0.24657781, 0.11552252, -0.02538207, 0.04368768, 0.07579186, -0.09715874, -0.04861682, 0.15333259, 0.07835221, -0.11507862, 0.08412023, -0.10208558, -0.16955276, 0.18441162, -0.00800223, -0.17153844, 0.15629797, -0.02728789, 0.13937803, 0.15193909, -0.14541587, 0.02020948, 0.19832152, 0.08841832, -0.23428583, -0.04364599, -0.09754688, 0.13953575, -0.16914114, -0.00337789, 0.18752244, -0.11275177, -0.03015846, 0.03515319, -0.05843644, -0.13521086, 0.10579357, 0.04645809, 0.02724961, -0.07156492, 0.16275115, -0.22280473, 0.25345325, 0.10277095, -0.04344951, 0.19009298, 0.05314958, 0.18955640, -0.04790195, -0.14314608, 0.05122799, -0.15258574, 0.14197603, -0.02379985, 0.12817588, 0.17724310, -0.04780845, 0.17244785, -0.01460780, 0.03553282, -0.12912552, 0.13966371, 0.10233997, -0.11896718, 0.06651714, -0.08537830, 0.11866932, -0.01181252, 0.13904610, -0.22158034, -0.07243470, 0.05947815, 0.05502567, -0.22411750, 0.17052731, 0.05009795, 0.09925073, -0.00828490, 0.12657268},
  {0.18652122, 0.01971174, 0.08559951, -0.10525151, -0.13230251, 0.30029994, -0.03291258, -0.01441188, 0.16903678, 0.21954332, -0.16239262, 0.21214187, -0.23405738, 0.12622514, -0.13774839, 0.02522402, -0.07426298, 0.17935318, 0.04528061, -0.12712222, 0.07749580, -0.00562258, -0.18422265, -0.13832515, 0.12302095, -0.09427662, -0.23553251, 0.03920122, -0.10283960, -0.07824756, 0.07755644, -0.09986913, -0.15510525, 0.05367740, 0.14722587, 0.02648321, -0.09749285, 0.11821866, -0.14642353, 0.01866221, -0.24158256, -0.09039375, 0.12149277, -0.06180038, 0.07646128, 0.17091866, 0.23808010, 0.17753647, -0.07498974, -0.21921395, 0.01509384, -0.10486058, 0.04623772, -0.15162846, -0.10976686, 0.16884767, 0.13003479, 0.14392066, 0.09728714, -0.04235052, 0.19168265, -0.15846881, 0.15899405, 0.21002547, 0.18752113, 0.09832582, -0.11535472, -0.00946318, 0.08506814, -0.11926396, 0.12827048, -0.04123114, -0.02863226, -0.14822313, -0.00945447, -0.10882128, 0.03203875, -0.00099517, -0.00377565, 0.07712328, -0.06233612, 0.01347052, 0.07112963, 0.05682960},
  {0.14481904, -0.15419811, 0.09761284, 0.13940853, 0.00522659, 0.02630559, -0.03108165, -0.10484134, -0.08442654, 0.01170918, -0.12552720, 0.20260672, -0.19242930, 0.11751387, 0.06931265, -0.07567751, 0.14040209, 0.14669116, 0.00250801, -0.08089150, -0.14482094, 0.07475594, 0.09591038, -0.01090098, -0.28240311, -0.09924945, -0.14059564, 0.19094896, -0.12605420, 0.00079845, -0.20351194, -0.00609101, 0.02451731, 0.03188119, -0.00232117, -0.03916043, -0.09916269, 0.00951767, 0.07390473, -0.02157671, 0.14413559, 0.08056456, 0.16221407, -0.02991010, 0.04450592, -0.15510024, -0.09370060, 0.14848991, -0.00644190, 0.14823771, -0.02160446, 0.04249116, -0.02359002, -0.10800732, 0.08002985, -0.04891044, 0.05550392, 0.00701212, -0.16258620, 0.03624192, -0.04210760, 0.08960238, 0.15547056, -0.10554157, 0.07333612, 0.13873391, -0.12980542, -0.23192659, -0.19747472, 0.16480136, -0.02201748, -0.21329661, 0.05291877, 0.04735167, -0.17322715, -0.02251736, -0.21948607, 0.05718851, -0.02664745, 0.04638753, -0.02278748, 0.04403513, 0.11111984, 0.00728344},
  {0.04867651, 0.19793645, -0.13812812, 0.03373276, -0.01156660, -0.33582142, -0.08246062, 0.20867047, -0.02644314, -0.04860472, -0.04437543, 0.07451502, 0.02157262, 0.04949611, 0.03240127, 0.08178388, -0.06784520, 0.03295975, 0.11584166, 0.11015020, 0.05496106, 0.02207674, -0.13648827, 0.08422658, 0.09048488, -0.14390609, 0.13761146, -0.21761371, 0.10262041, -0.01215353, -0.08155756, -0.14347473, -0.06713288, -0.09231871, -0.15475932, 0.24029911, 0.18838570, 0.12483061, -0.11793707, 0.09694470, -0.08994899, -0.00542349, -0.01642666, -0.06667434, -0.01374738, -0.05593336, 0.09834627, 0.06255964, 0.15128393, 0.11160517, -0.06499682, 0.02008444, 0.13176957, -0.17233111, -0.18896420, 0.00222818, -0.06957848, 0.11655006, -0.04961324, 0.06575589, 0.16627404, -0.09182921, 0.04838846, -0.13658395, -0.08029319, 0.06915186, -0.08839807, 0.14753893, 0.01540538, 0.04385364, 0.12059548, 0.18951212, 0.16767772, -0.05367829, -0.11768543, -0.02591281, 0.17798533, -0.00476640, -0.06820975, -0.01482794, 0.21292317, -0.10474183, -0.09042326, 0.14531454},
  {0.15367986, 0.12813848, -0.06165913, 0.09568223, 0.03056393, -0.13929577, 0.14067237, -0.04917733, 0.10891059, 0.11379386, -0.14482097, 0.09600633, -0.09470356, -0.06120672, -0.12844729, -0.16734792, -0.09417450, -0.09913761, 0.15963578, 0.00681761, 0.05430212, -0.15836757, 0.14970158, -0.04548625, 0.07843635, -0.05046141, -0.16407205, -0.09599975, 0.09572203, -0.08632901, -0.11737601, 0.07626887, -0.09083042, 0.13336782, 0.04947764, -0.00833367, 0.00292260, 0.13229068, 0.12436279, -0.14283580, 0.08367641, -0.07537714, -0.00264532, -0.07631012, -0.03533907, -0.12558833, -0.09724553, -0.11906922, -0.09032606, -0.01857706, 0.12424880, -0.01414070, -0.05344424, -0.10219680, 0.07622553, -0.03853360, 0.09304813, -0.15384260, -0.10052986, 0.08264230, -0.08325710, -0.00891059, -0.15916491, -0.09850645, -0.03379794, -0.02157360, -0.15745769, 0.04020816, 0.01618065, -0.12771966, -0.09790278, 0.10061067, 0.07666991, 0.05822178, 0.14817730, 0.17394935, 0.06032730, 0.15338884, -0.10653810, -0.03202647, -0.11543343, -0.07313983, -0.02131523, 0.15801311},
  {-0.28187403, 0.15316403, -0.10437514, 0.06762579, -0.13024254, 0.03458670, -0.17997779, 0.05307546, 0.06955954, -0.07962494, 0.21807350, -0.13782066, -0.09816265, 0.00735543, 0.13780168, 0.03109340, 0.01856877, -0.19291764, -0.10050919, 0.11278954, 0.00482201, -0.22305091, 0.00242116, -0.03446051, 0.08533785, 0.15451238, 0.06563991, 0.14073266, 0.15171625, -0.08036367, 0.20707634, -0.20907845, 0.04648290, 0.01406407, 0.02017422, -0.04896919, 0.15421383, -0.20964019, 0.00983296, 0.11701875, -0.01805062, -0.05033157, -0.02599459, -0.13591731, -0.11956023, -0.16372573, 0.03733463, 0.04489329, -0.17227440, -0.00472427, -0.05710004, 0.37699509, 0.09152716, 0.07654627, 0.01149955, -0.15775366, -0.15377021, 0.06356944, 0.10011195, 0.09813417, -0.31376660, 0.10497527, 0.04442224, -0.16878450, 0.01987160, 0.17126492, 0.08020501, -0.02370235, 0.07160576, 0.09745730, -0.03814140, -0.06463506, 0.11334791, 0.17087056, -0.01626366, 0.05587040, -0.00063058, 0.06817024, 0.12714638, -0.13005568, -0.13372850, 0.02279495, 0.00941084, 0.13226204},
  {-0.18039943, 0.04032123, -0.13373226, -0.22652330, 0.06034817, -0.19227871, -0.00551337, 0.14313824, -0.20389318, -0.06872319, -0.04363398, -0.08393893, -0.03117880, -0.00475794, -0.13116676, -0.07994564, 0.19628029, 0.23264953, -0.00756963, -0.05676270, -0.07587606, -0.02299484, 0.08242773, 0.17395596, -0.32950631, -0.24242570, 0.26317352, -0.04435571, 0.02481160, 0.15592082, -0.17681551, -0.14631118, -0.00594104, 0.09478784, -0.19839370, 0.02503831, 0.18412337, -0.11598484, 0.09270081, 0.15895377, 0.11575174, -0.01481572, -0.24350797, -0.11607986, 0.05985248, 0.07574883, 0.20574193, -0.12949201, -0.12385485, 0.04911595, -0.08715335, 0.17955473, 0.05426487, -0.00538690, -0.07929338, 0.16633154, 0.25436613, -0.01025305, 0.14227638, -0.16033217, -0.13342486, -0.14913768, 0.11027975, 0.21361329, -0.05916454, 0.11085247, -0.13196512, -0.08974006, 0.02057602, -0.19664073, 0.14701653, 0.15656655, 0.00282827, 0.03981853, 0.05490942, 0.12041664, 0.08411666, -0.01065048, -0.15744108, -0.22330512, 0.26811683, 0.07433012, -0.17649998, -0.06797646},
  {-0.02915275, 0.11198015, -0.00874845, -0.02342188, 0.04072322, -0.01693585, -0.15537760, 0.04621220, 0.25383574, -0.07769246, -0.09773891, -0.00999294, 0.18786533, -0.03670958, 0.26370251, 0.27157530, 0.19094203, -0.04088435, 0.16967762, 0.03822011, 0.26299468, 0.04089269, -0.20462848, -0.21888436, -0.02094384, -0.05244876, 0.03095196, 0.00856514, -0.08776604, 0.08760559, -0.05947553, -0.11877991, 0.10403337, -0.01394115, -0.12979461, -0.28921911, -0.19188356, -0.22869045, 0.03271583, 0.02487153, -0.05269860, 0.00976483, -0.04263933, -0.01171567, -0.01847279, -0.24040873, 0.01467802, -0.07423751, 0.15305185, 0.18478671, -0.14030057, 0.11902755, -0.06883970, 0.09152293, 0.30590773, 0.08852978, -0.06262776, 0.14236891, 0.15491256, -0.04284858, -0.23341641, -0.10440312, 0.21008894, -0.19109733, -0.10372641, 0.08051106, -0.11555840, -0.14980404, -0.12029240, -0.02160162, -0.18499890, -0.19864951, 0.01755098, 0.14715862, -0.07527838, 0.15181847, 0.05450007, 0.08820233, -0.26684740, -0.17456022, -0.21542594, 0.13307613, 0.04251511, -0.10923050},
  {-0.06009824, 0.12455396, 0.19801746, -0.10175782, -0.03166092, -0.19393332, 0.00346084, 0.01989728, -0.16782804, -0.13204694, -0.02144248, 0.09247644, -0.07922570, 0.09220742, -0.12424978, -0.10805339, 0.15796897, -0.00894623, 0.05576708, -0.08199625, 0.07438847, 0.33603129, -0.04446692, 0.08612525, -0.01447624, -0.04093304, 0.04853354, 0.14481774, 0.13652126, -0.13523106, -0.00936718, 0.02959712, -0.16132981, 0.20786092, 0.05976724, 0.02130302, -0.11854717, 0.07745697, -0.02615512, 0.15897565, -0.00742653, 0.05642686, -0.03256088, 0.11081339, 0.03508154, 0.00699597, -0.04313988, -0.27380267, 0.04124307, 0.04975504, 0.10617498, -0.24653301, 0.17750691, -0.02027927, -0.10111988, -0.03705416, 0.17592977, 0.08808307, -0.11528015, -0.17166939, 0.23325126, -0.09083818, -0.14104487, -0.01959849, 0.08225305, -0.18454857, 0.00563201, 0.18014383, -0.03504999, -0.14980210, -0.10792706, 0.10724839, -0.08778728, -0.04011261, 0.16804442, 0.07151180, 0.03023424, -0.10660013, 0.11461061, 0.20063929, -0.11133301, 0.24441338, -0.16497800, 0.09739808},
  {0.10896599, -0.08032776, -0.12029117, -0.04229495, -0.01633072, 0.18997212, 0.10434069, -0.09769688, 0.04530669, 0.09054205, 0.14833581, 0.18501554, 0.01546361, 0.13227852, 0.01580369, 0.00603556, 0.09344082, 0.08482019, -0.00751215, -0.05608439, -0.10950579, -0.00165202, -0.20946357, -0.09049083, -0.15116253, 0.07883757, -0.03329288, 0.10485879, -0.05939372, 0.10165113, 0.05985219, 0.14229311, 0.05104808, 0.08418207, 0.18721823, -0.06875391, -0.01976543, -0.11504056, 0.15994649, 0.18221132, -0.01325689, 0.07342475, -0.11293551, 0.05300279, 0.00009379, -0.20106705, -0.19625597, -0.05602343, -0.00500584, -0.10557921, -0.06748069, -0.11595375, 0.07286675, -0.19205348, -0.03955596, -0.07540219, -0.16387430, 0.08234718, -0.07471246, 0.13569281, 0.06433211, -0.06303791, 0.15684484, 0.03614032, -0.20700473, -0.14920573, 0.04869040, -0.12433454, 0.00106570, 0.09189689, -0.00306236, -0.20778632, 0.07741444, 0.16156712, -0.24574657, 0.19421807, -0.08852253, -0.04941180, 0.05835225, -0.08243411, -0.18553275, -0.14750870, 0.20578437, -0.08685780},
  {-0.14024562, 0.07634528, 0.05853263, 0.10546990, 0.12228736, 0.02989499, -0.03573925, -0.10081099, 0.09606952, -0.14925678, 0.13550362, -0.16396838, 0.12764615, 0.02988576, 0.20405315, -0.14139649, 0.02522025, 0.03980346, 0.04915614, 0.16065556, -0.07066455, 0.06205020, 0.14252353, -0.10844807, -0.10678853, 0.16518301, -0.09319674, 0.11690673, -0.21161447, 0.17434093, 0.01146927, -0.03133663, -0.05053924, -0.11519632, -0.19210765, 0.02487224, 0.05389964, 0.08444634, 0.12987979, 0.10082650, 0.02818094, 0.17857422, 0.14680006, 0.11277089, -0.07018173, -0.13706517, 0.01851757, 0.10890178, -0.20915495, 0.09984101, 0.04285052, 0.14846502, -0.03392125, -0.10132859, 0.16155842, -0.08036400, -0.00093923, 0.08348955, 0.15322173, 0.09458409, 0.01546499, 0.12937073, 0.10549446, 0.20009363, -0.25843033, 0.15091243, -0.15115702, -0.06634010, 0.04567616, -0.01881552, -0.09949359, 0.12035859, -0.15323161, -0.14934479, 0.10408492, 0.04008935, -0.04173001, -0.06665169, -0.16618608, 0.11853912, 0.02137265, 0.04121895, 0.04264611, -0.05474488},
  {0.04260484, 0.02645425, 0.13698378, -0.10247463, 0.10508000, -0.02247892, 0.02883492, 0.10207379, 0.18896882, -0.20535758, 0.18761899, -0.10106012, -0.08748947, -0.17284302, -0.00163329, -0.03233696, 0.10964342, -0.22259857, 0.22971949, -0.02274456, -0.20636459, -0.12529407, 0.09252388, -0.04646093, -0.09545081, -0.07461591, -0.19173484, 0.18759075, -0.00738555, 0.04225032, 0.09688585, 0.18646371, 0.19773681, -0.12424161, -0.22376744, -0.07612462, 0.03722460, -0.01142533, -0.01751991, -0.13499820, 0.07149583, 0.06112767, 0.13310997, -0.14953996, -0.04788338, 0.14877483, -0.15525177, -0.13745949, -0.23234896, 0.04802204, -0.09033664, 0.19389221, -0.14310414, -0.04911772, 0.25429738, -0.21196947, 0.10406032, 0.14518942, -0.05867685, 0.14014013, -0.03039722, 0.07214323, -0.06873450, -0.03600134, 0.14308560, 0.07062327, -0.00063430, 0.06554738, 0.18085296, 0.11290380, 0.15574424, 0.04857588, 0.19205710, 0.22468610, 0.15916821, 0.14604989, 0.13302571, -0.01923868, -0.12047868, 0.09957413, 0.08468331, -0.18794659, 0.01755043, -0.02534607},
  {-0.10976112, 0.10002035, 0.05419719, 0.03395120, 0.10013702, -0.02223311, -0.06645229, 0.17263322, -0.08319686, -0.03142427, 0.03051515, -0.12132326, 0.00458217, -0.13755643, -0.14315660, -0.02087400, -0.10226204, -0.09936746, -0.09927964, 0.00708972, 0.12594895, 0.19070567, -0.20263290, 0.00672347, 0.15507148, -0.01601758, -0.14247634, 0.01971101, 0.09574980, 0.12148622, -0.06783467, 0.17568921, -0.00415279, 0.19338757, 0.13979158, -0.06943829, 0.04162448, -0.08826272, 0.06557251, -0.08268360, -0.03495462, 0.11674158, 0.00858793, -0.18308613, 0.12511921, -0.11850522, -0.28451812, -0.07603154, -0.16257432, 0.04791619, -0.00012638, -0.07587686, -0.06917515, -0.18479091, 0.15887083, 0.13480988, 0.00482354, 0.18434139, 0.15780899, -0.04862848, -0.06342448, 0.10538603, 0.09511141, -0.09561206, -0.37319472, -0.18017586, 0.04146215, 0.19828296, -0.16375314, 0.21163878, -0.29319707, 0.04198091, -0.14724943, -0.02029482, -0.08958192, 0.18693432, -0.05215129, -0.08750060, 0.05678632, 0.22058000, 0.01843646, 0.16610888, 0.20285766, -0.14385763},
  {-0.04673108, 0.02006628, 0.19754881, 0.02030404, 0.19473062, 0.17932265, -0.11628376, -0.26128095, 0.05821953, 0.06949412, -0.18206413, 0.14761108, 0.35307792, -0.12724251, 0.24997239, 0.19051173, 0.18977351, 0.02976859, 0.04553616, -0.16445789, 0.28054664, -0.05927155, 0.16236982, 0.01650878, -0.02052425, 0.04048488, -0.06479938, 0.22423837, 0.05752134, 0.22745287, 0.04249230, -0.14836605, -0.05888668, 0.11578530, -0.16183308, -0.10495219, 0.12552713, -0.18429582, 0.19076540, -0.27553788, 0.05655558, -0.05476042, 0.02869828, -0.12778932, 0.06237844, -0.12786730, 0.12826891, 0.02448598, 0.00913684, 0.04834057, -0.22680973, 0.37962747, 0.03315961, -0.00496431, 0.14304304, -0.06003468, 0.19743845, 0.06014613, -0.03913965, -0.17363063, -0.03052620, 0.23880878, 0.17725223, -0.10475042, -0.10178559, -0.05235324, -0.05565315, 0.04626456, -0.05271204, 0.23069425, -0.05508234, 0.09548431, 0.06631916, 0.11837745, -0.08547702, 0.21874647, -0.02713898, 0.08137978, 0.09959497, -0.23950823, 0.09624206, -0.18728632, -0.09405382, 0.02709109},
  {-0.12818040, -0.13342501, 0.05725745, -0.07654461, -0.12530011, 0.00800073, 0.03516722, -0.10373471, 0.06377196, -0.03518491, -0.13698369, 0.03666234, 0.10694031, -0.04144645, -0.11939330, 0.16347836, 0.14502107, -0.03359861, -0.02849520, 0.11057666, -0.05392079, 0.09429695, -0.16462159, -0.00701188, 0.04226422, -0.12236565, 0.12279008, -0.09969760, 0.03686125, -0.09303865, 0.09069647, 0.00367529, -0.03677548, -0.12977698, -0.11801621, -0.00438000, 0.02345439, -0.12425757, -0.11256827, 0.02131527, 0.01707436, 0.13640992, -0.13435975, -0.13215248, -0.11849853, -0.10315935, -0.12471194, 0.07126924, -0.01616177, -0.01680298, -0.08216109, -0.08295521, -0.15827350, -0.00639941, 0.04085018, 0.08850467, 0.02415739, -0.03072537, 0.15812124, -0.10056838, -0.03862025, -0.16347255, -0.17167318, -0.16515820, 0.15503682, 0.06865989, -0.05687268, 0.10382965, -0.04691009, 0.11878973, -0.13735545, -0.04800959, 0.07571806, -0.08590293, 0.14413698, 0.03861124, 0.06487958, 0.07504151, -0.08572643, -0.09759750, 0.11846054, 0.03296589, -0.07278460, -0.02077302},
  {0.08821493, 0.09778655, -0.01185126, -0.07296050, -0.03473694, 0.18610360, -0.09280686, -0.26400229, 0.03086217, -0.04108753, -0.15029483, 0.24920344, 0.07475062, 0.10000445, -0.16400287, 0.01125182, -0.03578935, -0.06195560, 0.07778885, 0.04352300, 0.14957429, 0.24036743, -0.00116066, 0.09090666, -0.11963613, -0.15587948, 0.00028190, 0.05495228, 0.15972993, -0.03878491, 0.01266291, 0.01389292, 0.00292567, 0.17289960, 0.34268925, 0.23487714, -0.07172559, 0.37549239, 0.10345581, -0.13119338, -0.15989609, 0.06216025, -0.15490897, -0.11676006, -0.10225636, 0.01060457, 0.09010351, -0.20001997, -0.08477562, -0.11013358, 0.11361162, -0.06388875, 0.10195908, 0.00331374, -0.17851017, 0.14787090, 0.27328128, 0.24023895, 0.05287206, -0.21140814, 0.08539332, -0.11451482, 0.10290109, -0.01578612, 0.27550921, -0.00813843, 0.06373853, -0.14954136, -0.01353362, -0.21499392, -0.01765800, 0.16679002, 0.05999291, 0.15552320, -0.36353794, -0.31283414, 0.02087883, 0.00638283, -0.05430003, 0.29099596, 0.19870371, 0.24134040, -0.10327142, 0.08920685},
  {0.02023756, 0.11175103, 0.09794535, -0.10346711, 0.16620992, 0.03510454, -0.18534534, -0.07708219, 0.04787506, 0.12517144, -0.10979352, -0.11139765, -0.13727202, -0.17892565, 0.04642737, 0.03770529, 0.15669551, 0.15656157, -0.03886479, -0.10512082, -0.01604252, -0.08430202, 0.10300491, 0.12578012, -0.15257902, -0.00956446, 0.13556623, 0.07445380, -0.14334442, 0.02537182, 0.02025541, 0.13517590, 0.12261091, 0.06956518, -0.06069995, -0.16704573, -0.11059745, 0.13966721, 0.01414502, 0.14970665, 0.12620036, 0.04595331, 0.08678005, 0.07945825, -0.02467496, -0.08227313, -0.09198021, 0.16361193, -0.18291651, 0.13600607, 0.14645529, 0.06153520, 0.13617975, -0.07931046, 0.08299772, 0.03580023, -0.03993761, 0.04564859, 0.12931791, 0.19582598, 0.11005474, 0.02518077, -0.08371004, 0.04925719, 0.08859243, -0.10443026, 0.04369192, -0.08299275, 0.02018485, 0.06420536, -0.21096860, -0.14909098, -0.06483229, 0.06666685, -0.12663643, 0.04476545, 0.03213725, 0.18695596, 0.07695478, 0.18852071, 0.14051038, 0.09965376, 0.18602839, -0.05734658},
  {-0.09233902, -0.03162532, 0.19860180, -0.17580327, 0.04923349, -0.08136716, -0.00494321, -0.01957837, 0.20142929, -0.05891123, 0.00472038, 0.01467633, -0.09134345, -0.07314877, -0.16564766, 0.23737843, 0.05176345, -0.03891850, 0.03111409, -0.13949274, 0.14709248, 0.22558838, 0.14594641, 0.06062524, 0.08573911, 0.14555719, 0.24079958, 0.12275040, 0.28808188, 0.18224388, -0.07048529, -0.07330427, -0.10131481, -0.07665808, 0.08112201, 0.02754930, 0.12505688, 0.05276009, -0.18185176, -0.22388777, 0.02255195, 0.08074182, 0.02727166, 0.05472017, -0.15095817, 0.07212470, 0.17137489, 0.05601083, -0.12006444, -0.00343365, -0.04318086, 0.04423071, -0.10914363, 0.04200337, 0.09214003, -0.14784108, 0.14432125, -0.06666113, -0.20663428, -0.22532706, 0.22495814, -0.16846794, 0.05793567, 0.05613837, 0.10846810, -0.12265472, -0.12789880, 0.02854512, -0.01860471, 0.05477867, 0.08164413, 0.10756513, -0.03323189, 0.00845853, 0.05655475, 0.05808908, 0.09947465, 0.12630717, 0.03723307, 0.14488809, 0.11467268, 0.13392609, 0.10664058, -0.10151522},
  {-0.04717408, 0.00189436, 0.12600523, 0.21100377, 0.14142025, 0.15233552, -0.06607284, -0.02801879, 0.18230253, -0.02404083, 0.06760715, 0.06182477, -0.13148406, -0.14603764, 0.08030333, 0.02377949, 0.17622787, 0.04920832, -0.08559044, 0.16338323, -0.14257249, -0.10101524, -0.07997089, 0.03565372, -0.08790966, -0.19020469, -0.15711540, 0.14240529, -0.06490400, -0.13738512, -0.10153981, -0.05312963, 0.04021934, -0.18459937, 0.10992745, 0.07389104, 0.11135700, -0.12026396, 0.18805377, 0.09962610, -0.08253647, -0.01461965, 0.15942079, -0.18043768, -0.15585390, -0.15196012, -0.10497192, 0.23259066, -0.16042414, 0.14375268, 0.03100033, -0.13566333, -0.03878658, -0.07603243, 0.11175255, -0.17516838, 0.02267119, -0.15112948, -0.09033997, -0.08305579, -0.09055220, -0.05535709, 0.16675705, 0.18740331, -0.14695960, 0.05212995, 0.01312277, -0.06616642, -0.03993432, 0.15115331, 0.15642032, 0.13208631, -0.07446366, -0.06368957, 0.03109279, 0.00918193, -0.09367191, 0.08437221, 0.03264098, 0.06612302, 0.13957319, -0.20878693, -0.11613418, 0.08470102},
  {-0.09465012, 0.22606765, -0.07602943, -0.10789662, -0.27585950, -0.12850401, 0.02637642, 0.17410889, -0.01011080, 0.07318794, -0.20731083, -0.17013821, -0.02974565, -0.15068845, 0.12654503, -0.02168853, 0.02856272, -0.08551298, -0.01810989, -0.25482017, 0.20796306, -0.15547773, 0.08475576, -0.23683673, 0.13010809, 0.11785959, -0.09004741, 0.08721540, 0.09336677, -0.03824526, -0.05556386, -0.17821606, -0.06831284, 0.09909497, 0.01693056, -0.21324115, -0.22339357, -0.04121105, -0.11214053, 0.14467199, 0.00972094, 0.13843235, -0.13831756, -0.03513844, 0.06441006, -0.16946566, -0.04505760, -0.22723860, 0.13625783, -0.20038362, -0.05632344, 0.06513656, -0.03588435, -0.09543157, 0.02373349, 0.12749742, -0.09136566, 0.17421667, 0.21912016, 0.14478685, 0.04533808, 0.09058239, 0.11311387, -0.05997348, 0.00759228, -0.21396205, 0.02640530, -0.12233825, 0.07045865, 0.18853363, 0.05761861, 0.04164351, -0.07770995, -0.03921172, 0.21146475, -0.10713609, 0.08887982, 0.08072364, -0.06719510, 0.07651413, 0.13077790, -0.05168426, -0.04329386, -0.10077377},
  {-0.06094537, -0.03506912, 0.09373826, 0.07231124, -0.09332239, 0.18496202, -0.01604885, 0.00900034, 0.05969086, -0.17803490, -0.12160135, -0.05323279, -0.07778584, 0.12759125, 0.03702482, 0.08586118, 0.17802173, -0.01111788, 0.10349531, -0.05660896, 0.03313543, 0.05750677, 0.08787708, -0.02459338, -0.19283998, -0.14805597, -0.02010833, 0.05730146, 0.15893352, 0.20678291, -0.29498738, -0.15755004, -0.15946235, -0.14101772, 0.19067697, 0.10580417, -0.06064287, 0.14008261, -0.15711831, -0.16614078, -0.07228401, -0.16009441, -0.14284545, 0.10162447, 0.04395102, 0.04434616, 0.15329728, 0.12350299, -0.16043001, -0.03929144, 0.12050766, 0.04495275, -0.04928276, 0.08366355, 0.12712605, -0.14250121, 0.23608541, -0.07360786, -0.11061829, -0.10740028, -0.02429898, -0.21606438, -0.13635369, -0.05555212, 0.00042244, 0.13811269, 0.01839289, 0.01393478, -0.12160625, 0.15747254, -0.05786225, 0.06739661, 0.07145082, 0.24212055, -0.17996307, 0.06209332, -0.01255785, -0.01183755, -0.07574831, -0.02771455, 0.10756791, -0.18940441, 0.04569100, 0.02640690},
  {0.09945201, -0.08192158, 0.16836773, 0.12048534, 0.01509743, 0.12813997, -0.00053280, 0.13634838, 0.12970972, -0.03384946, -0.01596232, -0.08563473, 0.11016797, -0.09512199, -0.13290893, 0.15307707, -0.03377766, -0.11722222, 0.11633391, -0.11913776, -0.10484235, 0.00130588, 0.01945927, 0.01395224, -0.02992874, -0.09226864, 0.01382223, -0.07938500, -0.03213838, 0.04039507, -0.06011604, -0.08499255, 0.04498621, 0.09127548, -0.03426515, -0.07532505, -0.03929779, -0.10206875, -0.17487441, 0.09443763, -0.10115586, 0.01800587, 0.13088365, 0.12331454, -0.06001835, 0.04695553, -0.11625968, 0.09802858, 0.22237384, -0.20032053, 0.06822780, -0.19215128, 0.09851506, -0.04684193, -0.02009230, 0.15070684, -0.01009496, 0.18313244, -0.03113286, -0.01885138, 0.14011934, -0.03384933, -0.02362533, -0.10563768, 0.09706087, -0.01108604, -0.00460453, 0.17605838, 0.12763633, -0.19001843, 0.04372881, 0.09308556, -0.04195939, -0.14639302, 0.06382936, -0.12471278, -0.11419280, -0.05976191, 0.00391672, 0.10412757, 0.13964894, 0.15944201, 0.22670975, 0.06406476},
  {-0.06336021, -0.21684942, 0.10636206, 0.12784238, 0.18400048, 0.17186512, 0.01913045, -0.17602700, -0.03188198, -0.10012210, 0.16621828, -0.18782774, -0.13197780, -0.08623131, -0.04091534, 0.03576205, 0.09819519, -0.05980275, -0.17522918, -0.01462956, 0.02547149, 0.03897903, -0.22067663, -0.11896556, 0.02527275, -0.02248293, -0.02663985, 0.15032919, 0.11074581, 0.09539672, -0.16568415, 0.15189007, 0.00513477, -0.15650664, -0.02695794, -0.05771314, 0.06603796, 0.15059611, 0.04782562, -0.02457489, -0.14978065, -0.06235920, 0.20412152, -0.00004673, -0.16427590, -0.17756838, -0.06027171, -0.07448793, 0.17216435, -0.13649666, 0.02150455, 0.06787040, 0.18255688, 0.06641544, -0.03360166, 0.18042195, -0.15266222, -0.00199485, 0.11520697, -0.03189573, 0.17039374, 0.13837861, -0.09369461, -0.13171002, -0.26360658, -0.11956026, -0.15749222, -0.06582652, -0.20512834, 0.09339915, -0.28438663, 0.00815536, -0.21074560, -0.07342862, -0.15453877, -0.06071028, -0.03647526, -0.19542794, 0.00870383, 0.12480897, -0.18745084, 0.13041474, 0.13266386, -0.23565912},
  {-0.12196904, 0.10079239, -0.01287436, -0.08139168, 0.07053047, -0.01955532, -0.04667190, 0.22317891, 0.26062667, 0.02989765, -0.01546989, -0.08769668, -0.01750032, -0.04030826, -0.02667664, 0.19555125, 0.00891133, -0.27207986, -0.11587396, -0.14542873, -0.21287386, 0.08691373, -0.22233598, -0.08730124, -0.01683652, -0.03371039, -0.21169816, 0.12465823, 0.05855057, 0.14279182, 0.16492747, -0.03036008, 0.19402194, 0.20173922, -0.25838822, -0.03107114, -0.02223771, 0.15995777, 0.01834399, -0.11677014, 0.03525037, -0.10397390, 0.01617809, 0.09568319, 0.01254384, -0.06882194, 0.12763904, -0.12711288, -0.02934872, 0.00164789, -0.12056137, 0.08402514, -0.10124554, -0.11227744, -0.14470379, -0.10167500, 0.12528290, 0.28802288, 0.10335333, -0.04626620, 0.17037292, -0.03472055, 0.18354890, -0.09175077, -0.04054684, -0.04884403, -0.16903119, -0.01110050, -0.18073732, -0.04920472, -0.16507518, 0.05340869, -0.12099803, 0.21833223, 0.28418085, -0.12328923, 0.01705603, -0.26230568, -0.12412912, -0.01973286, 0.12290582, 0.15706651, 0.02516346, 0.01183291},
  {0.10833781, -0.09360593, -0.01527493, -0.13430133, 0.05492963, -0.12919086, -0.05871397, -0.14062855, 0.15907350, -0.12077230, 0.09259303, -0.11067270, 0.05986061, -0.09120046, -0.04301680, -0.00450702, -0.07699275, 0.14561510, 0.15985151, -0.16610260, -0.02502069, 0.01928185, -0.06492218, -0.11400650, -0.14244889, 0.08790499, 0.03653730, 0.11388792, -0.13521290, 0.01427593, -0.07833630, 0.02646694, -0.08518785, -0.01966956, 0.06662589, 0.02668264, 0.05198042, 0.08197690, 0.04079758, -0.09443710, 0.08729968, -0.04083860, -0.15832444, -0.10275897, 0.14603983, -0.05225396, 0.14433251, 0.13037810, 0.05269879, -0.07471533, 0.04778811, -0.02777475, 0.00172449, -0.15825170, 0.14372011, -0.05797340, -0.14487050, -0.10546796, -0.16386990, 0.02694597, 0.09179753, 0.03253032, -0.06546584, 0.00747913, -0.16659418, -0.07466992, 0.14047246, 0.13230781, 0.06741627, 0.00736249, -0.08774207, -0.08461869, -0.08182302, 0.08907968, -0.01195088, -0.09559808, -0.06219640, 0.17779529, -0.11158523, -0.03170747, 0.03037259, 0.04998517, -0.05073376, -0.13602205},
  {0.03904758, -0.14194046, -0.00839856, -0.02868517, -0.04015011, -0.01681186, -0.04559577, -0.07619119, -0.01130007, 0.13160689, 0.07916379, 0.09037880, -0.11782651, -0.06717915, 0.14330266, -0.09789839, -0.03623132, 0.12476753, 0.00592477, 0.16068907, -0.10247952, 0.00153992, -0.14364688, 0.10098151, -0.01383142, 0.03600441, 0.15806854, -0.11723731, -0.10174431, 0.10642701, -0.15118018, 0.08922238, -0.02722165, -0.01250196, -0.11684945, 0.14205648, -0.05766582, 0.14325999, 0.05617097, 0.15711430, -0.14498819, 0.11876478, -0.13090186, 0.10082419, -0.15375431, -0.15735616, -0.16521965, 0.08339853, 0.02875742, -0.13825603, -0.06064895, -0.16556631, 0.15715016, -0.09899977, -0.12487418, -0.04927282, 0.09593428, 0.01586372, 0.06213679, 0.09828679, -0.15339749, -0.06284538, 0.14427029, -0.11097054, 0.03102433, -0.09537721, 0.08173306, 0.07111989, 0.11859103, 0.13599600, -0.02362503, -0.04540449, -0.04978001, -0.07226832, -0.01872761, -0.05185153, -0.16535109, 0.07342453, 0.04077344, 0.04872183, 0.04378653, -0.04759885, -0.12786016, 0.07414518},
  {0.05545378, 0.16124618, -0.00900703, 0.11882199, 0.06440904, -0.14495593, 0.09500468, 0.17735642, -0.12869309, 0.07236390, 0.03921441, -0.13869484, 0.16982646, -0.12050108, 0.07161357, 0.05901851, -0.09187118, 0.00880741, -0.05921485, -0.11302672, 0.07635112, 0.13540670, -0.09818260, 0.09682132, 0.09158036, -0.00140634, -0.10207088, -0.13493077, 0.06018391, 0.10635246, -0.16001183, -0.01697772, 0.06478874, 0.02610829, -0.03734101, -0.11296911, 0.10212424, -0.15732901, -0.11690884, 0.12196063, 0.02663400, -0.03431470, -0.08433604, -0.09470844, 0.14996837, 0.09581198, 0.17952347, -0.06186499, 0.19137670, -0.13380969, 0.04758772, -0.05549846, 0.01926800, 0.07103030, -0.05527662, 0.03831784, 0.13864563, -0.02921092, -0.00081228, -0.00440969, 0.04273347, -0.02508953, 0.08759261, -0.08088470, -0.06344852, 0.15498422, -0.14743459, -0.02924479, 0.09428120, -0.01738843, -0.18007302, 0.09664475, -0.14868659, 0.03333768, 0.17421858, 0.16272768, -0.14031389, 0.04654606, 0.06056913, -0.09752902, 0.15384375, 0.12528789, 0.09709404, -0.00179426},
  {-0.04299147, 0.04131054, 0.03277212, 0.04114839, 0.00125948, -0.08583437, 0.03413543, 0.10898683, 0.15025564, 0.03815732, 0.00060598, -0.02415052, -0.10228094, -0.11984216, -0.00799771, -0.09520710, 0.10660790, 0.13332105, -0.10702434, -0.18580151, 0.06277464, 0.20159328, 0.06818474, -0.01524501, -0.14539921, 0.05657525, -0.06041272, -0.10279336, -0.10066925, -0.12558061, -0.05529884, 0.15029718, 0.04429209, 0.10353012, -0.02324188, -0.08051113, -0.09532882, -0.08753744, 0.00844350, 0.06880938, 0.05026478, 0.18960744, -0.03836989, -0.11010012, -0.10739768, -0.14482287, 0.02519364, -0.04216348, -0.00235464, -0.02911539, -0.05564183, -0.15672925, 0.01353888, -0.07549835, 0.06981232, -0.04606368, 0.00850334, -0.00289710, 0.02342267, -0.12007958, 0.02087537, 0.03186076, 0.04223956, 0.10816363, 0.00213715, -0.20847522, -0.14802057, 0.05068279, -0.06565659, 0.15945941, -0.04680025, 0.04541741, 0.03651081, -0.12028877, 0.16270445, 0.05106182, 0.13782300, -0.11045545, 0.02601936, -0.10728774, -0.09882585, -0.01010271, -0.07535637, -0.02464064},
  {0.00942568, -0.03634210, -0.00047679, 0.04752553, -0.07583498, -0.08537827, 0.06312142, -0.16180004, -0.15486032, 0.11840817, -0.00267102, 0.14775980, -0.02412844, 0.15985648, -0.00878645, 0.04288545, 0.05056328, 0.12140183, 0.01203496, 0.03201715, 0.10792278, 0.09264649, 0.03939602, -0.01622908, -0.13848791, -0.07723987, 0.06971967, -0.04292605, 0.01791123, 0.08309019, -0.08977377, 0.03015136, 0.05651290, -0.00134106, 0.07194634, 0.13539295, -0.16088687, 0.15407886, 0.14722642, 0.14780498, -0.15785134, -0.07275359, -0.00898938, 0.11172952, 0.14589919, -0.10671991, 0.12437461, -0.14884444, -0.12714970, 0.15301177, -0.12413207, 0.08371655, -0.13815814, -0.12307468, -0.13832539, 0.15472220, -0.04410420, -0.12762336, 0.12511472, -0.06841810, 0.06071759, -0.10943159, -0.06402153, -0.12745433, 0.10943271, 0.07877310, 0.09893154, 0.07733940, -0.12185821, -0.04284219, -0.00206110, 0.12895514, -0.13743401, -0.13009769, -0.01310478, 0.02306355, 0.09515189, 0.16546755, 0.13865440, 0.02786915, -0.11559287, 0.00670672, -0.00901228, 0.03713751},
  {0.04147580, 0.02662314, -0.09917086, -0.08584756, -0.10125353, 0.02781921, 0.07652196, 0.03542043, 0.14183235, 0.05538457, -0.03852268, 0.18513204, 0.14019957, -0.13226697, 0.14772587, -0.19704418, 0.21465887, 0.05999849, -0.01487320, 0.16026740, 0.00525375, 0.09991369, 0.10762426, 0.01777728, -0.24875140, 0.05442199, 0.00091175, -0.15759753, 0.07201006, -0.17747825, -0.15614425, 0.19762784, 0.04872757, 0.16468099, -0.02117843, -0.22988069, -0.16834925, 0.15371519, 0.16883996, 0.03387908, 0.10739768, -0.20178206, -0.20696655, -0.09943613, 0.01021194, 0.00740139, 0.12151806, 0.09782223, -0.25177091, -0.12106006, -0.13694896, 0.13709898, -0.16741921, -0.13677682, 0.09692527, 0.02078690, -0.02764076, 0.21340625, -0.09961005, 0.06434522, 0.08007865, -0.12941387, 0.09938941, 0.10672618, 0.03599137, 0.16597693, -0.10220464, -0.21190615, -0.17730601, 0.13186508, 0.13846470, -0.00754717, -0.04718005, -0.01690523, -0.00765487, 0.01289059, -0.09359173, 0.04470362, 0.06223625, 0.13327260, -0.19114280, 0.19330072, -0.16941106, -0.16888188},
  {-0.08948445, -0.14097038, 0.14814821, -0.13867791, 0.02670527, -0.18357973, 0.02394468, 0.26542747, 0.11436048, 0.16779724, 0.05857101, -0.02926367, 0.28470570, -0.16113138, 0.11593515, 0.03385028, 0.16665310, -0.01576271, -0.09955847, -0.16173129, -0.07692001, 0.06081733, 0.21520707, -0.03829037, -0.14888623, -0.17676952, 0.10023281, 0.03567347, -0.05107666, 0.17731500, 0.08987547, 0.00777180, -0.10240965, 0.10136924, -0.02636447, 0.23178956, -0.09293844, -0.19617167, 0.10309636, -0.09924424, 0.13339593, 0.14452609, 0.11005718, 0.03178774, -0.14588973, 0.13763472, -0.03647901, -0.21429846, -0.13830005, -0.13584088, -0.07358425, -0.13320041, -0.06772498, 0.02088769, 0.08061399, -0.06377787, 0.00443320, -0.12430093, 0.16201183, 0.09413435, 0.22825558, 0.01843777, 0.00109808, 0.05159115, 0.19944471, 0.12386384, 0.12959944, -0.15562630, 0.02593830, -0.14007360, 0.10052632, 0.16262932, 0.13435723, -0.09808271, 0.20217952, -0.18473557, 0.10353408, 0.13321441, -0.11472601, 0.18322928, 0.16641635, 0.13584062, -0.12103499, -0.10376056},
  {-0.16185799, -0.09927671, -0.19776358, 0.16636343, -0.21252561, 0.24526723, -0.03846226, -0.09306325, -0.15169810, 0.21128297, -0.22025751, 0.08694235, 0.03331989, -0.02330201, 0.21424960, -0.21489036, 0.07262229, 0.35976920, -0.25793537, -0.03020794, -0.06231678, -0.05561026, -0.04017465, 0.11359716, 0.00157999, -0.20799738, -0.09210903, 0.23953196, -0.24153332, 0.12129363, 0.08132934, -0.19543912, -0.16628802, -0.13997421, 0.17833397, -0.20771015, 0.30489451, 0.16541854, -0.20000549, 0.25081682, 0.20977749, 0.06688683, 0.05048580, -0.01907612, 0.02428313, -0.23065685, 0.02947215, 0.02189481, 0.00617430, -0.29056969, -0.15080024, 0.10845838, -0.18828292, 0.08420899, 0.06264640, 0.09177399, 0.05193210, -0.00008984, -0.02080612, -0.24518920, -0.10095791, 0.04774089, -0.01206961, 0.08501744, -0.22409408, 0.01220999, -0.06502723, -0.26184058, -0.16202295, 0.01759773, -0.06966634, -0.14067754, -0.18650100, -0.00991207, 0.07940892, 0.14332061, -0.01751044, 0.14755332, -0.07942680, 0.02775870, -0.06440534, 0.13392514, 0.03824447, -0.14093833},
  {-0.12369454, -0.11398865, -0.06364038, 0.02774729, 0.09325156, -0.09713252, -0.18033186, -0.05004491, -0.02323531, -0.12509033, 0.03499909, -0.04149638, -0.10065474, -0.13725650, -0.01014373, 0.08466847, -0.01971061, -0.05148672, -0.02480984, 0.01651504, -0.02312158, -0.09139044, 0.09109651, 0.03626911, 0.07362796, -0.01434138, 0.05901903, 0.09061950, -0.11707160, -0.10877937, 0.07006639, 0.04473007, -0.14250812, -0.05552762, -0.00953250, 0.02342422, -0.08124185, 0.17194937, -0.03435659, 0.01205230, 0.04191522, 0.06625842, -0.15726838, 0.03020242, 0.01866929, -0.12967531, 0.01344175, 0.15381105, -0.05089119, 0.17356862, -0.06485096, -0.05246453, -0.08929081, 0.09616672, 0.12402169, -0.06888939, -0.09273448, 0.13296971, -0.10358887, 0.11814776, -0.17537735, -0.00159337, -0.15836553, -0.02453724, -0.13696252, -0.06371997, -0.08643369, 0.00170744, -0.05399607, -0.14028499, 0.02208575, -0.17055802, -0.03194100, -0.12931889, 0.08697696, -0.12530629, -0.15108958, -0.11996966, 0.11993435, -0.01513975, 0.15361702, -0.15198544, -0.03999394, -0.02559171},
  {0.02065522, 0.23088284, 0.07586566, -0.16798960, 0.04059376, -0.06362233, 0.03385018, -0.05299593, 0.19876380, 0.14063844, 0.03587129, 0.16887602, -0.04951907, 0.03503050, 0.07156423, -0.05789631, -0.01496962, 0.02629899, 0.14308652, 0.12641804, 0.13889268, 0.04856336, -0.01635042, 0.02396308, 0.04844180, 0.16500968, 0.17043772, -0.20243353, 0.17807977, -0.15072323, -0.01017036, -0.07091010, 0.14047833, -0.03830609, 0.14521289, 0.01582726, -0.09946526, -0.07866964, 0.04450195, -0.13353616, 0.04323292, 0.09453450, 0.00416935, -0.12998359, -0.02853912, -0.00476411, 0.02879263, 0.05489802, 0.00455108, 0.10574839, 0.17592952, -0.08464610, -0.09000302, -0.03393837, 0.09741218, -0.12208457, 0.14367421, 0.08186667, -0.00412303, -0.17388546, -0.15966560, 0.16768299, 0.08537125, 0.13536143, 0.10316049, 0.25118485, -0.01271739, -0.28893214, -0.12801574, 0.12633117, 0.03171629, -0.17226160, -0.03098120, -0.07640386, -0.06361542, 0.07479800, 0.21024515, 0.20572950, -0.28932106, 0.10358398, -0.07431436, -0.08051422, 0.01049045, -0.19067712},
  {0.19694015, 0.09827592, 0.17132515, 0.25635010, -0.01972005, 0.02729124, -0.01170035, -0.12173893, 0.01389405, -0.09611687, -0.12215853, 0.10636954, -0.04601618, -0.06712619, -0.15808426, -0.02220190, 0.05758211, -0.01083654, 0.14390670, 0.16811693, -0.16869135, -0.10137329, -0.28424382, -0.10371665, 0.15330014, 0.01860732, -0.02832088, -0.12371547, 0.12938361, -0.08744352, -0.16523638, 0.09883266, -0.00765253, -0.18076302, 0.09051547, 0.02865760, 0.10854011, -0.01827904, -0.05330231, -0.14610735, -0.23632194, -0.12775303, 0.01214544, 0.03899941, -0.05647596, -0.12481450, -0.01495670, 0.26649889, -0.02093904, -0.19503748, 0.09345102, -0.21983311, -0.05960710, -0.00942312, -0.19085892, -0.03752965, 0.07464293, 0.18827106, -0.02720915, 0.13451868, -0.10433956, -0.04728649, -0.01564636, 0.07369884, -0.09791640, -0.11268054, -0.16539630, -0.15393881, -0.08374171, -0.20913999, -0.09943438, -0.09995037, -0.21833110, -0.01993276, -0.28512451, -0.10388444, 0.11067559, -0.17543571, 0.05387414, 0.14628586, 0.10204957, -0.10956956, 0.24734391, 0.00916105},
  {-0.05143762, -0.07530292, 0.24508186, -0.00722489, -0.10362820, -0.20006296, -0.00823124, 0.11247898, 0.03474056, 0.08669318, 0.12348179, 0.07277805, 0.27088511, -0.02518088, -0.15115948, 0.12985054, 0.10978658, -0.13742253, -0.01706943, -0.10468864, 0.33195344, 0.00981309, 0.04726643, -0.20411478, 0.02596939, -0.06376257, -0.02146540, -0.10968592, 0.06588377, 0.09900324, 0.09814003, -0.18307181, 0.04947000, 0.11407734, -0.15845510, 0.12068348, -0.10607644, 0.15927814, 0.12134193, 0.11874086, 0.09427248, 0.19858989, -0.22165801, -0.03710732, 0.08350159, -0.15408491, 0.08213676, -0.23319767, 0.18935999, -0.20261930, -0.16581695, 0.21269542, 0.12881780, -0.17743050, 0.06628373, 0.02246063, 0.06253555, 0.12432878, 0.23070139, -0.00822320, -0.12475757, 0.09265613, 0.03267406, -0.10003410, -0.04482175, -0.18144760, 0.16374390, 0.15213668, -0.10152201, -0.16649333, -0.02947214, -0.05001263, 0.08617559, 0.18408175, 0.31983218, -0.10175700, 0.12772688, -0.10754285, -0.19606818, 0.12418904, 0.07064954, 0.24929404, -0.02636090, 0.03283090},
  {-0.13068978, -0.06978679, 0.16348290, 0.00559248, -0.12028214, -0.07055539, 0.10260437, 0.10590196, -0.16294850, -0.18988475, -0.04862817, 0.14388895, 0.00100493, -0.04932155, 0.08978193, -0.13852347, -0.05396940, 0.05527816, 0.10519531, -0.12516637, 0.12984088, 0.00357440, 0.17920829, 0.18946683, 0.11454771, -0.07680932, -0.00720869, 0.11970173, 0.03366604, -0.12096503, 0.01987547, -0.13326482, -0.10920360, 0.06158525, -0.15811649, -0.12644181, -0.15891509, 0.15019940, 0.03899617, 0.11499137, 0.15823501, 0.12882759, -0.12033857, -0.03721078, 0.10865806, -0.14932406, 0.01903646, 0.17293969, -0.06511318, -0.15806001, -0.10184284, -0.01547719, -0.14357407, -0.05966876, -0.05974067, 0.10599376, 0.07173375, 0.02405019, 0.13123532, -0.09146757, -0.12833476, -0.09639264, -0.09685425, 0.00602010, 0.08866543, 0.01064170, 0.10534595, -0.02757967, 0.14960103, -0.04630388, 0.16146454, -0.13205791, -0.11216005, 0.16384272, -0.14831126, -0.09238210, 0.07285608, 0.06007627, -0.03944647, 0.02277290, -0.00200574, -0.11649389, 0.13045889, -0.05675378},
  {-0.08020312, 0.15152842, -0.14515589, -0.11289264, -0.05023025, 0.10110529, -0.06600309, 0.18066843, -0.16327266, -0.14514020, -0.04201674, 0.04904106, 0.18500979, 0.00465574, 0.14211340, 0.04491654, 0.13900600, -0.08779874, -0.01492028, -0.06065126, -0.09553361, 0.10819681, 0.09451092, 0.08820889, -0.12694266, 0.07118251, -0.07965244, 0.26430953, 0.12388013, -0.08329418, 0.06950901, -0.09817797, -0.01012370, 0.12853909, 0.17408273, 0.18294282, 0.06588364, -0.13571206, -0.02976740, -0.02422711, -0.12916180, -0.10554810, -0.00687562, -0.11322769, 0.10000653, -0.12256912, 0.10999817, 0.20751446, -0.18861037, 0.08652133, 0.21435665, 0.04583063, 0.03442461, -0.04363430, -0.08543295, -0.01360559, -0.09851884, -0.17380302, 0.04258405, 0.17034175, -0.16980916, 0.00990307, 0.03543246, 0.14712408, 0.08383586, -0.01867411, -0.13894519, -0.10115553, 0.00705810, 0.10117806, -0.01356602, -0.04257835, 0.09178220, 0.17289765, 0.05930737, -0.20064282, -0.08210602, -0.12409301, 0.01263925, 0.05269601, 0.17835580, -0.22450608, 0.02337906, -0.01410666},
  {0.12553452, -0.10043242, -0.06508992, 0.09291698, -0.12391347, -0.17001000, -0.03278731, 0.11206559, 0.05807553, 0.05624449, 0.08302164, 0.15770194, 0.01501868, 0.07630710, 0.20630014, -0.04721407, -0.07239161, 0.01048223, -0.06133848, 0.18529657, 0.11225692, 0.05152003, -0.13069242, 0.16713461, 0.04244967, 0.19391303, 0.02007267, -0.01803112, 0.00231484, -0.04265450, -0.00455972, -0.17016327, -0.07084002, 0.24486288, -0.26546651, -0.22790931, -0.12046915, 0.03175130, -0.24873076, 0.05809599, -0.04424083, 0.10566943, 0.04717676, 0.04534179, 0.15325223, -0.21061590, 0.13515812, -0.22672717, -0.02283383, -0.15345436, 0.02731139, 0.05572005, 0.12120857, -0.11220738, 0.17458393, 0.05435921, 0.21712324, 0.21283346, 0.01974252, 0.01305557, -0.16617133, 0.07883342, -0.00482443, -0.02590217, 0.03074511, 0.19966714, -0.11257237, -0.09458237, -0.16833127, 0.14552540, -0.16297118, 0.00154755, 0.24693424, 0.14696026, 0.09533376, -0.02640069, 0.14684795, 0.27966234, -0.07613299, -0.27502024, 0.04138179, 0.22144248, -0.19530724, -0.02579108},
  {0.13575001, 0.02332241, -0.13674627, 0.05929486, -0.19940071, 0.11946481, -0.10096996, -0.16944179, -0.06848909, 0.01606421, -0.17484787, 0.03030185, -0.17392839, -0.12936006, -0.09750937, 0.01038178, 0.14154191, 0.10755195, -0.05080481, 0.03791633, -0.08850658, 0.15175845, -0.01478690, -0.05019437, 0.02691339, -0.07201907, -0.05367935, -0.01935228, -0.13146012, 0.05967344, -0.12842235, -0.02685912, 0.08894565, 0.17379439, -0.14559038, -0.10669512, -0.03693992, 0.12563667, 0.12647913, 0.07074638, 0.01283942, -0.15108828, -0.10625801, 0.11675525, 0.10717650, 0.07590239, -0.00496957, 0.16559516, -0.02891638, -0.17413671, 0.16812320, -0.18122318, -0.00674528, 0.04085584, -0.20002683, 0.17988500, -0.06348030, -0.06493633, -0.01305024, 0.08229011, 0.17304908, -0.03413398, 0.19549988, 0.07758697, -0.09168618, 0.14109842, -0.10487178, -0.05519971, -0.07968740, -0.13300122, 0.16189642, -0.04346610, -0.04334226, 0.04379867, -0.01615575, -0.03780620, -0.03706063, 0.15661931, 0.08595384, -0.07801203, 0.03969189, 0.06287910, 0.10367217, -0.10653422},
  {-0.12306847, -0.11835667, 0.08470351, 0.03505956, 0.02692483, -0.16281730, 0.15302522, 0.00738548, -0.11225842, -0.03622483, -0.14810452, -0.15124591, -0.14832874, 0.12102412, 0.02373771, -0.14022928, 0.10245796, -0.07274068, -0.02698407, 0.05476765, -0.03338513, -0.14177634, 0.07856412, -0.11440253, 0.09440680, -0.02299835, -0.15741812, -0.10505830, 0.15857592, 0.00800977, -0.15238094, -0.02577626, 0.04626185, -0.16951180, 0.09338795, 0.15667132, 0.13404854, -0.07884470, 0.11697501, -0.05422597, -0.13416745, 0.04335911, -0.12687507, 0.11906426, -0.11234073, 0.09541132, 0.05245718, 0.10475899, 0.06059991, 0.17069794, -0.05370748, -0.08323076, 0.10859471, -0.01168776, 0.05032241, 0.02515045, -0.12286604, -0.17067152, -0.13021488, 0.12803335, -0.00376199, -0.02995205, 0.10977995, 0.03184839, -0.05674597, 0.00473217, 0.10013758, -0.11320915, -0.07021414, 0.09542246, 0.01794222, -0.09448293, -0.15913372, -0.06875981, -0.15006882, 0.14523050, 0.10061992, -0.07298453, 0.14936195, -0.00093432, -0.11044096, 0.04887333, -0.02871280, -0.15459146},
  {0.20598854, -0.00120995, -0.00675467, 0.16878110, 0.11024157, -0.03292336, -0.00558956, 0.01742744, -0.07782527, -0.06024456, 0.14937204, 0.08841362, -0.12362146, -0.00720157, 0.12423920, 0.10574168, -0.06947093, 0.14301373, 0.08582685, 0.02709247, 0.10082079, -0.06218289, 0.06687999, 0.11918119, 0.14866775, 0.01098333, 0.14410117, 0.02634654, 0.09719082, -0.18276900, -0.09547943, 0.12028189, 0.06088904, 0.06758355, -0.06419386, 0.16245334, 0.00284664, -0.13926119, 0.02309649, 0.20761719, 0.06086084, -0.08244164, 0.09920691, -0.04447869, -0.14904003, -0.13073593, -0.14937015, 0.09946755, -0.15286450, 0.00962574, -0.06028313, -0.14146660, -0.19917554, -0.15301514, 0.10576957, -0.04856966, -0.06688461, -0.04052641, 0.08070041, -0.06239453, 0.12719770, -0.13700880, -0.13512866, -0.07599231, -0.09655351, -0.03878882, 0.05215626, 0.02126601, 0.11948603, 0.05713415, 0.19504142, 0.01741098, 0.06948075, -0.16109447, -0.12359508, -0.12740637, 0.02813832, -0.06968930, -0.17255247, 0.02709457, -0.03521237, 0.07799902, 0.07417743, 0.03345568},
  {-0.05039764, -0.07138583, 0.02982030, 0.11073159, -0.12443776, 0.06163910, 0.07516555, -0.06191750, -0.13066477, 0.16210493, -0.03310652, -0.10616250, -0.06581383, 0.07729553, -0.01969996, 0.11047108, -0.14958030, -0.10559919, -0.15225847, 0.12403475, -0.04866010, -0.05805765, 0.16321713, 0.14628190, -0.07039711, -0.01584590, 0.03172902, -0.03979896, -0.11962300, -0.04451951, -0.13113233, 0.03482325, -0.06839377, 0.00278922, -0.06156388, -0.06639904, 0.07142781, -0.01450047, -0.07808905, -0.04685707, 0.08117522, 0.08449294, 0.08103038, -0.13082570, -0.02706288, 0.16381089, -0.17680955, -0.01172912, -0.04317588, 0.00447655, 0.07605763, 0.17258038, -0.04378612, 0.03050241, 0.10747259, -0.12310356, 0.10701560, -0.06086973, 0.09568848, 0.07527670, -0.01248161, 0.02050822, 0.03755588, 0.13907374, -0.09643050, -0.16073750, 0.06856343, 0.17426622, -0.05798420, -0.09884667, -0.09373064, -0.00972534, -0.05978373, 0.07847264, 0.04655902, 0.16261984, -0.14663826, -0.09560633, 0.05596630, 0.05676425, -0.07772731, 0.06924620, 0.04433304, -0.02051642},
  {-0.00802764, -0.07440563, 0.16492596, -0.22400649, -0.16504374, -0.19828117, -0.08324568, 0.09019879, -0.03176832, 0.16263622, -0.04056710, -0.14001693, 0.01794910, 0.02658922, -0.18306375, 0.02121050, 0.06720780, -0.04167562, -0.03291395, -0.08286739, -0.01318200, 0.19602312, 0.09356523, -0.01024948, 0.18747263, 0.07298735, 0.13130409, 0.04482891, -0.20163254, 0.21102650, 0.00453299, 0.13462605, -0.00800831, 0.06995337, -0.14886826, -0.06753263, -0.21212861, 0.05009218, 0.04183345, 0.19758907, -0.07336956, 0.07257104, -0.04648973, 0.07704753, -0.09254485, -0.06533945, -0.07689039, -0.12429761, 0.14420310, -0.10985246, 0.02145583, -0.04892663, 0.10460016, -0.05817473, -0.14443177, 0.08207523, 0.14776069, 0.14792953, -0.00741053, 0.08220147, 0.18424606, 0.12173773, 0.11547439, 0.05562039, 0.07396345, 0.20788409, -0.15673128, 0.12139887, -0.17803973, -0.12396207, -0.03917319, 0.07805324, -0.02291041, 0.00608274, 0.06249668, 0.00233260, -0.08512532, 0.14171702, -0.00360516, -0.03068513, -0.02021788, 0.02905544, -0.23743999, -0.15042594},
  {0.09164419, 0.12531291, 0.12596561, -0.02916100, -0.09855259, 0.08532164, -0.01903204, 0.13676584, -0.09361283, -0.11343249, -0.04557344, -0.14875348, -0.01216798, -0.17648922, -0.02198572, 0.08745319, -0.12943763, -0.00624004, 0.10444568, -0.22032508, 0.07106762, 0.17149550, -0.01333945, -0.01898007, -0.04274036, -0.11913368, 0.14484009, 0.28523538, -0.07578909, 0.12090944, 0.11377529, -0.09091203, -0.24376380, 0.21807501, 0.14358199, 0.23767312, 0.19260167, 0.16414569, 0.06284466, -0.03649043, -0.02599229, 0.23790599, -0.05671119, -0.00430075, -0.13502575, -0.07069668, 0.10147240, -0.04327586, -0.06968728, 0.01706660, 0.20096132, -0.05906454, 0.01224298, 0.01655844, -0.15698402, 0.20304140, 0.03497378, 0.09687433, -0.04738350, 0.21212573, 0.00201153, -0.10633200, 0.18530488, 0.00787650, 0.00237131, -0.02177794, 0.03022486, -0.03007112, -0.06279597, -0.21348943, -0.07173137, 0.18728238, -0.24878812, -0.15160905, 0.17291096, -0.05032872, 0.06637170, -0.16935228, -0.13624796, 0.15528074, 0.12113488, 0.24131323, 0.02372123, -0.16313654},
  {0.23439781, -0.06113720, 0.07260137, 0.25723282, -0.07388504, 0.22661835, -0.09879644, -0.17859431, -0.06925132, 0.13588201, -0.11138017, 0.09249733, 0.11663087, -0.07564420, 0.20441321, 0.04938506, -0.06226753, 0.21032652, 0.09019936, 0.22122106, -0.14569858, 0.21650608, -0.10733284, 0.07833862, -0.09888609, 0.13426028, 0.01443424, 0.04578534, -0.15995039, -0.14466554, -0.18032184, 0.17265595, -0.04193875, 0.03879118, -0.05234857, -0.16145988, -0.11395813, -0.05294676, -0.14479089, 0.00795547, -0.14708006, -0.11745659, 0.08938237, 0.11501698, -0.12329929, 0.03083124, -0.18120849, 0.22059213, -0.06731591, 0.06591482, 0.03643906, -0.13649940, 0.14456061, -0.15061715, -0.12004771, 0.14029332, -0.12834898, 0.08516069, -0.15538345, -0.16032223, -0.10027558, 0.01692893, -0.16793567, -0.01295353, 0.07023791, 0.05972138, 0.03613174, 0.00967749, -0.16739763, 0.01658054, -0.19186515, -0.16675784, -0.03579408, 0.05262868, 0.03140618, 0.03535774, -0.04395586, 0.05764760, 0.12928459, -0.01722272, 0.06443018, -0.03456771, 0.05542022, 0.07302705},
  {-0.04271302, -0.14368403, -0.24492559, 0.06818233, -0.26499733, -0.21552201, 0.02846986, -0.04828760, -0.06440216, -0.01515362, -0.20743442, 0.06143725, 0.00938652, 0.06597564, 0.08952832, -0.10673392, 0.03984346, 0.10623066, -0.25476751, -0.18153538, 0.13530149, 0.04781098, 0.06459659, -0.19077462, 0.17779298, 0.07112899, -0.05907190, -0.15688679, 0.00901601, 0.01837174, 0.06465463, -0.28907442, 0.04155274, -0.01991632, 0.14560051, -0.18888421, 0.23904417, 0.05507549, -0.34075499, 0.24239179, 0.31899312, -0.12381102, 0.08245145, 0.08211687, -0.05049977, -0.11992267, 0.22383268, -0.23976883, -0.01185255, -0.04698559, 0.06662913, 0.08700034, -0.03879097, -0.07004975, -0.19614284, 0.04668928, 0.08521243, 0.10795271, -0.00373927, -0.15968226, 0.09419274, 0.04265752, 0.03023280, -0.02411550, 0.18265602, -0.12290245, -0.03277783, -0.08046213, 0.08465945, -0.14364870, 0.02019716, 0.08455749, 0.34930310, 0.12568851, -0.02913177, -0.23317374, -0.14151217, 0.19482112, -0.09972471, -0.18337841, 0.14916524, 0.15338770, -0.07982615, 0.08005397},
};
# 15 "lenet_proj/lenet_top.cpp" 2
# 1 "C:\\Users\\Baron\\Desktop\\EE_297_Repo\\EE_297\\ML_PATH_EE297\\EE297_env\\projects\\weights\\fc2_biases.h" 1


float fc2_biases[84] = {0.01060092, 0.00723130, 0.03904375, 0.02487461, 0.02209386, 0.03217300, -0.01865483, 0.00650184, 0.03691243, -0.00302679, 0.04062876, 0.03815170, -0.01750781, -0.01031033, 0.07022925, 0.03466945, 0.02416221, 0.01563440, -0.01015371, 0.03800901, -0.02752754, 0.03915425, 0.01311538, 0.03348059, 0.00249563, 0.00961574, 0.03479423, 0.01774396, 0.02976553, -0.00124620, -0.05794446, 0.00771522, 0.03055758, 0.01358142, -0.00409628, 0.00763834, -0.04886415, 0.01754335, -0.00633393, 0.03131881, 0.02944464, 0.00970297, 0.02137812, -0.01710732, -0.02869227, -0.00445917, -0.02998608, 0.02859618, -0.00967391, 0.02519134, 0.02431833, 0.03381012, -0.01853413, -0.03356053, 0.05141604, -0.00089672, 0.05280669, 0.01869473, -0.00942094, -0.00536504, 0.00333359, -0.03030432, 0.02837808, 0.01073742, -0.00751735, 0.01368918, -0.00768976, -0.01875030, -0.02614124, 0.05412877, 0.02058670, -0.01850410, 0.03676616, 0.06470057, -0.03283054, 0.03273867, -0.02201647, 0.05898795, -0.04451396, -0.00893197, 0.02081069, 0.00437155, 0.02693078, -0.03751938};
# 16 "lenet_proj/lenet_top.cpp" 2

# 1 "C:\\Users\\Baron\\Desktop\\EE_297_Repo\\EE_297\\ML_PATH_EE297\\EE297_env\\projects\\weights\\fc3_weights.h" 1


float fc3_weights[84][10] = {
  {-0.30615529, -0.06538301, -0.11424963, 0.19757006, 0.09822221, -0.20781331, -0.30090755, 0.26065516, 0.07727417, -0.13361862},
  {0.07916936, -0.26968956, -0.11962896, -0.09219329, 0.10279988, -0.13569592, -0.05661177, 0.19279702, 0.21166949, -0.27622411},
  {-0.01399916, 0.07908049, 0.25523371, -0.24210882, 0.02765396, -0.32605270, -0.21269311, -0.11806749, 0.08959735, 0.16736634},
  {-0.15610406, -0.25164238, -0.20519964, 0.13551602, -0.25370058, -0.12459125, -0.26917493, -0.05755079, 0.01917292, 0.02050564},
  {-0.19866396, -0.29035389, 0.14351100, -0.13957395, -0.00567055, -0.28329989, -0.05188229, 0.02696234, 0.25671822, 0.13820480},
  {-0.21088429, 0.17220557, -0.22074264, 0.24553771, -0.00546408, -0.08598164, -0.39644927, -0.31104660, -0.01996144, 0.37421843},
  {-0.03209250, -0.22214323, 0.08010634, 0.03484701, 0.08462285, -0.20280725, 0.20089433, 0.03741387, 0.16069387, 0.09431276},
  {0.26853046, -0.41997108, -0.14775021, 0.04814107, 0.07060583, -0.22718866, 0.28501871, -0.28658554, -0.30205664, -0.02655205},
  {0.17106512, 0.29379684, 0.30097872, -0.03344199, 0.11437949, -0.24301518, 0.03860696, 0.12387589, 0.22203198, -0.04420028},
  {0.11456612, 0.13088924, -0.03416538, 0.12962559, -0.24575010, -0.02727265, 0.14034253, 0.00092663, -0.25944817, -0.20519450},
  {0.10211473, -0.24045314, 0.22229195, -0.10714658, 0.11273274, -0.07910967, -0.01343083, 0.16536534, 0.28270721, 0.14421241},
  {-0.19272628, 0.25078326, -0.27479643, -0.09580924, -0.03063771, -0.21297027, 0.03392232, -0.02744456, 0.04550653, 0.02550310},
  {0.26593402, 0.17512111, 0.08625443, 0.16144937, 0.17483132, -0.19529186, 0.16432869, -0.18353425, -0.40249899, 0.10701861},
  {-0.11931141, -0.05124472, -0.01097808, -0.09938879, 0.24158329, 0.02196306, 0.17617026, -0.19788072, -0.01182002, -0.03055930},
  {-0.09229275, -0.06278419, 0.02974643, 0.03164652, -0.38983795, -0.05858904, -0.02115658, -0.23365472, 0.18379174, -0.23475979},
  {-0.03552260, 0.05908240, 0.10477508, -0.15736581, -0.05297568, -0.32947800, -0.09263563, -0.19031858, -0.01149991, 0.03719703},
  {-0.19720972, 0.08492704, 0.06529345, -0.15809175, -0.10875387, 0.23826618, 0.05449000, -0.28389153, -0.16870962, -0.33475155},
  {-0.11425908, 0.10523783, -0.38536125, 0.15637662, -0.27674124, 0.06260730, 0.21124737, 0.01034493, 0.02055269, -0.14386597},
  {-0.04815087, -0.14658332, 0.20675312, 0.07743585, 0.27077016, 0.10570629, -0.09407952, 0.05197733, 0.09294299, -0.10075175},
  {-0.30014294, -0.29578739, -0.12862484, 0.06136452, 0.20837824, -0.00913696, -0.16122220, 0.03757431, 0.24690321, -0.25175968},
  {0.03771693, 0.19689009, 0.44745144, -0.09475014, -0.05421039, 0.02202072, 0.08014706, 0.05841678, -0.17054147, -0.34892571},
  {-0.25853831, 0.08046194, 0.01716731, -0.24725923, 0.07280230, 0.16850558, -0.14848368, 0.24527454, 0.18931630, 0.15011188},
  {0.04340856, -0.09299618, -0.06312171, -0.21229862, -0.08705704, 0.30999225, 0.30448544, -0.00275847, 0.10046246, 0.27261633},
  {-0.30447412, -0.21554840, 0.07973441, -0.09043158, 0.22150776, 0.29539487, 0.03092750, -0.12795223, 0.15680815, 0.05245054},
  {-0.25767010, 0.15374832, -0.07784180, 0.30482584, -0.23320816, -0.28483680, -0.19535184, 0.29336175, -0.04795053, -0.08485553},
  {0.05458205, -0.13474414, 0.24852681, -0.01042740, -0.10360461, -0.18122236, 0.10736941, 0.28848222, 0.14147730, -0.20477158},
  {0.13179137, -0.08936980, -0.20134149, -0.30362076, -0.08322716, 0.08914592, 0.31386209, 0.05011354, 0.10278995, 0.13754527},
  {-0.18769054, 0.44549185, -0.00625240, -0.12504390, 0.24065287, 0.06902140, -0.02291097, -0.18005116, -0.25260320, 0.01784918},
  {0.22241777, 0.08183692, -0.26982257, -0.08117961, 0.19899723, -0.10675608, 0.03115979, 0.12001237, 0.13685058, 0.16699487},
  {0.01578706, 0.01358400, 0.23039021, -0.12111659, -0.04962992, -0.00251954, 0.11169779, -0.18055387, -0.07593274, 0.21913174},
  {0.11600290, -0.14035556, -0.15132219, 0.09434029, 0.03760456, 0.08638579, -0.00777985, -0.06636124, -0.26207703, -0.05459149},
  {-0.30398804, -0.32816857, 0.28886360, 0.23932897, 0.15622787, -0.16083899, -0.15652689, 0.20190802, 0.19166793, 0.01563467},
  {0.27014029, -0.20793490, 0.06453737, 0.08604106, -0.30737346, 0.12631227, -0.10052439, 0.01776484, -0.02935832, -0.21439460},
  {0.22187503, 0.20304789, 0.03756268, -0.37006107, 0.08910774, -0.11085189, 0.09510426, 0.16322261, -0.09325566, -0.08407892},
  {0.03546209, 0.07391389, -0.25123405, -0.25705129, 0.26382953, -0.00199124, -0.10513357, -0.40644744, -0.31731305, 0.29454404},
  {-0.06326436, -0.33270571, -0.08717761, -0.09953463, 0.33355200, -0.14562197, -0.09957286, -0.02155295, -0.13885209, 0.28186414},
  {0.21423393, 0.00953964, -0.14962280, -0.11964324, -0.13325608, -0.10140056, -0.11920103, -0.17568837, -0.21752854, 0.23052847},
  {-0.09788647, 0.38728365, -0.05950575, -0.29065108, 0.24140033, 0.15351409, -0.12215345, 0.33692807, -0.47688234, 0.09900402},
  {-0.14840890, -0.07226861, 0.27986532, 0.22396216, 0.00269195, -0.22357596, 0.20488977, -0.18169659, -0.32621646, -0.36308900},
  {0.20060864, 0.08534649, 0.00243239, 0.22225419, -0.25963461, 0.30440906, -0.03185911, 0.24624635, -0.03762131, -0.09247413},
  {0.09748912, -0.13267644, 0.09141405, -0.10343656, -0.30811861, 0.12584050, 0.16875963, 0.17710668, -0.03076548, -0.22191373},
  {0.26247832, -0.34633908, -0.10702885, -0.42375636, -0.17654867, 0.02002983, -0.10625337, 0.13778467, -0.33505633, 0.12602620},
  {-0.10118077, -0.29991710, 0.01276974, 0.13851301, -0.19644414, 0.06997915, -0.15193370, -0.26191339, 0.02677359, 0.11664564},
  {-0.15694085, 0.12297703, 0.21906349, -0.05291168, 0.00842789, 0.07421585, 0.22624186, -0.14509670, 0.19699970, -0.22852156},
  {-0.00116806, -0.11867457, 0.12791532, -0.15277876, 0.18819879, -0.22019896, 0.20737967, -0.06417646, -0.23929138, 0.06569116},
  {0.00614794, -0.14950813, 0.01689682, 0.15287642, 0.01019968, -0.28442097, -0.08535823, -0.28864726, -0.08371138, 0.41582155},
  {-0.12090620, 0.08343139, -0.08042458, -0.00353966, -0.13874623, -0.23557106, 0.18671054, -0.47648531, -0.05389088, -0.27371526},
  {-0.29577875, -0.02267179, -0.19232933, 0.29848802, 0.01085548, 0.06684986, -0.06378279, -0.29015821, 0.07340748, 0.01816088},
  {0.08074206, -0.27606076, 0.14880203, -0.17598952, -0.32660145, -0.60477453, -0.24890423, 0.07257646, -0.08348209, -0.06542832},
  {-0.31967369, -0.19316356, 0.11460094, -0.03210386, -0.06133213, -0.16236623, -0.24462363, -0.18775079, 0.11874886, -0.25281730},
  {-0.01272198, -0.31322429, -0.22456235, -0.04384556, 0.26799181, 0.23489261, -0.23742886, -0.17705119, -0.07622951, 0.08226403},
  {0.15190560, -0.12375768, -0.08985434, -0.09683502, -0.04658442, -0.07009216, 0.06039346, -0.40378296, 0.02402849, -0.16286439},
  {-0.32418138, 0.06304511, 0.34574276, -0.05827308, -0.01181545, 0.25922638, -0.10886403, 0.21404326, 0.00456739, 0.12746051},
  {-0.22808771, 0.10750812, -0.19032165, 0.15420884, 0.08002258, -0.07278602, 0.05987899, -0.03912755, -0.14271975, -0.10504564},
  {0.13139902, -0.14824313, 0.26201466, -0.17316759, -0.35532886, -0.07566594, 0.13648362, -0.36468825, 0.29963234, -0.13212949},
  {0.21593417, -0.28004116, -0.00945201, 0.09935973, -0.19834952, 0.20766287, -0.15558659, 0.19855033, -0.25377828, 0.12591080},
  {-0.14486313, 0.30451006, 0.16700308, -0.31792641, -0.00714936, -0.09369326, 0.23357807, -0.20167905, -0.05796339, 0.09204735},
  {0.23906383, 0.25433502, -0.06346061, -0.05673321, -0.28113917, -0.08184946, -0.27635407, 0.28646410, -0.14081539, -0.05075984},
  {0.24467535, -0.05658612, 0.09119680, 0.21885380, 0.07321737, -0.14574453, 0.13941769, 0.03705471, -0.28603283, -0.05972368},
  {0.14016634, -0.20217657, 0.28443307, 0.27602366, 0.16911021, 0.19138315, -0.22329131, 0.08766303, -0.24531887, -0.21837789},
  {-0.31848150, -0.23937546, -0.13354617, -0.23649007, -0.00179346, -0.03131045, -0.21773845, 0.10074717, -0.18948172, 0.17117356},
  {-0.03913943, -0.20845377, 0.05558648, 0.01720848, 0.20764020, -0.17541437, -0.09823347, -0.18628792, -0.00845034, 0.18602635},
  {0.20062907, 0.17692237, -0.19372651, 0.07659274, -0.04963969, -0.07396066, -0.36179104, -0.26903185, -0.22821471, 0.15776877},
  {-0.11579033, 0.25673285, 0.02951208, 0.25907454, 0.12355514, 0.25600004, 0.13263321, 0.01369775, -0.08582129, 0.09697371},
  {0.01670056, -0.02383562, -0.16871054, -0.10639872, 0.46057770, 0.16010484, 0.17810105, -0.38008788, -0.08771846, -0.13515158},
  {-0.22861761, 0.19023895, 0.20678140, -0.25088286, 0.23897465, 0.10762132, 0.07784383, 0.13561752, 0.13142176, -0.32348603},
  {0.10463487, 0.06400441, 0.21242222, -0.10981274, -0.14951766, 0.19888183, 0.07448968, 0.17627099, 0.03418660, 0.23383005},
  {-0.19187538, -0.05545015, 0.01398479, -0.14271155, 0.05539997, -0.06924678, -0.06613003, 0.19479692, 0.33877429, 0.27052912},
  {0.10997435, 0.07255404, -0.27185148, 0.06096926, 0.02047335, -0.07789722, -0.13545850, -0.16865866, -0.31901425, -0.15539375},
  {0.10836916, -0.09231379, 0.03497860, -0.11895867, -0.27437258, 0.03536739, -0.29063833, -0.34217450, 0.32304972, 0.00109289},
  {-0.09148230, -0.32153147, 0.02942253, 0.01187234, 0.32808617, -0.17913249, 0.16696385, 0.05753705, -0.13507344, -0.37824231},
  {-0.04029936, -0.30560610, -0.02722302, -0.18297754, -0.06413730, -0.00640469, 0.10853439, -0.03081458, -0.24488395, 0.03478719},
  {0.11789598, 0.15672480, -0.25282738, -0.08825857, 0.15136732, 0.23836648, 0.12971430, 0.04557505, 0.19972275, -0.16508460},
  {0.16670533, 0.25861993, 0.12219957, -0.29528698, -0.13600919, -0.09014720, -0.06031337, -0.20702381, 0.22557001, 0.18113947},
  {0.14057328, -0.29656249, -0.06050767, -0.07791895, -0.05689811, -0.32428926, -0.02184467, 0.13411836, -0.34042558, 0.33281508},
  {-0.19088691, 0.03838181, 0.10540047, -0.00156618, -0.36496219, 0.05186991, 0.10310571, 0.09024142, 0.26865894, -0.18429749},
  {0.16728480, 0.13851963, -0.05889038, 0.27199557, 0.29378879, -0.34475204, 0.23090637, -0.09373819, 0.04457214, -0.20316678},
  {-0.08380499, 0.01169984, -0.37597689, -0.11000854, -0.21321158, 0.23666769, 0.14386562, -0.06523398, 0.11289179, -0.16701779},
  {-0.26549917, 0.13073580, 0.07553852, -0.19268642, -0.10038073, -0.37821817, 0.21747114, -0.09159897, -0.14900535, 0.03528260},
  {-0.19795860, -0.05920200, 0.10287100, 0.19123656, 0.11670826, 0.03504942, -0.38235691, 0.20229490, -0.32429102, 0.24099953},
  {0.23434772, -0.05528068, -0.24951029, -0.08017619, 0.28546181, 0.24279839, 0.22222558, -0.19130215, 0.08284652, 0.22017188},
  {0.08879028, 0.21372271, -0.03867583, -0.21263736, 0.04763094, -0.18292743, -0.27937683, 0.23329014, -0.09443952, 0.02677773},
  {0.14162537, 0.03230709, -0.27424410, 0.23318002, -0.17364441, -0.11002921, -0.19999102, 0.05178869, -0.02631560, 0.30830437},
  {-0.00714854, -0.06759454, 0.17676553, -0.05551434, -0.14873011, -0.03372090, 0.23203243, -0.23958042, -0.20381404, -0.04779435},
};
# 18 "lenet_proj/lenet_top.cpp" 2
# 1 "C:\\Users\\Baron\\Desktop\\EE_297_Repo\\EE_297\\ML_PATH_EE297\\EE297_env\\projects\\weights\\fc3_biases.h" 1


float fc3_biases[10] = {-0.03310282, 0.03876049, -0.00998327, -0.00449713, -0.02797686, 0.00783589, -0.02781201, -0.02393499, 0.02630505, 0.02129479};
# 19 "lenet_proj/lenet_top.cpp" 2








typedef float data_t;



__attribute__((sdx_kernel("lenet_top", 0))) void lenet_top(
    data_t image[28][28],
    data_t conv1_out[28][28][6],
    data_t pool1_out[28 / 2][28 / 2][6],
    data_t conv2_out[10][10][16],
    data_t pool2_out[5][5][16],
    data_t flat_out[400],
    data_t fc1_out[120]) {_ssdm_SpecArrayDimSize(image, 28);_ssdm_SpecArrayDimSize(conv1_out, 28);_ssdm_SpecArrayDimSize(pool1_out, 14);_ssdm_SpecArrayDimSize(conv2_out, 10);_ssdm_SpecArrayDimSize(pool2_out, 5);_ssdm_SpecArrayDimSize(flat_out, 400);_ssdm_SpecArrayDimSize(fc1_out, 120);
#pragma HLS TOP name=lenet_top
# 38 "lenet_proj/lenet_top.cpp"


#pragma HLS INTERFACE m_axi port=image offset=slave bundle=gmem

#pragma HLS INTERFACE m_axi port=conv1_out offset=slave bundle=gmem
#pragma HLS INTERFACE m_axi port=pool1_out offset=slave bundle=gmem
#pragma HLS INTERFACE m_axi port=conv2_out offset=slave bundle=gmem
#pragma HLS INTERFACE m_axi port=pool2_out offset=slave bundle=gmem
#pragma HLS INTERFACE m_axi port=flat_out offset=slave bundle=gmem
#pragma HLS INTERFACE m_axi port=fc1_out offset=slave bundle=gmem

#pragma HLS INTERFACE s_axilite port=image bundle=control
#pragma HLS INTERFACE s_axilite port=conv1_out bundle=control
#pragma HLS INTERFACE s_axilite port=pool1_out bundle=control
#pragma HLS INTERFACE s_axilite port=conv2_out bundle=control
#pragma HLS INTERFACE s_axilite port=pool2_out bundle=control
#pragma HLS INTERFACE s_axilite port=flat_out bundle=control
#pragma HLS INTERFACE s_axilite port=fc1_out bundle=control

#pragma HLS INTERFACE s_axilite port=return bundle=control




 conv2d_layer(image, conv1_out, conv1_weights, conv1_biases);


    maxpool_layer(conv1_out, pool1_out);


    conv2d_6to16_layer(pool1_out, conv2_out, conv2_weights, conv2_biases);


    maxpool2_layer(conv2_out, pool2_out);


    flatten_layer(pool2_out, flat_out);


    fc_layer<400, 120>(flat_out, fc1_out, fc1_weights, fc1_biases);




}
