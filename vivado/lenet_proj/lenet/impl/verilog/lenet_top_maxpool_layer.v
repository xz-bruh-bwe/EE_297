// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module lenet_top_maxpool_layer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        input_r,
        output_r
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_pp0_stage1 = 6'd4;
parameter    ap_ST_fsm_pp0_stage2 = 6'd8;
parameter    ap_ST_fsm_pp0_stage3 = 6'd16;
parameter    ap_ST_fsm_state30 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] input_r;
input  [63:0] output_r;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage2;
reg   [0:0] icmp_ln55_reg_1083;
reg   [0:0] icmp_ln55_reg_1083_pp0_iter1_reg;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln55_reg_1083_pp0_iter3_reg;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln55_reg_1083_pp0_iter2_reg;
reg    ap_enable_reg_pp0_iter4;
reg    gmem_blk_n_AW;
reg    ap_enable_reg_pp0_iter5;
reg   [0:0] icmp_ln55_reg_1083_pp0_iter5_reg;
reg    gmem_blk_n_W;
reg    gmem_blk_n_B;
reg    ap_enable_reg_pp0_iter6;
reg   [0:0] icmp_ln55_reg_1083_pp0_iter6_reg;
reg   [10:0] indvar_flatten44_reg_188;
reg   [7:0] indvar_flatten_reg_200;
reg   [4:0] i_reg_211;
reg   [4:0] j_reg_223;
reg   [2:0] c_reg_234;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
reg    ap_block_state10_io;
wire    ap_block_state14_pp0_stage0_iter3;
reg    ap_block_state18_pp0_stage0_iter4;
wire    ap_block_state22_pp0_stage0_iter5;
wire    ap_block_state26_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
reg   [3:0] tmp_reg_1078;
reg   [3:0] tmp_reg_1078_pp0_iter1_reg;
reg   [3:0] tmp_reg_1078_pp0_iter2_reg;
reg   [3:0] tmp_reg_1078_pp0_iter3_reg;
wire   [0:0] icmp_ln55_fu_263_p2;
reg   [0:0] icmp_ln55_reg_1083_pp0_iter4_reg;
wire   [0:0] icmp_ln56_fu_269_p2;
reg   [0:0] icmp_ln56_reg_1087;
reg   [0:0] icmp_ln56_reg_1087_pp0_iter1_reg;
reg   [0:0] icmp_ln56_reg_1087_pp0_iter2_reg;
reg   [0:0] icmp_ln56_reg_1087_pp0_iter3_reg;
reg   [0:0] icmp_ln56_reg_1087_pp0_iter4_reg;
wire   [0:0] or_ln55_fu_289_p2;
reg   [0:0] or_ln55_reg_1099;
reg   [0:0] or_ln55_reg_1099_pp0_iter1_reg;
reg   [0:0] or_ln55_reg_1099_pp0_iter2_reg;
reg   [0:0] or_ln55_reg_1099_pp0_iter3_reg;
reg   [0:0] or_ln55_reg_1099_pp0_iter4_reg;
wire   [4:0] select_ln56_fu_295_p3;
reg   [4:0] select_ln56_reg_1107;
reg   [4:0] select_ln56_reg_1107_pp0_iter1_reg;
reg   [4:0] select_ln56_reg_1107_pp0_iter2_reg;
reg   [4:0] select_ln56_reg_1107_pp0_iter3_reg;
reg   [4:0] select_ln56_reg_1107_pp0_iter4_reg;
wire   [7:0] add_ln56_1_fu_303_p2;
reg   [7:0] add_ln56_1_reg_1117;
wire   [4:0] empty_fu_309_p2;
reg   [4:0] empty_reg_1122;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
wire    ap_block_state11_pp0_stage1_iter2;
reg    ap_block_state11_io;
reg    ap_block_state15_pp0_stage1_iter3;
wire    ap_block_state19_pp0_stage1_iter4;
wire    ap_block_state23_pp0_stage1_iter5;
reg    ap_block_state23_io;
wire    ap_block_state27_pp0_stage1_iter6;
reg    ap_block_pp0_stage1_11001;
wire   [4:0] select_ln55_fu_315_p3;
reg   [4:0] select_ln55_reg_1127;
wire   [4:0] add_ln56_fu_322_p2;
reg   [4:0] add_ln56_reg_1132;
reg   [3:0] p_mid_reg_1143;
reg   [3:0] p_mid_reg_1143_pp0_iter1_reg;
reg   [3:0] p_mid_reg_1143_pp0_iter2_reg;
reg   [3:0] p_mid_reg_1143_pp0_iter3_reg;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state8_pp0_stage2_iter1;
reg    ap_block_state8_io;
wire    ap_block_state12_pp0_stage2_iter2;
reg    ap_block_state16_pp0_stage2_iter3;
wire    ap_block_state20_pp0_stage2_iter4;
wire    ap_block_state24_pp0_stage2_iter5;
reg    ap_block_state24_io;
wire    ap_block_state28_pp0_stage2_iter6;
reg    ap_block_pp0_stage2_11001;
wire   [14:0] grp_fu_1036_p2;
reg   [14:0] mul_ln59_reg_1153;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state9_pp0_stage3_iter1;
reg    ap_block_state9_io;
wire    ap_block_state13_pp0_stage3_iter2;
reg    ap_block_state17_pp0_stage3_iter3;
wire    ap_block_state21_pp0_stage3_iter4;
wire    ap_block_state25_pp0_stage3_iter5;
reg    ap_block_state29_pp0_stage3_iter6;
reg    ap_block_pp0_stage3_11001;
wire   [10:0] add_ln55_2_fu_345_p2;
reg   [10:0] add_ln55_2_reg_1158;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] select_ln56_4_fu_360_p3;
reg   [4:0] select_ln56_4_reg_1168;
wire   [4:0] add_ln57_fu_365_p2;
reg   [4:0] add_ln57_reg_1173;
wire   [7:0] select_ln56_5_fu_370_p3;
reg   [7:0] select_ln56_5_reg_1178;
wire   [63:0] add_ln59_fu_388_p2;
reg   [63:0] add_ln59_reg_1183;
wire   [63:0] add_ln59_3_fu_411_p2;
reg   [63:0] add_ln59_3_reg_1189;
wire   [63:0] select_ln55_2_fu_416_p3;
reg   [63:0] select_ln55_2_reg_1195;
wire   [4:0] select_ln55_3_fu_423_p3;
reg   [4:0] select_ln55_3_reg_1201;
reg   [4:0] select_ln55_3_reg_1201_pp0_iter2_reg;
reg   [4:0] select_ln55_3_reg_1201_pp0_iter3_reg;
reg   [4:0] select_ln55_3_reg_1201_pp0_iter4_reg;
wire   [2:0] select_ln55_7_fu_430_p3;
reg   [2:0] select_ln55_7_reg_1206;
wire   [14:0] grp_fu_1042_p2;
reg   [14:0] mul_ln59_1_reg_1211;
wire   [63:0] add_ln61_fu_448_p2;
reg   [63:0] add_ln61_reg_1216;
wire   [63:0] select_ln56_1_fu_467_p3;
reg   [63:0] select_ln56_1_reg_1221;
wire  signed [63:0] sext_ln59_1_fu_502_p1;
reg  signed [63:0] sext_ln59_1_reg_1226;
reg   [63:0] gmem_addr_reg_1231;
wire   [63:0] select_ln56_2_fu_551_p3;
reg   [63:0] select_ln56_2_reg_1237;
wire  signed [63:0] sext_ln60_1_fu_593_p1;
reg  signed [63:0] sext_ln60_1_reg_1243;
reg   [63:0] gmem_addr_1_reg_1248;
reg   [63:0] gmem_addr_2_reg_1254;
reg   [63:0] gmem_addr_3_reg_1260;
reg   [31:0] gmem_addr_read_reg_1266;
reg   [7:0] tmp_1_reg_1271;
wire   [22:0] trunc_ln64_fu_680_p1;
reg   [22:0] trunc_ln64_reg_1276;
reg   [31:0] gmem_addr_1_read_reg_1281;
reg   [7:0] tmp_2_reg_1286;
wire   [22:0] trunc_ln64_1_fu_694_p1;
reg   [22:0] trunc_ln64_1_reg_1291;
wire   [0:0] icmp_ln64_fu_698_p2;
reg   [0:0] icmp_ln64_reg_1296;
wire   [0:0] icmp_ln64_1_fu_703_p2;
reg   [0:0] icmp_ln64_1_reg_1301;
wire   [31:0] v0_fu_708_p1;
reg   [31:0] v0_reg_1306;
wire   [31:0] v1_fu_712_p1;
reg   [31:0] v1_reg_1312;
reg   [31:0] gmem_addr_2_read_reg_1318;
wire   [0:0] icmp_ln64_2_fu_716_p2;
reg   [0:0] icmp_ln64_2_reg_1323;
wire   [0:0] icmp_ln64_3_fu_721_p2;
reg   [0:0] icmp_ln64_3_reg_1328;
reg   [7:0] tmp_4_reg_1333;
wire   [22:0] trunc_ln65_fu_736_p1;
reg   [22:0] trunc_ln65_reg_1338;
wire   [12:0] mul_ln68_fu_743_p2;
reg   [12:0] mul_ln68_reg_1343;
reg   [31:0] gmem_addr_3_read_reg_1348;
wire   [31:0] max1_fu_769_p3;
reg   [31:0] max1_reg_1353;
reg   [31:0] max1_reg_1353_pp0_iter5_reg;
reg   [7:0] tmp_5_reg_1360;
wire   [22:0] trunc_ln65_1_fu_785_p1;
reg   [22:0] trunc_ln65_1_reg_1365;
wire   [0:0] icmp_ln65_fu_789_p2;
reg   [0:0] icmp_ln65_reg_1370;
wire   [0:0] icmp_ln65_1_fu_794_p2;
reg   [0:0] icmp_ln65_1_reg_1375;
wire   [31:0] v2_fu_825_p1;
reg   [31:0] v2_reg_1380;
wire   [31:0] v3_fu_829_p1;
reg   [31:0] v3_reg_1386;
wire   [0:0] icmp_ln65_2_fu_833_p2;
reg   [0:0] icmp_ln65_2_reg_1392;
wire   [0:0] icmp_ln65_3_fu_838_p2;
reg   [0:0] icmp_ln65_3_reg_1397;
wire   [13:0] add_ln68_fu_875_p2;
reg   [13:0] add_ln68_reg_1402;
wire   [31:0] max2_fu_901_p3;
reg   [31:0] max2_reg_1407;
reg   [63:0] gmem_addr_4_reg_1414;
wire   [31:0] max_final_fu_1026_p3;
reg   [31:0] max_final_reg_1420;
reg    ap_block_pp0_stage3_subdone;
reg    ap_condition_pp0_flush_enable;
reg    ap_condition_pp0_exit_iter4_state18;
reg   [10:0] ap_phi_mux_indvar_flatten44_phi_fu_192_p4;
reg   [7:0] ap_phi_mux_indvar_flatten_phi_fu_204_p4;
reg   [4:0] ap_phi_mux_i_phi_fu_215_p4;
reg   [4:0] ap_phi_mux_j_phi_fu_227_p4;
reg   [2:0] ap_phi_mux_c_phi_fu_238_p4;
wire  signed [63:0] sext_ln59_fu_522_p1;
wire  signed [63:0] sext_ln60_fu_612_p1;
wire  signed [63:0] sext_ln61_fu_636_p1;
wire  signed [63:0] sext_ln62_fu_660_p1;
wire  signed [63:0] sext_ln68_fu_934_p1;
reg    ap_block_pp0_stage2_01001;
reg   [31:0] grp_fu_245_p0;
reg   [31:0] grp_fu_245_p1;
wire   [0:0] icmp_ln57_fu_283_p2;
wire   [4:0] select_ln55_1_fu_275_p3;
wire   [4:0] p_mid1_fu_351_p2;
wire   [4:0] shl_ln_fu_376_p3;
wire   [63:0] zext_ln59_fu_384_p1;
wire   [2:0] add_ln55_fu_393_p2;
wire   [4:0] shl_ln59_mid1_fu_399_p3;
wire   [63:0] zext_ln59_5_fu_407_p1;
wire   [63:0] zext_ln59_2_fu_437_p1;
wire   [14:0] grp_fu_1048_p2;
wire   [63:0] zext_ln61_fu_445_p1;
wire   [63:0] add_ln59_1_fu_440_p2;
wire   [63:0] zext_ln59_7_fu_459_p1;
wire   [63:0] select_ln55_4_fu_453_p3;
wire   [63:0] add_ln59_4_fu_462_p2;
wire   [9:0] shl_ln59_1_fu_474_p3;
wire   [7:0] shl_ln59_2_fu_485_p3;
wire   [10:0] zext_ln59_3_fu_481_p1;
wire   [10:0] zext_ln59_4_fu_492_p1;
wire   [10:0] sub_ln59_fu_496_p2;
wire   [63:0] add_ln59_2_fu_506_p2;
wire   [61:0] trunc_ln_fu_512_p4;
wire   [63:0] add_ln61_2_fu_532_p2;
wire   [14:0] grp_fu_1055_p2;
wire   [63:0] zext_ln61_1_fu_543_p1;
wire   [63:0] select_ln55_5_fu_537_p3;
wire   [63:0] add_ln61_3_fu_546_p2;
wire   [4:0] or_ln60_fu_558_p2;
wire   [9:0] shl_ln1_fu_563_p3;
wire   [7:0] shl_ln60_1_fu_575_p3;
wire   [10:0] zext_ln60_fu_571_p1;
wire   [10:0] zext_ln60_1_fu_583_p1;
wire   [10:0] sub_ln60_fu_587_p2;
wire   [63:0] add_ln60_fu_597_p2;
wire   [61:0] trunc_ln1_fu_602_p4;
wire   [63:0] add_ln61_1_fu_622_p2;
wire   [61:0] trunc_ln2_fu_626_p4;
wire   [63:0] add_ln62_fu_646_p2;
wire   [61:0] trunc_ln3_fu_650_p4;
wire   [3:0] mul_ln68_fu_743_p0;
wire   [9:0] mul_ln68_fu_743_p1;
wire   [0:0] or_ln64_fu_749_p2;
wire   [0:0] or_ln64_1_fu_753_p2;
wire   [0:0] and_ln64_fu_757_p2;
wire   [0:0] grp_fu_245_p2;
wire   [0:0] and_ln64_1_fu_763_p2;
wire   [9:0] mul_ln68_1_fu_808_p0;
wire   [3:0] mul_ln68_1_fu_808_p1;
wire   [12:0] select_ln55_6_fu_799_p3;
wire   [12:0] mul_ln68_1_fu_808_p2;
wire   [12:0] select_ln56_3_fu_814_p3;
wire   [8:0] shl_ln2_fu_843_p3;
wire   [6:0] shl_ln68_1_fu_854_p3;
wire   [9:0] zext_ln68_fu_850_p1;
wire   [9:0] zext_ln68_1_fu_861_p1;
wire   [9:0] sub_ln68_fu_865_p2;
wire   [13:0] zext_ln56_2_fu_821_p1;
wire  signed [13:0] sext_ln68_1_fu_871_p1;
wire   [0:0] or_ln65_fu_881_p2;
wire   [0:0] or_ln65_1_fu_885_p2;
wire   [0:0] and_ln65_fu_889_p2;
wire   [0:0] and_ln65_1_fu_895_p2;
wire   [63:0] zext_ln55_fu_907_p1;
wire  signed [63:0] sext_ln68_2_fu_915_p1;
wire   [63:0] add_ln55_1_fu_910_p2;
wire   [63:0] add_ln68_1_fu_918_p2;
wire   [61:0] trunc_ln7_fu_924_p4;
wire   [31:0] bitcast_ln66_fu_944_p1;
wire   [31:0] bitcast_ln66_1_fu_961_p1;
wire   [7:0] tmp_7_fu_947_p4;
wire   [22:0] trunc_ln66_fu_957_p1;
wire   [0:0] icmp_ln66_1_fu_984_p2;
wire   [0:0] icmp_ln66_fu_978_p2;
wire   [7:0] tmp_8_fu_964_p4;
wire   [22:0] trunc_ln66_1_fu_974_p1;
wire   [0:0] icmp_ln66_3_fu_1002_p2;
wire   [0:0] icmp_ln66_2_fu_996_p2;
wire   [0:0] or_ln66_fu_990_p2;
wire   [0:0] or_ln66_1_fu_1008_p2;
wire   [0:0] and_ln66_fu_1014_p2;
wire   [0:0] and_ln66_1_fu_1020_p2;
wire   [4:0] grp_fu_1036_p0;
wire   [10:0] grp_fu_1036_p1;
wire   [10:0] grp_fu_1042_p0;
wire   [4:0] grp_fu_1042_p1;
wire   [4:0] grp_fu_1048_p0;
wire   [10:0] grp_fu_1048_p1;
wire   [10:0] grp_fu_1055_p0;
wire   [4:0] grp_fu_1055_p1;
reg    grp_fu_245_ce;
reg    ap_block_pp0_stage3_00001;
reg    ap_block_pp0_stage1_00001;
reg    ap_block_pp0_stage0_00001;
reg    grp_fu_1036_ce;
reg    grp_fu_1042_ce;
reg    grp_fu_1048_ce;
reg    grp_fu_1055_ce;
wire    ap_CS_fsm_state30;
reg   [5:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [14:0] grp_fu_1036_p00;
wire   [14:0] grp_fu_1042_p10;
wire   [14:0] grp_fu_1048_p00;
wire   [14:0] grp_fu_1055_p10;
wire   [12:0] mul_ln68_1_fu_808_p10;
wire   [12:0] mul_ln68_fu_743_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

lenet_top_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U67(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_245_p0),
    .din1(grp_fu_245_p1),
    .ce(grp_fu_245_ce),
    .opcode(5'd2),
    .dout(grp_fu_245_p2)
);

lenet_top_mul_4ns_10ns_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 13 ))
mul_4ns_10ns_13_1_1_U68(
    .din0(mul_ln68_fu_743_p0),
    .din1(mul_ln68_fu_743_p1),
    .dout(mul_ln68_fu_743_p2)
);

lenet_top_mul_10ns_4ns_13_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 4 ),
    .dout_WIDTH( 13 ))
mul_10ns_4ns_13_1_1_U69(
    .din0(mul_ln68_1_fu_808_p0),
    .din1(mul_ln68_1_fu_808_p1),
    .dout(mul_ln68_1_fu_808_p2)
);

lenet_top_mul_mul_5ns_11ns_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 15 ))
mul_mul_5ns_11ns_15_4_1_U70(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1036_p0),
    .din1(grp_fu_1036_p1),
    .ce(grp_fu_1036_ce),
    .dout(grp_fu_1036_p2)
);

lenet_top_mul_mul_11ns_5ns_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 15 ))
mul_mul_11ns_5ns_15_4_1_U71(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1042_p0),
    .din1(grp_fu_1042_p1),
    .ce(grp_fu_1042_ce),
    .dout(grp_fu_1042_p2)
);

lenet_top_mul_mul_5ns_11ns_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 15 ))
mul_mul_5ns_11ns_15_4_1_U72(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1048_p0),
    .din1(grp_fu_1048_p1),
    .ce(grp_fu_1048_ce),
    .dout(grp_fu_1048_p2)
);

lenet_top_mul_mul_11ns_5ns_15_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 5 ),
    .dout_WIDTH( 15 ))
mul_mul_11ns_5ns_15_4_1_U73(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1055_p0),
    .din1(grp_fu_1055_p1),
    .ce(grp_fu_1055_ce),
    .dout(grp_fu_1055_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter4_state18)) begin
                ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter3;
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_1083_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        c_reg_234 <= select_ln55_7_reg_1206;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_reg_234 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_1083 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_211 <= select_ln56_4_reg_1168;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_211 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_1083 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten44_reg_188 <= add_ln55_2_reg_1158;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten44_reg_188 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_1083 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_200 <= select_ln56_5_reg_1178;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_200 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_1083 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_223 <= add_ln57_reg_1173;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_223 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln55_2_reg_1158 <= add_ln55_2_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln55_fu_263_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln56_1_reg_1117 <= add_ln56_1_fu_303_p2;
        icmp_ln56_reg_1087 <= icmp_ln56_fu_269_p2;
        or_ln55_reg_1099 <= or_ln55_fu_289_p2;
        select_ln56_reg_1107 <= select_ln56_fu_295_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_1083 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln56_reg_1132 <= add_ln56_fu_322_p2;
        select_ln55_reg_1127 <= select_ln55_fu_315_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_1083 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln57_reg_1173 <= add_ln57_fu_365_p2;
        select_ln56_4_reg_1168 <= select_ln56_4_fu_360_p3;
        select_ln56_5_reg_1178 <= select_ln56_5_fu_370_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_1083 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln59_3_reg_1189 <= add_ln59_3_fu_411_p2;
        select_ln55_2_reg_1195 <= select_ln55_2_fu_416_p3;
        select_ln55_3_reg_1201[4 : 2] <= select_ln55_3_fu_423_p3[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln59_reg_1183 <= add_ln59_fu_388_p2;
        icmp_ln55_reg_1083 <= icmp_ln55_fu_263_p2;
        icmp_ln55_reg_1083_pp0_iter1_reg <= icmp_ln55_reg_1083;
        icmp_ln55_reg_1083_pp0_iter2_reg <= icmp_ln55_reg_1083_pp0_iter1_reg;
        icmp_ln55_reg_1083_pp0_iter3_reg <= icmp_ln55_reg_1083_pp0_iter2_reg;
        icmp_ln55_reg_1083_pp0_iter4_reg <= icmp_ln55_reg_1083_pp0_iter3_reg;
        icmp_ln55_reg_1083_pp0_iter5_reg <= icmp_ln55_reg_1083_pp0_iter4_reg;
        icmp_ln55_reg_1083_pp0_iter6_reg <= icmp_ln55_reg_1083_pp0_iter5_reg;
        icmp_ln56_reg_1087_pp0_iter1_reg <= icmp_ln56_reg_1087;
        icmp_ln56_reg_1087_pp0_iter2_reg <= icmp_ln56_reg_1087_pp0_iter1_reg;
        icmp_ln56_reg_1087_pp0_iter3_reg <= icmp_ln56_reg_1087_pp0_iter2_reg;
        icmp_ln56_reg_1087_pp0_iter4_reg <= icmp_ln56_reg_1087_pp0_iter3_reg;
        max1_reg_1353_pp0_iter5_reg <= max1_reg_1353;
        or_ln55_reg_1099_pp0_iter1_reg <= or_ln55_reg_1099;
        or_ln55_reg_1099_pp0_iter2_reg <= or_ln55_reg_1099_pp0_iter1_reg;
        or_ln55_reg_1099_pp0_iter3_reg <= or_ln55_reg_1099_pp0_iter2_reg;
        or_ln55_reg_1099_pp0_iter4_reg <= or_ln55_reg_1099_pp0_iter3_reg;
        select_ln55_3_reg_1201_pp0_iter2_reg[4 : 2] <= select_ln55_3_reg_1201[4 : 2];
        select_ln55_3_reg_1201_pp0_iter3_reg[4 : 2] <= select_ln55_3_reg_1201_pp0_iter2_reg[4 : 2];
        select_ln55_3_reg_1201_pp0_iter4_reg[4 : 2] <= select_ln55_3_reg_1201_pp0_iter3_reg[4 : 2];
        select_ln56_reg_1107_pp0_iter1_reg <= select_ln56_reg_1107;
        select_ln56_reg_1107_pp0_iter2_reg <= select_ln56_reg_1107_pp0_iter1_reg;
        select_ln56_reg_1107_pp0_iter3_reg <= select_ln56_reg_1107_pp0_iter2_reg;
        select_ln56_reg_1107_pp0_iter4_reg <= select_ln56_reg_1107_pp0_iter3_reg;
        tmp_reg_1078 <= {{ap_phi_mux_i_phi_fu_215_p4[4:1]}};
        tmp_reg_1078_pp0_iter1_reg <= tmp_reg_1078;
        tmp_reg_1078_pp0_iter2_reg <= tmp_reg_1078_pp0_iter1_reg;
        tmp_reg_1078_pp0_iter3_reg <= tmp_reg_1078_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (or_ln55_reg_1099_pp0_iter1_reg == 1'd1) & (icmp_ln56_reg_1087_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln61_reg_1216 <= add_ln61_fu_448_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln55_reg_1083_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln68_reg_1402 <= add_ln68_fu_875_p2;
        icmp_ln65_2_reg_1392 <= icmp_ln65_2_fu_833_p2;
        icmp_ln65_3_reg_1397 <= icmp_ln65_3_fu_838_p2;
        v2_reg_1380 <= v2_fu_825_p1;
        v3_reg_1386 <= v3_fu_829_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (or_ln55_reg_1099 == 1'd1) & (icmp_ln56_reg_1087 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        empty_reg_1122[4 : 1] <= empty_fu_309_p2[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0))) begin
        gmem_addr_1_read_reg_1281 <= m_axi_gmem_RDATA;
        icmp_ln64_1_reg_1301 <= icmp_ln64_1_fu_703_p2;
        icmp_ln64_reg_1296 <= icmp_ln64_fu_698_p2;
        tmp_2_reg_1286 <= {{m_axi_gmem_RDATA[30:23]}};
        trunc_ln64_1_reg_1291 <= trunc_ln64_1_fu_694_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_1083_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        gmem_addr_1_reg_1248 <= sext_ln60_fu_612_p1;
        select_ln56_2_reg_1237 <= select_ln56_2_fu_551_p3;
        sext_ln60_1_reg_1243[63 : 4] <= sext_ln60_1_fu_593_p1[63 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0))) begin
        gmem_addr_2_read_reg_1318 <= m_axi_gmem_RDATA;
        icmp_ln64_2_reg_1323 <= icmp_ln64_2_fu_716_p2;
        icmp_ln64_3_reg_1328 <= icmp_ln64_3_fu_721_p2;
        tmp_4_reg_1333 <= {{m_axi_gmem_RDATA[30:23]}};
        trunc_ln65_reg_1338 <= trunc_ln65_fu_736_p1;
        v0_reg_1306 <= v0_fu_708_p1;
        v1_reg_1312 <= v1_fu_712_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_1083_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        gmem_addr_2_reg_1254 <= sext_ln61_fu_636_p1;
        gmem_addr_3_reg_1260 <= sext_ln62_fu_660_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0))) begin
        gmem_addr_3_read_reg_1348 <= m_axi_gmem_RDATA;
        icmp_ln65_1_reg_1375 <= icmp_ln65_1_fu_794_p2;
        icmp_ln65_reg_1370 <= icmp_ln65_fu_789_p2;
        max1_reg_1353 <= max1_fu_769_p3;
        tmp_5_reg_1360 <= {{m_axi_gmem_RDATA[30:23]}};
        trunc_ln65_1_reg_1365 <= trunc_ln65_1_fu_785_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln55_reg_1083_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        gmem_addr_4_reg_1414 <= sext_ln68_fu_934_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0))) begin
        gmem_addr_read_reg_1266 <= m_axi_gmem_RDATA;
        tmp_1_reg_1271 <= {{m_axi_gmem_RDATA[30:23]}};
        trunc_ln64_reg_1276 <= trunc_ln64_fu_680_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_1083_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        gmem_addr_reg_1231 <= sext_ln59_fu_522_p1;
        select_ln56_1_reg_1221 <= select_ln56_1_fu_467_p3;
        sext_ln59_1_reg_1226[63 : 3] <= sext_ln59_1_fu_502_p1[63 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln55_reg_1083_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        max2_reg_1407 <= max2_fu_901_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln55_reg_1083_pp0_iter5_reg == 1'd0))) begin
        max_final_reg_1420 <= max_final_fu_1026_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_1083 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (or_ln55_reg_1099 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_ln59_1_reg_1211 <= grp_fu_1042_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        mul_ln59_reg_1153 <= grp_fu_1036_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln55_reg_1099_pp0_iter3_reg == 1'd1) & (icmp_ln56_reg_1087_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_ln68_reg_1343 <= mul_ln68_fu_743_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_1083 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (or_ln55_reg_1099 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_mid_reg_1143 <= {{add_ln56_fu_322_p2[4:1]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_mid_reg_1143_pp0_iter1_reg <= p_mid_reg_1143;
        p_mid_reg_1143_pp0_iter2_reg <= p_mid_reg_1143_pp0_iter1_reg;
        p_mid_reg_1143_pp0_iter3_reg <= p_mid_reg_1143_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln55_reg_1083 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln55_7_reg_1206 <= select_ln55_7_fu_430_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_condition_pp0_exit_iter4_state18 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter4_state18 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_1083 == 1'd1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_1083_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_c_phi_fu_238_p4 = select_ln55_7_reg_1206;
    end else begin
        ap_phi_mux_c_phi_fu_238_p4 = c_reg_234;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_1083 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_215_p4 = select_ln56_4_reg_1168;
    end else begin
        ap_phi_mux_i_phi_fu_215_p4 = i_reg_211;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_1083 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten44_phi_fu_192_p4 = add_ln55_2_reg_1158;
    end else begin
        ap_phi_mux_indvar_flatten44_phi_fu_192_p4 = indvar_flatten44_reg_188;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_1083 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_204_p4 = select_ln56_5_reg_1178;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_204_p4 = indvar_flatten_reg_200;
    end
end

always @ (*) begin
    if (((icmp_ln55_reg_1083 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_j_phi_fu_227_p4 = add_ln57_reg_1173;
    end else begin
        ap_phi_mux_j_phi_fu_227_p4 = j_reg_223;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln55_reg_1083_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln55_reg_1083_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((icmp_ln55_reg_1083_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln55_reg_1083_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln55_reg_1083_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln55_reg_1083_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln55_reg_1083_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_1036_ce = 1'b1;
    end else begin
        grp_fu_1036_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_1042_ce = 1'b1;
    end else begin
        grp_fu_1042_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_1048_ce = 1'b1;
    end else begin
        grp_fu_1048_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_1055_ce = 1'b1;
    end else begin
        grp_fu_1055_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_245_ce = 1'b1;
    end else begin
        grp_fu_245_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        grp_fu_245_p0 = max1_reg_1353;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        grp_fu_245_p0 = v2_fu_825_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_245_p0 = v0_fu_708_p1;
    end else begin
        grp_fu_245_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        grp_fu_245_p1 = max2_reg_1407;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        grp_fu_245_p1 = v3_fu_829_p1;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        grp_fu_245_p1 = v1_fu_712_p1;
    end else begin
        grp_fu_245_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln55_reg_1083_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m_axi_gmem_ARADDR = gmem_addr_3_reg_1260;
    end else if (((icmp_ln55_reg_1083_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        m_axi_gmem_ARADDR = gmem_addr_2_reg_1254;
    end else if (((icmp_ln55_reg_1083_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        m_axi_gmem_ARADDR = gmem_addr_1_reg_1248;
    end else if (((icmp_ln55_reg_1083_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        m_axi_gmem_ARADDR = gmem_addr_reg_1231;
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln55_reg_1083_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln55_reg_1083_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln55_reg_1083_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln55_reg_1083_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln55_reg_1083_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln55_reg_1083_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln55_reg_1083_pp0_iter5_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter6 == 1'b1) & (ap_enable_reg_pp0_iter5 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln55_1_fu_910_p2 = (output_r + zext_ln55_fu_907_p1);

assign add_ln55_2_fu_345_p2 = (indvar_flatten44_reg_188 + 11'd1);

assign add_ln55_fu_393_p2 = (3'd1 + ap_phi_mux_c_phi_fu_238_p4);

assign add_ln56_1_fu_303_p2 = (8'd1 + ap_phi_mux_indvar_flatten_phi_fu_204_p4);

assign add_ln56_fu_322_p2 = (5'd2 + select_ln55_fu_315_p3);

assign add_ln57_fu_365_p2 = (5'd2 + select_ln56_reg_1107);

assign add_ln59_1_fu_440_p2 = (zext_ln59_2_fu_437_p1 + add_ln59_reg_1183);

assign add_ln59_2_fu_506_p2 = ($signed(select_ln56_1_fu_467_p3) + $signed(sext_ln59_1_fu_502_p1));

assign add_ln59_3_fu_411_p2 = (input_r + zext_ln59_5_fu_407_p1);

assign add_ln59_4_fu_462_p2 = (select_ln55_2_reg_1195 + zext_ln59_7_fu_459_p1);

assign add_ln59_fu_388_p2 = (zext_ln59_fu_384_p1 + input_r);

assign add_ln60_fu_597_p2 = ($signed(select_ln56_1_reg_1221) + $signed(sext_ln60_1_fu_593_p1));

assign add_ln61_1_fu_622_p2 = ($signed(select_ln56_2_reg_1237) + $signed(sext_ln59_1_reg_1226));

assign add_ln61_2_fu_532_p2 = (64'd672 + add_ln59_3_reg_1189);

assign add_ln61_3_fu_546_p2 = (select_ln55_2_reg_1195 + zext_ln61_1_fu_543_p1);

assign add_ln61_fu_448_p2 = (zext_ln61_fu_445_p1 + add_ln59_reg_1183);

assign add_ln62_fu_646_p2 = ($signed(select_ln56_2_reg_1237) + $signed(sext_ln60_1_reg_1243));

assign add_ln68_1_fu_918_p2 = ($signed(sext_ln68_2_fu_915_p1) + $signed(add_ln55_1_fu_910_p2));

assign add_ln68_fu_875_p2 = ($signed(zext_ln56_2_fu_821_p1) + $signed(sext_ln68_1_fu_871_p1));

assign and_ln64_1_fu_763_p2 = (grp_fu_245_p2 & and_ln64_fu_757_p2);

assign and_ln64_fu_757_p2 = (or_ln64_fu_749_p2 & or_ln64_1_fu_753_p2);

assign and_ln65_1_fu_895_p2 = (grp_fu_245_p2 & and_ln65_fu_889_p2);

assign and_ln65_fu_889_p2 = (or_ln65_fu_881_p2 & or_ln65_1_fu_885_p2);

assign and_ln66_1_fu_1020_p2 = (grp_fu_245_p2 & and_ln66_fu_1014_p2);

assign and_ln66_fu_1014_p2 = (or_ln66_fu_990_p2 & or_ln66_1_fu_1008_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = ((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0)) | ((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_gmem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0)) | ((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp0_iter2 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_00001 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((1'b1 == ap_block_state11_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state23_io)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((1'b1 == ap_block_state11_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state23_io)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state8_io)) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state24_io)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state8_io)) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state24_io)));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_00001 = (((m_axi_gmem_BVALID == 1'b0) & (icmp_ln55_reg_1083_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage3_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state9_io)) | ((m_axi_gmem_BVALID == 1'b0) & (icmp_ln55_reg_1083_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state9_io)) | ((m_axi_gmem_BVALID == 1'b0) & (icmp_ln55_reg_1083_pp0_iter6_reg == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1)));
end

always @ (*) begin
    ap_block_state10_io = ((icmp_ln55_reg_1083_pp0_iter1_reg == 1'd0) & (m_axi_gmem_ARREADY == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln55_reg_1083_pp0_iter2_reg == 1'd0));
end

assign ap_block_state11_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_pp0_stage1_iter3 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_block_state16_pp0_stage2_iter3 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_block_state17_pp0_stage3_iter3 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0));
end

always @ (*) begin
    ap_block_state18_pp0_stage0_iter4 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln55_reg_1083_pp0_iter3_reg == 1'd0));
end

assign ap_block_state19_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state23_io = ((m_axi_gmem_AWREADY == 1'b0) & (icmp_ln55_reg_1083_pp0_iter5_reg == 1'd0));
end

assign ap_block_state23_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_io = ((m_axi_gmem_WREADY == 1'b0) & (icmp_ln55_reg_1083_pp0_iter5_reg == 1'd0));
end

assign ap_block_state24_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage3_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage2_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state29_pp0_stage3_iter6 = ((m_axi_gmem_BVALID == 1'b0) & (icmp_ln55_reg_1083_pp0_iter6_reg == 1'd0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((icmp_ln55_reg_1083_pp0_iter1_reg == 1'd0) & (m_axi_gmem_ARREADY == 1'b0));
end

assign ap_block_state8_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((icmp_ln55_reg_1083_pp0_iter1_reg == 1'd0) & (m_axi_gmem_ARREADY == 1'b0));
end

assign ap_block_state9_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln66_1_fu_961_p1 = max2_reg_1407;

assign bitcast_ln66_fu_944_p1 = max1_reg_1353_pp0_iter5_reg;

assign empty_fu_309_p2 = (i_reg_211 | 5'd1);

assign grp_fu_1036_p0 = grp_fu_1036_p00;

assign grp_fu_1036_p00 = ap_phi_mux_i_phi_fu_215_p4;

assign grp_fu_1036_p1 = 15'd672;

assign grp_fu_1042_p0 = 15'd672;

assign grp_fu_1042_p1 = grp_fu_1042_p10;

assign grp_fu_1042_p10 = add_ln56_fu_322_p2;

assign grp_fu_1048_p0 = grp_fu_1048_p00;

assign grp_fu_1048_p00 = empty_reg_1122;

assign grp_fu_1048_p1 = 15'd672;

assign grp_fu_1055_p0 = 15'd672;

assign grp_fu_1055_p1 = grp_fu_1055_p10;

assign grp_fu_1055_p10 = p_mid1_fu_351_p2;

assign icmp_ln55_fu_263_p2 = ((ap_phi_mux_indvar_flatten44_phi_fu_192_p4 == 11'd1176) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_269_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_204_p4 == 8'd196) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_283_p2 = ((ap_phi_mux_j_phi_fu_227_p4 < 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln64_1_fu_703_p2 = ((trunc_ln64_reg_1276 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln64_2_fu_716_p2 = ((tmp_2_reg_1286 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln64_3_fu_721_p2 = ((trunc_ln64_1_reg_1291 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_698_p2 = ((tmp_1_reg_1271 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln65_1_fu_794_p2 = ((trunc_ln65_reg_1338 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_2_fu_833_p2 = ((tmp_5_reg_1360 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln65_3_fu_838_p2 = ((trunc_ln65_1_reg_1365 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_789_p2 = ((tmp_4_reg_1333 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln66_1_fu_984_p2 = ((trunc_ln66_fu_957_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln66_2_fu_996_p2 = ((tmp_8_fu_964_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln66_3_fu_1002_p2 = ((trunc_ln66_1_fu_974_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_978_p2 = ((tmp_7_fu_947_p4 != 8'd255) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = gmem_addr_4_reg_1414;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd1;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WDATA = max_final_reg_1420;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd15;

assign m_axi_gmem_WUSER = 1'd0;

assign max1_fu_769_p3 = ((and_ln64_1_fu_763_p2[0:0] === 1'b1) ? v0_reg_1306 : v1_reg_1312);

assign max2_fu_901_p3 = ((and_ln65_1_fu_895_p2[0:0] === 1'b1) ? v2_reg_1380 : v3_reg_1386);

assign max_final_fu_1026_p3 = ((and_ln66_1_fu_1020_p2[0:0] === 1'b1) ? max1_reg_1353_pp0_iter5_reg : max2_reg_1407);

assign mul_ln68_1_fu_808_p0 = 13'd336;

assign mul_ln68_1_fu_808_p1 = mul_ln68_1_fu_808_p10;

assign mul_ln68_1_fu_808_p10 = p_mid_reg_1143_pp0_iter3_reg;

assign mul_ln68_fu_743_p0 = mul_ln68_fu_743_p00;

assign mul_ln68_fu_743_p00 = tmp_reg_1078_pp0_iter3_reg;

assign mul_ln68_fu_743_p1 = 13'd336;

assign or_ln55_fu_289_p2 = (icmp_ln57_fu_283_p2 | icmp_ln56_fu_269_p2);

assign or_ln60_fu_558_p2 = (select_ln56_reg_1107_pp0_iter1_reg | 5'd1);

assign or_ln64_1_fu_753_p2 = (icmp_ln64_3_reg_1328 | icmp_ln64_2_reg_1323);

assign or_ln64_fu_749_p2 = (icmp_ln64_reg_1296 | icmp_ln64_1_reg_1301);

assign or_ln65_1_fu_885_p2 = (icmp_ln65_3_reg_1397 | icmp_ln65_2_reg_1392);

assign or_ln65_fu_881_p2 = (icmp_ln65_reg_1370 | icmp_ln65_1_reg_1375);

assign or_ln66_1_fu_1008_p2 = (icmp_ln66_3_fu_1002_p2 | icmp_ln66_2_fu_996_p2);

assign or_ln66_fu_990_p2 = (icmp_ln66_fu_978_p2 | icmp_ln66_1_fu_984_p2);

assign p_mid1_fu_351_p2 = (5'd1 | add_ln56_reg_1132);

assign select_ln55_1_fu_275_p3 = ((icmp_ln56_fu_269_p2[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_j_phi_fu_227_p4);

assign select_ln55_2_fu_416_p3 = ((icmp_ln56_reg_1087[0:0] === 1'b1) ? add_ln59_3_fu_411_p2 : add_ln59_fu_388_p2);

assign select_ln55_3_fu_423_p3 = ((icmp_ln56_reg_1087[0:0] === 1'b1) ? shl_ln59_mid1_fu_399_p3 : shl_ln_fu_376_p3);

assign select_ln55_4_fu_453_p3 = ((icmp_ln56_reg_1087_pp0_iter1_reg[0:0] === 1'b1) ? add_ln59_3_reg_1189 : add_ln59_1_fu_440_p2);

assign select_ln55_5_fu_537_p3 = ((icmp_ln56_reg_1087_pp0_iter1_reg[0:0] === 1'b1) ? add_ln61_2_fu_532_p2 : add_ln61_reg_1216);

assign select_ln55_6_fu_799_p3 = ((icmp_ln56_reg_1087_pp0_iter4_reg[0:0] === 1'b1) ? 13'd0 : mul_ln68_reg_1343);

assign select_ln55_7_fu_430_p3 = ((icmp_ln56_reg_1087[0:0] === 1'b1) ? add_ln55_fu_393_p2 : ap_phi_mux_c_phi_fu_238_p4);

assign select_ln55_fu_315_p3 = ((icmp_ln56_reg_1087[0:0] === 1'b1) ? 5'd0 : i_reg_211);

assign select_ln56_1_fu_467_p3 = ((or_ln55_reg_1099_pp0_iter1_reg[0:0] === 1'b1) ? select_ln55_4_fu_453_p3 : add_ln59_4_fu_462_p2);

assign select_ln56_2_fu_551_p3 = ((or_ln55_reg_1099_pp0_iter1_reg[0:0] === 1'b1) ? select_ln55_5_fu_537_p3 : add_ln61_3_fu_546_p2);

assign select_ln56_3_fu_814_p3 = ((or_ln55_reg_1099_pp0_iter4_reg[0:0] === 1'b1) ? select_ln55_6_fu_799_p3 : mul_ln68_1_fu_808_p2);

assign select_ln56_4_fu_360_p3 = ((or_ln55_reg_1099[0:0] === 1'b1) ? select_ln55_reg_1127 : add_ln56_reg_1132);

assign select_ln56_5_fu_370_p3 = ((icmp_ln56_reg_1087[0:0] === 1'b1) ? 8'd1 : add_ln56_1_reg_1117);

assign select_ln56_fu_295_p3 = ((or_ln55_fu_289_p2[0:0] === 1'b1) ? select_ln55_1_fu_275_p3 : 5'd0);

assign sext_ln59_1_fu_502_p1 = $signed(sub_ln59_fu_496_p2);

assign sext_ln59_fu_522_p1 = $signed(trunc_ln_fu_512_p4);

assign sext_ln60_1_fu_593_p1 = $signed(sub_ln60_fu_587_p2);

assign sext_ln60_fu_612_p1 = $signed(trunc_ln1_fu_602_p4);

assign sext_ln61_fu_636_p1 = $signed(trunc_ln2_fu_626_p4);

assign sext_ln62_fu_660_p1 = $signed(trunc_ln3_fu_650_p4);

assign sext_ln68_1_fu_871_p1 = $signed(sub_ln68_fu_865_p2);

assign sext_ln68_2_fu_915_p1 = $signed(add_ln68_reg_1402);

assign sext_ln68_fu_934_p1 = $signed(trunc_ln7_fu_924_p4);

assign shl_ln1_fu_563_p3 = {{or_ln60_fu_558_p2}, {5'd0}};

assign shl_ln2_fu_843_p3 = {{select_ln56_reg_1107_pp0_iter4_reg}, {4'd0}};

assign shl_ln59_1_fu_474_p3 = {{select_ln56_reg_1107_pp0_iter1_reg}, {5'd0}};

assign shl_ln59_2_fu_485_p3 = {{select_ln56_reg_1107_pp0_iter1_reg}, {3'd0}};

assign shl_ln59_mid1_fu_399_p3 = {{add_ln55_fu_393_p2}, {2'd0}};

assign shl_ln60_1_fu_575_p3 = {{or_ln60_fu_558_p2}, {3'd0}};

assign shl_ln68_1_fu_854_p3 = {{select_ln56_reg_1107_pp0_iter4_reg}, {2'd0}};

assign shl_ln_fu_376_p3 = {{ap_phi_mux_c_phi_fu_238_p4}, {2'd0}};

assign sub_ln59_fu_496_p2 = (zext_ln59_3_fu_481_p1 - zext_ln59_4_fu_492_p1);

assign sub_ln60_fu_587_p2 = (zext_ln60_fu_571_p1 - zext_ln60_1_fu_583_p1);

assign sub_ln68_fu_865_p2 = (zext_ln68_fu_850_p1 - zext_ln68_1_fu_861_p1);

assign tmp_7_fu_947_p4 = {{bitcast_ln66_fu_944_p1[30:23]}};

assign tmp_8_fu_964_p4 = {{bitcast_ln66_1_fu_961_p1[30:23]}};

assign trunc_ln1_fu_602_p4 = {{add_ln60_fu_597_p2[63:2]}};

assign trunc_ln2_fu_626_p4 = {{add_ln61_1_fu_622_p2[63:2]}};

assign trunc_ln3_fu_650_p4 = {{add_ln62_fu_646_p2[63:2]}};

assign trunc_ln64_1_fu_694_p1 = m_axi_gmem_RDATA[22:0];

assign trunc_ln64_fu_680_p1 = m_axi_gmem_RDATA[22:0];

assign trunc_ln65_1_fu_785_p1 = m_axi_gmem_RDATA[22:0];

assign trunc_ln65_fu_736_p1 = m_axi_gmem_RDATA[22:0];

assign trunc_ln66_1_fu_974_p1 = bitcast_ln66_1_fu_961_p1[22:0];

assign trunc_ln66_fu_957_p1 = bitcast_ln66_fu_944_p1[22:0];

assign trunc_ln7_fu_924_p4 = {{add_ln68_1_fu_918_p2[63:2]}};

assign trunc_ln_fu_512_p4 = {{add_ln59_2_fu_506_p2[63:2]}};

assign v0_fu_708_p1 = gmem_addr_read_reg_1266;

assign v1_fu_712_p1 = gmem_addr_1_read_reg_1281;

assign v2_fu_825_p1 = gmem_addr_2_read_reg_1318;

assign v3_fu_829_p1 = gmem_addr_3_read_reg_1348;

assign zext_ln55_fu_907_p1 = select_ln55_3_reg_1201_pp0_iter4_reg;

assign zext_ln56_2_fu_821_p1 = select_ln56_3_fu_814_p3;

assign zext_ln59_2_fu_437_p1 = mul_ln59_reg_1153;

assign zext_ln59_3_fu_481_p1 = shl_ln59_1_fu_474_p3;

assign zext_ln59_4_fu_492_p1 = shl_ln59_2_fu_485_p3;

assign zext_ln59_5_fu_407_p1 = shl_ln59_mid1_fu_399_p3;

assign zext_ln59_7_fu_459_p1 = mul_ln59_1_reg_1211;

assign zext_ln59_fu_384_p1 = shl_ln_fu_376_p3;

assign zext_ln60_1_fu_583_p1 = shl_ln60_1_fu_575_p3;

assign zext_ln60_fu_571_p1 = shl_ln1_fu_563_p3;

assign zext_ln61_1_fu_543_p1 = grp_fu_1055_p2;

assign zext_ln61_fu_445_p1 = grp_fu_1048_p2;

assign zext_ln68_1_fu_861_p1 = shl_ln68_1_fu_854_p3;

assign zext_ln68_fu_850_p1 = shl_ln2_fu_843_p3;

always @ (posedge ap_clk) begin
    empty_reg_1122[0] <= 1'b1;
    select_ln55_3_reg_1201[1:0] <= 2'b00;
    select_ln55_3_reg_1201_pp0_iter2_reg[1:0] <= 2'b00;
    select_ln55_3_reg_1201_pp0_iter3_reg[1:0] <= 2'b00;
    select_ln55_3_reg_1201_pp0_iter4_reg[1:0] <= 2'b00;
    sext_ln59_1_reg_1226[2:0] <= 3'b000;
    sext_ln60_1_reg_1243[3:0] <= 4'b1000;
end

endmodule //lenet_top_maxpool_layer
