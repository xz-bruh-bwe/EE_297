// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module lenet_top_conv2d_6to16_layer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        input_r,
        output_r
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_pp0_stage0 = 21'd8;
parameter    ap_ST_fsm_pp0_stage1 = 21'd16;
parameter    ap_ST_fsm_pp0_stage2 = 21'd32;
parameter    ap_ST_fsm_pp0_stage3 = 21'd64;
parameter    ap_ST_fsm_pp0_stage4 = 21'd128;
parameter    ap_ST_fsm_state25 = 21'd256;
parameter    ap_ST_fsm_state26 = 21'd512;
parameter    ap_ST_fsm_state27 = 21'd1024;
parameter    ap_ST_fsm_state28 = 21'd2048;
parameter    ap_ST_fsm_state29 = 21'd4096;
parameter    ap_ST_fsm_state30 = 21'd8192;
parameter    ap_ST_fsm_state31 = 21'd16384;
parameter    ap_ST_fsm_state32 = 21'd32768;
parameter    ap_ST_fsm_state33 = 21'd65536;
parameter    ap_ST_fsm_state34 = 21'd131072;
parameter    ap_ST_fsm_state35 = 21'd262144;
parameter    ap_ST_fsm_state36 = 21'd524288;
parameter    ap_ST_fsm_state37 = 21'd1048576;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] input_r;
input  [63:0] output_r;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_AWVALID;
reg m_axi_gmem_WVALID;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [11:0] conv2_weights_address0;
reg    conv2_weights_ce0;
wire   [31:0] conv2_weights_q0;
wire   [3:0] conv2_biases_address0;
reg    conv2_biases_ce0;
wire   [31:0] conv2_biases_q0;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage4;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage4;
reg   [0:0] icmp_ln89_reg_1033;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln89_reg_1033_pp0_iter2_reg;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state26;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state32;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state37;
reg   [7:0] indvar_flatten26_reg_274;
reg   [2:0] ic_reg_285;
reg   [5:0] indvar_flatten_reg_297;
reg   [2:0] ki_reg_308;
reg   [2:0] kj_reg_319;
reg   [31:0] sum_4_reg_331;
wire   [12:0] add_ln100_fu_377_p2;
reg   [12:0] add_ln100_reg_965;
wire    ap_CS_fsm_state2;
wire   [10:0] add_ln83_1_fu_389_p2;
reg   [10:0] add_ln83_1_reg_973;
wire   [0:0] icmp_ln84_fu_401_p2;
reg   [0:0] icmp_ln84_reg_978;
wire   [0:0] icmp_ln83_fu_383_p2;
wire   [4:0] select_ln83_2_fu_407_p3;
reg   [4:0] select_ln83_2_reg_987;
wire   [3:0] trunc_ln83_fu_420_p1;
reg   [3:0] trunc_ln83_reg_998;
wire   [11:0] select_ln83_1_v_cast_fu_431_p1;
reg   [11:0] select_ln83_1_v_cast_reg_1003;
wire    ap_CS_fsm_state3;
reg   [31:0] conv2_biases_load_reg_1008;
wire   [3:0] select_ln84_fu_468_p3;
reg   [3:0] select_ln84_reg_1013;
wire   [63:0] zext_ln84_fu_510_p1;
reg   [63:0] zext_ln84_reg_1020;
wire   [3:0] select_ln84_2_fu_514_p3;
reg   [3:0] select_ln84_2_reg_1025;
wire   [0:0] icmp_ln89_fu_531_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_state14_pp0_stage0_iter2;
wire    ap_block_state19_pp0_stage0_iter3;
wire    ap_block_state24_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln89_reg_1033_pp0_iter1_reg;
reg   [0:0] icmp_ln89_reg_1033_pp0_iter3_reg;
wire   [7:0] add_ln89_2_fu_537_p2;
reg   [7:0] add_ln89_2_reg_1037;
wire   [0:0] icmp_ln90_fu_543_p2;
reg   [0:0] icmp_ln90_reg_1042;
wire   [2:0] select_ln89_fu_549_p3;
reg   [2:0] select_ln89_reg_1049;
wire   [0:0] and_ln89_fu_576_p2;
reg   [0:0] and_ln89_reg_1054;
wire   [2:0] add_ln90_fu_582_p2;
reg   [2:0] add_ln90_reg_1060;
wire   [5:0] add_ln90_1_fu_609_p2;
reg   [5:0] add_ln90_1_reg_1070;
wire   [2:0] select_ln90_fu_619_p3;
reg   [2:0] select_ln90_reg_1075;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state10_pp0_stage1_iter1;
reg    ap_block_state15_pp0_stage1_iter2;
wire    ap_block_state20_pp0_stage1_iter3;
reg    ap_block_pp0_stage1_11001;
wire   [2:0] select_ln90_1_fu_627_p3;
reg   [2:0] select_ln90_1_reg_1082;
wire   [2:0] select_ln89_1_fu_638_p3;
reg   [2:0] select_ln89_1_reg_1089;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state6_pp0_stage2_iter0;
wire    ap_block_state11_pp0_stage2_iter1;
wire    ap_block_state16_pp0_stage2_iter2;
wire    ap_block_state21_pp0_stage2_iter3;
wire    ap_block_pp0_stage2_11001;
wire   [7:0] add_ln93_2_fu_712_p2;
reg   [7:0] add_ln93_2_reg_1095;
reg   [63:0] gmem_addr_12_reg_1105;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state7_pp0_stage3_iter0;
wire    ap_block_state12_pp0_stage3_iter1;
wire    ap_block_state17_pp0_stage3_iter2;
wire    ap_block_state22_pp0_stage3_iter3;
wire    ap_block_pp0_stage3_11001;
wire   [2:0] add_ln91_fu_805_p2;
reg   [2:0] add_ln91_reg_1111;
wire    ap_block_state8_pp0_stage4_iter0;
reg    ap_block_state8_io;
wire    ap_block_state13_pp0_stage4_iter1;
wire    ap_block_state18_pp0_stage4_iter2;
wire    ap_block_state23_pp0_stage4_iter3;
reg    ap_block_pp0_stage4_11001;
wire   [5:0] select_ln90_3_fu_810_p3;
reg   [5:0] select_ln90_3_reg_1116;
reg   [31:0] weight_reg_1126;
reg   [31:0] gmem_addr_12_read_reg_1131;
wire   [31:0] grp_fu_348_p2;
reg   [31:0] mul_reg_1141;
wire   [31:0] grp_fu_343_p2;
reg    ap_enable_reg_pp0_iter4;
reg   [63:0] gmem_addr_reg_1151;
wire    ap_CS_fsm_state25;
wire   [3:0] add_ln85_fu_879_p2;
reg   [3:0] add_ln85_reg_1157;
wire   [7:0] select_ln84_3_fu_890_p3;
reg   [7:0] select_ln84_3_reg_1162;
reg   [31:0] sum_reg_1167;
wire    ap_CS_fsm_state29;
wire   [31:0] select_ln100_fu_938_p3;
reg   [31:0] select_ln100_reg_1173;
wire    ap_CS_fsm_state31;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage4_subdone;
reg    ap_enable_reg_pp0_iter3;
reg   [10:0] indvar_flatten60_reg_216;
reg   [4:0] oc_reg_227;
reg   [7:0] indvar_flatten33_reg_238;
reg   [3:0] i_reg_250;
reg   [3:0] j_reg_262;
reg   [7:0] ap_phi_mux_indvar_flatten26_phi_fu_278_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_ic_phi_fu_289_p4;
wire    ap_block_pp0_stage2;
reg   [5:0] ap_phi_mux_indvar_flatten_phi_fu_301_p4;
reg   [2:0] ap_phi_mux_ki_phi_fu_312_p4;
reg   [2:0] ap_phi_mux_kj_phi_fu_323_p4;
wire   [31:0] ap_phi_mux_sum_4_phi_fu_335_p4;
wire   [63:0] zext_ln83_fu_415_p1;
wire   [63:0] zext_ln93_4_fu_828_p1;
wire  signed [63:0] sext_ln92_fu_795_p1;
wire    ap_block_pp0_stage3;
wire  signed [63:0] sext_ln100_fu_869_p1;
reg   [31:0] grp_fu_343_p0;
reg   [31:0] grp_fu_343_p1;
wire   [31:0] grp_fu_348_p0;
wire    ap_CS_fsm_state30;
wire   [10:0] shl_ln100_2_fu_365_p3;
wire   [12:0] zext_ln85_fu_373_p1;
wire   [12:0] shl_ln100_1_fu_357_p3;
wire   [4:0] add_ln83_fu_395_p2;
wire   [0:0] icmp_ln85_fu_445_p2;
wire   [0:0] xor_ln83_fu_440_p2;
wire   [3:0] select_ln83_fu_424_p3;
wire   [0:0] and_ln83_fu_451_p2;
wire   [0:0] or_ln84_fu_463_p2;
wire   [3:0] add_ln84_fu_457_p2;
wire   [10:0] shl_ln100_2_mid1_fu_484_p3;
wire   [12:0] shl_ln100_1_mid1_fu_476_p3;
wire   [12:0] zext_ln85_1_fu_492_p1;
wire   [12:0] add_ln100_3_fu_496_p2;
wire   [12:0] select_ln83_3_fu_434_p3;
wire   [12:0] select_ln84_1_fu_502_p3;
wire   [3:0] zext_ln90_fu_522_p1;
wire   [3:0] empty_fu_526_p2;
wire   [0:0] icmp_ln91_fu_570_p2;
wire   [0:0] xor_ln89_fu_564_p2;
wire   [3:0] zext_ln90_1_fu_588_p1;
wire   [3:0] p_mid1_fu_592_p2;
wire   [3:0] select_ln89_2_fu_557_p3;
wire   [3:0] select_ln90_2_fu_597_p3;
wire   [0:0] or_ln90_fu_615_p2;
wire   [2:0] add_ln89_fu_632_p2;
wire   [4:0] tmp_fu_648_p3;
wire   [62:0] zext_ln93_1_fu_655_p1;
wire   [62:0] zext_ln93_fu_645_p1;
wire   [62:0] zext_ln93_2_fu_665_p1;
wire   [62:0] add_ln93_fu_659_p2;
wire   [62:0] add_ln93_1_fu_668_p2;
wire   [56:0] trunc_ln93_fu_674_p1;
wire   [58:0] trunc_ln93_1_fu_686_p1;
wire   [59:0] p_shl_cast_fu_678_p3;
wire   [59:0] p_shl2_cast_fu_690_p3;
wire   [59:0] sub_ln93_fu_698_p2;
wire   [7:0] zext_ln93_3_fu_708_p1;
wire   [7:0] trunc_ln93_2_fu_704_p1;
wire   [3:0] kj_cast_fu_718_p1;
wire   [3:0] add_ln92_fu_721_p2;
wire   [8:0] shl_ln92_1_fu_726_p3;
wire   [6:0] shl_ln92_2_fu_738_p3;
wire   [9:0] zext_ln92_fu_734_p1;
wire   [9:0] zext_ln92_1_fu_746_p1;
wire  signed [9:0] sub_ln92_fu_750_p2;
wire   [4:0] add_ln92_1_mid2_v_v_fu_760_p3;
wire   [63:0] zext_ln89_fu_767_p1;
wire  signed [13:0] grp_fu_946_p3;
wire  signed [63:0] sext_ln92_2_fu_776_p1;
wire   [63:0] add_ln89_1_fu_771_p2;
wire   [63:0] add_ln92_2_fu_779_p2;
wire   [61:0] trunc_ln5_fu_785_p4;
wire   [11:0] tmp_130_cast_fu_816_p3;
wire   [11:0] add_ln93_3_fu_823_p2;
wire   [9:0] tmp4_fu_837_p4;
wire   [63:0] zext_ln100_fu_845_p1;
wire   [63:0] add_ln100_1_fu_849_p2;
wire   [63:0] add_ln100_2_fu_854_p2;
wire   [61:0] trunc_ln_fu_859_p4;
wire   [7:0] add_ln84_1_fu_884_p2;
wire   [31:0] bitcast_ln100_fu_897_p1;
wire   [7:0] tmp_s_fu_900_p4;
wire   [22:0] trunc_ln100_fu_910_p1;
wire   [0:0] icmp_ln100_1_fu_920_p2;
wire   [0:0] icmp_ln100_fu_914_p2;
wire   [0:0] or_ln100_fu_926_p2;
wire   [0:0] grp_fu_352_p2;
wire   [0:0] and_ln100_fu_932_p2;
wire   [9:0] grp_fu_946_p0;
wire   [3:0] grp_fu_946_p1;
reg    grp_fu_343_ce;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
reg    grp_fu_348_ce;
reg    grp_fu_946_ce;
reg   [20:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [12:0] grp_fu_946_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

lenet_top_conv2d_6to16_layer_conv2_weights #(
    .DataWidth( 32 ),
    .AddressRange( 2400 ),
    .AddressWidth( 12 ))
conv2_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv2_weights_address0),
    .ce0(conv2_weights_ce0),
    .q0(conv2_weights_q0)
);

lenet_top_conv2d_6to16_layer_conv2_biases #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv2_biases_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv2_biases_address0),
    .ce0(conv2_biases_ce0),
    .q0(conv2_biases_q0)
);

lenet_top_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U80(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_343_p0),
    .din1(grp_fu_343_p1),
    .ce(grp_fu_343_ce),
    .dout(grp_fu_343_p2)
);

lenet_top_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U81(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_348_p0),
    .din1(weight_reg_1126),
    .ce(grp_fu_348_ce),
    .dout(grp_fu_348_p2)
);

lenet_top_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U82(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_reg_1167),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_352_p2)
);

lenet_top_mac_muladd_10ns_4ns_10s_14_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 14 ))
mac_muladd_10ns_4ns_10s_14_4_1_U83(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_946_p0),
    .din1(grp_fu_946_p1),
    .din2(sub_ln92_fu_750_p2),
    .ce(grp_fu_946_ce),
    .dout(grp_fu_946_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone)))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
        i_reg_250 <= select_ln84_2_reg_1025;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_250 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln89_reg_1033_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        ic_reg_285 <= select_ln89_1_reg_1089;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ic_reg_285 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln89_reg_1033 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten26_reg_274 <= add_ln89_2_reg_1037;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten26_reg_274 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
        indvar_flatten33_reg_238 <= select_ln84_3_reg_1162;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten33_reg_238 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
        indvar_flatten60_reg_216 <= add_ln83_1_reg_973;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten60_reg_216 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln89_reg_1033 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_297 <= select_ln90_3_reg_1116;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_297 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
        j_reg_262 <= add_ln85_reg_1157;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_reg_262 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln89_reg_1033 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ki_reg_308 <= select_ln90_1_reg_1082;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ki_reg_308 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln89_reg_1033 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kj_reg_319 <= add_ln91_reg_1111;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        kj_reg_319 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
        oc_reg_227 <= select_ln83_2_reg_987;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        oc_reg_227 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln89_reg_1033_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_4_reg_331 <= grp_fu_343_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        sum_4_reg_331 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln100_reg_965[12 : 7] <= add_ln100_fu_377_p2[12 : 7];
        add_ln83_1_reg_973 <= add_ln83_1_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        add_ln85_reg_1157 <= add_ln85_fu_879_p2;
        gmem_addr_reg_1151 <= sext_ln100_fu_869_p1;
        select_ln84_3_reg_1162 <= select_ln84_3_fu_890_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln89_2_reg_1037 <= add_ln89_2_fu_537_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln89_fu_531_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln90_1_reg_1070 <= add_ln90_1_fu_609_p2;
        add_ln90_reg_1060 <= add_ln90_fu_582_p2;
        and_ln89_reg_1054 <= and_ln89_fu_576_p2;
        icmp_ln90_reg_1042 <= icmp_ln90_fu_543_p2;
        select_ln89_reg_1049 <= select_ln89_fu_549_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln89_reg_1033 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln91_reg_1111 <= add_ln91_fu_805_p2;
        select_ln90_3_reg_1116 <= select_ln90_3_fu_810_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln89_reg_1033 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln93_2_reg_1095 <= add_ln93_2_fu_712_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv2_biases_load_reg_1008 <= conv2_biases_q0;
        select_ln83_1_v_cast_reg_1003[4 : 0] <= select_ln83_1_v_cast_fu_431_p1[4 : 0];
        select_ln84_2_reg_1025 <= select_ln84_2_fu_514_p3;
        select_ln84_reg_1013 <= select_ln84_fu_468_p3;
        zext_ln84_reg_1020[12 : 7] <= zext_ln84_fu_510_p1[12 : 7];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln89_reg_1033_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        gmem_addr_12_read_reg_1131 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln89_reg_1033 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        gmem_addr_12_reg_1105 <= sext_ln92_fu_795_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln83_fu_383_p2 == 1'd0))) begin
        icmp_ln84_reg_978 <= icmp_ln84_fu_401_p2;
        select_ln83_2_reg_987 <= select_ln83_2_fu_407_p3;
        trunc_ln83_reg_998 <= trunc_ln83_fu_420_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln89_reg_1033 <= icmp_ln89_fu_531_p2;
        icmp_ln89_reg_1033_pp0_iter1_reg <= icmp_ln89_reg_1033;
        icmp_ln89_reg_1033_pp0_iter2_reg <= icmp_ln89_reg_1033_pp0_iter1_reg;
        icmp_ln89_reg_1033_pp0_iter3_reg <= icmp_ln89_reg_1033_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln89_reg_1033_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mul_reg_1141 <= grp_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        select_ln100_reg_1173 <= select_ln100_fu_938_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln89_reg_1033 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln89_1_reg_1089 <= select_ln89_1_fu_638_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln89_reg_1033 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln90_1_reg_1082 <= select_ln90_1_fu_627_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln89_reg_1033 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln90_reg_1075 <= select_ln90_fu_619_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        sum_reg_1167 <= grp_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln89_reg_1033_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        weight_reg_1126 <= conv2_weights_q0;
    end
end

always @ (*) begin
    if ((icmp_ln89_fu_531_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln83_fu_383_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln89_reg_1033_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2))) begin
        ap_phi_mux_ic_phi_fu_289_p4 = select_ln89_1_reg_1089;
    end else begin
        ap_phi_mux_ic_phi_fu_289_p4 = ic_reg_285;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln89_reg_1033 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten26_phi_fu_278_p4 = add_ln89_2_reg_1037;
    end else begin
        ap_phi_mux_indvar_flatten26_phi_fu_278_p4 = indvar_flatten26_reg_274;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln89_reg_1033 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_301_p4 = select_ln90_3_reg_1116;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_301_p4 = indvar_flatten_reg_297;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln89_reg_1033 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_ki_phi_fu_312_p4 = select_ln90_1_reg_1082;
    end else begin
        ap_phi_mux_ki_phi_fu_312_p4 = ki_reg_308;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln89_reg_1033 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_kj_phi_fu_323_p4 = add_ln91_reg_1111;
    end else begin
        ap_phi_mux_kj_phi_fu_323_p4 = kj_reg_319;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln83_fu_383_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv2_biases_ce0 = 1'b1;
    end else begin
        conv2_biases_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        conv2_weights_ce0 = 1'b1;
    end else begin
        conv2_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln89_reg_1033 == 1'd0) & (1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln89_reg_1033_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | ((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)))) begin
        grp_fu_343_ce = 1'b1;
    end else begin
        grp_fu_343_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_343_p0 = sum_4_reg_331;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_343_p0 = ap_phi_mux_sum_4_phi_fu_335_p4;
    end else begin
        grp_fu_343_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_343_p1 = conv2_biases_load_reg_1008;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_343_p1 = mul_reg_1141;
    end else begin
        grp_fu_343_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)))) begin
        grp_fu_348_ce = 1'b1;
    end else begin
        grp_fu_348_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        grp_fu_946_ce = 1'b1;
    end else begin
        grp_fu_946_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln89_reg_1033 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln89_reg_1033_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln83_fu_383_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln89_fu_531_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln89_fu_531_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state26))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            if (((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln100_1_fu_849_p2 = (output_r + zext_ln100_fu_845_p1);

assign add_ln100_2_fu_854_p2 = (zext_ln84_reg_1020 + add_ln100_1_fu_849_p2);

assign add_ln100_3_fu_496_p2 = (shl_ln100_1_mid1_fu_476_p3 + zext_ln85_1_fu_492_p1);

assign add_ln100_fu_377_p2 = (zext_ln85_fu_373_p1 + shl_ln100_1_fu_357_p3);

assign add_ln83_1_fu_389_p2 = (indvar_flatten60_reg_216 + 11'd1);

assign add_ln83_fu_395_p2 = (5'd1 + oc_reg_227);

assign add_ln84_1_fu_884_p2 = (8'd1 + indvar_flatten33_reg_238);

assign add_ln84_fu_457_p2 = (4'd1 + select_ln83_fu_424_p3);

assign add_ln85_fu_879_p2 = (4'd1 + select_ln84_reg_1013);

assign add_ln89_1_fu_771_p2 = (input_r + zext_ln89_fu_767_p1);

assign add_ln89_2_fu_537_p2 = (ap_phi_mux_indvar_flatten26_phi_fu_278_p4 + 8'd1);

assign add_ln89_fu_632_p2 = (3'd1 + ap_phi_mux_ic_phi_fu_289_p4);

assign add_ln90_1_fu_609_p2 = (6'd1 + ap_phi_mux_indvar_flatten_phi_fu_301_p4);

assign add_ln90_fu_582_p2 = (3'd1 + select_ln89_fu_549_p3);

assign add_ln91_fu_805_p2 = (3'd1 + select_ln90_reg_1075);

assign add_ln92_1_mid2_v_v_fu_760_p3 = {{select_ln89_1_reg_1089}, {2'd0}};

assign add_ln92_2_fu_779_p2 = ($signed(sext_ln92_2_fu_776_p1) + $signed(add_ln89_1_fu_771_p2));

assign add_ln92_fu_721_p2 = (select_ln84_reg_1013 + kj_cast_fu_718_p1);

assign add_ln93_1_fu_668_p2 = (zext_ln93_2_fu_665_p1 + add_ln93_fu_659_p2);

assign add_ln93_2_fu_712_p2 = (zext_ln93_3_fu_708_p1 + trunc_ln93_2_fu_704_p1);

assign add_ln93_3_fu_823_p2 = (select_ln83_1_v_cast_reg_1003 + tmp_130_cast_fu_816_p3);

assign add_ln93_fu_659_p2 = (zext_ln93_1_fu_655_p1 + zext_ln93_fu_645_p1);

assign and_ln100_fu_932_p2 = (or_ln100_fu_926_p2 & grp_fu_352_p2);

assign and_ln83_fu_451_p2 = (xor_ln83_fu_440_p2 & icmp_ln85_fu_445_p2);

assign and_ln89_fu_576_p2 = (xor_ln89_fu_564_p2 & icmp_ln91_fu_570_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd20];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln89_reg_1033_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln89_reg_1033_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_block_state10_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_pp0_stage1_iter2 = ((m_axi_gmem_RVALID == 1'b0) & (icmp_ln89_reg_1033_pp0_iter2_reg == 1'd0));
end

assign ap_block_state16_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((m_axi_gmem_ARREADY == 1'b0) & (icmp_ln89_reg_1033 == 1'd0));
end

assign ap_block_state8_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_sum_4_phi_fu_335_p4 = sum_4_reg_331;

assign bitcast_ln100_fu_897_p1 = sum_reg_1167;

assign conv2_biases_address0 = zext_ln83_fu_415_p1;

assign conv2_weights_address0 = zext_ln93_4_fu_828_p1;

assign empty_fu_526_p2 = (zext_ln90_fu_522_p1 + select_ln84_2_reg_1025);

assign grp_fu_348_p0 = gmem_addr_12_read_reg_1131;

assign grp_fu_946_p0 = 13'd336;

assign grp_fu_946_p1 = grp_fu_946_p10;

assign grp_fu_946_p10 = select_ln90_2_fu_597_p3;

assign icmp_ln100_1_fu_920_p2 = ((trunc_ln100_fu_910_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln100_fu_914_p2 = ((tmp_s_fu_900_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_383_p2 = ((indvar_flatten60_reg_216 == 11'd1600) ? 1'b1 : 1'b0);

assign icmp_ln84_fu_401_p2 = ((indvar_flatten33_reg_238 == 8'd100) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_445_p2 = ((j_reg_262 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_531_p2 = ((ap_phi_mux_indvar_flatten26_phi_fu_278_p4 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln90_fu_543_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_301_p4 == 6'd25) ? 1'b1 : 1'b0);

assign icmp_ln91_fu_570_p2 = ((ap_phi_mux_kj_phi_fu_323_p4 == 3'd5) ? 1'b1 : 1'b0);

assign kj_cast_fu_718_p1 = select_ln90_reg_1075;

assign m_axi_gmem_ARADDR = gmem_addr_12_reg_1105;

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign m_axi_gmem_AWADDR = gmem_addr_reg_1151;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLEN = 32'd1;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WDATA = select_ln100_reg_1173;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd15;

assign m_axi_gmem_WUSER = 1'd0;

assign or_ln100_fu_926_p2 = (icmp_ln100_fu_914_p2 | icmp_ln100_1_fu_920_p2);

assign or_ln84_fu_463_p2 = (icmp_ln84_reg_978 | and_ln83_fu_451_p2);

assign or_ln90_fu_615_p2 = (icmp_ln90_reg_1042 | and_ln89_reg_1054);

assign p_mid1_fu_592_p2 = (zext_ln90_1_fu_588_p1 + select_ln84_2_reg_1025);

assign p_shl2_cast_fu_690_p3 = {{trunc_ln93_1_fu_686_p1}, {1'd0}};

assign p_shl_cast_fu_678_p3 = {{trunc_ln93_fu_674_p1}, {3'd0}};

assign select_ln100_fu_938_p3 = ((and_ln100_fu_932_p2[0:0] === 1'b1) ? bitcast_ln100_fu_897_p1 : 32'd0);

assign select_ln83_1_v_cast_fu_431_p1 = select_ln83_2_reg_987;

assign select_ln83_2_fu_407_p3 = ((icmp_ln84_fu_401_p2[0:0] === 1'b1) ? add_ln83_fu_395_p2 : oc_reg_227);

assign select_ln83_3_fu_434_p3 = ((icmp_ln84_reg_978[0:0] === 1'b1) ? 13'd0 : add_ln100_reg_965);

assign select_ln83_fu_424_p3 = ((icmp_ln84_reg_978[0:0] === 1'b1) ? 4'd0 : i_reg_250);

assign select_ln84_1_fu_502_p3 = ((and_ln83_fu_451_p2[0:0] === 1'b1) ? add_ln100_3_fu_496_p2 : select_ln83_3_fu_434_p3);

assign select_ln84_2_fu_514_p3 = ((and_ln83_fu_451_p2[0:0] === 1'b1) ? add_ln84_fu_457_p2 : select_ln83_fu_424_p3);

assign select_ln84_3_fu_890_p3 = ((icmp_ln84_reg_978[0:0] === 1'b1) ? 8'd1 : add_ln84_1_fu_884_p2);

assign select_ln84_fu_468_p3 = ((or_ln84_fu_463_p2[0:0] === 1'b1) ? 4'd0 : j_reg_262);

assign select_ln89_1_fu_638_p3 = ((icmp_ln90_reg_1042[0:0] === 1'b1) ? add_ln89_fu_632_p2 : ap_phi_mux_ic_phi_fu_289_p4);

assign select_ln89_2_fu_557_p3 = ((icmp_ln90_fu_543_p2[0:0] === 1'b1) ? select_ln84_2_reg_1025 : empty_fu_526_p2);

assign select_ln89_fu_549_p3 = ((icmp_ln90_fu_543_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_ki_phi_fu_312_p4);

assign select_ln90_1_fu_627_p3 = ((and_ln89_reg_1054[0:0] === 1'b1) ? add_ln90_reg_1060 : select_ln89_reg_1049);

assign select_ln90_2_fu_597_p3 = ((and_ln89_fu_576_p2[0:0] === 1'b1) ? p_mid1_fu_592_p2 : select_ln89_2_fu_557_p3);

assign select_ln90_3_fu_810_p3 = ((icmp_ln90_reg_1042[0:0] === 1'b1) ? 6'd1 : add_ln90_1_reg_1070);

assign select_ln90_fu_619_p3 = ((or_ln90_fu_615_p2[0:0] === 1'b1) ? 3'd0 : kj_reg_319);

assign sext_ln100_fu_869_p1 = $signed(trunc_ln_fu_859_p4);

assign sext_ln92_2_fu_776_p1 = grp_fu_946_p3;

assign sext_ln92_fu_795_p1 = $signed(trunc_ln5_fu_785_p4);

assign shl_ln100_1_fu_357_p3 = {{i_reg_250}, {9'd0}};

assign shl_ln100_1_mid1_fu_476_p3 = {{add_ln84_fu_457_p2}, {9'd0}};

assign shl_ln100_2_fu_365_p3 = {{i_reg_250}, {7'd0}};

assign shl_ln100_2_mid1_fu_484_p3 = {{add_ln84_fu_457_p2}, {7'd0}};

assign shl_ln92_1_fu_726_p3 = {{add_ln92_fu_721_p2}, {5'd0}};

assign shl_ln92_2_fu_738_p3 = {{add_ln92_fu_721_p2}, {3'd0}};

assign sub_ln92_fu_750_p2 = (zext_ln92_fu_734_p1 - zext_ln92_1_fu_746_p1);

assign sub_ln93_fu_698_p2 = (p_shl_cast_fu_678_p3 - p_shl2_cast_fu_690_p3);

assign tmp4_fu_837_p4 = {{{select_ln84_reg_1013}, {trunc_ln83_reg_998}}, {2'd0}};

assign tmp_130_cast_fu_816_p3 = {{add_ln93_2_reg_1095}, {4'd0}};

assign tmp_fu_648_p3 = {{select_ln90_1_reg_1082}, {2'd0}};

assign tmp_s_fu_900_p4 = {{bitcast_ln100_fu_897_p1[30:23]}};

assign trunc_ln100_fu_910_p1 = bitcast_ln100_fu_897_p1[22:0];

assign trunc_ln5_fu_785_p4 = {{add_ln92_2_fu_779_p2[63:2]}};

assign trunc_ln83_fu_420_p1 = select_ln83_2_fu_407_p3[3:0];

assign trunc_ln93_1_fu_686_p1 = add_ln93_1_fu_668_p2[58:0];

assign trunc_ln93_2_fu_704_p1 = sub_ln93_fu_698_p2[7:0];

assign trunc_ln93_fu_674_p1 = add_ln93_1_fu_668_p2[56:0];

assign trunc_ln_fu_859_p4 = {{add_ln100_2_fu_854_p2[63:2]}};

assign xor_ln83_fu_440_p2 = (icmp_ln84_reg_978 ^ 1'd1);

assign xor_ln89_fu_564_p2 = (icmp_ln90_fu_543_p2 ^ 1'd1);

assign zext_ln100_fu_845_p1 = tmp4_fu_837_p4;

assign zext_ln83_fu_415_p1 = select_ln83_2_fu_407_p3;

assign zext_ln84_fu_510_p1 = select_ln84_1_fu_502_p3;

assign zext_ln85_1_fu_492_p1 = shl_ln100_2_mid1_fu_484_p3;

assign zext_ln85_fu_373_p1 = shl_ln100_2_fu_365_p3;

assign zext_ln89_fu_767_p1 = add_ln92_1_mid2_v_v_fu_760_p3;

assign zext_ln90_1_fu_588_p1 = add_ln90_fu_582_p2;

assign zext_ln90_fu_522_p1 = ap_phi_mux_ki_phi_fu_312_p4;

assign zext_ln92_1_fu_746_p1 = shl_ln92_2_fu_738_p3;

assign zext_ln92_fu_734_p1 = shl_ln92_1_fu_726_p3;

assign zext_ln93_1_fu_655_p1 = tmp_fu_648_p3;

assign zext_ln93_2_fu_665_p1 = select_ln90_reg_1075;

assign zext_ln93_3_fu_708_p1 = select_ln89_1_fu_638_p3;

assign zext_ln93_4_fu_828_p1 = add_ln93_3_fu_823_p2;

assign zext_ln93_fu_645_p1 = select_ln90_1_reg_1082;

always @ (posedge ap_clk) begin
    add_ln100_reg_965[6:0] <= 7'b0000000;
    select_ln83_1_v_cast_reg_1003[11:5] <= 7'b0000000;
    zext_ln84_reg_1020[6:0] <= 7'b0000000;
    zext_ln84_reg_1020[63:13] <= 51'b000000000000000000000000000000000000000000000000000;
end

endmodule //lenet_top_conv2d_6to16_layer
