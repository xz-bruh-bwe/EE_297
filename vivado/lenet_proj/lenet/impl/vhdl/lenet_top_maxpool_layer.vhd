-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lenet_top_maxpool_layer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r : IN STD_LOGIC_VECTOR (63 downto 0);
    output_r : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of lenet_top_maxpool_layer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv11_498 : STD_LOGIC_VECTOR (10 downto 0) := "10010011000";
    constant ap_const_lv8_C4 : STD_LOGIC_VECTOR (7 downto 0) := "11000100";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_2A0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001010100000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv13_150 : STD_LOGIC_VECTOR (12 downto 0) := "0000101010000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv15_2A0 : STD_LOGIC_VECTOR (14 downto 0) := "000001010100000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal icmp_ln55_reg_1083 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_reg_1083_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln55_reg_1083_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln55_reg_1083_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal icmp_ln55_reg_1083_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_W : STD_LOGIC;
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal icmp_ln55_reg_1083_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten44_reg_188 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten_reg_200 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_211 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_223 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_reg_234 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_io : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_reg_1078 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_1078_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_1078_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_1078_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln55_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_reg_1083_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_1087_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_1087_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_1087_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln56_reg_1087_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_reg_1099 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_reg_1099_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_reg_1099_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_reg_1099_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_reg_1099_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln56_fu_295_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln56_reg_1107 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln56_reg_1107_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln56_reg_1107_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln56_reg_1107_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln56_reg_1107_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln56_1_fu_303_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln56_1_reg_1117 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_309_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_reg_1122 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state11_io : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state19_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state23_io : BOOLEAN;
    signal ap_block_state27_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal select_ln55_fu_315_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln55_reg_1127 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln56_fu_322_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln56_reg_1132 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_mid_reg_1143 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_mid_reg_1143_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_mid_reg_1143_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_mid_reg_1143_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_state12_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state16_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state20_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state24_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state24_io : BOOLEAN;
    signal ap_block_state28_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_1036_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln59_reg_1153 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state9_io : BOOLEAN;
    signal ap_block_state13_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state17_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state21_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_state25_pp0_stage3_iter5 : BOOLEAN;
    signal ap_block_state29_pp0_stage3_iter6 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal add_ln55_2_fu_345_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln55_2_reg_1158 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln56_4_fu_360_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln56_4_reg_1168 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln57_fu_365_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln57_reg_1173 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln56_5_fu_370_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln56_5_reg_1178 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln59_fu_388_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln59_reg_1183 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln59_3_fu_411_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln59_3_reg_1189 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln55_2_fu_416_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln55_2_reg_1195 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln55_3_fu_423_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln55_3_reg_1201 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln55_3_reg_1201_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln55_3_reg_1201_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln55_3_reg_1201_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln55_7_fu_430_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln55_7_reg_1206 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_1042_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln59_1_reg_1211 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln61_fu_448_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln61_reg_1216 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln56_1_fu_467_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln56_1_reg_1221 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln59_1_fu_502_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln59_1_reg_1226 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_reg_1231 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln56_2_fu_551_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln56_2_reg_1237 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln60_1_fu_593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln60_1_reg_1243 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_1_reg_1248 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_2_reg_1254 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_3_reg_1260 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_read_reg_1266 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1271 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln64_fu_680_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln64_reg_1276 : STD_LOGIC_VECTOR (22 downto 0);
    signal gmem_addr_1_read_reg_1281 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1286 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln64_1_fu_694_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln64_1_reg_1291 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln64_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_1296 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_1_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_1_reg_1301 : STD_LOGIC_VECTOR (0 downto 0);
    signal v0_fu_708_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v0_reg_1306 : STD_LOGIC_VECTOR (31 downto 0);
    signal v1_fu_712_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v1_reg_1312 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_2_read_reg_1318 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln64_2_fu_716_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_2_reg_1323 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_3_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_3_reg_1328 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1333 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln65_fu_736_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln65_reg_1338 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln68_fu_743_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln68_reg_1343 : STD_LOGIC_VECTOR (12 downto 0);
    signal gmem_addr_3_read_reg_1348 : STD_LOGIC_VECTOR (31 downto 0);
    signal max1_fu_769_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max1_reg_1353 : STD_LOGIC_VECTOR (31 downto 0);
    signal max1_reg_1353_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_1360 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln65_1_fu_785_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln65_1_reg_1365 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln65_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_1370 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_1_fu_794_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_1_reg_1375 : STD_LOGIC_VECTOR (0 downto 0);
    signal v2_fu_825_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v2_reg_1380 : STD_LOGIC_VECTOR (31 downto 0);
    signal v3_fu_829_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal v3_reg_1386 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln65_2_fu_833_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_2_reg_1392 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_3_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_3_reg_1397 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln68_fu_875_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln68_reg_1402 : STD_LOGIC_VECTOR (13 downto 0);
    signal max2_fu_901_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max2_reg_1407 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_4_reg_1414 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_final_fu_1026_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_final_reg_1420 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_condition_pp0_exit_iter4_state18 : STD_LOGIC;
    signal ap_phi_mux_indvar_flatten44_phi_fu_192_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_204_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_i_phi_fu_215_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_j_phi_fu_227_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_c_phi_fu_238_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln59_fu_522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln60_fu_612_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln61_fu_636_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln62_fu_660_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln68_fu_934_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal grp_fu_245_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_245_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln57_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln55_1_fu_275_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_mid1_fu_351_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_376_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln59_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln55_fu_393_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln59_mid1_fu_399_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln59_5_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln59_2_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1048_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln61_fu_445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln59_1_fu_440_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln59_7_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln55_4_fu_453_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln59_4_fu_462_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln59_1_fu_474_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln59_2_fu_485_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln59_3_fu_481_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln59_4_fu_492_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln59_fu_496_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln59_2_fu_506_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_512_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln61_2_fu_532_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1055_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln61_1_fu_543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln55_5_fu_537_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln61_3_fu_546_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln60_fu_558_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln1_fu_563_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln60_1_fu_575_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln60_fu_571_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln60_1_fu_583_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln60_fu_587_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln60_fu_597_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_602_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln61_1_fu_622_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2_fu_626_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln62_fu_646_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3_fu_650_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal mul_ln68_fu_743_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln68_fu_743_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln64_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln64_1_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln64_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln64_1_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln68_1_fu_808_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln68_1_fu_808_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln55_6_fu_799_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln68_1_fu_808_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln56_3_fu_814_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln2_fu_843_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln68_1_fu_854_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln68_fu_850_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln68_1_fu_861_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln68_fu_865_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln56_2_fu_821_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln68_1_fu_871_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln65_fu_881_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln65_1_fu_885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln65_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln65_1_fu_895_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln55_fu_907_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln68_2_fu_915_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln55_1_fu_910_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln68_1_fu_918_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln7_fu_924_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal bitcast_ln66_fu_944_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln66_1_fu_961_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_947_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln66_fu_957_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln66_1_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_fu_978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_964_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln66_1_fu_974_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln66_3_fu_1002_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln66_2_fu_996_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln66_fu_990_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln66_1_fu_1008_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln66_fu_1014_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln66_1_fu_1020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1036_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1036_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1042_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1042_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1048_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1048_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1055_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1055_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_245_ce : STD_LOGIC;
    signal ap_block_pp0_stage3_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal grp_fu_1036_ce : STD_LOGIC;
    signal grp_fu_1042_ce : STD_LOGIC;
    signal grp_fu_1048_ce : STD_LOGIC;
    signal grp_fu_1055_ce : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1036_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1042_p10 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1048_p00 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1055_p10 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln68_1_fu_808_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln68_fu_743_p00 : STD_LOGIC_VECTOR (12 downto 0);

    component lenet_top_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet_top_mul_4ns_10ns_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component lenet_top_mul_10ns_4ns_13_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component lenet_top_mul_mul_5ns_11ns_15_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component lenet_top_mul_mul_11ns_5ns_15_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    fcmp_32ns_32ns_1_2_no_dsp_1_U67 : component lenet_top_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_245_p0,
        din1 => grp_fu_245_p1,
        ce => grp_fu_245_ce,
        opcode => ap_const_lv5_2,
        dout => grp_fu_245_p2);

    mul_4ns_10ns_13_1_1_U68 : component lenet_top_mul_4ns_10ns_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 10,
        dout_WIDTH => 13)
    port map (
        din0 => mul_ln68_fu_743_p0,
        din1 => mul_ln68_fu_743_p1,
        dout => mul_ln68_fu_743_p2);

    mul_10ns_4ns_13_1_1_U69 : component lenet_top_mul_10ns_4ns_13_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 4,
        dout_WIDTH => 13)
    port map (
        din0 => mul_ln68_1_fu_808_p0,
        din1 => mul_ln68_1_fu_808_p1,
        dout => mul_ln68_1_fu_808_p2);

    mul_mul_5ns_11ns_15_4_1_U70 : component lenet_top_mul_mul_5ns_11ns_15_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 11,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1036_p0,
        din1 => grp_fu_1036_p1,
        ce => grp_fu_1036_ce,
        dout => grp_fu_1036_p2);

    mul_mul_11ns_5ns_15_4_1_U71 : component lenet_top_mul_mul_11ns_5ns_15_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 5,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1042_p0,
        din1 => grp_fu_1042_p1,
        ce => grp_fu_1042_ce,
        dout => grp_fu_1042_p2);

    mul_mul_5ns_11ns_15_4_1_U72 : component lenet_top_mul_mul_5ns_11ns_15_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 5,
        din1_WIDTH => 11,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1048_p0,
        din1 => grp_fu_1048_p1,
        ce => grp_fu_1048_ce,
        dout => grp_fu_1048_p2);

    mul_mul_11ns_5ns_15_4_1_U73 : component lenet_top_mul_mul_11ns_5ns_15_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 5,
        dout_WIDTH => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1055_p0,
        din1 => grp_fu_1055_p1,
        ce => grp_fu_1055_ce,
        dout => grp_fu_1055_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter4_state18)) then 
                        ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter3;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_1083_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                c_reg_234 <= select_ln55_7_reg_1206;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_reg_234 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_1083 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_211 <= select_ln56_4_reg_1168;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_211 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten44_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_1083 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten44_reg_188 <= add_ln55_2_reg_1158;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten44_reg_188 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_1083 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_200 <= select_ln56_5_reg_1178;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_200 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    j_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_1083 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_reg_223 <= add_ln57_reg_1173;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_223 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln55_2_reg_1158 <= add_ln55_2_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln55_fu_263_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln56_1_reg_1117 <= add_ln56_1_fu_303_p2;
                icmp_ln56_reg_1087 <= icmp_ln56_fu_269_p2;
                or_ln55_reg_1099 <= or_ln55_fu_289_p2;
                select_ln56_reg_1107 <= select_ln56_fu_295_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_1083 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln56_reg_1132 <= add_ln56_fu_322_p2;
                select_ln55_reg_1127 <= select_ln55_fu_315_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_1083 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln57_reg_1173 <= add_ln57_fu_365_p2;
                select_ln56_4_reg_1168 <= select_ln56_4_fu_360_p3;
                select_ln56_5_reg_1178 <= select_ln56_5_fu_370_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_1083 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln59_3_reg_1189 <= add_ln59_3_fu_411_p2;
                select_ln55_2_reg_1195 <= select_ln55_2_fu_416_p3;
                    select_ln55_3_reg_1201(4 downto 2) <= select_ln55_3_fu_423_p3(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln59_reg_1183 <= add_ln59_fu_388_p2;
                icmp_ln55_reg_1083 <= icmp_ln55_fu_263_p2;
                icmp_ln55_reg_1083_pp0_iter1_reg <= icmp_ln55_reg_1083;
                icmp_ln55_reg_1083_pp0_iter2_reg <= icmp_ln55_reg_1083_pp0_iter1_reg;
                icmp_ln55_reg_1083_pp0_iter3_reg <= icmp_ln55_reg_1083_pp0_iter2_reg;
                icmp_ln55_reg_1083_pp0_iter4_reg <= icmp_ln55_reg_1083_pp0_iter3_reg;
                icmp_ln55_reg_1083_pp0_iter5_reg <= icmp_ln55_reg_1083_pp0_iter4_reg;
                icmp_ln55_reg_1083_pp0_iter6_reg <= icmp_ln55_reg_1083_pp0_iter5_reg;
                icmp_ln56_reg_1087_pp0_iter1_reg <= icmp_ln56_reg_1087;
                icmp_ln56_reg_1087_pp0_iter2_reg <= icmp_ln56_reg_1087_pp0_iter1_reg;
                icmp_ln56_reg_1087_pp0_iter3_reg <= icmp_ln56_reg_1087_pp0_iter2_reg;
                icmp_ln56_reg_1087_pp0_iter4_reg <= icmp_ln56_reg_1087_pp0_iter3_reg;
                max1_reg_1353_pp0_iter5_reg <= max1_reg_1353;
                or_ln55_reg_1099_pp0_iter1_reg <= or_ln55_reg_1099;
                or_ln55_reg_1099_pp0_iter2_reg <= or_ln55_reg_1099_pp0_iter1_reg;
                or_ln55_reg_1099_pp0_iter3_reg <= or_ln55_reg_1099_pp0_iter2_reg;
                or_ln55_reg_1099_pp0_iter4_reg <= or_ln55_reg_1099_pp0_iter3_reg;
                    select_ln55_3_reg_1201_pp0_iter2_reg(4 downto 2) <= select_ln55_3_reg_1201(4 downto 2);
                    select_ln55_3_reg_1201_pp0_iter3_reg(4 downto 2) <= select_ln55_3_reg_1201_pp0_iter2_reg(4 downto 2);
                    select_ln55_3_reg_1201_pp0_iter4_reg(4 downto 2) <= select_ln55_3_reg_1201_pp0_iter3_reg(4 downto 2);
                select_ln56_reg_1107_pp0_iter1_reg <= select_ln56_reg_1107;
                select_ln56_reg_1107_pp0_iter2_reg <= select_ln56_reg_1107_pp0_iter1_reg;
                select_ln56_reg_1107_pp0_iter3_reg <= select_ln56_reg_1107_pp0_iter2_reg;
                select_ln56_reg_1107_pp0_iter4_reg <= select_ln56_reg_1107_pp0_iter3_reg;
                tmp_reg_1078 <= ap_phi_mux_i_phi_fu_215_p4(4 downto 1);
                tmp_reg_1078_pp0_iter1_reg <= tmp_reg_1078;
                tmp_reg_1078_pp0_iter2_reg <= tmp_reg_1078_pp0_iter1_reg;
                tmp_reg_1078_pp0_iter3_reg <= tmp_reg_1078_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (or_ln55_reg_1099_pp0_iter1_reg = ap_const_lv1_1) and (icmp_ln56_reg_1087_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln61_reg_1216 <= add_ln61_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln55_reg_1083_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln68_reg_1402 <= add_ln68_fu_875_p2;
                icmp_ln65_2_reg_1392 <= icmp_ln65_2_fu_833_p2;
                icmp_ln65_3_reg_1397 <= icmp_ln65_3_fu_838_p2;
                v2_reg_1380 <= v2_fu_825_p1;
                v3_reg_1386 <= v3_fu_829_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (or_ln55_reg_1099 = ap_const_lv1_1) and (icmp_ln56_reg_1087 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    empty_reg_1122(4 downto 1) <= empty_fu_309_p2(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0))) then
                gmem_addr_1_read_reg_1281 <= m_axi_gmem_RDATA;
                icmp_ln64_1_reg_1301 <= icmp_ln64_1_fu_703_p2;
                icmp_ln64_reg_1296 <= icmp_ln64_fu_698_p2;
                tmp_2_reg_1286 <= m_axi_gmem_RDATA(30 downto 23);
                trunc_ln64_1_reg_1291 <= trunc_ln64_1_fu_694_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_1083_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                gmem_addr_1_reg_1248 <= sext_ln60_fu_612_p1;
                select_ln56_2_reg_1237 <= select_ln56_2_fu_551_p3;
                    sext_ln60_1_reg_1243(63 downto 4) <= sext_ln60_1_fu_593_p1(63 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0))) then
                gmem_addr_2_read_reg_1318 <= m_axi_gmem_RDATA;
                icmp_ln64_2_reg_1323 <= icmp_ln64_2_fu_716_p2;
                icmp_ln64_3_reg_1328 <= icmp_ln64_3_fu_721_p2;
                tmp_4_reg_1333 <= m_axi_gmem_RDATA(30 downto 23);
                trunc_ln65_reg_1338 <= trunc_ln65_fu_736_p1;
                v0_reg_1306 <= v0_fu_708_p1;
                v1_reg_1312 <= v1_fu_712_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_1083_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                gmem_addr_2_reg_1254 <= sext_ln61_fu_636_p1;
                gmem_addr_3_reg_1260 <= sext_ln62_fu_660_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0))) then
                gmem_addr_3_read_reg_1348 <= m_axi_gmem_RDATA;
                icmp_ln65_1_reg_1375 <= icmp_ln65_1_fu_794_p2;
                icmp_ln65_reg_1370 <= icmp_ln65_fu_789_p2;
                max1_reg_1353 <= max1_fu_769_p3;
                tmp_5_reg_1360 <= m_axi_gmem_RDATA(30 downto 23);
                trunc_ln65_1_reg_1365 <= trunc_ln65_1_fu_785_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln55_reg_1083_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                gmem_addr_4_reg_1414 <= sext_ln68_fu_934_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0))) then
                gmem_addr_read_reg_1266 <= m_axi_gmem_RDATA;
                tmp_1_reg_1271 <= m_axi_gmem_RDATA(30 downto 23);
                trunc_ln64_reg_1276 <= trunc_ln64_fu_680_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_1083_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                gmem_addr_reg_1231 <= sext_ln59_fu_522_p1;
                select_ln56_1_reg_1221 <= select_ln56_1_fu_467_p3;
                    sext_ln59_1_reg_1226(63 downto 3) <= sext_ln59_1_fu_502_p1(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln55_reg_1083_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                max2_reg_1407 <= max2_fu_901_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln55_reg_1083_pp0_iter5_reg = ap_const_lv1_0))) then
                max_final_reg_1420 <= max_final_fu_1026_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_1083 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln55_reg_1099 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln59_1_reg_1211 <= grp_fu_1042_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                mul_ln59_reg_1153 <= grp_fu_1036_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln55_reg_1099_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln56_reg_1087_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln68_reg_1343 <= mul_ln68_fu_743_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_1083 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (or_ln55_reg_1099 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_mid_reg_1143 <= add_ln56_fu_322_p2(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                p_mid_reg_1143_pp0_iter1_reg <= p_mid_reg_1143;
                p_mid_reg_1143_pp0_iter2_reg <= p_mid_reg_1143_pp0_iter1_reg;
                p_mid_reg_1143_pp0_iter3_reg <= p_mid_reg_1143_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln55_reg_1083 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln55_7_reg_1206 <= select_ln55_7_fu_430_p3;
            end if;
        end if;
    end process;
    empty_reg_1122(0) <= '1';
    select_ln55_3_reg_1201(1 downto 0) <= "00";
    select_ln55_3_reg_1201_pp0_iter2_reg(1 downto 0) <= "00";
    select_ln55_3_reg_1201_pp0_iter3_reg(1 downto 0) <= "00";
    select_ln55_3_reg_1201_pp0_iter4_reg(1 downto 0) <= "00";
    sext_ln59_1_reg_1226(2 downto 0) <= "000";
    sext_ln60_1_reg_1243(3 downto 0) <= "1000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln55_1_fu_910_p2 <= std_logic_vector(unsigned(output_r) + unsigned(zext_ln55_fu_907_p1));
    add_ln55_2_fu_345_p2 <= std_logic_vector(unsigned(indvar_flatten44_reg_188) + unsigned(ap_const_lv11_1));
    add_ln55_fu_393_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_c_phi_fu_238_p4));
    add_ln56_1_fu_303_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_204_p4));
    add_ln56_fu_322_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(select_ln55_fu_315_p3));
    add_ln57_fu_365_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(select_ln56_reg_1107));
    add_ln59_1_fu_440_p2 <= std_logic_vector(unsigned(zext_ln59_2_fu_437_p1) + unsigned(add_ln59_reg_1183));
    add_ln59_2_fu_506_p2 <= std_logic_vector(unsigned(select_ln56_1_fu_467_p3) + unsigned(sext_ln59_1_fu_502_p1));
    add_ln59_3_fu_411_p2 <= std_logic_vector(unsigned(input_r) + unsigned(zext_ln59_5_fu_407_p1));
    add_ln59_4_fu_462_p2 <= std_logic_vector(unsigned(select_ln55_2_reg_1195) + unsigned(zext_ln59_7_fu_459_p1));
    add_ln59_fu_388_p2 <= std_logic_vector(unsigned(zext_ln59_fu_384_p1) + unsigned(input_r));
    add_ln60_fu_597_p2 <= std_logic_vector(unsigned(select_ln56_1_reg_1221) + unsigned(sext_ln60_1_fu_593_p1));
    add_ln61_1_fu_622_p2 <= std_logic_vector(unsigned(select_ln56_2_reg_1237) + unsigned(sext_ln59_1_reg_1226));
    add_ln61_2_fu_532_p2 <= std_logic_vector(unsigned(ap_const_lv64_2A0) + unsigned(add_ln59_3_reg_1189));
    add_ln61_3_fu_546_p2 <= std_logic_vector(unsigned(select_ln55_2_reg_1195) + unsigned(zext_ln61_1_fu_543_p1));
    add_ln61_fu_448_p2 <= std_logic_vector(unsigned(zext_ln61_fu_445_p1) + unsigned(add_ln59_reg_1183));
    add_ln62_fu_646_p2 <= std_logic_vector(unsigned(select_ln56_2_reg_1237) + unsigned(sext_ln60_1_reg_1243));
    add_ln68_1_fu_918_p2 <= std_logic_vector(signed(sext_ln68_2_fu_915_p1) + signed(add_ln55_1_fu_910_p2));
    add_ln68_fu_875_p2 <= std_logic_vector(unsigned(zext_ln56_2_fu_821_p1) + unsigned(sext_ln68_1_fu_871_p1));
    and_ln64_1_fu_763_p2 <= (grp_fu_245_p2 and and_ln64_fu_757_p2);
    and_ln64_fu_757_p2 <= (or_ln64_fu_749_p2 and or_ln64_1_fu_753_p2);
    and_ln65_1_fu_895_p2 <= (grp_fu_245_p2 and and_ln65_fu_889_p2);
    and_ln65_fu_889_p2 <= (or_ln65_fu_881_p2 and or_ln65_1_fu_885_p2);
    and_ln66_1_fu_1020_p2 <= (grp_fu_245_p2 and and_ln66_fu_1014_p2);
    and_ln66_fu_1014_p2 <= (or_ln66_fu_990_p2 and or_ln66_1_fu_1008_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state30 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_00001_assign_proc : process(m_axi_gmem_RVALID, icmp_ln55_reg_1083_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
                ap_block_pp0_stage0_00001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_gmem_RVALID, icmp_ln55_reg_1083_pp0_iter3_reg, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_block_state10_io)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0)) or ((ap_const_boolean_1 = ap_block_state10_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_gmem_RVALID, icmp_ln55_reg_1083_pp0_iter3_reg, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_block_state10_io)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_gmem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0)) or ((ap_const_boolean_1 = ap_block_state10_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_00001_assign_proc : process(m_axi_gmem_RVALID, ap_enable_reg_pp0_iter3, icmp_ln55_reg_1083_pp0_iter3_reg)
    begin
                ap_block_pp0_stage1_00001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(m_axi_gmem_RVALID, ap_enable_reg_pp0_iter3, icmp_ln55_reg_1083_pp0_iter3_reg, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter5, ap_block_state11_io, ap_block_state23_io)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_const_boolean_1 = ap_block_state11_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state23_io)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(m_axi_gmem_RVALID, ap_enable_reg_pp0_iter3, icmp_ln55_reg_1083_pp0_iter3_reg, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter5, ap_block_state11_io, ap_block_state23_io)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_const_boolean_1 = ap_block_state11_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state23_io)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_01001_assign_proc : process(m_axi_gmem_RVALID, ap_enable_reg_pp0_iter3, icmp_ln55_reg_1083_pp0_iter3_reg)
    begin
                ap_block_pp0_stage2_01001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(m_axi_gmem_RVALID, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, icmp_ln55_reg_1083_pp0_iter3_reg, ap_enable_reg_pp0_iter5, ap_block_state8_io, ap_block_state24_io)
    begin
                ap_block_pp0_stage2_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state8_io)) or ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state24_io)));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(m_axi_gmem_RVALID, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, icmp_ln55_reg_1083_pp0_iter3_reg, ap_enable_reg_pp0_iter5, ap_block_state8_io, ap_block_state24_io)
    begin
                ap_block_pp0_stage2_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state8_io)) or ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state24_io)));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_00001_assign_proc : process(m_axi_gmem_RVALID, m_axi_gmem_BVALID, ap_enable_reg_pp0_iter3, icmp_ln55_reg_1083_pp0_iter3_reg, ap_enable_reg_pp0_iter6, icmp_ln55_reg_1083_pp0_iter6_reg)
    begin
                ap_block_pp0_stage3_00001 <= (((m_axi_gmem_BVALID = ap_const_logic_0) and (icmp_ln55_reg_1083_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage3_11001_assign_proc : process(m_axi_gmem_RVALID, m_axi_gmem_BVALID, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, icmp_ln55_reg_1083_pp0_iter3_reg, ap_enable_reg_pp0_iter6, icmp_ln55_reg_1083_pp0_iter6_reg, ap_block_state9_io)
    begin
                ap_block_pp0_stage3_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state9_io)) or ((m_axi_gmem_BVALID = ap_const_logic_0) and (icmp_ln55_reg_1083_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(m_axi_gmem_RVALID, m_axi_gmem_BVALID, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, icmp_ln55_reg_1083_pp0_iter3_reg, ap_enable_reg_pp0_iter6, icmp_ln55_reg_1083_pp0_iter6_reg, ap_block_state9_io)
    begin
                ap_block_pp0_stage3_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state9_io)) or ((m_axi_gmem_BVALID = ap_const_logic_0) and (icmp_ln55_reg_1083_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)));
    end process;


    ap_block_state10_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln55_reg_1083_pp0_iter1_reg)
    begin
                ap_block_state10_io <= ((icmp_ln55_reg_1083_pp0_iter1_reg = ap_const_lv1_0) and (m_axi_gmem_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state10_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln55_reg_1083_pp0_iter2_reg)
    begin
                ap_block_state11_io <= ((m_axi_gmem_ARREADY = ap_const_logic_0) and (icmp_ln55_reg_1083_pp0_iter2_reg = ap_const_lv1_0));
    end process;

        ap_block_state11_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_pp0_stage1_iter3_assign_proc : process(m_axi_gmem_RVALID, icmp_ln55_reg_1083_pp0_iter3_reg)
    begin
                ap_block_state15_pp0_stage1_iter3 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_block_state16_pp0_stage2_iter3_assign_proc : process(m_axi_gmem_RVALID, icmp_ln55_reg_1083_pp0_iter3_reg)
    begin
                ap_block_state16_pp0_stage2_iter3 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_block_state17_pp0_stage3_iter3_assign_proc : process(m_axi_gmem_RVALID, icmp_ln55_reg_1083_pp0_iter3_reg)
    begin
                ap_block_state17_pp0_stage3_iter3 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0));
    end process;


    ap_block_state18_pp0_stage0_iter4_assign_proc : process(m_axi_gmem_RVALID, icmp_ln55_reg_1083_pp0_iter3_reg)
    begin
                ap_block_state18_pp0_stage0_iter4 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0));
    end process;

        ap_block_state19_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state23_io_assign_proc : process(m_axi_gmem_AWREADY, icmp_ln55_reg_1083_pp0_iter5_reg)
    begin
                ap_block_state23_io <= ((m_axi_gmem_AWREADY = ap_const_logic_0) and (icmp_ln55_reg_1083_pp0_iter5_reg = ap_const_lv1_0));
    end process;

        ap_block_state23_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state24_io_assign_proc : process(m_axi_gmem_WREADY, icmp_ln55_reg_1083_pp0_iter5_reg)
    begin
                ap_block_state24_io <= ((m_axi_gmem_WREADY = ap_const_logic_0) and (icmp_ln55_reg_1083_pp0_iter5_reg = ap_const_lv1_0));
    end process;

        ap_block_state24_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state29_pp0_stage3_iter6_assign_proc : process(m_axi_gmem_BVALID, icmp_ln55_reg_1083_pp0_iter6_reg)
    begin
                ap_block_state29_pp0_stage3_iter6 <= ((m_axi_gmem_BVALID = ap_const_logic_0) and (icmp_ln55_reg_1083_pp0_iter6_reg = ap_const_lv1_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln55_reg_1083_pp0_iter1_reg)
    begin
                ap_block_state8_io <= ((icmp_ln55_reg_1083_pp0_iter1_reg = ap_const_lv1_0) and (m_axi_gmem_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state8_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln55_reg_1083_pp0_iter1_reg)
    begin
                ap_block_state9_io <= ((icmp_ln55_reg_1083_pp0_iter1_reg = ap_const_lv1_0) and (m_axi_gmem_ARREADY = ap_const_logic_0));
    end process;

        ap_block_state9_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter4_state18_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter4_state18 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter4_state18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(icmp_ln55_reg_1083, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((icmp_ln55_reg_1083 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_phi_fu_238_p4_assign_proc : process(icmp_ln55_reg_1083_pp0_iter1_reg, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, c_reg_234, select_ln55_7_reg_1206)
    begin
        if (((icmp_ln55_reg_1083_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_c_phi_fu_238_p4 <= select_ln55_7_reg_1206;
        else 
            ap_phi_mux_c_phi_fu_238_p4 <= c_reg_234;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_215_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln55_reg_1083, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_reg_211, select_ln56_4_reg_1168)
    begin
        if (((icmp_ln55_reg_1083 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_215_p4 <= select_ln56_4_reg_1168;
        else 
            ap_phi_mux_i_phi_fu_215_p4 <= i_reg_211;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten44_phi_fu_192_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln55_reg_1083, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, indvar_flatten44_reg_188, add_ln55_2_reg_1158)
    begin
        if (((icmp_ln55_reg_1083 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten44_phi_fu_192_p4 <= add_ln55_2_reg_1158;
        else 
            ap_phi_mux_indvar_flatten44_phi_fu_192_p4 <= indvar_flatten44_reg_188;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_204_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln55_reg_1083, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, indvar_flatten_reg_200, select_ln56_5_reg_1178)
    begin
        if (((icmp_ln55_reg_1083 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_204_p4 <= select_ln56_5_reg_1178;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_204_p4 <= indvar_flatten_reg_200;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_227_p4_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln55_reg_1083, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_reg_223, add_ln57_reg_1173)
    begin
        if (((icmp_ln55_reg_1083 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_j_phi_fu_227_p4 <= add_ln57_reg_1173;
        else 
            ap_phi_mux_j_phi_fu_227_p4 <= j_reg_223;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln66_1_fu_961_p1 <= max2_reg_1407;
    bitcast_ln66_fu_944_p1 <= max1_reg_1353_pp0_iter5_reg;
    empty_fu_309_p2 <= (i_reg_211 or ap_const_lv5_1);

    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2, icmp_ln55_reg_1083_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, icmp_ln55_reg_1083_pp0_iter2_reg)
    begin
        if ((((icmp_ln55_reg_1083_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln55_reg_1083_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln55_reg_1083_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln55_reg_1083_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter5, icmp_ln55_reg_1083_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln55_reg_1083_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_enable_reg_pp0_iter6, icmp_ln55_reg_1083_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln55_reg_1083_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter3, ap_block_pp0_stage1, icmp_ln55_reg_1083_pp0_iter3_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_enable_reg_pp0_iter5, icmp_ln55_reg_1083_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln55_reg_1083_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1036_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1036_ce <= ap_const_logic_1;
        else 
            grp_fu_1036_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1036_p0 <= grp_fu_1036_p00(5 - 1 downto 0);
    grp_fu_1036_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_phi_fu_215_p4),15));
    grp_fu_1036_p1 <= ap_const_lv15_2A0(11 - 1 downto 0);

    grp_fu_1042_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1042_ce <= ap_const_logic_1;
        else 
            grp_fu_1042_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1042_p0 <= ap_const_lv15_2A0(11 - 1 downto 0);
    grp_fu_1042_p1 <= grp_fu_1042_p10(5 - 1 downto 0);
    grp_fu_1042_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln56_fu_322_p2),15));

    grp_fu_1048_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1048_ce <= ap_const_logic_1;
        else 
            grp_fu_1048_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1048_p0 <= grp_fu_1048_p00(5 - 1 downto 0);
    grp_fu_1048_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_1122),15));
    grp_fu_1048_p1 <= ap_const_lv15_2A0(11 - 1 downto 0);

    grp_fu_1055_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_1055_ce <= ap_const_logic_1;
        else 
            grp_fu_1055_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1055_p0 <= ap_const_lv15_2A0(11 - 1 downto 0);
    grp_fu_1055_p1 <= grp_fu_1055_p10(5 - 1 downto 0);
    grp_fu_1055_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid1_fu_351_p2),15));

    grp_fu_245_ce_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_245_ce <= ap_const_logic_1;
        else 
            grp_fu_245_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_245_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter3, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, v0_fu_708_p1, max1_reg_1353, v2_fu_825_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            grp_fu_245_p0 <= max1_reg_1353;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            grp_fu_245_p0 <= v2_fu_825_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            grp_fu_245_p0 <= v0_fu_708_p1;
        else 
            grp_fu_245_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_245_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter3, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, v1_fu_712_p1, v3_fu_829_p1, max2_reg_1407)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            grp_fu_245_p1 <= max2_reg_1407;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            grp_fu_245_p1 <= v3_fu_829_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            grp_fu_245_p1 <= v1_fu_712_p1;
        else 
            grp_fu_245_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln55_fu_263_p2 <= "1" when (ap_phi_mux_indvar_flatten44_phi_fu_192_p4 = ap_const_lv11_498) else "0";
    icmp_ln56_fu_269_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_204_p4 = ap_const_lv8_C4) else "0";
    icmp_ln57_fu_283_p2 <= "1" when (unsigned(ap_phi_mux_j_phi_fu_227_p4) < unsigned(ap_const_lv5_1C)) else "0";
    icmp_ln64_1_fu_703_p2 <= "1" when (trunc_ln64_reg_1276 = ap_const_lv23_0) else "0";
    icmp_ln64_2_fu_716_p2 <= "0" when (tmp_2_reg_1286 = ap_const_lv8_FF) else "1";
    icmp_ln64_3_fu_721_p2 <= "1" when (trunc_ln64_1_reg_1291 = ap_const_lv23_0) else "0";
    icmp_ln64_fu_698_p2 <= "0" when (tmp_1_reg_1271 = ap_const_lv8_FF) else "1";
    icmp_ln65_1_fu_794_p2 <= "1" when (trunc_ln65_reg_1338 = ap_const_lv23_0) else "0";
    icmp_ln65_2_fu_833_p2 <= "0" when (tmp_5_reg_1360 = ap_const_lv8_FF) else "1";
    icmp_ln65_3_fu_838_p2 <= "1" when (trunc_ln65_1_reg_1365 = ap_const_lv23_0) else "0";
    icmp_ln65_fu_789_p2 <= "0" when (tmp_4_reg_1333 = ap_const_lv8_FF) else "1";
    icmp_ln66_1_fu_984_p2 <= "1" when (trunc_ln66_fu_957_p1 = ap_const_lv23_0) else "0";
    icmp_ln66_2_fu_996_p2 <= "0" when (tmp_8_fu_964_p4 = ap_const_lv8_FF) else "1";
    icmp_ln66_3_fu_1002_p2 <= "1" when (trunc_ln66_1_fu_974_p1 = ap_const_lv23_0) else "0";
    icmp_ln66_fu_978_p2 <= "0" when (tmp_7_fu_947_p4 = ap_const_lv8_FF) else "1";

    m_axi_gmem_ARADDR_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, icmp_ln55_reg_1083_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln55_reg_1083_pp0_iter2_reg, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, gmem_addr_reg_1231, gmem_addr_1_reg_1248, gmem_addr_2_reg_1254, gmem_addr_3_reg_1260)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln55_reg_1083_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            m_axi_gmem_ARADDR <= gmem_addr_3_reg_1260;
        elsif (((icmp_ln55_reg_1083_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            m_axi_gmem_ARADDR <= gmem_addr_2_reg_1254;
        elsif (((icmp_ln55_reg_1083_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            m_axi_gmem_ARADDR <= gmem_addr_1_reg_1248;
        elsif (((icmp_ln55_reg_1083_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            m_axi_gmem_ARADDR <= gmem_addr_reg_1231;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, icmp_ln55_reg_1083_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln55_reg_1083_pp0_iter2_reg, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((icmp_ln55_reg_1083_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln55_reg_1083_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((icmp_ln55_reg_1083_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln55_reg_1083_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= gmem_addr_4_reg_1414;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_1;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter5, icmp_ln55_reg_1083_pp0_iter5_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln55_reg_1083_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter6, icmp_ln55_reg_1083_pp0_iter6_reg, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln55_reg_1083_pp0_iter6_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter3, icmp_ln55_reg_1083_pp0_iter3_reg, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln55_reg_1083_pp0_iter3_reg = ap_const_lv1_0)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= max_final_reg_1420;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter5, icmp_ln55_reg_1083_pp0_iter5_reg, ap_block_pp0_stage2_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln55_reg_1083_pp0_iter5_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    max1_fu_769_p3 <= 
        v0_reg_1306 when (and_ln64_1_fu_763_p2(0) = '1') else 
        v1_reg_1312;
    max2_fu_901_p3 <= 
        v2_reg_1380 when (and_ln65_1_fu_895_p2(0) = '1') else 
        v3_reg_1386;
    max_final_fu_1026_p3 <= 
        max1_reg_1353_pp0_iter5_reg when (and_ln66_1_fu_1020_p2(0) = '1') else 
        max2_reg_1407;
    mul_ln68_1_fu_808_p0 <= ap_const_lv13_150(10 - 1 downto 0);
    mul_ln68_1_fu_808_p1 <= mul_ln68_1_fu_808_p10(4 - 1 downto 0);
    mul_ln68_1_fu_808_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid_reg_1143_pp0_iter3_reg),13));
    mul_ln68_fu_743_p0 <= mul_ln68_fu_743_p00(4 - 1 downto 0);
    mul_ln68_fu_743_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_1078_pp0_iter3_reg),13));
    mul_ln68_fu_743_p1 <= ap_const_lv13_150(10 - 1 downto 0);
    or_ln55_fu_289_p2 <= (icmp_ln57_fu_283_p2 or icmp_ln56_fu_269_p2);
    or_ln60_fu_558_p2 <= (select_ln56_reg_1107_pp0_iter1_reg or ap_const_lv5_1);
    or_ln64_1_fu_753_p2 <= (icmp_ln64_3_reg_1328 or icmp_ln64_2_reg_1323);
    or_ln64_fu_749_p2 <= (icmp_ln64_reg_1296 or icmp_ln64_1_reg_1301);
    or_ln65_1_fu_885_p2 <= (icmp_ln65_3_reg_1397 or icmp_ln65_2_reg_1392);
    or_ln65_fu_881_p2 <= (icmp_ln65_reg_1370 or icmp_ln65_1_reg_1375);
    or_ln66_1_fu_1008_p2 <= (icmp_ln66_3_fu_1002_p2 or icmp_ln66_2_fu_996_p2);
    or_ln66_fu_990_p2 <= (icmp_ln66_fu_978_p2 or icmp_ln66_1_fu_984_p2);
    p_mid1_fu_351_p2 <= (ap_const_lv5_1 or add_ln56_reg_1132);
    select_ln55_1_fu_275_p3 <= 
        ap_const_lv5_0 when (icmp_ln56_fu_269_p2(0) = '1') else 
        ap_phi_mux_j_phi_fu_227_p4;
    select_ln55_2_fu_416_p3 <= 
        add_ln59_3_fu_411_p2 when (icmp_ln56_reg_1087(0) = '1') else 
        add_ln59_fu_388_p2;
    select_ln55_3_fu_423_p3 <= 
        shl_ln59_mid1_fu_399_p3 when (icmp_ln56_reg_1087(0) = '1') else 
        shl_ln_fu_376_p3;
    select_ln55_4_fu_453_p3 <= 
        add_ln59_3_reg_1189 when (icmp_ln56_reg_1087_pp0_iter1_reg(0) = '1') else 
        add_ln59_1_fu_440_p2;
    select_ln55_5_fu_537_p3 <= 
        add_ln61_2_fu_532_p2 when (icmp_ln56_reg_1087_pp0_iter1_reg(0) = '1') else 
        add_ln61_reg_1216;
    select_ln55_6_fu_799_p3 <= 
        ap_const_lv13_0 when (icmp_ln56_reg_1087_pp0_iter4_reg(0) = '1') else 
        mul_ln68_reg_1343;
    select_ln55_7_fu_430_p3 <= 
        add_ln55_fu_393_p2 when (icmp_ln56_reg_1087(0) = '1') else 
        ap_phi_mux_c_phi_fu_238_p4;
    select_ln55_fu_315_p3 <= 
        ap_const_lv5_0 when (icmp_ln56_reg_1087(0) = '1') else 
        i_reg_211;
    select_ln56_1_fu_467_p3 <= 
        select_ln55_4_fu_453_p3 when (or_ln55_reg_1099_pp0_iter1_reg(0) = '1') else 
        add_ln59_4_fu_462_p2;
    select_ln56_2_fu_551_p3 <= 
        select_ln55_5_fu_537_p3 when (or_ln55_reg_1099_pp0_iter1_reg(0) = '1') else 
        add_ln61_3_fu_546_p2;
    select_ln56_3_fu_814_p3 <= 
        select_ln55_6_fu_799_p3 when (or_ln55_reg_1099_pp0_iter4_reg(0) = '1') else 
        mul_ln68_1_fu_808_p2;
    select_ln56_4_fu_360_p3 <= 
        select_ln55_reg_1127 when (or_ln55_reg_1099(0) = '1') else 
        add_ln56_reg_1132;
    select_ln56_5_fu_370_p3 <= 
        ap_const_lv8_1 when (icmp_ln56_reg_1087(0) = '1') else 
        add_ln56_1_reg_1117;
    select_ln56_fu_295_p3 <= 
        select_ln55_1_fu_275_p3 when (or_ln55_fu_289_p2(0) = '1') else 
        ap_const_lv5_0;
        sext_ln59_1_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln59_fu_496_p2),64));

        sext_ln59_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_512_p4),64));

        sext_ln60_1_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln60_fu_587_p2),64));

        sext_ln60_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_602_p4),64));

        sext_ln61_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_626_p4),64));

        sext_ln62_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_650_p4),64));

        sext_ln68_1_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln68_fu_865_p2),14));

        sext_ln68_2_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln68_reg_1402),64));

        sext_ln68_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln7_fu_924_p4),64));

    shl_ln1_fu_563_p3 <= (or_ln60_fu_558_p2 & ap_const_lv5_0);
    shl_ln2_fu_843_p3 <= (select_ln56_reg_1107_pp0_iter4_reg & ap_const_lv4_0);
    shl_ln59_1_fu_474_p3 <= (select_ln56_reg_1107_pp0_iter1_reg & ap_const_lv5_0);
    shl_ln59_2_fu_485_p3 <= (select_ln56_reg_1107_pp0_iter1_reg & ap_const_lv3_0);
    shl_ln59_mid1_fu_399_p3 <= (add_ln55_fu_393_p2 & ap_const_lv2_0);
    shl_ln60_1_fu_575_p3 <= (or_ln60_fu_558_p2 & ap_const_lv3_0);
    shl_ln68_1_fu_854_p3 <= (select_ln56_reg_1107_pp0_iter4_reg & ap_const_lv2_0);
    shl_ln_fu_376_p3 <= (ap_phi_mux_c_phi_fu_238_p4 & ap_const_lv2_0);
    sub_ln59_fu_496_p2 <= std_logic_vector(unsigned(zext_ln59_3_fu_481_p1) - unsigned(zext_ln59_4_fu_492_p1));
    sub_ln60_fu_587_p2 <= std_logic_vector(unsigned(zext_ln60_fu_571_p1) - unsigned(zext_ln60_1_fu_583_p1));
    sub_ln68_fu_865_p2 <= std_logic_vector(unsigned(zext_ln68_fu_850_p1) - unsigned(zext_ln68_1_fu_861_p1));
    tmp_7_fu_947_p4 <= bitcast_ln66_fu_944_p1(30 downto 23);
    tmp_8_fu_964_p4 <= bitcast_ln66_1_fu_961_p1(30 downto 23);
    trunc_ln1_fu_602_p4 <= add_ln60_fu_597_p2(63 downto 2);
    trunc_ln2_fu_626_p4 <= add_ln61_1_fu_622_p2(63 downto 2);
    trunc_ln3_fu_650_p4 <= add_ln62_fu_646_p2(63 downto 2);
    trunc_ln64_1_fu_694_p1 <= m_axi_gmem_RDATA(23 - 1 downto 0);
    trunc_ln64_fu_680_p1 <= m_axi_gmem_RDATA(23 - 1 downto 0);
    trunc_ln65_1_fu_785_p1 <= m_axi_gmem_RDATA(23 - 1 downto 0);
    trunc_ln65_fu_736_p1 <= m_axi_gmem_RDATA(23 - 1 downto 0);
    trunc_ln66_1_fu_974_p1 <= bitcast_ln66_1_fu_961_p1(23 - 1 downto 0);
    trunc_ln66_fu_957_p1 <= bitcast_ln66_fu_944_p1(23 - 1 downto 0);
    trunc_ln7_fu_924_p4 <= add_ln68_1_fu_918_p2(63 downto 2);
    trunc_ln_fu_512_p4 <= add_ln59_2_fu_506_p2(63 downto 2);
    v0_fu_708_p1 <= gmem_addr_read_reg_1266;
    v1_fu_712_p1 <= gmem_addr_1_read_reg_1281;
    v2_fu_825_p1 <= gmem_addr_2_read_reg_1318;
    v3_fu_829_p1 <= gmem_addr_3_read_reg_1348;
    zext_ln55_fu_907_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln55_3_reg_1201_pp0_iter4_reg),64));
    zext_ln56_2_fu_821_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln56_3_fu_814_p3),14));
    zext_ln59_2_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln59_reg_1153),64));
    zext_ln59_3_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln59_1_fu_474_p3),11));
    zext_ln59_4_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln59_2_fu_485_p3),11));
    zext_ln59_5_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln59_mid1_fu_399_p3),64));
    zext_ln59_7_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln59_1_reg_1211),64));
    zext_ln59_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_376_p3),64));
    zext_ln60_1_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln60_1_fu_575_p3),11));
    zext_ln60_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_563_p3),11));
    zext_ln61_1_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1055_p2),64));
    zext_ln61_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1048_p2),64));
    zext_ln68_1_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln68_1_fu_854_p3),10));
    zext_ln68_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_843_p3),10));
end behav;
