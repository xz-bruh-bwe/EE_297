-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity lenet_top_fc_layer_120_84_s_fc2_biases_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 84
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of lenet_top_fc_layer_120_84_s_fc2_biases_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100001011011010111101111011", 
    1 => "00111011111011001111010010001011", 
    2 => "00111101000111111110110001010111", 
    3 => "00111100110010111100010111010111", 
    4 => "00111100101101001111111000101111", 
    5 => "00111101000000111100011111010110", 
    6 => "10111100100110001101001000000100", 
    7 => "00111011110101010000110101100011", 
    8 => "00111101000101110011000101111101", 
    9 => "10111011010001100101110100011100", 
    10 => "00111101001001100110101001011000", 
    11 => "00111101000111000100010011110101", 
    12 => "10111100100011110110110010001010", 
    13 => "10111100001010001110110010101001", 
    14 => "00111101100011111101010001011010", 
    15 => "00111101000011100000000110001110", 
    16 => "00111100110001011110111111010100", 
    17 => "00111100100000000001001110110111", 
    18 => "10111100001001100101101110111111", 
    19 => "00111101000110111010111101010110", 
    20 => "10111100111000011000000101110000", 
    21 => "00111101001000000110000000110101", 
    22 => "00111100010101101110000111100100", 
    23 => "00111101000010010010001011110001", 
    24 => "00111011001000111000110110111001", 
    25 => "00111100000111011000101101010110", 
    26 => "00111101000011101000010001100101", 
    27 => "00111100100100010101101111001000", 
    28 => "00111100111100111101011011010111", 
    29 => "10111010101000110101011110001000", 
    30 => "10111101011011010101011100101100", 
    31 => "00111011111111001100111111110101", 
    32 => "00111100111110100101001111100100", 
    33 => "00111100010111101000010010011011", 
    34 => "10111011100001100011101000010110", 
    35 => "00111011111110100100101100001010", 
    36 => "10111101010010000010010111000110", 
    37 => "00111100100011111011011100010010", 
    38 => "10111011110011111000110011011011", 
    39 => "00111101000000000100100000100111", 
    40 => "00111100111100010011010111100011", 
    41 => "00111100000111101111100100110101", 
    42 => "00111100101011110010000100101011", 
    43 => "10111100100011000010010010100110", 
    44 => "10111100111010110000110000001101", 
    45 => "10111011100100100001111000111011", 
    46 => "10111100111101011010010101011110", 
    47 => "00111100111010100100001010001001", 
    48 => "10111100000111100111111101010010", 
    49 => "00111100110011100101111000010010", 
    50 => "00111100110001110011011100111100", 
    51 => "00111101000010100111110001111011", 
    52 => "10111100100101111101010011100011", 
    53 => "10111101000010010111011011000100", 
    54 => "00111101010100101001100110100000", 
    55 => "10111010011010110001000111011100", 
    56 => "00111101010110000100101111010100", 
    57 => "00111100100110010010010110110001", 
    58 => "10111100000110100101101001001001", 
    59 => "10111011101011111100110100111000", 
    60 => "00111011010110100111100001011100", 
    61 => "10111100111110000100000011000100", 
    62 => "00111100111010000111100100100110", 
    63 => "00111100001011111110110000000001", 
    64 => "10111011111101100101010000011010", 
    65 => "00111100011000000100100010010101", 
    66 => "10111011111110111111101001100010", 
    67 => "10111100100110011001101000111011", 
    68 => "10111100110101100010011000100111", 
    69 => "00111101010111011011011000100001", 
    70 => "00111100101010001010010101110000", 
    71 => "10111100100101111001010111101001", 
    72 => "00111101000101101001100000011101", 
    73 => "00111101100001001000000110111100", 
    74 => "10111101000001100111100101010001", 
    75 => "00111101000001100001100011111100", 
    76 => "10111100101101000101101111100010", 
    77 => "00111101011100011001110101011001", 
    78 => "10111101001101100101010001000101", 
    79 => "10111100000100100101011101100110", 
    80 => "00111100101010100111101100101110", 
    81 => "00111011100011110011111100111000", 
    82 => "00111100110111001001110111110000", 
    83 => "10111101000110011010110111101100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity lenet_top_fc_layer_120_84_s_fc2_biases is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 84;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of lenet_top_fc_layer_120_84_s_fc2_biases is
    component lenet_top_fc_layer_120_84_s_fc2_biases_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    lenet_top_fc_layer_120_84_s_fc2_biases_rom_U :  component lenet_top_fc_layer_120_84_s_fc2_biases_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


