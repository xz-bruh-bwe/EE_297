-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity lenet_top_fc3_layer_fc3_weights_0_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 252
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of lenet_top_fc3_layer_fc3_weights_0_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110100111001100000001100011", 
    1 => "10111101100001011110011110000111", 
    2 => "10111101111010011111101110110110", 
    3 => "00111101101000100010001110001100", 
    4 => "10111110100010100001010011000000", 
    5 => "10111101111101010000000000000111", 
    6 => "10111100011001010101110010111100", 
    7 => "00111101101000011111010011110100", 
    8 => "00111110100000101010110111111110", 
    9 => "10111110000111111101100110111110", 
    10 => "10111110100000001101011101000101", 
    11 => "10111110010100100001111111011011", 
    12 => "10111110010010110110111010010001", 
    13 => "10111110100101001010100101000100", 
    14 => "00111110000100101111010010001100", 
    15 => "10111110010101111111001000001101", 
    16 => "00111110001100000101011010101000", 
    17 => "10111110011000100000101001011100", 
    18 => "10111101000000110111001101101101", 
    19 => "10111110011000110111100110000100", 
    20 => "00111101101001000000111011001011", 
    21 => "00111110100010010111110011010011", 
    22 => "10111110110101110000011001110011", 
    23 => "10111110000101110100101111010101", 
    24 => "00111110001011110010101110110010", 
    25 => "00111110100101100110110010001010", 
    26 => "00111110100110100001100111100010", 
    27 => "00111101111010101010000110100100", 
    28 => "00111110000001100000011111010100", 
    29 => "10111101000010111111000011111111", 
    30 => "00111101110100010010000110000111", 
    31 => "10111110011101100011100101011001", 
    32 => "00111110011000111010000010000000", 
    33 => "10111110010001010101101000001010", 
    34 => "00111110100000000110011010101010", 
    35 => "10111110100011001011001000011110", 
    36 => "00111110100010000010100010000001", 
    37 => "00111110001100110101001011110011", 
    38 => "00111101101100001010011000101010", 
    39 => "10111101111101000101100110001010", 
    40 => "10111101010100011110010111111100", 
    41 => "10111100001100111101110101101000", 
    42 => "10111101101111010000001111111011", 
    43 => "10111101100000001001010011111111", 
    44 => "00111100111100111010111011001001", 
    45 => "10111101000100011000000000100101", 
    46 => "00111101011100100000000001100011", 
    47 => "00111101110101101001010001010001", 
    48 => "10111110010010011111000101011000", 
    49 => "00111101101011011110111000111010", 
    50 => "00111101100001011011100010010011", 
    51 => "10111101111010100000000010101010", 
    52 => "00111101110101111000011011101110", 
    53 => "10111110110001010100111000010010", 
    54 => "10111101010001010011100111011001", 
    55 => "10111110000101100001100111110000", 
    56 => "00111110010100111011011100010111", 
    57 => "10111110100110011010110001010110", 
    58 => "10111110100101110111000101110010", 
    59 => "10111110000000111011011000111011", 
    60 => "00111101000110100111110100010001", 
    61 => "00111110010010011001110110001110", 
    62 => "00111110111001010001100001011011", 
    63 => "10111110100001000101111100100010", 
    64 => "00111101101001001100100100111011", 
    65 => "00111100100011001010001001110101", 
    66 => "00111101001100011100110100101101", 
    67 => "10111101101111100111010011001000", 
    68 => "10111101100000010100010111110101", 
    69 => "10111110100110111110010000001000", 
    70 => "10111110010111001011100010111000", 
    71 => "00111101101000110100101111001011", 
    72 => "10111110100000111110110101010110", 
    73 => "00111110000111010111000000110011", 
    74 => "10111101100111110110101110000110", 
    75 => "00111101010111111001000101101101", 
    76 => "10111110000010011111101001011110", 
    77 => "00111110011111100111110111010000", 
    78 => "00111110000001101111010001010001", 
    79 => "10111101101101110000011110000100", 
    80 => "10111110010011100010110001110111", 
    81 => "10111110010000000011000111110011", 
    82 => "00111110111001000001011110000010", 
    83 => "10111011110011001110000011101111", 
    84 => "00111110011000111100000101111100", 
    85 => "00111101101001111001101000011101", 
    86 => "10111110100010100010011000101111", 
    87 => "00111100100000010101001111011101", 
    88 => "00111100010111101000111101101101", 
    89 => "00111110011010111110101101101001", 
    90 => "00111101111011011001001011101110", 
    91 => "10111110000011111011100101011110", 
    92 => "10111110000110101111010000110100", 
    93 => "10111110100110111010010001010010", 
    94 => "10111110101010000000010110110110", 
    95 => "00111110100100111110010111101110", 
    96 => "00111110100010100100111111010100", 
    97 => "10111110010101001110110011100011", 
    98 => "00111101100001000010110000101011", 
    99 => "00111110011000110011001100110101", 
    100 => "00111110010011111110101111001001", 
    101 => "00111101000110011101101101010011", 
    102 => "00111101000100010100000010110010", 
    103 => "00111101100101110110000000101010", 
    104 => "10111110100000001010000111000000", 
    105 => "10111101100000011001000010111111", 
    106 => "10111110101010100101100001100111", 
    107 => "10111101101100101000101000101101", 
    108 => "00111110010110110110000000100100", 
    109 => "00111100000111000100110000100110", 
    110 => "10111110000110010011011010111000", 
    111 => "10111101110010000111100010110100", 
    112 => "00111110110001100100101000001011", 
    113 => "10111101011100111011110001001101", 
    114 => "10111110000101111111100010000001", 
    115 => "10111101100101000000000110010001", 
    116 => "00111110100011110100101010000010", 
    117 => "00111110010011010110110001011010", 
    118 => "00111101101011101100101000100100", 
    119 => "00111011000111110110100010111100", 
    120 => "00111101110001111010100001100000", 
    121 => "10111110000001111101110001010101", 
    122 => "00111101101110110011011101001010", 
    123 => "00111110100001100110001110001111", 
    124 => "10111110101100010101001101011011", 
    125 => "10111101110110110011000111110001", 
    126 => "10111101110011110011011111011101", 
    127 => "10111110100110011000111010111100", 
    128 => "00111100010100010011100000101100", 
    129 => "10111110001000001011010100011010", 
    130 => "00111101111110111101101101100010", 
    131 => "00111110011000000101001000101110", 
    132 => "10111010100110010001100110010111", 
    133 => "10111101111100110000101110100111", 
    134 => "00111110000000101111110000111100", 
    135 => "00111011110010010111010010101001", 
    136 => "10111110000110010001100010101001", 
    137 => "00111100100010100110101100110011", 
    138 => "10111101111101111001110110101011", 
    139 => "00111101101010101101111000010100", 
    140 => "10111101101001001011010110100100", 
    141 => "10111110100101110111000001010000", 
    142 => "10111100101110011011101000110001", 
    143 => "10111110010001001111000111111011", 
    144 => "00111101101001010101110000011000", 
    145 => "10111110100011010101011111010110", 
    146 => "00111110000110000101111110001111", 
    147 => "10111110101000111010110001000101", 
    148 => "10111110010001011100110010101011", 
    149 => "00111101111010101011001111100110", 
    150 => "10111100010100000110111111011010", 
    151 => "10111110101000000101111011101111", 
    152 => "10111110011001011111001110101100", 
    153 => "00111110000110111000110100100100", 
    154 => "10111101111111010111010010101011", 
    155 => "10111101101110000000010110001101", 
    156 => "10111110101001011111101100011010", 
    157 => "00111101100000010001110111001011", 
    158 => "00111110101100010000010100110010", 
    159 => "10111110011010011000111111010011", 
    160 => "00111101110111000010110100111000", 
    161 => "10111110010000101110001110101110", 
    162 => "00111110000001101000110101110111", 
    163 => "10111110000101111100110100001100", 
    164 => "00111110100001100010011011001001", 
    165 => "00111110010111010001110111011001", 
    166 => "10111110100011110110000110001110", 
    167 => "10111100000110101101110010011010", 
    168 => "10111110000101000101011100000000", 
    169 => "00111110100110111110100010111110", 
    170 => "00111110001010110000001011011011", 
    171 => "00111110011101001100110100100110", 
    172 => "00111110100000100011100000110011", 
    173 => "10111101100000011111011110100011", 
    174 => "00111110011110101000110000101101", 
    175 => "10111101011001111100011011011001", 
    176 => "00111101101110101100010101100011", 
    177 => "00111110000011111000011111000100", 
    178 => "10111110010011110000011101100000", 
    179 => "00111110100100011010000100110110", 
    180 => "10111110101000110001000000000010", 
    181 => "10111110011101010001111011010111", 
    182 => "10111110000010001100000001010100", 
    183 => "10111101001000000101000010101011", 
    184 => "10111110010101010111010011101000", 
    185 => "00111101011000111010111010100110", 
    186 => "00111110010011010111000110110101", 
    187 => "00111110001101010010101100100011", 
    188 => "10111110010001100110000000111110", 
    189 => "10111101111011010010001101111011", 
    190 => "00111110100000110111001001111101", 
    191 => "00111100111100011100001101010001", 
    192 => "00111100100010001100111110011101", 
    193 => "10111100110000110100001011101011", 
    194 => "10111110001011001100001001110101", 
    195 => "10111110011010100001101010111100", 
    196 => "00111110010000101100111000000000", 
    197 => "00111110010100111011111010000001", 
    198 => "00111101110101100100101011001111", 
    199 => "00111101100000110001010010111110", 
    200 => "00111110010110011000010100110110", 
    201 => "10111110010001000111101011111011", 
    202 => "10111101011000110001111110110010", 
    203 => "00111100011001010010000001110110", 
    204 => "00111101111000010011101000111011", 
    205 => "00111101100101001001011100110110", 
    206 => "10111110100010110011000000011110", 
    207 => "00111101110111011111000010100110", 
    208 => "10111101101111010000111100000011", 
    209 => "00111101000011110100010110111000", 
    210 => "10111101101110110101101100010010", 
    211 => "10111110101001001001111111000110", 
    212 => "00111100111100010000011110000101", 
    213 => "10111101001001010001000011110001", 
    214 => "10111110100111000111100001100111", 
    215 => "10111100110111110000001011010000", 
    216 => "00111101111100010111001101110011", 
    217 => "00111110001000000111110001110111", 
    218 => "10111110100000010111001010010111", 
    219 => "00111110001010101011010011001101", 
    220 => "00111110100001000110100111010101", 
    221 => "00111101111110100100001111000101", 
    222 => "00111110000011111111001001110001", 
    223 => "10111110100101111101011100001010", 
    224 => "10111101011101111101011011100100", 
    225 => "10111110010000110111011111011100", 
    226 => "00111101000111010011011000111111", 
    227 => "00111101110101111101110000110100", 
    228 => "00111110001010110100110010110101", 
    229 => "00111110000011011101100000010111", 
    230 => "10111101011100010011011100001010", 
    231 => "10111101101010111010000111110011", 
    232 => "00111100001111111011000010110000", 
    233 => "10111110110000001000000000001011", 
    234 => "10111110100001111110111110000010", 
    235 => "00111110000001011101111110011011", 
    236 => "00111101100110101011001111110001", 
    237 => "10111110010010101011010110101001", 
    238 => "10111101011100100111110111001100", 
    239 => "00111101110100101010111000001000", 
    240 => "00111110011011111111100011011001", 
    241 => "10111101011000100110110111111111", 
    242 => "10111110011111110111111110100000", 
    243 => "00111101101101011101011110101110", 
    244 => "00111110010110101101101000100000", 
    245 => "10111101000111100110101010001100", 
    246 => "00111110000100010000011000111110", 
    247 => "00111101000001000101010001110000", 
    248 => "10111110100011000110100110111001", 
    249 => "10111011111010100011111001001101", 
    250 => "10111101100010100110111100000010", 
    251 => "00111110001101010000001000000110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity lenet_top_fc3_layer_fc3_weights_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 252;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of lenet_top_fc3_layer_fc3_weights_0 is
    component lenet_top_fc3_layer_fc3_weights_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    lenet_top_fc3_layer_fc3_weights_0_rom_U :  component lenet_top_fc3_layer_fc3_weights_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


