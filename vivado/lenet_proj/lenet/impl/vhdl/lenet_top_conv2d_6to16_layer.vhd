-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lenet_top_conv2d_6to16_layer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_r : IN STD_LOGIC_VECTOR (63 downto 0);
    output_r : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of lenet_top_conv2d_6to16_layer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv11_640 : STD_LOGIC_VECTOR (10 downto 0) := "11001000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_64 : STD_LOGIC_VECTOR (7 downto 0) := "01100100";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv13_150 : STD_LOGIC_VECTOR (12 downto 0) := "0000101010000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv2_weights_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv2_weights_ce0 : STD_LOGIC;
    signal conv2_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv2_biases_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv2_biases_ce0 : STD_LOGIC;
    signal conv2_biases_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal icmp_ln89_reg_1033 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal icmp_ln89_reg_1033_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal indvar_flatten26_reg_274 : STD_LOGIC_VECTOR (7 downto 0);
    signal ic_reg_285 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_297 : STD_LOGIC_VECTOR (5 downto 0);
    signal ki_reg_308 : STD_LOGIC_VECTOR (2 downto 0);
    signal kj_reg_319 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_6_reg_331 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln100_fu_377_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln100_reg_965 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln83_1_fu_389_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln83_1_reg_973 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln84_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln84_reg_978 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln83_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_2_fu_407_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln83_2_reg_987 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln83_fu_420_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln83_reg_998 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln83_1_v_cast_fu_431_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln83_1_v_cast_reg_1003 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal conv2_biases_load_reg_1008 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln84_fu_468_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln84_reg_1013 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln84_fu_510_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln84_reg_1020 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln84_2_fu_514_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln84_2_reg_1025 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln89_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln89_reg_1033_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln89_reg_1033_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln89_2_fu_537_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln89_2_reg_1037 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln90_fu_543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_reg_1042 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln89_fu_549_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln89_reg_1049 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln89_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln89_reg_1054 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln90_fu_582_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln90_reg_1060 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln90_1_fu_609_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln90_1_reg_1070 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln90_fu_619_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln90_reg_1075 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal select_ln90_1_fu_627_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln90_1_reg_1082 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln89_1_fu_638_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln89_1_reg_1089 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state6_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state16_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state21_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal add_ln93_2_fu_712_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln93_2_reg_1095 : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem_addr_14_reg_1105 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state7_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state17_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state22_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal add_ln91_fu_805_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln91_reg_1111 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state8_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_state13_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state18_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state23_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal select_ln90_3_fu_810_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln90_3_reg_1116 : STD_LOGIC_VECTOR (5 downto 0);
    signal weight_reg_1126 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_addr_14_read_reg_1131 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_348_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1141 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_343_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal gmem_addr_reg_1151 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal add_ln85_fu_879_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln85_reg_1157 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln84_3_fu_890_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln84_3_reg_1162 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_reg_1167 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal select_ln100_fu_938_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln100_reg_1173 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal indvar_flatten60_reg_216 : STD_LOGIC_VECTOR (10 downto 0);
    signal oc_reg_227 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten33_reg_238 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_250 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_262 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_indvar_flatten26_phi_fu_278_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_ic_phi_fu_289_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_301_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_ki_phi_fu_312_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_kj_phi_fu_323_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_sum_6_phi_fu_335_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln83_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln93_4_fu_828_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln92_fu_795_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal sext_ln100_fu_869_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_343_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_343_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_348_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal shl_ln100_2_fu_365_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln85_fu_373_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln100_1_fu_357_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln83_fu_395_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln85_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln83_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln83_fu_424_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln83_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln84_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln84_fu_457_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln100_2_mid1_fu_484_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln100_1_mid1_fu_476_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln85_1_fu_492_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln100_3_fu_496_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln83_3_fu_434_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln84_1_fu_502_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln90_fu_522_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_526_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln91_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln89_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln90_1_fu_588_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_mid1_fu_592_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln89_2_fu_557_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln90_2_fu_597_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln90_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln89_fu_632_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_648_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln93_1_fu_655_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln93_fu_645_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln93_2_fu_665_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln93_fu_659_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal add_ln93_1_fu_668_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln93_fu_674_p1 : STD_LOGIC_VECTOR (56 downto 0);
    signal trunc_ln93_1_fu_686_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal p_shl_cast_fu_678_p3 : STD_LOGIC_VECTOR (59 downto 0);
    signal p_shl2_cast_fu_690_p3 : STD_LOGIC_VECTOR (59 downto 0);
    signal sub_ln93_fu_698_p2 : STD_LOGIC_VECTOR (59 downto 0);
    signal zext_ln93_3_fu_708_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln93_2_fu_704_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal kj_cast_fu_718_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln92_fu_721_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln92_1_fu_726_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln92_2_fu_738_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln92_fu_734_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln92_1_fu_746_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln92_fu_750_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln92_1_mid2_v_v_fu_760_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln89_fu_767_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_946_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln92_2_fu_776_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln89_1_fu_771_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln92_2_fu_779_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln8_fu_785_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_148_cast_fu_816_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln93_3_fu_823_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp4_fu_837_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln100_fu_845_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln100_1_fu_849_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln100_2_fu_854_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_859_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln84_1_fu_884_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln100_fu_897_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_900_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln100_fu_910_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln100_1_fu_920_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln100_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln100_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln100_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_946_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_946_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_343_ce : STD_LOGIC;
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_fu_348_ce : STD_LOGIC;
    signal grp_fu_946_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_946_p10 : STD_LOGIC_VECTOR (12 downto 0);

    component lenet_top_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lenet_top_mac_muladd_10ns_4ns_10s_14_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component lenet_top_conv2d_6to16_layer_conv2_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component lenet_top_conv2d_6to16_layer_conv2_biases IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv2_weights_U : component lenet_top_conv2d_6to16_layer_conv2_weights
    generic map (
        DataWidth => 32,
        AddressRange => 2400,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2_weights_address0,
        ce0 => conv2_weights_ce0,
        q0 => conv2_weights_q0);

    conv2_biases_U : component lenet_top_conv2d_6to16_layer_conv2_biases
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2_biases_address0,
        ce0 => conv2_biases_ce0,
        q0 => conv2_biases_q0);

    fadd_32ns_32ns_32_5_full_dsp_1_U80 : component lenet_top_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_343_p0,
        din1 => grp_fu_343_p1,
        ce => grp_fu_343_ce,
        dout => grp_fu_343_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U81 : component lenet_top_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_348_p0,
        din1 => weight_reg_1126,
        ce => grp_fu_348_ce,
        dout => grp_fu_348_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U82 : component lenet_top_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_reg_1167,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_352_p2);

    mac_muladd_10ns_4ns_10s_14_4_1_U83 : component lenet_top_mac_muladd_10ns_4ns_10s_14_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 4,
        din2_WIDTH => 10,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_946_p0,
        din1 => grp_fu_946_p1,
        din2 => sub_ln92_fu_750_p2,
        ce => grp_fu_946_ce,
        dout => grp_fu_946_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone)))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                i_reg_250 <= select_ln84_2_reg_1025;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_250 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ic_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln89_reg_1033_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                ic_reg_285 <= select_ln89_1_reg_1089;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                ic_reg_285 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten26_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln89_reg_1033 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten26_reg_274 <= add_ln89_2_reg_1037;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten26_reg_274 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten33_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                indvar_flatten33_reg_238 <= select_ln84_3_reg_1162;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten33_reg_238 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten60_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                indvar_flatten60_reg_216 <= add_ln83_1_reg_973;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten60_reg_216 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln89_reg_1033 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_297 <= select_ln90_3_reg_1116;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_297 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_reg_262_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                j_reg_262 <= add_ln85_reg_1157;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_reg_262 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ki_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln89_reg_1033 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ki_reg_308 <= select_ln90_1_reg_1082;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                ki_reg_308 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    kj_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln89_reg_1033 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                kj_reg_319 <= add_ln91_reg_1111;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                kj_reg_319 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    oc_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
                oc_reg_227 <= select_ln83_2_reg_987;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                oc_reg_227 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    sum_6_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln89_reg_1033_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                sum_6_reg_331 <= grp_fu_343_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                sum_6_reg_331 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    add_ln100_reg_965(12 downto 7) <= add_ln100_fu_377_p2(12 downto 7);
                add_ln83_1_reg_973 <= add_ln83_1_fu_389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                add_ln85_reg_1157 <= add_ln85_fu_879_p2;
                gmem_addr_reg_1151 <= sext_ln100_fu_869_p1;
                select_ln84_3_reg_1162 <= select_ln84_3_fu_890_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln89_2_reg_1037 <= add_ln89_2_fu_537_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln89_fu_531_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln90_1_reg_1070 <= add_ln90_1_fu_609_p2;
                add_ln90_reg_1060 <= add_ln90_fu_582_p2;
                and_ln89_reg_1054 <= and_ln89_fu_576_p2;
                icmp_ln90_reg_1042 <= icmp_ln90_fu_543_p2;
                select_ln89_reg_1049 <= select_ln89_fu_549_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln89_reg_1033 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln91_reg_1111 <= add_ln91_fu_805_p2;
                select_ln90_3_reg_1116 <= select_ln90_3_fu_810_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln89_reg_1033 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln93_2_reg_1095 <= add_ln93_2_fu_712_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                conv2_biases_load_reg_1008 <= conv2_biases_q0;
                    select_ln83_1_v_cast_reg_1003(4 downto 0) <= select_ln83_1_v_cast_fu_431_p1(4 downto 0);
                select_ln84_2_reg_1025 <= select_ln84_2_fu_514_p3;
                select_ln84_reg_1013 <= select_ln84_fu_468_p3;
                    zext_ln84_reg_1020(12 downto 7) <= zext_ln84_fu_510_p1(12 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln89_reg_1033_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                gmem_addr_14_read_reg_1131 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln89_reg_1033 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                gmem_addr_14_reg_1105 <= sext_ln92_fu_795_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln83_fu_383_p2 = ap_const_lv1_0))) then
                icmp_ln84_reg_978 <= icmp_ln84_fu_401_p2;
                select_ln83_2_reg_987 <= select_ln83_2_fu_407_p3;
                trunc_ln83_reg_998 <= trunc_ln83_fu_420_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln89_reg_1033 <= icmp_ln89_fu_531_p2;
                icmp_ln89_reg_1033_pp0_iter1_reg <= icmp_ln89_reg_1033;
                icmp_ln89_reg_1033_pp0_iter2_reg <= icmp_ln89_reg_1033_pp0_iter1_reg;
                icmp_ln89_reg_1033_pp0_iter3_reg <= icmp_ln89_reg_1033_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln89_reg_1033_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_reg_1141 <= grp_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                select_ln100_reg_1173 <= select_ln100_fu_938_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln89_reg_1033 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln89_1_reg_1089 <= select_ln89_1_fu_638_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln89_reg_1033 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln90_1_reg_1082 <= select_ln90_1_fu_627_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln89_reg_1033 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                select_ln90_reg_1075 <= select_ln90_fu_619_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                sum_reg_1167 <= grp_fu_343_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln89_reg_1033_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                weight_reg_1126 <= conv2_weights_q0;
            end if;
        end if;
    end process;
    add_ln100_reg_965(6 downto 0) <= "0000000";
    select_ln83_1_v_cast_reg_1003(11 downto 5) <= "0000000";
    zext_ln84_reg_1020(6 downto 0) <= "0000000";
    zext_ln84_reg_1020(63 downto 13) <= "000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, m_axi_gmem_BVALID, ap_enable_reg_pp0_iter0, ap_CS_fsm_state26, ap_CS_fsm_state32, ap_CS_fsm_state37, ap_CS_fsm_state2, icmp_ln83_fu_383_p2, icmp_ln89_fu_531_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4_subdone, ap_enable_reg_pp0_iter3, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln83_fu_383_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln89_fu_531_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln89_fu_531_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((m_axi_gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln100_1_fu_849_p2 <= std_logic_vector(unsigned(output_r) + unsigned(zext_ln100_fu_845_p1));
    add_ln100_2_fu_854_p2 <= std_logic_vector(unsigned(zext_ln84_reg_1020) + unsigned(add_ln100_1_fu_849_p2));
    add_ln100_3_fu_496_p2 <= std_logic_vector(unsigned(shl_ln100_1_mid1_fu_476_p3) + unsigned(zext_ln85_1_fu_492_p1));
    add_ln100_fu_377_p2 <= std_logic_vector(unsigned(zext_ln85_fu_373_p1) + unsigned(shl_ln100_1_fu_357_p3));
    add_ln83_1_fu_389_p2 <= std_logic_vector(unsigned(indvar_flatten60_reg_216) + unsigned(ap_const_lv11_1));
    add_ln83_fu_395_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(oc_reg_227));
    add_ln84_1_fu_884_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(indvar_flatten33_reg_238));
    add_ln84_fu_457_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln83_fu_424_p3));
    add_ln85_fu_879_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln84_reg_1013));
    add_ln89_1_fu_771_p2 <= std_logic_vector(unsigned(input_r) + unsigned(zext_ln89_fu_767_p1));
    add_ln89_2_fu_537_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten26_phi_fu_278_p4) + unsigned(ap_const_lv8_1));
    add_ln89_fu_632_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_ic_phi_fu_289_p4));
    add_ln90_1_fu_609_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_301_p4));
    add_ln90_fu_582_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln89_fu_549_p3));
    add_ln91_fu_805_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln90_reg_1075));
    add_ln92_1_mid2_v_v_fu_760_p3 <= (select_ln89_1_reg_1089 & ap_const_lv2_0);
    add_ln92_2_fu_779_p2 <= std_logic_vector(signed(sext_ln92_2_fu_776_p1) + signed(add_ln89_1_fu_771_p2));
    add_ln92_fu_721_p2 <= std_logic_vector(unsigned(select_ln84_reg_1013) + unsigned(kj_cast_fu_718_p1));
    add_ln93_1_fu_668_p2 <= std_logic_vector(unsigned(zext_ln93_2_fu_665_p1) + unsigned(add_ln93_fu_659_p2));
    add_ln93_2_fu_712_p2 <= std_logic_vector(unsigned(zext_ln93_3_fu_708_p1) + unsigned(trunc_ln93_2_fu_704_p1));
    add_ln93_3_fu_823_p2 <= std_logic_vector(unsigned(select_ln83_1_v_cast_reg_1003) + unsigned(tmp_148_cast_fu_816_p3));
    add_ln93_fu_659_p2 <= std_logic_vector(unsigned(zext_ln93_1_fu_655_p1) + unsigned(zext_ln93_fu_645_p1));
    and_ln100_fu_932_p2 <= (or_ln100_fu_926_p2 and grp_fu_352_p2);
    and_ln83_fu_451_p2 <= (xor_ln83_fu_440_p2 and icmp_ln85_fu_445_p2);
    and_ln89_fu_576_p2 <= (xor_ln89_fu_564_p2 and icmp_ln91_fu_570_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(8);
    ap_CS_fsm_state26 <= ap_CS_fsm(9);
    ap_CS_fsm_state27 <= ap_CS_fsm(10);
    ap_CS_fsm_state28 <= ap_CS_fsm(11);
    ap_CS_fsm_state29 <= ap_CS_fsm(12);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(13);
    ap_CS_fsm_state31 <= ap_CS_fsm(14);
    ap_CS_fsm_state32 <= ap_CS_fsm(15);
    ap_CS_fsm_state37 <= ap_CS_fsm(20);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(m_axi_gmem_RVALID, ap_enable_reg_pp0_iter2, icmp_ln89_reg_1033_pp0_iter2_reg)
    begin
                ap_block_pp0_stage1_11001 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln89_reg_1033_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(m_axi_gmem_RVALID, ap_enable_reg_pp0_iter2, icmp_ln89_reg_1033_pp0_iter2_reg)
    begin
                ap_block_pp0_stage1_subdone <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln89_reg_1033_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state8_io)
    begin
                ap_block_pp0_stage4_11001 <= ((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state8_io)
    begin
                ap_block_pp0_stage4_subdone <= ((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_pp0_stage1_iter2_assign_proc : process(m_axi_gmem_RVALID, icmp_ln89_reg_1033_pp0_iter2_reg)
    begin
                ap_block_state15_pp0_stage1_iter2 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln89_reg_1033_pp0_iter2_reg = ap_const_lv1_0));
    end process;

        ap_block_state16_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_io_assign_proc : process(m_axi_gmem_ARREADY, icmp_ln89_reg_1033)
    begin
                ap_block_state8_io <= ((m_axi_gmem_ARREADY = ap_const_logic_0) and (icmp_ln89_reg_1033 = ap_const_lv1_0));
    end process;

        ap_block_state8_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln89_fu_531_p2)
    begin
        if ((icmp_ln89_fu_531_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln83_fu_383_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln83_fu_383_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ic_phi_fu_289_p4_assign_proc : process(ic_reg_285, icmp_ln89_reg_1033_pp0_iter1_reg, select_ln89_1_reg_1089, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln89_reg_1033_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2))) then 
            ap_phi_mux_ic_phi_fu_289_p4 <= select_ln89_1_reg_1089;
        else 
            ap_phi_mux_ic_phi_fu_289_p4 <= ic_reg_285;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten26_phi_fu_278_p4_assign_proc : process(icmp_ln89_reg_1033, indvar_flatten26_reg_274, ap_CS_fsm_pp0_stage0, add_ln89_2_reg_1037, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln89_reg_1033 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten26_phi_fu_278_p4 <= add_ln89_2_reg_1037;
        else 
            ap_phi_mux_indvar_flatten26_phi_fu_278_p4 <= indvar_flatten26_reg_274;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_301_p4_assign_proc : process(icmp_ln89_reg_1033, indvar_flatten_reg_297, ap_CS_fsm_pp0_stage0, select_ln90_3_reg_1116, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln89_reg_1033 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_301_p4 <= select_ln90_3_reg_1116;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_301_p4 <= indvar_flatten_reg_297;
        end if; 
    end process;


    ap_phi_mux_ki_phi_fu_312_p4_assign_proc : process(icmp_ln89_reg_1033, ki_reg_308, ap_CS_fsm_pp0_stage0, select_ln90_1_reg_1082, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln89_reg_1033 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_ki_phi_fu_312_p4 <= select_ln90_1_reg_1082;
        else 
            ap_phi_mux_ki_phi_fu_312_p4 <= ki_reg_308;
        end if; 
    end process;


    ap_phi_mux_kj_phi_fu_323_p4_assign_proc : process(icmp_ln89_reg_1033, kj_reg_319, ap_CS_fsm_pp0_stage0, add_ln91_reg_1111, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln89_reg_1033 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_kj_phi_fu_323_p4 <= add_ln91_reg_1111;
        else 
            ap_phi_mux_kj_phi_fu_323_p4 <= kj_reg_319;
        end if; 
    end process;

    ap_phi_mux_sum_6_phi_fu_335_p4 <= sum_6_reg_331;

    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln83_fu_383_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln83_fu_383_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln100_fu_897_p1 <= sum_reg_1167;
    conv2_biases_address0 <= zext_ln83_fu_415_p1(4 - 1 downto 0);

    conv2_biases_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv2_biases_ce0 <= ap_const_logic_1;
        else 
            conv2_biases_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv2_weights_address0 <= zext_ln93_4_fu_828_p1(12 - 1 downto 0);

    conv2_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            conv2_weights_ce0 <= ap_const_logic_1;
        else 
            conv2_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_526_p2 <= std_logic_vector(unsigned(zext_ln90_fu_522_p1) + unsigned(select_ln84_2_reg_1025));

    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_block_pp0_stage4, icmp_ln89_reg_1033)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln89_reg_1033 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage1, icmp_ln89_reg_1033_pp0_iter2_reg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln89_reg_1033_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_343_ce_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_state26, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_CS_fsm_state25, ap_CS_fsm_state29, ap_CS_fsm_state27, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state25) or ((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then 
            grp_fu_343_ce <= ap_const_logic_1;
        else 
            grp_fu_343_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_343_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, sum_6_reg_331, ap_CS_fsm_state25, ap_enable_reg_pp0_iter3, ap_phi_mux_sum_6_phi_fu_335_p4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_343_p0 <= sum_6_reg_331;
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_343_p0 <= ap_phi_mux_sum_6_phi_fu_335_p4;
        else 
            grp_fu_343_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_343_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, conv2_biases_load_reg_1008, mul_reg_1141, ap_CS_fsm_state25, ap_enable_reg_pp0_iter3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_343_p1 <= conv2_biases_load_reg_1008;
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_343_p1 <= mul_reg_1141;
        else 
            grp_fu_343_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_348_ce_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)))) then 
            grp_fu_348_ce <= ap_const_logic_1;
        else 
            grp_fu_348_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_348_p0 <= gmem_addr_14_read_reg_1131;

    grp_fu_946_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            grp_fu_946_ce <= ap_const_logic_1;
        else 
            grp_fu_946_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_946_p0 <= ap_const_lv13_150(10 - 1 downto 0);
    grp_fu_946_p1 <= grp_fu_946_p10(4 - 1 downto 0);
    grp_fu_946_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln90_2_fu_597_p3),13));
    icmp_ln100_1_fu_920_p2 <= "1" when (trunc_ln100_fu_910_p1 = ap_const_lv23_0) else "0";
    icmp_ln100_fu_914_p2 <= "0" when (tmp_s_fu_900_p4 = ap_const_lv8_FF) else "1";
    icmp_ln83_fu_383_p2 <= "1" when (indvar_flatten60_reg_216 = ap_const_lv11_640) else "0";
    icmp_ln84_fu_401_p2 <= "1" when (indvar_flatten33_reg_238 = ap_const_lv8_64) else "0";
    icmp_ln85_fu_445_p2 <= "1" when (j_reg_262 = ap_const_lv4_A) else "0";
    icmp_ln89_fu_531_p2 <= "1" when (ap_phi_mux_indvar_flatten26_phi_fu_278_p4 = ap_const_lv8_96) else "0";
    icmp_ln90_fu_543_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_301_p4 = ap_const_lv6_19) else "0";
    icmp_ln91_fu_570_p2 <= "1" when (ap_phi_mux_kj_phi_fu_323_p4 = ap_const_lv3_5) else "0";
    kj_cast_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln90_reg_1075),4));
    m_axi_gmem_ARADDR <= gmem_addr_14_reg_1105;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_1;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, icmp_ln89_reg_1033, ap_block_pp0_stage4_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln89_reg_1033 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= gmem_addr_reg_1151;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_1;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state26)
    begin
        if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state37)
    begin
        if (((m_axi_gmem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, icmp_ln89_reg_1033_pp0_iter2_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln89_reg_1033_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= select_ln100_reg_1173;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state32)
    begin
        if (((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln100_fu_926_p2 <= (icmp_ln100_fu_914_p2 or icmp_ln100_1_fu_920_p2);
    or_ln84_fu_463_p2 <= (icmp_ln84_reg_978 or and_ln83_fu_451_p2);
    or_ln90_fu_615_p2 <= (icmp_ln90_reg_1042 or and_ln89_reg_1054);
    p_mid1_fu_592_p2 <= std_logic_vector(unsigned(zext_ln90_1_fu_588_p1) + unsigned(select_ln84_2_reg_1025));
    p_shl2_cast_fu_690_p3 <= (trunc_ln93_1_fu_686_p1 & ap_const_lv1_0);
    p_shl_cast_fu_678_p3 <= (trunc_ln93_fu_674_p1 & ap_const_lv3_0);
    select_ln100_fu_938_p3 <= 
        bitcast_ln100_fu_897_p1 when (and_ln100_fu_932_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln83_1_v_cast_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln83_2_reg_987),12));
    select_ln83_2_fu_407_p3 <= 
        add_ln83_fu_395_p2 when (icmp_ln84_fu_401_p2(0) = '1') else 
        oc_reg_227;
    select_ln83_3_fu_434_p3 <= 
        ap_const_lv13_0 when (icmp_ln84_reg_978(0) = '1') else 
        add_ln100_reg_965;
    select_ln83_fu_424_p3 <= 
        ap_const_lv4_0 when (icmp_ln84_reg_978(0) = '1') else 
        i_reg_250;
    select_ln84_1_fu_502_p3 <= 
        add_ln100_3_fu_496_p2 when (and_ln83_fu_451_p2(0) = '1') else 
        select_ln83_3_fu_434_p3;
    select_ln84_2_fu_514_p3 <= 
        add_ln84_fu_457_p2 when (and_ln83_fu_451_p2(0) = '1') else 
        select_ln83_fu_424_p3;
    select_ln84_3_fu_890_p3 <= 
        ap_const_lv8_1 when (icmp_ln84_reg_978(0) = '1') else 
        add_ln84_1_fu_884_p2;
    select_ln84_fu_468_p3 <= 
        ap_const_lv4_0 when (or_ln84_fu_463_p2(0) = '1') else 
        j_reg_262;
    select_ln89_1_fu_638_p3 <= 
        add_ln89_fu_632_p2 when (icmp_ln90_reg_1042(0) = '1') else 
        ap_phi_mux_ic_phi_fu_289_p4;
    select_ln89_2_fu_557_p3 <= 
        select_ln84_2_reg_1025 when (icmp_ln90_fu_543_p2(0) = '1') else 
        empty_fu_526_p2;
    select_ln89_fu_549_p3 <= 
        ap_const_lv3_0 when (icmp_ln90_fu_543_p2(0) = '1') else 
        ap_phi_mux_ki_phi_fu_312_p4;
    select_ln90_1_fu_627_p3 <= 
        add_ln90_reg_1060 when (and_ln89_reg_1054(0) = '1') else 
        select_ln89_reg_1049;
    select_ln90_2_fu_597_p3 <= 
        p_mid1_fu_592_p2 when (and_ln89_fu_576_p2(0) = '1') else 
        select_ln89_2_fu_557_p3;
    select_ln90_3_fu_810_p3 <= 
        ap_const_lv6_1 when (icmp_ln90_reg_1042(0) = '1') else 
        add_ln90_1_reg_1070;
    select_ln90_fu_619_p3 <= 
        ap_const_lv3_0 when (or_ln90_fu_615_p2(0) = '1') else 
        kj_reg_319;
        sext_ln100_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_859_p4),64));

        sext_ln92_2_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_946_p3),64));

        sext_ln92_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln8_fu_785_p4),64));

    shl_ln100_1_fu_357_p3 <= (i_reg_250 & ap_const_lv9_0);
    shl_ln100_1_mid1_fu_476_p3 <= (add_ln84_fu_457_p2 & ap_const_lv9_0);
    shl_ln100_2_fu_365_p3 <= (i_reg_250 & ap_const_lv7_0);
    shl_ln100_2_mid1_fu_484_p3 <= (add_ln84_fu_457_p2 & ap_const_lv7_0);
    shl_ln92_1_fu_726_p3 <= (add_ln92_fu_721_p2 & ap_const_lv5_0);
    shl_ln92_2_fu_738_p3 <= (add_ln92_fu_721_p2 & ap_const_lv3_0);
    sub_ln92_fu_750_p2 <= std_logic_vector(unsigned(zext_ln92_fu_734_p1) - unsigned(zext_ln92_1_fu_746_p1));
    sub_ln93_fu_698_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_678_p3) - unsigned(p_shl2_cast_fu_690_p3));
    tmp4_fu_837_p4 <= ((select_ln84_reg_1013 & trunc_ln83_reg_998) & ap_const_lv2_0);
    tmp_148_cast_fu_816_p3 <= (add_ln93_2_reg_1095 & ap_const_lv4_0);
    tmp_fu_648_p3 <= (select_ln90_1_reg_1082 & ap_const_lv2_0);
    tmp_s_fu_900_p4 <= bitcast_ln100_fu_897_p1(30 downto 23);
    trunc_ln100_fu_910_p1 <= bitcast_ln100_fu_897_p1(23 - 1 downto 0);
    trunc_ln83_fu_420_p1 <= select_ln83_2_fu_407_p3(4 - 1 downto 0);
    trunc_ln8_fu_785_p4 <= add_ln92_2_fu_779_p2(63 downto 2);
    trunc_ln93_1_fu_686_p1 <= add_ln93_1_fu_668_p2(59 - 1 downto 0);
    trunc_ln93_2_fu_704_p1 <= sub_ln93_fu_698_p2(8 - 1 downto 0);
    trunc_ln93_fu_674_p1 <= add_ln93_1_fu_668_p2(57 - 1 downto 0);
    trunc_ln_fu_859_p4 <= add_ln100_2_fu_854_p2(63 downto 2);
    xor_ln83_fu_440_p2 <= (icmp_ln84_reg_978 xor ap_const_lv1_1);
    xor_ln89_fu_564_p2 <= (icmp_ln90_fu_543_p2 xor ap_const_lv1_1);
    zext_ln100_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp4_fu_837_p4),64));
    zext_ln83_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln83_2_fu_407_p3),64));
    zext_ln84_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln84_1_fu_502_p3),64));
    zext_ln85_1_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln100_2_mid1_fu_484_p3),13));
    zext_ln85_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln100_2_fu_365_p3),13));
    zext_ln89_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln92_1_mid2_v_v_fu_760_p3),64));
    zext_ln90_1_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln90_fu_582_p2),4));
    zext_ln90_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_ki_phi_fu_312_p4),4));
    zext_ln92_1_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln92_2_fu_738_p3),10));
    zext_ln92_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln92_1_fu_726_p3),10));
    zext_ln93_1_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_648_p3),63));
    zext_ln93_2_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln90_reg_1075),63));
    zext_ln93_3_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln89_1_fu_638_p3),8));
    zext_ln93_4_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln93_3_fu_823_p2),64));
    zext_ln93_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln90_1_reg_1082),63));
end behav;
